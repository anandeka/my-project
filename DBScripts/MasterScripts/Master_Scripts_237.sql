Insert into DM_DOCUMENT_MASTER
   (DOC_ID, DOC_NAME, DISPLAY_ORDER, VERSION, IS_ACTIVE, 
    IS_DELETED, ACTIVITY_ID)
 Values
   ('CREATE_DC', 'Debit Credit note', 48, NULL, 'Y', 
    'N', NULL);

Insert into DKM_DOC_REF_KEY_MASTER
   (DOC_KEY_ID, DOC_KEY_DESC, VALIDATION_QUERY)
 Values
   ('DC_KEY_1', 'Debit Credit Note', 'SELECT COUNT (*) FROM DS_DOCUMENT_SUMMARY ds WHERE DS.DOC_REF_NO = :pc_document_ref_no AND DS.CORPORATE_ID = :pc_corporate_id');

Insert into DKM_DOC_REF_KEY_MASTER
   (DOC_KEY_ID, DOC_KEY_DESC, VALIDATION_QUERY)
 Values
   ('DC_KEY_2', 'Debit Credit Note', 'SELECT COUNT (*) FROM DS_DOCUMENT_SUMMARY ds WHERE DS.DOC_REF_NO = :pc_document_ref_no AND DS.CORPORATE_ID = :pc_corporate_id');

---SI

update DC_DOCUMENT_CONFIGURATION dc set DC.IS_GENERATE_DOC_REQD = 'Y' where DC.ACTIVITY_ID = 'CREATE_SI';

Insert into DM_DOCUMENT_MASTER
   (DOC_ID, DOC_NAME, DISPLAY_ORDER, VERSION, IS_ACTIVE, 
    IS_DELETED, ACTIVITY_ID)
 Values
   ('CREATE_SI', 'Service Invoice', 48, NULL, 'Y', 
    'N', NULL);

Insert into DKM_DOC_REF_KEY_MASTER
   (DOC_KEY_ID, DOC_KEY_DESC, VALIDATION_QUERY)
 Values
   ('SI_KEY_1', 'Service Invoice', 'SELECT COUNT (*) FROM DS_DOCUMENT_SUMMARY ds WHERE DS.DOC_REF_NO = :pc_document_ref_no AND DS.CORPORATE_ID = :pc_corporate_id');

Insert into DKM_DOC_REF_KEY_MASTER
   (DOC_KEY_ID, DOC_KEY_DESC, VALIDATION_QUERY)
 Values
   ('SI_KEY_2', 'Service Invoice', 'SELECT COUNT (*) FROM DS_DOCUMENT_SUMMARY ds WHERE DS.DOC_REF_NO = :pc_document_ref_no AND DS.CORPORATE_ID = :pc_corporate_id');


--For DGM entry DC
Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-DC', 'CREATE_DC', 'Debit Credit', 'CREATE_DC', 1, 
    'INSERT INTO IS_D(
INVOICE_REF_NO,
INVOICE_TYPE_NAME,
INVOICE_CREATION_DATE,
INVOICE_QUANTITY,
INVOICED_QTY_UNIT,
INTERNAL_INVOICE_REF_NO,
INVOICE_AMOUNT,
MATERIAL_COST,
ADDDITIONAL_CHARGES,
TAXES,
DUE_DATE,
SUPPLIRE_INVOICE_NO,
CONTRACT_DATE,
CONTRACT_REF_NO,
STOCK_QUANTITY,
STOCK_REF_NO,
INVOICE_AMOUNT_UNIT,
GMR_REF_NO,
GMR_QUALITY,
CONTRACT_QUANTITY,
CONTRACT_QTY_UNIT,
CONTRACT_TOLERANCE,
QUALITY,
PRODUCT,
CP_CONTRACT_REF_NO,
PAYMENT_TERM,
GMR_FINALIZE_QTY,
CP_NAME,
CP_ADDRESS,
CP_COUNTRY,
CP_CITY,
CP_STATE,
CP_ZIP,
CONTRACT_TYPE,
ORIGIN,
INCO_TERM_LOCATION,
NOTIFY_PARTY,
SALES_PURCHASE,
INVOICE_STATUS,
INTERNAL_DOC_REF_NO
)
select
INVS.INVOICE_REF_NO as INVOICE_REF_NO,
INVS.INVOICE_TYPE_NAME as INVOICE_TYPE_NAME,
INVS.INVOICE_ISSUE_DATE as INVOICE_CREATION_DATE,
INVS.INVOICED_QTY as INVOICE_QUANTITY,
QUM_GMR.QTY_UNIT as INVOICED_QTY_UNIT,
INVS.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
INVS.TOTAL_AMOUNT_TO_PAY as INVOICE_AMOUNT,
INVS.AMOUNT_TO_PAY_BEFORE_ADJ as MATERIAL_COST,
INVS.TOTAL_OTHER_CHARGE_AMOUNT as ADDDITIONAL_CHARGES,
INVS.TOTAL_TAX_AMOUNT as TAXES,
INVS.PAYMENT_DUE_DATE as DUE_DATE,
INVS.CP_REF_NO as SUPPLIER_INVOICE_NO,
PCM.ISSUE_DATE as CONTRACT_DATE,
PCM.CONTRACT_REF_NO as CONTRACT_REF_NO,
sum(II.INVOICABLE_QTY) as STOCK_QUANTITY,
II.STOCK_REF_NO as STOCK_REF_NO,
CM.CUR_CODE as INVOICE_AMOUNT_UNIT,
GMR.GMR_REF_NO as GMR_REF_NO,
GMR.QTY as GMR_QUALITY,
PCPD.QTY_MAX_VAL as CONTRACT_QUANTITY,
QUM.QTY_UNIT as CONTRACT_QTY_UNIT,
PCPD.MAX_TOLERANCE as CONTRACT_TOLERANCE,
QAT.QUALITY_NAME as QUALITY,
PDM.PRODUCT_DESC as PRODUCT,
PCM.CP_CONTRACT_REF_NO as CP_CONTRACT_REF_NO,
PYM.PAYMENT_TERM as PAYMENT_TERM,
GMR.FINAL_WEIGHT as GMR_FINALIZE_QTY,
PHD.COMPANYNAME as CP_NAME,
PAD.ADDRESS as CP_ADDRESS,
CYM.COUNTRY_NAME as CP_COUNTRY,
CIM.CITY_NAME as CP_CITY,
SM.STATE_NAME as CP_STATE,
PAD.ZIP as CP_ZIP,
PCM.CONTRACT_TYPE as CONTRACT_TYPE,
CYMLOADING.COUNTRY_NAME as ORIGIN,
PCI.TERMS as INCO_TERM_LOCATION,
nvl(PHD1.COMPANYNAME, PHD2.COMPANYNAME) as NOTIFY_PARTY, 
PCI.CONTRACT_TYPE as SALES_PURCHASE,
INVS.INVOICE_STATUS as INVOICE_STATUS,
?
from 
IS_INVOICE_SUMMARY invs,
IID_INVOICABLE_ITEM_DETAILS iid,
PCM_PHYSICAL_CONTRACT_MAIN pcm,
V_PCI pci,
II_INVOICABLE_ITEM ii,
CM_CURRENCY_MASTER cm,
GMR_GOODS_MOVEMENT_RECORD gmr,
PCPD_PC_PRODUCT_DEFINITION pcpd,
QUM_QUANTITY_UNIT_MASTER qum,
PCPQ_PC_PRODUCT_QUALITY pcpq,
QAT_QUALITY_ATTRIBUTES qat,
PDM_PRODUCTMASTER pdm,
PHD_PROFILEHEADERDETAILS phd,
PYM_PAYMENT_TERMS_MASTER pym,
PAD_PROFILE_ADDRESSES pad,
CYM_COUNTRYMASTER cym,
CIM_CITYMASTER cim,
SM_STATE_MASTER sm,
BPAT_BP_ADDRESS_TYPE bpat,
CYM_COUNTRYMASTER cymloading,
SAD_SHIPMENT_ADVICE sad,
SD_SHIPMENT_DETAIL sd,
PHD_PROFILEHEADERDETAILS phd1,
PHD_PROFILEHEADERDETAILS phd2,
QUM_QUANTITY_UNIT_MASTER qum_gmr
where
INVS.INTERNAL_INVOICE_REF_NO = IID.INTERNAL_INVOICE_REF_NO
and IID.INTERNAL_CONTRACT_ITEM_REF_NO = PCI.INTERNAL_CONTRACT_ITEM_REF_NO
and IID.INTERNAL_CONTRACT_REF_NO = PCM.INTERNAL_CONTRACT_REF_NO
and IID.INVOICABLE_ITEM_ID = II.INVOICABLE_ITEM_ID
and IID.INTERNAL_GMR_REF_NO = GMR.INTERNAL_GMR_REF_NO
and PCM.INVOICE_CURRENCY_ID = CM.CUR_ID
and II.INTERNAL_GMR_REF_NO = GMR.INTERNAL_GMR_REF_NO
and PCM.INTERNAL_CONTRACT_REF_NO = PCPD.INTERNAL_CONTRACT_REF_NO
and PCPD.QTY_UNIT_ID = QUM.QTY_UNIT_ID
and PCPD.PCPD_ID = PCPQ.PCPD_ID
and PCI.QUALITY_ID = QAT.QUALITY_ID
and PCPQ.QUALITY_TEMPLATE_ID = QAT.QUALITY_ID
and PCPD.PRODUCT_ID = PDM.PRODUCT_ID
and PCM.CP_ID = PHD.PROFILEID
and PCM.PAYMENT_TERM_ID = PYM.PAYMENT_TERM_ID
and PHD.PROFILEID = PAD.PROFILE_ID(+)
and PAD.COUNTRY_ID = CYM.COUNTRY_ID(+)
and PAD.CITY_ID = CIM.CITY_ID(+)
and PAD.STATE_ID = SM.STATE_ID(+)
and PAD.ADDRESS_TYPE = BPAT.BP_ADDRESS_TYPE_ID(+)
and CYMLOADING.COUNTRY_ID(+) = GMR.LOADING_COUNTRY_ID
and GMR.INTERNAL_GMR_REF_NO = SAD.INTERNAL_GMR_REF_NO(+)
and GMR.INTERNAL_GMR_REF_NO = SD.INTERNAL_GMR_REF_NO(+)
and SAD.CONSIGNEE_ID = PHD1.PROFILEID(+)
and SD.CONSIGNEE_ID = PHD2.PROFILEID(+)
and GMR.QTY_UNIT_ID = QUM_GMR.QTY_UNIT_ID(+)
and PAD.IS_DELETED(+) = ''N''
and PAD.ADDRESS_TYPE(+) = ''Billing''
and INVS.INTERNAL_INVOICE_REF_NO = ?
group by
INVS.INVOICE_REF_NO,
INVS.INVOICE_TYPE_NAME,
INVS.INVOICE_ISSUE_DATE,
INVS.INVOICED_QTY,
INVS.INTERNAL_INVOICE_REF_NO,
INVS.TOTAL_AMOUNT_TO_PAY,
INVS.TOTAL_OTHER_CHARGE_AMOUNT,
INVS.TOTAL_TAX_AMOUNT,
INVS.PAYMENT_DUE_DATE,
INVS.CP_REF_NO,
PCM.ISSUE_DATE,
PCM.CONTRACT_REF_NO,
II.STOCK_REF_NO,
CM.CUR_CODE,
GMR.GMR_REF_NO,
GMR.QTY,
PCPD.QTY_MAX_VAL,
QUM.QTY_UNIT,
PCPD.MAX_TOLERANCE,
QAT.QUALITY_NAME,
PDM.PRODUCT_DESC,
PCM.CP_CONTRACT_REF_NO,
PYM.PAYMENT_TERM,
GMR.FINAL_WEIGHT,
PHD.COMPANYNAME,
PAD.ADDRESS,
CYM.COUNTRY_NAME,
CIM.CITY_NAME,
SM.STATE_NAME,
PAD.ZIP,
PCM.CONTRACT_TYPE,
CYMLOADING.COUNTRY_NAME,
PCI.TERMS,
PHD1.COMPANYNAME,
PHD2.COMPANYNAME,
QUM_GMR.QTY_UNIT,
PCI.CONTRACT_TYPE,
INVS.AMOUNT_TO_PAY_BEFORE_ADJ,
INVS.INVOICE_STATUS', 'N');

Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-DC-C1', 'CREATE_DC', 'Debit Credit', 'CREATE_DC', 2, 
    'INSERT INTO IS_DC_CHILD_D(
INTERNAL_INVOICE_REF_NO,
DESCRIPTION,
INVOICED_WEIGHT,
NEW_INVOICED_WEIGHT,
INVOICE_PRICE,
NEW_INVOICE_PRICE,
AMOUNT,
NEW_AMOUNT,
OLD_INVOICE_AMOUNT,
NEW_INVOICE_AMOUNT,
NET_ADJUSTMENT,
OLD_PRICE_UNIT_NAME,
NEW_PRICE_UNIT_NAME,
OLD_INVOICE_CUR_UNIT,
NEW_INVOICE_CUR_UNIT,
INVOICE_CUR_UNIT,
INVOICE_QTY_UNIT_NAME,
INTERNAL_DOC_REF_NO
)
select
IID.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
GMR.GMR_REF_NO as DESCRIPTION,
IID.INVOICED_QTY as INVOICED_WEIGHT,
IID.NEW_INVOICED_QTY as NEW_INVOICED_WEIGHT,
IID.INVOICED_PRICE as INVOICE_PRICE,
IID.NEW_INVOICE_PRICE as NEW_INVOICE_PRICE,
IID.ITEM_AMOUNT as AMOUNT,
IID.INVOICE_ITEM_AMOUNT as NEW_AMOUNT,
IID.ITEM_AMOUNT as OLD_INVOICE_AMOUNT,
(IID.NEW_INVOICED_QTY * IID.INVOICED_PRICE) as NEW_INVOICE_AMOUNT,
(IID.ITEM_AMOUNT - (IID.NEW_INVOICED_QTY * IID.INVOICED_PRICE)) as NET_ADJUSTMENT,
PUM.PRICE_UNIT_NAME as OLD_PRICE_UNIT_NAME,
PUM.PRICE_UNIT_NAME as NEW_PRICE_UNIT_NAME,
CM.CUR_CODE as OLD_INVOICE_CUR_UNIT,
CM.CUR_CODE as NEW_INVOICE_CUR_UNIT,
CM.CUR_CODE as INVOICE_CUR_UNIT,
QUM.QTY_UNIT as INVOICE_QTY_UNIT_NAME,
?
from
IS_INVOICE_SUMMARY invs,
IID_INVOICABLE_ITEM_DETAILS iid,
QUM_QUANTITY_UNIT_MASTER qum,
CM_CURRENCY_MASTER cm,
PPU_PRODUCT_PRICE_UNITS ppu,
PUM_PRICE_UNIT_MASTER pum,
GMR_GOODS_MOVEMENT_RECORD gmr
where
INVS.INTERNAL_INVOICE_REF_NO = IID.INTERNAL_INVOICE_REF_NO
and IID.INVOICE_CURRENCY_ID = CM.CUR_ID
and IID.INVOICED_PRICE_UNIT_ID = PPU.INTERNAL_PRICE_UNIT_ID
and PPU.PRICE_UNIT_ID = PUM.PRICE_UNIT_ID
and IID.INVOICED_QTY_UNIT_ID = QUM.QTY_UNIT_ID
and IID.INTERNAL_GMR_REF_NO = GMR.INTERNAL_GMR_REF_NO
and INVS.INTERNAL_INVOICE_REF_NO = ?', 'N');


Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-IOC_BM', 'CREATE_DC', 'Debit Credit', 'CREATE_DC', 3, 
    'INSERT into IOC_D (
    INTERNAL_INVOICE_REF_NO,
    OTHER_CHARGE_COST_NAME,
    CHARGE_TYPE,
    FX_RATE,
    QUANTITY,
    AMOUNT,
    INVOICE_AMOUNT,
    INVOICE_CUR_NAME,
    RATE_PRICE_UNIT_NAME,
    CHARGE_AMOUNT_RATE,
    QUANTITY_UNIT,
    AMOUNT_UNIT,
    INTERNAL_DOC_REF_NO
    )
    select 
    INVS.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
    SCM.COST_DISPLAY_NAME as OTHER_CHARGE_COST_NAME,
    IOC.CHARGE_TYPE as CHARGE_TYPE,
    nvl(IOC.RATE_FX_RATE, IOC.FLAT_AMOUNT_FX_RATE) as FX_RATE,
    IOC.QUANTITY as QUANTITY,
    nvl(IOC.RATE_AMOUNT, IOC.FLAT_AMOUNT) as AMOUNT,
    IOC.AMOUNT_IN_INV_CUR as INVOICE_AMOUNT,
    CM.CUR_CODE as INVOICE_CUR_NAME,
    PUM.PRICE_UNIT_NAME as RATE_PRICE_UNIT_NAME,
    nvl(IOC.FLAT_AMOUNT, IOC.RATE_CHARGE) as CHARGE_AMOUNT_RATE,
    QUM.QTY_UNIT as QUANTITY_UNIT,
    CM_IOC.CUR_CODE as AMOUNT_UNIT,
    ?
    from
    IS_INVOICE_SUMMARY invs,
    IOC_INVOICE_OTHER_CHARGE ioc,
    CM_CURRENCY_MASTER cm,
    SCM_SERVICE_CHARGE_MASTER scm,
    PPU_PRODUCT_PRICE_UNITS ppu,
    PUM_PRICE_UNIT_MASTER pum,
    QUM_QUANTITY_UNIT_MASTER qum,
    CM_CURRENCY_MASTER cm_ioc
    where
    INVS.INTERNAL_INVOICE_REF_NO = IOC.INTERNAL_INVOICE_REF_NO
    and IOC.OTHER_CHARGE_COST_ID = SCM.COST_ID
    and IOC.INVOICE_CUR_ID = CM.CUR_ID
    and IOC.RATE_PRICE_UNIT = PPU.INTERNAL_PRICE_UNIT_ID(+)
    and PPU.PRICE_UNIT_ID = PUM.PRICE_UNIT_ID(+)
    and IOC.QTY_UNIT_ID = QUM.QTY_UNIT_ID(+)
    and IOC.FLAT_AMOUNT_CUR_UNIT_ID = CM_IOC.CUR_ID(+)
    and IOC.INTERNAL_INVOICE_REF_NO = ?', 'N');


Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-ITD_BM', 'CREATE_DC', 'Debit Credit', 'CREATE_DC', 4, 
    'INSERT INTO ITD_D (
INTERNAL_INVOICE_REF_NO,
OTHER_CHARGE_COST_NAME,
TAX_RATE,
INVOICE_CURRENCY,
FX_RATE,
AMOUNT,
TAX_CURRENCY,
INVOICE_AMOUNT,
INTERNAL_DOC_REF_NO
)
select
INVS.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
TM.TAX_CODE as OTHER_CHARGE_COST_NAME,
ITD.TAX_RATE as TAX_RATE,
CM.CUR_CODE as INVOICE_CURRENCY,
ITD.TAX_AMOUNT_FX_RATE as FX_RATE,
ITD.TAX_AMOUNT as AMOUNT,
CM_TAX.CUR_CODE as TAX_CURRENCY,
ITD.TAX_AMOUNT_IN_INV_CUR as INVOICE_AMOUNT,
?
from
IS_INVOICE_SUMMARY invs,
ITD_INVOICE_TAX_DETAILS itd,
TM_TAX_MASTER tm,
CM_CURRENCY_MASTER cm,
CM_CURRENCY_MASTER cm_tax
where
INVS.INTERNAL_INVOICE_REF_NO = ITD.INTERNAL_INVOICE_REF_NO
and ITD.TAX_CODE_ID = TM.TAX_ID
and ITD.INVOICE_CUR_ID = CM.CUR_ID
and ITD.TAX_AMOUNT_CUR_ID = CM_TAX.CUR_ID
and ITD.INTERNAL_INVOICE_REF_NO = ?', 'N');

--For DGM entry for SI
CREATE TABLE IS_CHILD_SI_D(
INTERNAL_INVOICE_REF_NO VARCHAR2(30),
GMR_REF_NO              VARCHAR2(30),
COST_COMPONENT_NAME     VARCHAR2(30),
INVOICE_AMOUNT          VARCHAR2(30),
INVOICE_AMOUNT_UNIT     VARCHAR2(30),
INTERNAL_DOC_REF_NO     VARCHAR2(30)
);


Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-SI', 'CREATE_SI', 'Service Invoice', 'CREATE_SI', 1, 
    'INSERT INTO IS_D(
INTERNAL_INVOICE_REF_NO,
INVOICE_REF_NO,
CP_NAME,
SUPPLIRE_INVOICE_NO,
CP_ADDRESS,
INVOICE_CREATION_DATE,
DUE_DATE,
PAYMENT_TERM,
CONTRACT_TYPE,
INTERNAL_DOC_REF_NO
)
select
INVS.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
INVS.INVOICE_REF_NO as INVOICE_REF_NO,
PHD.COMPANYNAME as CP_NAME,
INVS.CP_REF_NO as SUPPLIRE_INVOICE_NO,
INVS.BILL_TO_ADDRESS as CP_ADDRESS,
INVS.INVOICE_ISSUE_DATE as INVOICE_CREATION_DATE,
INVS.PAYMENT_DUE_DATE as DUE_DATE,
PYM.PAYMENT_TERM as PAYMENT_TERM,
INVS.RECIEVED_RAISED_TYPE as CONTRACT_TYPE,
?
from
IS_INVOICE_SUMMARY invs,
PHD_PROFILEHEADERDETAILS phd,
PYM_PAYMENT_TERMS_MASTER pym
where
INVS.CP_ID = PHD.PROFILEID
and INVS.CREDIT_TERM = PYM.PAYMENT_TERM_ID
and INVS.INTERNAL_INVOICE_REF_NO = ?', 'N');

--
Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-SI-1', 'CREATE_SI', 'Service Invoice', 'CREATE_SI', 2, 
    'INSERT INTO IS_CHILD_SI_D(
INTERNAL_INVOICE_REF_NO,
GMR_REF_NO,
COST_COMPONENT_NAME,
INVOICE_AMOUNT,
INVOICE_AMOUNT_UNIT,
INTERNAL_DOC_REF_NO
)
select
INVS.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
GMR.GMR_REF_NO as GMR_REF_NO,
SCM.COST_COMPONENT_NAME as COST_COMPONENT_NAME,
CS.BASE_AMT as INVOICE_AMOUNT,
CM.CUR_CODE as INVOICE_AMOUNT_UNIT,
?
from
IS_INVOICE_SUMMARY invs,
IAM_INVOICE_ACTION_MAPPING iam,
CS_COST_STORE cs,
CIGC_CONTRACT_ITEM_GMR_COST cigc,
GMR_GOODS_MOVEMENT_RECORD gmr,
SCM_SERVICE_CHARGE_MASTER scm,
CM_CURRENCY_MASTER cm
where
INVS.INTERNAL_INVOICE_REF_NO = IAM.INTERNAL_INVOICE_REF_NO
and IAM.INVOICE_ACTION_REF_NO = CS.INTERNAL_ACTION_REF_NO
and CS.COG_REF_NO = CIGC.COG_REF_NO
and CIGC.INTERNAL_GMR_REF_NO = GMR.INTERNAL_GMR_REF_NO
and CS.COST_COMPONENT_ID = SCM.COST_ID
and CS.BASE_AMT_CUR_ID = CM.CUR_ID
and INVS.INVOICE_TYPE = ''Service''
and INVS.INTERNAL_INVOICE_REF_NO = ?', 'N');
--

Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-ITD_BM', 'CREATE_SI', 'Service Invoice', 'CREATE_SI', 3, 
    'INSERT INTO ITD_D (
INTERNAL_INVOICE_REF_NO,
OTHER_CHARGE_COST_NAME,
TAX_RATE,
INVOICE_CURRENCY,
FX_RATE,
AMOUNT,
TAX_CURRENCY,
INVOICE_AMOUNT,
INTERNAL_DOC_REF_NO
)
select
INVS.INTERNAL_INVOICE_REF_NO as INTERNAL_INVOICE_REF_NO,
TM.TAX_CODE as OTHER_CHARGE_COST_NAME,
ITD.TAX_RATE as TAX_RATE,
CM.CUR_CODE as INVOICE_CURRENCY,
ITD.TAX_AMOUNT_FX_RATE as FX_RATE,
ITD.TAX_AMOUNT as AMOUNT,
CM_TAX.CUR_CODE as TAX_CURRENCY,
ITD.TAX_AMOUNT_IN_INV_CUR as INVOICE_AMOUNT,
?
from
IS_INVOICE_SUMMARY invs,
ITD_INVOICE_TAX_DETAILS itd,
TM_TAX_MASTER tm,
CM_CURRENCY_MASTER cm,
CM_CURRENCY_MASTER cm_tax
where
INVS.INTERNAL_INVOICE_REF_NO = ITD.INTERNAL_INVOICE_REF_NO
and ITD.TAX_CODE_ID = TM.TAX_ID
and ITD.INVOICE_CUR_ID = CM.CUR_ID
and ITD.TAX_AMOUNT_CUR_ID = CM_TAX.CUR_ID
and ITD.INTERNAL_INVOICE_REF_NO = ?', 'N');


Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-SI-2', 'CREATE_SI', 'Service Invoice', 'CREATE_SI', 4, 
    'INSERT INTO is_bdp_child_d
            (internal_invoice_ref_no, beneficiary_name, bank_name, account_no,
             aba_rtn, instruction, internal_doc_ref_no)
   SELECT invs.internal_invoice_ref_no AS internal_invoice_ref_no,
          cpipi.beneficiary_name AS beneficiary_name,
          phd.companyname AS bank_name, cpipi.bank_account AS account_no,
          cpipi.aba_no AS aba_rtn, cpipi.instructions AS instruction, ?
     FROM phd_profileheaderdetails phd,
          is_invoice_summary invs,
          cpipi_cp_inv_pay_instruction cpipi
    WHERE invs.internal_invoice_ref_no = cpipi.internal_invoice_ref_no
      AND cpipi.bank_id = phd.profileid
      AND invs.internal_invoice_ref_no = ?', 'N');


Insert into DGM_DOCUMENT_GENERATION_MASTER
   (DGM_ID, DOC_ID, DOC_NAME, ACTIVITY_ID, SEQUENCE_ORDER, 
    FETCH_QUERY, IS_CONCENTRATE)
 Values
   ('DGM-SI-3', 'CREATE_SI', 'Service Invoice', 'CREATE_SI', 5, 
    'INSERT INTO is_bds_child_d
            (internal_invoice_ref_no, beneficiary_name, bank_name, account_no,
             aba_rtn, instruction, internal_doc_ref_no)
   SELECT invs.internal_invoice_ref_no AS internal_invoice_ref_no,
          oipi.beneficiary_name AS beneficiary_name,
          phd.companyname AS bank_name, oipi.bank_account AS account_no,
          oipi.aba_no AS aba_rtn, oipi.instructions AS instruction, ?
     FROM phd_profileheaderdetails phd,
          is_invoice_summary invs,
          oipi_our_inv_pay_instruction oipi
    WHERE invs.internal_invoice_ref_no = oipi.internal_invoice_ref_no
      AND oipi.bank_id = phd.profileid
      AND invs.internal_invoice_ref_no = ?', 'N');