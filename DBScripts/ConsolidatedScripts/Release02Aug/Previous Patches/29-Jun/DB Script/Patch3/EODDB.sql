alter table PCERC_PC_ELEM_REFINING_CHARGE modify  REFINING_CHARGE NUMBER(25,10);
alter table PCERC_PC_ELEM_REFINING_CHARGE modify  ESC_DESC_VALUE NUMBER(25,10);
alter table PCETC_PC_ELEM_TREATMENT_CHARGE  modify  TREATMENT_CHARGE NUMBER(25,10);
alter table PCETC_PC_ELEM_TREATMENT_CHARGE  modify  ESC_DESC_VALUE NUMBER(25,10);
alter table PCEPC_PC_ELEM_PAYABLE_CONTENT  modify PAYABLE_CONTENT_VALUE NUMBER(25,10);
alter table PCEPC_PC_ELEM_PAYABLE_CONTENT  modify ASSAY_DEDUCTION NUMBER(25,10);
alter table PCEPC_PC_ELEM_PAYABLE_CONTENT  modify REFINING_CHARGE_VALUE NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify RANGE_MIN_VALUE NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify RANGE_MAX_VALUE NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify PENALTY_AMOUNT NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify PER_INCREASE_VALUE	NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify DEDUCTED_PAYABLE_VALUE	NUMBER(25,10);
alter table PCAESL_ASSAY_ELEM_SPLIT_LIMITS modify ASSAY_MIN_VALUE NUMBER(25,10);
alter table PCAESL_ASSAY_ELEM_SPLIT_LIMITS modify ASSAY_MAX_VALUE NUMBER(25,10);
alter table PCAESL_ASSAY_ELEM_SPLIT_LIMITS modify APPLICABLE_VALUE NUMBER(25,10);
alter table PCAR_PC_ASSAYING_RULES modify SPLIT_LIMIT NUMBER(25,10);
DROP INDEX IDX_PCDI1;
DROP INDEX IDX_PCDI2;
CREATE INDEX IDX_PCDI1 ON PCDI_PC_DELIVERY_ITEM (DBD_ID,IS_ACTIVE,INTERNAL_CONTRACT_REF_NO);
CREATE INDEX IDX_PCDI2 ON PCDI_PC_DELIVERY_ITEM(PROCESS_ID,IS_ACTIVE,INTERNAL_CONTRACT_REF_NO);
DROP INDEX IDX_PCPD1;
DROP INDEX IDX_PCPD2;
CREATE INDEX IDX_PCPD1 ON PCPD_PC_PRODUCT_DEFINITION (DBD_ID,IS_ACTIVE, INPUT_OUTPUT, INTERNAL_CONTRACT_REF_NO);
CREATE INDEX IDX_PCPD2 ON PCPD_PC_PRODUCT_DEFINITION (PROCESS_ID, IS_ACTIVE, INPUT_OUTPUT, INTERNAL_CONTRACT_REF_NO);
CREATE INDEX IDX_TGI1 ON TEMP_GMR_INVOICE(CORPORATE_ID,STOCK_ID);
CREATE INDEX IDX_PC1 ON PC_PRICE_CONVERSION (FROM_PRICE_UNIT_ID, TO_PRICE_UNIT_ID);
CREATE TABLE CET_CORPORATE_EXCH_RATE
(
  CORPORATE_ID        VARCHAR2(15 CHAR),
  FROM_CUR_ID  VARCHAR2(15 CHAR),
  TO_CUR_ID    VARCHAR2(15 CHAR),
  EXCH_RATE         NUMBER);
CREATE INDEX IDX_CET1 ON CET_CORPORATE_EXCH_RATE (FROM_CUR_ID, TO_CUR_ID);
CREATE INDEX IDX_IID1 ON IID_INVOICABLE_ITEM_DETAILS(INTERNAL_INVOICE_REF_NO,INTERNAL_GMR_REF_NO); -- go to mv indexes
CREATE INDEX IDX_CCCP1 ON CCCP_CONC_CONTRACT_COG_PRICE(PROCESS_ID,PCDI_ID,ELEMENT_ID);
DROP INDEX IDX_SPQ;
CREATE INDEX IDX_SPQ2 ON SPQ_STOCK_PAYABLE_QTY(PROCESS_ID,IS_ACTIVE,IS_STOCK_SPLIT,INTERNAL_GRD_REF_NO,ELEMENT_ID);
DROP INDEX IDX_PCI2;
CREATE INDEX IDX_PCI2 ON PCI_PHYSICAL_CONTRACT_ITEM(PROCESS_ID,IS_ACTIVE,PCDI_ID,Internal_Contract_Item_Ref_No);
DROP INDEX IDX_PCPCH;
CREATE INDEX IDX_PCPCH2 ON PCPCH_PC_PAYBLE_CONTENT_HEADER (PROCESS_ID,IS_ACTIVE);
CREATE INDEX IDX_II1 ON II_INVOICABLE_ITEM(STOCK_ID,INTERNAL_GMR_REF_NO);
DROP INDEX IDX_PCM2;
CREATE INDEX IDX_PCM2 ON PCM_PHYSICAL_CONTRACT_MAIN(PROCESS_ID,CONTRACT_STATUS,PRODUCT_GROUP_TYPE);
DROP INDEX IDX_PCDI2;
CREATE INDEX IDX_PCDI2 ON PCDI_PC_DELIVERY_ITEM (PROCESS_ID, IS_ACTIVE, PRICE_OPTION_CALL_OFF_STATUS, PCDI_ID);
CREATE INDEX IDX_POCH1 ON POCH_PRICE_OPT_CALL_OFF_HEADER(IS_ACTIVE, POCH_ID,PCDI_ID,ELEMENT_ID);
CREATE INDEX IDX_POCD1 ON POCD_PRICE_OPTION_CALLOFF_DTLS(IS_ACTIVE,POCH_ID,ELEMENT_ID);
DROP INDEX IDX_PPFH;
CREATE INDEX IDX_PPFH ON PPFH_PHY_PRICE_FORMULA_HEADER(PROCESS_ID,IS_ACTIVE,PPFH_ID,PCBPD_ID);
DROP INDEX IDX_PPFD;
CREATE INDEX IDX_PPFD2 ON PPFD_PHY_PRICE_FORMULA_DETAILS(PROCESS_ID,IS_ACTIVE,PPFH_ID,Instrument_Id);
DROP INDEX IDX_PCBPD;
CREATE INDEX IDX_PCBPD2 ON PCBPD_PC_BASE_PRICE_DETAIL(PROCESS_ID,IS_ACTIVE,PCBPH_ID,ELEMENT_ID,PCBPD_ID);
DROP INDEX IDX_PCIPF;
CREATE INDEX IDX_PCIPF2 ON PCIPF_PCI_PRICING_FORMULA(PROCESS_ID,IS_ACTIVE,PCBPH_ID,INTERNAL_CONTRACT_ITEM_REF_NO);
DROP INDEX IDX_DIPQ;
CREATE INDEX IDX_DIPQ2 ON DIPQ_DELIVERY_ITEM_PAYABLE_QTY(PROCESS_ID,IS_ACTIVE,PRICE_OPTION_CALL_OFF_STATUS,PCDI_ID);
DROP INDEX IDX_PCBPH;
CREATE INDEX IDX_PCBPH2 ON PCBPH_PC_BASE_PRICE_HEADER (PROCESS_ID,IS_ACTIVE,Internal_Contract_Ref_No,Pcbph_Id);
CREATE TABLE CED_CONTRACT_EXCHANGE_DETAIL
(
  CORPORATE_ID                   VARCHAR2(15) NOT NULL,
  INTERNAL_CONTRACT_ITEM_REF_NO  VARCHAR2(15) NOT NULL,
  PCDI_ID                        VARCHAR2(15) NOT NULL,
  ELEMENT_ID                     VARCHAR2(15),
  INSTRUMENT_ID                  VARCHAR2(15),
  INSTRUMENT_NAME                VARCHAR2(50),
  DERIVATIVE_DEF_ID              VARCHAR2(15),
  DERIVATIVE_DEF_NAME            VARCHAR2(50),
  EXCHANGE_ID                    VARCHAR2(15),
  EXCHANGE_NAME                  VARCHAR2(200));
CREATE INDEX IDX_CED1 ON CED_CONTRACT_EXCHANGE_DETAIL(CORPORATE_ID);
CREATE INDEX IDX_CED2 ON CED_CONTRACT_EXCHANGE_DETAIL(INTERNAL_CONTRACT_ITEM_REF_NO,INSTRUMENT_ID);
CREATE TABLE CPQ_CONTRACT_PAYABLE_QTY
(CORPORATE_ID VARCHAR2(15),
INTERNAL_CONTRACT_ITEM_REF_NO VARCHAR2(15),
ELEMENT_ID  VARCHAR2(15),
PAYABLE_QTY NUMBER,
PAYABLE_QTY_UNIT_ID  VARCHAR2(15));
DROP INDEX IDX_CIPQ;
CREATE INDEX IDX_CIPQ2 ON CIPQ_CONTRACT_ITEM_PAYABLE_QTY (PROCESS_ID,IS_ACTIVE,INTERNAL_CONTRACT_ITEM_REF_NO,ELEMENT_ID);
DROP INDEX IDX_PFQPP;
CREATE INDEX IDX_PFQPP2 ON PFQPP_PHY_FORMULA_QP_PRICING(PROCESS_ID,IS_ACTIVE,PPFH_ID);
CREATE INDEX IDX_CEQS1 ON CEQS_CONTRACT_ELE_QTY_STATUS(PROCESS_ID,INTERNAL_CONTRACT_ITEM_REF_NO,ELEMENT_ID);
CREATE TABLE GED_GMR_EXCHANGE_DETAIL
(CORPORATE_ID               VARCHAR2(15),
INTERNAL_GMR_REF_NO         VARCHAR2(15),
INSTRUMENT_ID               VARCHAR2(15),
INSTRUMENT_NAME             VARCHAR2(100),
DERIVATIVE_DEF_ID           VARCHAR2(15),
DERIVATIVE_DEF_NAME         VARCHAR2(100),
EXCHANGE_ID                 VARCHAR2(15),
EXCHANGE_NAME               VARCHAR2(100),
ELEMENT_ID                  VARCHAR2(15));
CREATE INDEX IDX_GED1 ON GED_GMR_EXCHANGE_DETAIL (CORPORATE_ID,INTERNAL_GMR_REF_NO,INSTRUMENT_ID);


alter table PCERC_PC_ELEM_REFINING_CHARGE modify  REFINING_CHARGE NUMBER(25,10);
alter table PCERC_PC_ELEM_REFINING_CHARGE modify  ESC_DESC_VALUE NUMBER(25,10);
alter table PCETC_PC_ELEM_TREATMENT_CHARGE  modify  TREATMENT_CHARGE NUMBER(25,10);
alter table PCETC_PC_ELEM_TREATMENT_CHARGE  modify  ESC_DESC_VALUE NUMBER(25,10);
alter table PCEPC_PC_ELEM_PAYABLE_CONTENT  modify PAYABLE_CONTENT_VALUE NUMBER(25,10);
alter table PCEPC_PC_ELEM_PAYABLE_CONTENT  modify ASSAY_DEDUCTION NUMBER(25,10);
alter table PCEPC_PC_ELEM_PAYABLE_CONTENT  modify REFINING_CHARGE_VALUE NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify RANGE_MIN_VALUE NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify RANGE_MAX_VALUE NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify PENALTY_AMOUNT NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify PER_INCREASE_VALUE	NUMBER(25,10);
alter table PCAP_PC_ATTRIBUTE_PENALTY modify DEDUCTED_PAYABLE_VALUE	NUMBER(25,10);
alter table PCAESL_ASSAY_ELEM_SPLIT_LIMITS modify ASSAY_MIN_VALUE NUMBER(25,10);
alter table PCAESL_ASSAY_ELEM_SPLIT_LIMITS modify ASSAY_MAX_VALUE NUMBER(25,10);
alter table PCAESL_ASSAY_ELEM_SPLIT_LIMITS modify APPLICABLE_VALUE NUMBER(25,10);
alter table PCAR_PC_ASSAYING_RULES modify SPLIT_LIMIT NUMBER(25,10);


create or replace package "PKG_METALS_GENERAL" is
  function fn_deduct_wet_to_dry_qty(pc_product_id                varchar2,
                                    pc_internal_cont_item_ref_no varchar2,
                                    pn_item_qty                  number,
                                    pc_dbd_id                    varchar)
    return number;

  procedure sp_element_position_qty(pc_internal_con_item_ref_no varchar2,
                                    pc_assay_header_id          varchar2,
                                    pc_element_id               varchar2,
                                    pc_dbd_id                   varchar2,
                                    pc_ele_qty_string           out varchar2);

  function fn_element_qty(pc_internal_cont_item_ref_no varchar2,
                          pc_assay_header_id           varchar2,
                          pc_element_id                varchar2,
                          pc_dbd_id                    varchar2)
    return varchar2;

  function fn_get_assay_dry_qty(pc_product_id      varchar2,
                                pc_assay_header_id varchar2,
                                pn_qty             number,
                                pc_qty_unit_id     varchar2) return number;

  procedure sp_get_penalty_charge(pc_inter_cont_item_ref_no varchar2,
                                  pc_dbd_id                 varchar2,
                                  pn_penalty_qty            number,
                                  pc_pc_qty_unit_id         varchar2,
                                  pn_total_pc_charge        out number,
                                  pc_pc_cur_id              out varchar2);

  procedure sp_get_refine_charge(pc_inter_cont_item_ref_no varchar2,
                                 pc_element_id             varchar2,
                                 pc_dbd_id                 varchar2,
                                 pn_rc_qty                 number,
                                 pc_rc_qty_unit_id         varchar2,
                                 pn_cp_price               number,
                                 pc_cp_unit_id             varchar2,
                                 pn_total_rc_charge        out number,
                                 pc_rc_cur_id              out varchar2);

  procedure sp_get_treatment_charge(pc_inter_cont_item_ref_no varchar2,
                                    pc_element_id             varchar2,
                                    pc_dbd_id                 varchar2,
                                    pn_dry_qty                number,
                                    pn_wet_qty                number,
                                    pc_qty_unit_id            varchar2,
                                    pn_cp_price               number,
                                    pc_cp_unit_id             varchar2,
                                    pn_total_tc_charge        out number,
                                    pc_tc_cur_id              out varchar2);
  function fn_get_next_month_prompt_date(pc_promp_del_cal_id varchar2,
                                         pd_trade_date       date)
    return date;
  procedure sp_get_gmr_treatment_charge(pc_inter_gmr_ref_no varchar2,
                                        pc_inter_grd_ref_no varchar2,
                                        pc_element_id       varchar2,
                                        pc_dbd_id           varchar2,
                                        pn_cp_price         number,
                                        pc_cp_unit_id       varchar2,
                                        pn_total_tc_charge  out number,
                                        pc_tc_cur_id        out varchar2);

  procedure sp_get_gmr_refine_charge(pc_inter_gmr_ref_no varchar2,
                                     pc_inter_grd_ref_no varchar2,
                                     pc_element_id       varchar2,
                                     pc_dbd_id           varchar2,
                                     pn_cp_price         number,
                                     pc_cp_unit_id       varchar2,
                                     pn_total_rc_charge  out number,
                                     pc_rc_cur_id        out varchar2);

  procedure sp_get_gmr_penalty_charge(pc_inter_gmr_ref_no varchar2,
                                      pc_inter_grd_ref_no varchar2,
                                      pc_dbd_id           varchar2,
                                      pc_element_id       varchar2,
                                      pn_total_pc_charge  out number,
                                      pc_pc_cur_id        out varchar2);
  procedure sp_get_gmr_penalty_charge_new(pc_inter_gmr_ref_no varchar2,
                                          pc_inter_grd_ref_no varchar2,
                                          pc_dbd_id           varchar2,
                                          pn_total_pc_charge  out number,
                                          pc_pc_cur_id        out varchar2);

  function f_get_next_day(p_date     in date,
                          p_day      in varchar2,
                          p_position in number) return date;

  function f_is_day_holiday(pc_instrumentid in varchar2,
                            pc_trade_date   date) return boolean;

  procedure sp_quality_premium_fw_rate(pc_int_contract_item_ref_no in varchar2,
                                       pc_corporate_id             in varchar2,
                                       pd_trade_date               in date,
                                       pc_price_unit_id            in varchar2,
                                       pc_base_cur_id              in varchar2,
                                       pd_payment_due_date         in date,
                                       pc_product_id               in varchar2,
                                       pc_base_qty_unit_id         in varchar2,
                                       pc_process_id               in varchar2,
                                       pn_premium                  out number,
                                       pc_exch_rate_string         out varchar2);

end; 
/
create or replace package body "PKG_METALS_GENERAL" is
  function fn_deduct_wet_to_dry_qty(pc_product_id                varchar2,
                                    pc_internal_cont_item_ref_no varchar2,
                                    pn_item_qty                  number,
                                    pc_dbd_id                    varchar)
    return number is
  
    vn_deduct_qty       number;
    vn_deduct_total_qty number;
    vn_item_qty         number;
    vn_converted_qty    number;
  begin
    vn_item_qty         := pn_item_qty;
    vn_deduct_qty       := 0;
    vn_deduct_total_qty := 0;
    for cur_deduct_qty in (select rm.ratio_name,
                                  rm.qty_unit_id_numerator,
                                  rm.qty_unit_id_denominator,
                                  pqca.typical,
                                  ppm.product_id,
                                  pci.item_qty_unit_id
                             from ppm_product_properties_mapping ppm,
                                  aml_attribute_master_list      aml,
                                  pqca_pq_chemical_attributes    pqca,
                                  rm_ratio_master                rm,
                                  asm_assay_sublot_mapping       asm,
                                  ash_assay_header               ash,
                                  pcdi_pc_delivery_item          pcdi,
                                  pci_physical_contract_item     pci,
                                  pcpq_pc_product_quality        pcpq
                            where ppm.attribute_id = aml.attribute_id
                              and aml.attribute_id = pqca.element_id
                              and pqca.asm_id = asm.asm_id
                              and pqca.unit_of_measure = rm.ratio_id
                              and asm.ash_id = ash.ash_id
                              and ash.internal_contract_ref_no =
                                  pcdi.internal_contract_ref_no
                              and pcdi.pcdi_id = pci.pcdi_id
                              and pci.pcpq_id = pcpq.pcpq_id
                              and pci.internal_contract_item_ref_no =
                                  pc_internal_cont_item_ref_no
                              and ppm.product_id = pc_product_id
                              and pcpq.assay_header_id = ash.ash_id
                              and ppm.deduct_for_wet_to_dry = 'Y'
                              and pci.dbd_id = pc_dbd_id
                              and pcdi.dbd_id = pc_dbd_id
                              and pcpq.dbd_id = pc_dbd_id)
    loop
      if cur_deduct_qty.ratio_name = '%' then
        vn_deduct_qty := vn_item_qty * (cur_deduct_qty.typical / 100);
      else
        vn_converted_qty := pkg_general.f_get_converted_quantity(cur_deduct_qty.product_id,
                                                                 cur_deduct_qty.item_qty_unit_id,
                                                                 cur_deduct_qty.qty_unit_id_denominator,
                                                                 vn_item_qty) *
                            cur_deduct_qty.typical;
        vn_deduct_qty    := pkg_general.f_get_converted_quantity(cur_deduct_qty.product_id,
                                                                 cur_deduct_qty.qty_unit_id_numerator,
                                                                 cur_deduct_qty.item_qty_unit_id,
                                                                 vn_converted_qty);
      
      end if;
      vn_deduct_total_qty := vn_deduct_total_qty + vn_deduct_qty;
    
    end loop;
    return vn_deduct_total_qty;
  end;

  procedure sp_element_position_qty(pc_internal_con_item_ref_no varchar2,
                                    pc_assay_header_id          varchar2,
                                    pc_element_id               varchar2,
                                    pc_dbd_id                   varchar2,
                                    pc_ele_qty_string           out varchar2) is
    cursor cur_element is
      select pci.internal_contract_item_ref_no,
             ciqs.open_qty item_qty,
             ciqs.item_qty_unit_id,
             pcpq.unit_of_measure item_unit_of_measure,
             pcpd.product_id,
             pqca.element_id,
             pcpq.assay_header_id,
             pqca.is_elem_for_pricing,
             pqca.unit_of_measure,
             pqca.payable_percentage,
             pqca.typical,
             rm.qty_unit_id_numerator,
             rm.qty_unit_id_denominator,
             rm.ratio_name,
             aml.attribute_name,
             aml.attribute_desc,
             aml.underlying_product_id,
             asm.asm_id
      
        from pci_physical_contract_item    pci,
             ciqs_contract_item_qty_status ciqs,
             pcpq_pc_product_quality       pcpq,
             pcpd_pc_product_definition    pcpd,
             ash_assay_header              ash,
             asm_assay_sublot_mapping      asm,
             aml_attribute_master_list     aml,
             pqca_pq_chemical_attributes   pqca,
             rm_ratio_master               rm
      
       where pci.pcpq_id = pcpq.pcpq_id
         and pci.internal_contract_item_ref_no =
             ciqs.internal_contract_item_ref_no
         and pcpq.assay_header_id = ash.ash_id
         and pcpq.pcpd_id = pcpd.pcpd_id
         and ash.ash_id = asm.ash_id
         and asm.asm_id = pqca.asm_id
         and pqca.unit_of_measure = rm.ratio_id
         and pqca.element_id = aml.attribute_id
         and pci.dbd_id = pc_dbd_id
         and pcpq.dbd_id = pc_dbd_id
         and ciqs.dbd_id = pc_dbd_id
         and pcpq.dbd_id = pc_dbd_id
         and pci.internal_contract_item_ref_no =
             pc_internal_con_item_ref_no
         and pcpq.assay_header_id = pc_assay_header_id
         and pqca.element_id = pc_element_id;
  
    vn_element_qty         number;
    vn_converted_qty       number;
    vc_element_qty_unit    varchar2(15);
    vc_element_qty_unit_id varchar2(15);
    vn_deduct_qty          number;
    vn_item_qty            number;
  
  begin
    for cur_element_rows in cur_element
    loop
      if cur_element_rows.item_unit_of_measure = 'Wet' then
        vn_deduct_qty := fn_deduct_wet_to_dry_qty(cur_element_rows.product_id,
                                                  cur_element_rows.internal_contract_item_ref_no,
                                                  cur_element_rows.item_qty,
                                                  pc_dbd_id);
        vn_item_qty   := cur_element_rows.item_qty - vn_deduct_qty;
      else
        vn_item_qty := cur_element_rows.item_qty;
      end if;
    
      if cur_element_rows.ratio_name = '%' then
        vn_element_qty := vn_item_qty * (cur_element_rows.typical / 100);
      
        begin
          select qum.qty_unit
            into vc_element_qty_unit
            from qum_quantity_unit_master qum
           where qum.qty_unit_id = cur_element_rows.item_qty_unit_id;
        exception
          when no_data_found then
            vc_element_qty_unit := null;
        end;
        vc_element_qty_unit_id := cur_element_rows.item_qty_unit_id;
      
        pc_ele_qty_string := vn_element_qty || '$' || vc_element_qty_unit || '$' ||
                             vc_element_qty_unit_id;
      
      else
        vn_converted_qty := pkg_general.f_get_converted_quantity(cur_element_rows.underlying_product_id,
                                                                 cur_element_rows.item_qty_unit_id,
                                                                 cur_element_rows.qty_unit_id_denominator,
                                                                 vn_item_qty);
      
        vn_element_qty := vn_converted_qty * cur_element_rows.typical;
      
        begin
          select qum.qty_unit
            into vc_element_qty_unit
            from qum_quantity_unit_master qum
           where qum.qty_unit_id = cur_element_rows.qty_unit_id_numerator;
        exception
          when no_data_found then
            vc_element_qty_unit := null;
        end;
      
        vc_element_qty_unit_id := cur_element_rows.qty_unit_id_numerator;
      
        pc_ele_qty_string := vn_element_qty || '$' || vc_element_qty_unit || '$' ||
                             vc_element_qty_unit_id;
      
      end if;
    end loop;
  end sp_element_position_qty;

  function fn_element_qty(pc_internal_cont_item_ref_no varchar2,
                          pc_assay_header_id           varchar2,
                          pc_element_id                varchar2,
                          pc_dbd_id                    varchar2)
    return varchar2 is
    vn_ele_qty_string varchar2(200);
  begin
    sp_element_position_qty(pc_internal_cont_item_ref_no,
                            pc_assay_header_id,
                            pc_element_id,
                            pc_dbd_id,
                            vn_ele_qty_string);
    return(vn_ele_qty_string);
  end fn_element_qty;

  function fn_get_assay_dry_qty(pc_product_id      varchar2,
                                pc_assay_header_id varchar2,
                                pn_qty             number,
                                pc_qty_unit_id     varchar2) return number is
    vn_deduct_qty       number;
    vn_deduct_total_qty number;
    vn_item_qty         number;
    vn_converted_qty    number;
  begin
    vn_item_qty         := pn_qty;
    vn_deduct_qty       := 0;
    vn_deduct_total_qty := 0;
    for cur_deduct_qty in (select ash.ash_id,
                                  pqca.element_id,
                                  pqca.is_elem_for_pricing,
                                  pqca.unit_of_measure,
                                  pqca.payable_percentage,
                                  pqca.typical,
                                  rm.qty_unit_id_numerator,
                                  rm.qty_unit_id_denominator,
                                  rm.ratio_name,
                                  aml.attribute_name,
                                  aml.attribute_desc,
                                  ppm.product_id,
                                  aml.underlying_product_id
                             from ash_assay_header               ash,
                                  asm_assay_sublot_mapping       asm,
                                  aml_attribute_master_list      aml,
                                  pqca_pq_chemical_attributes    pqca,
                                  rm_ratio_master                rm,
                                  ppm_product_properties_mapping ppm
                            where ash.ash_id = pc_assay_header_id
                              and ash.ash_id = asm.ash_id
                              and asm.asm_id = pqca.asm_id
                              and pqca.unit_of_measure = rm.ratio_id
                              and pqca.element_id = aml.attribute_id
                              and ppm.attribute_id = aml.attribute_id
                              and ppm.product_id = pc_product_id
                              and nvl(ppm.deduct_for_wet_to_dry, 'N') = 'Y')
    loop
      if cur_deduct_qty.ratio_name = '%' then
        vn_deduct_qty := vn_item_qty * (cur_deduct_qty.typical / 100);
      else
        vn_converted_qty := pkg_general.f_get_converted_quantity(pc_product_id,
                                                                 pc_qty_unit_id,
                                                                 cur_deduct_qty.qty_unit_id_denominator,
                                                                 vn_item_qty) *
                            cur_deduct_qty.typical;
        vn_deduct_qty    := pkg_general.f_get_converted_quantity(pc_product_id,
                                                                 cur_deduct_qty.qty_unit_id_numerator,
                                                                 pc_qty_unit_id,
                                                                 vn_converted_qty);
      end if;
      vn_deduct_total_qty := vn_deduct_total_qty + vn_deduct_qty;
    end loop;
    return(vn_item_qty - vn_deduct_total_qty);
  end;
  procedure sp_get_penalty_charge(pc_inter_cont_item_ref_no varchar2,
                                  pc_dbd_id                 varchar2,
                                  pn_penalty_qty            number,
                                  pc_pc_qty_unit_id         varchar2,
                                  pn_total_pc_charge        out number,
                                  pc_pc_cur_id              out varchar2) is
    vn_penalty_charge      number;
    vc_penalty_weight_type varchar2(20);
    vn_max_range           number;
    vn_min_range           number;
    vn_typical_val         number := 0;
    vn_converted_qty       number;
    vn_element_pc_charge   number;
    vn_range_gap           number;
    vn_tier_penalty        number;
    vc_price_unit_id       varchar2(15);
    vc_cur_id              varchar2(15);
  begin
    vn_penalty_charge    := 0;
    vn_element_pc_charge := 0;
    vn_tier_penalty      := 0;
    pn_total_pc_charge   := 0;
    --Take all the Elements associated with the conttract.
    for cc in (select pci.item_qty,
                      pqca.element_id,
                      pqca.typical,
                      rm.qty_unit_id_denominator,
                      rm.qty_unit_id_numerator,
                      rm.ratio_name,
                      pci.item_qty_unit_id,
                      aml.underlying_product_id,
                      pcpd.unit_of_measure,
                      asm.asm_id,
                      pci.pcpq_id,
                      pci.pcdi_id
                 from pcpd_pc_product_definition  pcpd,
                      pcpq_pc_product_quality     pcpq,
                      pqca_pq_chemical_attributes pqca,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pci_physical_contract_item  pci,
                      pcdi_pc_delivery_item       pcdi,
                      aml_attribute_master_list   aml,
                      qum_quantity_unit_master    qum,
                      rm_ratio_master             rm
                where pci.pcdi_id = pcdi.pcdi_id
                  and pci.pcpq_id = pcpq.pcpq_id
                  and pcpq.pcpd_id = pcpd.pcpd_id
                  and pcpq.assay_header_id = ash.ash_id
                  and pqca.asm_id = asm.asm_id
                  and asm.ash_id = ash.ash_id
                  and ash.assay_type = 'Contractual Assay'
                  and pci.internal_contract_item_ref_no =
                      pc_inter_cont_item_ref_no
                  and pcpd.dbd_id = pc_dbd_id
                  and pcpq.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and pcdi.dbd_id = pc_dbd_id
                  and aml.attribute_id = pqca.element_id
                  and qum.qty_unit_id = pci.item_qty_unit_id
                     --   and pqca.element_id = pc_element_id
                  and nvl(pqca.is_elem_for_pricing, 'N') = 'N'
                  and rm.ratio_id = pqca.unit_of_measure
                  and pcdi.is_active = 'Y'
                  and pci.is_active = 'Y'
                  and aml.is_active = 'Y'
                  and pqca.is_active = 'Y'
                  and pcdi.is_active = 'Y')
    loop
      vn_element_pc_charge := 0;
      vn_tier_penalty      := 0;
      --Passing each element which is getting  from the outer loop.
      --and checking ,is it non payable or not.
      for cur_pc_charge in (select pcap.penalty_charge_type,
                                   pcap.penalty_basis,
                                   pcap.penalty_amount,
                                   pcap.range_min_value,
                                   pcap.range_max_value,
                                   pcap.range_min_op,
                                   pcap.range_max_op,
                                   pcap.position,
                                   pcap.charge_basis,
                                   pcap.penalty_weight_type,
                                   pcap.pcaph_id,
                                   pcaph.slab_tier,
                                   pum.price_unit_id,
                                   pum.cur_id cur_id,
                                   pum.weight_unit_id
                              from pcaph_pc_attr_penalty_header  pcaph,
                                   pcap_pc_attribute_penalty     pcap,
                                   pqd_penalty_quality_details   pqd,
                                   pad_penalty_attribute_details pad,
                                   diph_di_penalty_header        diph,
                                   ppu_product_price_units       ppu,
                                   pum_price_unit_master         pum
                             where pcaph.pcaph_id = pcap.pcaph_id
                               and pcaph.pcaph_id = pqd.pcaph_id
                               and pcaph.pcaph_id = pad.pcaph_id
                               and pcaph.pcaph_id = diph.pcaph_id
                               and pqd.pcpq_id = cc.pcpq_id
                               and diph.pcdi_id = cc.pcdi_id
                               and pcaph.dbd_id = pc_dbd_id
                               and pcap.dbd_id = pc_dbd_id
                               and pqd.dbd_id = pc_dbd_id
                               and pad.dbd_id = pc_dbd_id
                               and diph.dbd_id = pc_dbd_id
                               and pcaph.is_active = 'Y'
                               and pcap.is_active = 'Y'
                               and pqd.is_active = 'Y'
                               and pad.is_active = 'Y'
                               and diph.is_active = 'Y'
                               and pad.element_id = cc.element_id
                               and pcap.penalty_unit_id =
                                   ppu.internal_price_unit_id
                               and ppu.price_unit_id = pum.price_unit_id
                               and (pcap.range_max_value > cc.typical or
                                   pcap.position = 'Range End')
                               and (pcap.range_min_value <= cc.typical or
                                   pcap.position = 'Range Begining'))
      loop
        vc_price_unit_id     := cur_pc_charge.price_unit_id;
        vc_cur_id            := cur_pc_charge.cur_id;
        vn_element_pc_charge := 0;
        --check the penalty charge type
        if cur_pc_charge.penalty_charge_type = 'Fixed' then
          vc_penalty_weight_type := cur_pc_charge.penalty_weight_type;
          --Find the PC charge which will fall in the appropriate range.
          --as according to the typical value   
          if (cur_pc_charge.position = 'Range Begining' and
             cur_pc_charge.range_max_op = '<=' and
             cur_pc_charge.range_max_value <= cc.typical) or
             (cur_pc_charge.position = 'Range Begining' and
             cur_pc_charge.range_max_op = '<' and
             cur_pc_charge.range_max_value < cc.typical) or
             (cur_pc_charge.position = 'Range End' and
             cur_pc_charge.range_min_op = '>=' and
             cc.typical >= cur_pc_charge.range_min_value) or
             (cur_pc_charge.position = 'Range End' and
             cur_pc_charge.range_min_op = '>' and
             cc.typical > cur_pc_charge.range_min_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>' and
             cur_pc_charge.range_max_op = '<' and
             cc.typical > cur_pc_charge.range_min_value and
             cc.typical < cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>=' and
             cur_pc_charge.range_max_op = '<' and
             cc.typical >= cur_pc_charge.range_min_value and
             cc.typical < cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>' and
             cur_pc_charge.range_max_op = '<=' and
             cc.typical > cur_pc_charge.range_min_value and
             cc.typical <= cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>=' and
             cur_pc_charge.range_max_op = '<=' and
             cc.typical >= cur_pc_charge.range_min_value and
             cc.typical <= cur_pc_charge.range_max_value) then
          
            vn_penalty_charge := cur_pc_charge.penalty_amount;
            vn_max_range      := cur_pc_charge.range_max_value;
            vn_min_range      := cur_pc_charge.range_min_value;
            vn_typical_val    := cc.typical;
          
            vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                     pc_pc_qty_unit_id,
                                                                     cur_pc_charge.weight_unit_id,
                                                                     pn_penalty_qty);
          
            vn_element_pc_charge := vn_penalty_charge * vn_converted_qty;
          end if;
        elsif cur_pc_charge.penalty_charge_type = 'Variable' then
          if cur_pc_charge.penalty_basis = 'Quantity' and
             cur_pc_charge.slab_tier = 'Tier' then
            vn_typical_val := cc.typical;
            --find the range where the typical falls in 
            if (cur_pc_charge.position = 'Range Begining' and
               cur_pc_charge.range_max_op = '<=' and
               cur_pc_charge.range_max_value <= vn_typical_val) or
               (cur_pc_charge.position = 'Range Begining' and
               cur_pc_charge.range_max_op = '<' and
               cur_pc_charge.range_max_value < vn_typical_val) or
               (cur_pc_charge.position = 'Range End' and
               cur_pc_charge.range_min_op = '>=' and
               vn_typical_val >= cur_pc_charge.range_min_value) or
               (cur_pc_charge.position = 'Range End' and
               cur_pc_charge.range_min_op = '>' and
               vn_typical_val > cur_pc_charge.range_min_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>' and
               cur_pc_charge.range_max_op = '<' and
               vn_typical_val > cur_pc_charge.range_min_value and
               vn_typical_val < cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>=' and
               cur_pc_charge.range_max_op = '<' and
               vn_typical_val >= cur_pc_charge.range_min_value and
               vn_typical_val < cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>' and
               cur_pc_charge.range_max_op = '<=' and
               vn_typical_val > cur_pc_charge.range_min_value and
               vn_typical_val <= cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>=' and
               cur_pc_charge.range_max_op = '<=' and
               vn_typical_val >= cur_pc_charge.range_min_value and
               vn_typical_val <= cur_pc_charge.range_max_value) then
              --Finding all the  assay range form the start range to  last range 
              --for the different Tier basics ,assording to the typicla value
              for cur_range in (select nvl(pcap.range_min_value, 0) min_range,
                                       pcap.range_max_value max_range,
                                       pcap.penalty_amount,
                                       pcap.per_increase_value
                                  from pcap_pc_attribute_penalty pcap
                                 where nvl(pcap.range_min_value, 0) <=
                                       vn_typical_val
                                   and pcap.pcaph_id =
                                       cur_pc_charge.pcaph_id
                                   and pcap.dbd_id = pc_dbd_id)
              loop
                --for half range
                if vn_typical_val > 0 then
                  if cur_range.min_range < vn_typical_val and
                     nvl(cur_range.max_range, vn_typical_val + 1) >
                     vn_typical_val then
                    vn_penalty_charge := cur_range.penalty_amount;
                    vn_range_gap      := vn_typical_val -
                                         cur_range.min_range;
                    --for full range                 
                  elsif cur_range.min_range <= vn_typical_val and
                        cur_range.max_range <= vn_typical_val then
                    vn_penalty_charge := cur_range.penalty_amount;
                    vn_range_gap      := cur_range.max_range -
                                         cur_range.min_range;
                  end if;
                end if;
                --get the  qty according to the dry or wet
                --penalty is applyed on the item qty not on the penalty qty
                /* dbms_output.put_line('Range %  is ' || cur_range.min_range || '-' ||
                                     cur_range.max_range);
                dbms_output.put_line(' Typical value is   ' ||
                                     vn_typical_val);
                dbms_output.put_line('Range Gap is ' || vn_range_gap);
                dbms_output.put_line(' Item Qty is  ' || cc.item_qty);
                
                dbms_output.put_line(' Base Penalty charge for this ' ||
                                     vn_penalty_charge);
                dbms_output.put_line(' Variable  Penalty charge formula is  ' ||
                                     vn_penalty_charge || '*(' ||
                                     vn_range_gap || '/' ||
                                     cur_range.per_increase_value || ')');*/
                if cur_pc_charge.charge_basis = 'absolute' then
                  vn_penalty_charge := ceil(vn_range_gap /
                                            cur_range.per_increase_value) *
                                       vn_penalty_charge;
                elsif cur_pc_charge.charge_basis = 'fractions Pro-Rata' then
                  vn_penalty_charge := (vn_range_gap /
                                       cur_range.per_increase_value) *
                                       vn_penalty_charge;
                end if;
                vn_tier_penalty := vn_tier_penalty + vn_penalty_charge;
                /** vn_range_gap;*/
              /* dbms_output.put_line(' Variable  Penalty charge for this ' ||
vn_penalty_charge);
dbms_output.put_line('---------------------------');*/
              --calculate total Penalty charge
              end loop;
            end if;
          elsif cur_pc_charge.penalty_basis = 'Payable Content' then
            --Take the payable content qty from the table and 
            --find the penalty But for the time being this feature is not applied
            null;
          end if;
          --vn_penalty_qty :=  pn_penalty_qty;
          /*if cur_pc_charge.penalty_weight_type = 'Wet' then
            vn_penalty_qty := cc.item_qty;
          elsif cur_pc_charge.penalty_weight_type = 'Dry' then
            vn_penalty_qty := fn_deduct_wet_to_dry_qty(pc_inter_cont_item_ref_no,
                                                      cc.item_qty,
                                                      pc_dbd_id);
          end if;*/
          --Penalty Charge is applyed on the item wise not on the element  wise
          --This item qty may be dry or wet
          vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                   pc_pc_qty_unit_id,
                                                                   cur_pc_charge.weight_unit_id,
                                                                   pn_penalty_qty);
          --Here no need of the typical value as penalty is on item level  
          vn_element_pc_charge := vn_tier_penalty * vn_converted_qty;
          /*  dbms_output.put_line('vn_element_pc_charge' ||
          vn_element_pc_charge);*/
        end if;
      end loop;
      pn_total_pc_charge := pn_total_pc_charge + vn_element_pc_charge;
    end loop;
  
    pc_pc_cur_id := vc_cur_id;
  exception
    when others then
      pn_total_pc_charge := -1;
      pc_pc_cur_id       := null;
  end;

  procedure sp_get_refine_charge(pc_inter_cont_item_ref_no varchar2,
                                 pc_element_id             varchar2,
                                 pc_dbd_id                 varchar2,
                                 pn_rc_qty                 number,
                                 pc_rc_qty_unit_id         varchar2,
                                 pn_cp_price               number,
                                 pc_cp_unit_id             varchar2,
                                 pn_total_rc_charge        out number,
                                 pc_rc_cur_id              out varchar2) is
    vn_refine_charge       number;
    vn_item_qty            number;
    vn_element_qty         number;
    vc_price_unit_id       varchar2(100);
    vn_tot_refine_charge   number;
    vn_max_range           number;
    vn_typical_val         number;
    vn_contract_price      number;
    vn_min_range           number;
    vn_base_refine_charge  number;
    vn_range_gap           number;
    vn_each_tier_rc_charge number;
    vc_cur_id              varchar2(10);
    vc_rc_weight_unit_id   varchar2(15);
    vn_pricable_qty        number;
    vc_include_ref_charge  char(1);
  begin
    vn_refine_charge  := 0;
    vn_contract_price := pn_cp_price;
    for cc in (select pci.item_qty,
                      pqca.element_id,
                      pqca.typical,
                      rm.qty_unit_id_denominator,
                      rm.qty_unit_id_numerator,
                      rm.ratio_name,
                      pci.item_qty_unit_id,
                      aml.underlying_product_id,
                      pcpd.unit_of_measure,
                      asm.asm_id,
                      pci.pcpq_id,
                      pci.pcdi_id,
                      pcdi.internal_contract_ref_no,
                      pci.internal_contract_item_ref_no
                 from pcpd_pc_product_definition  pcpd,
                      pcpq_pc_product_quality     pcpq,
                      pqca_pq_chemical_attributes pqca,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pci_physical_contract_item  pci,
                      pcdi_pc_delivery_item       pcdi,
                      aml_attribute_master_list   aml,
                      qum_quantity_unit_master    qum,
                      rm_ratio_master             rm
                where pci.pcdi_id = pcdi.pcdi_id
                  and pci.pcpq_id = pcpq.pcpq_id
                  and pcpq.pcpd_id = pcpd.pcpd_id
                  and pcpq.assay_header_id = ash.ash_id
                  and pqca.asm_id = asm.asm_id
                  and asm.ash_id = ash.ash_id
                  and pcpd.dbd_id = pc_dbd_id
                  and pcpq.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and pcdi.dbd_id = pc_dbd_id
                  and ash.assay_type = 'Contractual Assay'
                  and pci.internal_contract_item_ref_no =
                      pc_inter_cont_item_ref_no
                  and aml.attribute_id = pqca.element_id
                  and qum.qty_unit_id = pci.item_qty_unit_id
                  and pqca.element_id = pc_element_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and pcdi.is_active = 'Y'
                  and pci.is_active = 'Y'
                  and pqca.is_active = 'Y'
                  and pcdi.is_active = 'Y')
    loop
      --for refine charge , the charge will applyed on
      --payable qty only.So deduct the moisture and other deductable item 
      --from the item qty.
    
      vn_item_qty := pn_rc_qty;
    
      begin
        select pcepc.include_ref_charges
          into vc_include_ref_charge
          from pcm_physical_contract_main     pcm,
               pcpch_pc_payble_content_header pcpch,
               pcepc_pc_elem_payable_content  pcepc
         where pcm.internal_contract_ref_no =
               pcpch.internal_contract_ref_no
           and pcpch.pcpch_id = pcepc.pcpch_id
           and pcm.dbd_id = pc_dbd_id
           and pcpch.dbd_id = pc_dbd_id
           and pcepc.dbd_id = pc_dbd_id
           and pcpch.element_id = cc.element_id
           and pcm.internal_contract_ref_no = cc.internal_contract_ref_no
           and (pcepc.range_min_value <= cc.typical or
               pcepc.position = 'Range Begining')
           and (pcepc.range_max_value > cc.typical or
               pcepc.position = 'Range End')
           and pcm.is_active = 'Y'
           and pcpch.is_active = 'Y'
           and pcepc.is_active = 'Y';
      exception
        when no_data_found then
          vc_include_ref_charge := 'N';
      end;
    
      if vc_include_ref_charge = 'Y' then
        begin
          for cur_ref_charge in (select pcpch.pcpch_id,
                                        pcepc.range_max_op,
                                        pcepc.range_max_value,
                                        pcepc.range_min_op,
                                        pcepc.range_min_value,
                                        pcepc.position,
                                        pcepc.refining_charge_value,
                                        pcepc.refining_charge_unit_id,
                                        pum.cur_id,
                                        pum.price_unit_id,
                                        pum.weight_unit_id
                                   from pcm_physical_contract_main     pcm,
                                        pcdi_pc_delivery_item          pcdi,
                                        pci_physical_contract_item     pci,
                                        pcpch_pc_payble_content_header pcpch,
                                        pcepc_pc_elem_payable_content  pcepc,
                                        ppu_product_price_units        ppu,
                                        pum_price_unit_master          pum
                                  where pcm.internal_contract_ref_no =
                                        pcdi.internal_contract_ref_no
                                    and pcdi.pcdi_id = pci.pcdi_id
                                    and pcm.internal_contract_ref_no =
                                        pcpch.internal_contract_ref_no
                                    and pcpch.element_id = cc.element_id
                                    and pcpch.pcpch_id = pcepc.pcpch_id
                                    and pcepc.include_ref_charges = 'Y'
                                    and ppu.internal_price_unit_id =
                                        pcepc.refining_charge_unit_id
                                    and ppu.price_unit_id =
                                        pum.price_unit_id
                                    and pci.internal_contract_item_ref_no =
                                        cc.internal_contract_item_ref_no
                                    and pci.dbd_id = pc_dbd_id
                                    and pcdi.dbd_id = pc_dbd_id
                                    and pcm.dbd_id = pc_dbd_id
                                    and pcpch.dbd_id = pc_dbd_id
                                    and pcepc.dbd_id = pc_dbd_id
                                    and pci.is_active = 'Y'
                                    and pcm.is_active = 'Y'
                                    and pcdi.is_active = 'Y'
                                    and pcpch.is_active = 'Y'
                                    and pcepc.is_active = 'Y')
          loop
            vc_rc_weight_unit_id := cur_ref_charge.weight_unit_id;
            vc_cur_id            := cur_ref_charge.cur_id;
            vc_price_unit_id     := cur_ref_charge.price_unit_id;
          
            if (cur_ref_charge.position = 'Range Begining' and
               cur_ref_charge.range_max_op = '<=' and
               cur_ref_charge.range_max_value <= cc.typical) or
               (cur_ref_charge.position = 'Range Begining' and
               cur_ref_charge.range_max_op = '<' and
               cur_ref_charge.range_max_value < cc.typical) or
               (cur_ref_charge.position = 'Range End' and
               cur_ref_charge.range_min_op = '>=' and
               cc.typical >= cur_ref_charge.range_min_value) or
               (cur_ref_charge.position = 'Range End' and
               cur_ref_charge.range_min_op = '>' and
               cc.typical > cur_ref_charge.range_min_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>' and
               cur_ref_charge.range_max_op = '<' and
               cc.typical > cur_ref_charge.range_min_value and
               cc.typical < cur_ref_charge.range_max_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>=' and
               cur_ref_charge.range_max_op = '<' and
               cc.typical >= cur_ref_charge.range_min_value and
               cc.typical < cur_ref_charge.range_max_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>' and
               cur_ref_charge.range_max_op = '<=' and
               cc.typical > cur_ref_charge.range_min_value and
               cc.typical <= cur_ref_charge.range_max_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>=' and
               cur_ref_charge.range_max_op = '<=' and
               cc.typical >= cur_ref_charge.range_min_value and
               cc.typical <= cur_ref_charge.range_max_value) then
              vn_refine_charge := cur_ref_charge.refining_charge_value;
            end if;
          end loop;
        exception
          when others then
            vn_refine_charge := 0;
            vc_price_unit_id := null;
        end;
      else
        begin
          for cur_ref_charge in (select pcrh.range_type,
                                        pcerc.refining_charge,
                                        pcerc.refining_charge_unit_id,
                                        pcerc.charge_type,
                                        pcerc.charge_basis,
                                        pcerc.position,
                                        pcerc.range_min_op,
                                        pcerc.range_min_value,
                                        pcerc.range_max_op,
                                        pcerc.range_max_value,
                                        pcrh.pcrh_id,
                                        nvl(pcerc.esc_desc_unit_id,
                                            pum.cur_id) cur_id,
                                        pum.price_unit_id,
                                        pum.weight_unit_id
                                   from pcrh_pc_refining_header       pcrh,
                                        red_refining_element_details  red,
                                        pcerc_pc_elem_refining_charge pcerc,
                                        rqd_refining_quality_details  rqd,
                                        dirh_di_refining_header       dirh,
                                        ppu_product_price_units       ppu,
                                        pum_price_unit_master         pum
                                  where pcrh.pcrh_id = red.pcrh_id
                                    and pcrh.pcrh_id = pcerc.pcrh_id
                                    and pcrh.pcrh_id = rqd.pcrh_id
                                    and pcrh.pcrh_id = dirh.pcrh_id
                                    and rqd.pcpq_id = cc.pcpq_id
                                    and dirh.pcdi_id = cc.pcdi_id
                                    and pcrh.dbd_id = pc_dbd_id
                                    and red.dbd_id = pc_dbd_id
                                    and pcerc.dbd_id = pc_dbd_id
                                    and rqd.dbd_id = pc_dbd_id
                                    and dirh.dbd_id = pc_dbd_id
                                    and red.element_id = cc.element_id
                                    and ppu.internal_price_unit_id =
                                        pcerc.refining_charge_unit_id
                                    and ppu.price_unit_id =
                                        pum.price_unit_id
                                    and pcerc.is_active = 'Y'
                                    and pcrh.is_active = 'Y'
                                    and red.is_active = 'Y'
                                    and rqd.is_active = 'Y'
                                    and dirh.is_active = 'Y'
                                  order by range_min_value)
          loop
            vc_rc_weight_unit_id := cur_ref_charge.weight_unit_id;
            vc_cur_id            := cur_ref_charge.cur_id;
            vc_price_unit_id     := cur_ref_charge.price_unit_id;
            if cur_ref_charge.range_type = 'Price Range' then
              --if the CHARGE_TYPE is fixed then it will
              --behave as the slab as same as the assay range
              --No base concept is here
              if cur_ref_charge.charge_type = 'Fixed' then
                if (cur_ref_charge.position = 'Range Begining' and
                   cur_ref_charge.range_max_op = '<=' and
                   cur_ref_charge.range_max_value <= vn_contract_price) or
                   (cur_ref_charge.position = 'Range Begining' and
                   cur_ref_charge.range_max_op = '<' and
                   cur_ref_charge.range_max_value < vn_contract_price) or
                   (cur_ref_charge.position = 'Range End' and
                   cur_ref_charge.range_min_op = '>=' and
                   vn_contract_price >= cur_ref_charge.range_min_value) or
                   (cur_ref_charge.position = 'Range End' and
                   cur_ref_charge.range_min_op = '>' and
                   vn_contract_price > cur_ref_charge.range_min_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>' and
                   cur_ref_charge.range_max_op = '<' and
                   vn_contract_price > cur_ref_charge.range_min_value and
                   vn_contract_price < cur_ref_charge.range_max_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>=' and
                   cur_ref_charge.range_max_op = '<' and
                   vn_contract_price >= cur_ref_charge.range_min_value and
                   vn_contract_price < cur_ref_charge.range_max_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>' and
                   cur_ref_charge.range_max_op = '<=' and
                   vn_contract_price > cur_ref_charge.range_min_value and
                   vn_contract_price <= cur_ref_charge.range_max_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>=' and
                   cur_ref_charge.range_max_op = '<=' and
                   vn_contract_price >= cur_ref_charge.range_min_value and
                   vn_contract_price <= cur_ref_charge.range_max_value) then
                  vn_refine_charge := cur_ref_charge.refining_charge;
                  dbms_output.put_line(vn_refine_charge);
                end if;
              elsif cur_ref_charge.charge_type = 'Variable' then
                --Take the base price and its min and max range
                begin
                  select pcerc.range_min_value,
                         pcerc.range_max_value,
                         pcerc.refining_charge
                    into vn_min_range,
                         vn_max_range,
                         vn_base_refine_charge
                    from pcerc_pc_elem_refining_charge pcerc
                   where pcerc.pcrh_id = cur_ref_charge.pcrh_id
                     and pcerc.position = 'Base'
                     and pcerc.charge_type = 'Variable'
                     and pcerc.dbd_id = pc_dbd_id;
                exception
                  when no_data_found then
                    vn_min_range          := 0;
                    vn_max_range          := 0;
                    vn_base_refine_charge := 0;
                end;
                --according to the contract price , the price tier 
                --will be find out, it may forward or back ward
                --Both vn_max_range and vn_min_range are same in case if base
                if vn_contract_price > vn_max_range then
                  --go forward for the price range
                  vn_refine_charge := vn_base_refine_charge;
                  for cur_forward_price in (select pcerc.range_min_value,
                                                   pcerc.range_min_op,
                                                   pcerc.range_max_value,
                                                   pcerc.range_max_op,
                                                   pcerc.esc_desc_value,
                                                   pcerc.esc_desc_unit_id,
                                                   pcerc.refining_charge,
                                                   pcerc.refining_charge_unit_id,
                                                   pcerc.charge_basis
                                              from pcerc_pc_elem_refining_charge pcerc
                                             where pcerc.pcrh_id =
                                                   cur_ref_charge.pcrh_id
                                               and nvl(pcerc.range_min_value,
                                                       0) <
                                                   vn_contract_price
                                               and nvl(pcerc.range_min_value,
                                                       0) >= vn_min_range
                                               and nvl(pcerc.position, 'a') <>
                                                   'Base'
                                               and pcerc.dbd_id = pc_dbd_id)
                  loop
                    --for full Range
                    if cur_forward_price.range_max_value <=
                       vn_contract_price then
                      vn_range_gap := cur_forward_price.range_max_value -
                                      cur_forward_price.range_min_value;
                    elsif nvl(cur_forward_price.range_max_value,
                              vn_contract_price + 1) > vn_contract_price then
                      --For the Half  Range 
                      vn_range_gap := vn_contract_price -
                                      cur_forward_price.range_min_value;
                    end if;
                    /* vn_each_tier_rc_charge := (vn_range_gap /
                                              nvl(cur_forward_price.esc_desc_value,
                                                   1)) *
                                              cur_forward_price.refining_charge;
                    vn_refine_charge       := vn_refine_charge +
                                              vn_each_tier_rc_charge;*/
                    --
                    if cur_forward_price.charge_basis = 'absolute' then
                      vn_each_tier_rc_charge := ceil(vn_range_gap /
                                                     nvl(cur_forward_price.esc_desc_value,
                                                         1)) *
                                                cur_forward_price.refining_charge;
                    elsif cur_forward_price.charge_basis =
                          'fractions Pro-Rata' then
                      vn_each_tier_rc_charge := (vn_range_gap /
                                                nvl(cur_forward_price.esc_desc_value,
                                                     1)) *
                                                cur_forward_price.refining_charge;
                    end if;
                    vn_refine_charge := vn_refine_charge +
                                        vn_each_tier_rc_charge;
                    --
                  end loop;
                elsif vn_contract_price < vn_min_range then
                  --go back ward for the price range
                  vn_refine_charge := vn_base_refine_charge;
                  for cur_backward_price in (select nvl(pcerc.range_min_value,
                                                        0) range_min_value,
                                                    pcerc.range_min_op,
                                                    pcerc.range_max_value,
                                                    pcerc.range_max_op,
                                                    pcerc.esc_desc_value,
                                                    pcerc.esc_desc_unit_id,
                                                    pcerc.refining_charge,
                                                    pcerc.refining_charge_unit_id,
                                                    pcerc.charge_basis
                                               from pcerc_pc_elem_refining_charge pcerc
                                              where pcerc.pcrh_id =
                                                    cur_ref_charge.pcrh_id
                                                and nvl(pcerc.range_min_value,
                                                        0) <
                                                    vn_contract_price
                                                and nvl(pcerc.range_min_value,
                                                        0) <= vn_min_range
                                                and nvl(pcerc.position, 'a') <>
                                                    'Base'
                                                and pcerc.dbd_id = pc_dbd_id)
                  loop
                    --For the full Range 
                    if cur_backward_price.range_max_value <=
                       vn_contract_price then
                      vn_range_gap := cur_backward_price.range_max_value -
                                      cur_backward_price.range_min_value;
                    elsif cur_backward_price.range_max_value >
                          vn_contract_price then
                      --For the Half  Range 
                      vn_range_gap := vn_contract_price -
                                      cur_backward_price.range_min_value;
                    end if;
                    if cur_backward_price.charge_basis = 'absolute' then
                      vn_each_tier_rc_charge := ceil(vn_range_gap /
                                                     nvl(cur_backward_price.esc_desc_value,
                                                         1)) *
                                                cur_backward_price.refining_charge;
                    elsif cur_backward_price.charge_basis =
                          'fractions Pro-Rata' then
                      vn_each_tier_rc_charge := (vn_range_gap /
                                                nvl(cur_backward_price.esc_desc_value,
                                                     1)) *
                                                cur_backward_price.refining_charge;
                    end if;
                    vn_refine_charge := vn_refine_charge +
                                        vn_each_tier_rc_charge;
                  end loop;
                elsif vn_contract_price = vn_min_range and
                      vn_contract_price = vn_max_range then
                  vn_refine_charge := vn_base_refine_charge;
                  --take the base price only            
                end if;
              end if;
            elsif cur_ref_charge.range_type = 'Assay Range' then
              --Make sure the range for the element is mentation properly.
              if (cur_ref_charge.position = 'Range Begining' and
                 cur_ref_charge.range_max_op = '<=' and
                 cur_ref_charge.range_max_value <= cc.typical) or
                 (cur_ref_charge.position = 'Range Begining' and
                 cur_ref_charge.range_max_op = '<' and
                 cur_ref_charge.range_max_value < cc.typical) or
                 (cur_ref_charge.position = 'Range End' and
                 cur_ref_charge.range_min_op = '>=' and
                 cc.typical >= cur_ref_charge.range_min_value) or
                 (cur_ref_charge.position = 'Range End' and
                 cur_ref_charge.range_min_op = '>' and
                 cc.typical > cur_ref_charge.range_min_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>' and
                 cur_ref_charge.range_max_op = '<' and
                 cc.typical > cur_ref_charge.range_min_value and
                 cc.typical < cur_ref_charge.range_max_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>=' and
                 cur_ref_charge.range_max_op = '<' and
                 cc.typical >= cur_ref_charge.range_min_value and
                 cc.typical < cur_ref_charge.range_max_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>' and
                 cur_ref_charge.range_max_op = '<=' and
                 cc.typical > cur_ref_charge.range_min_value and
                 cc.typical <= cur_ref_charge.range_max_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>=' and
                 cur_ref_charge.range_max_op = '<=' and
                 cc.typical >= cur_ref_charge.range_min_value and
                 cc.typical <= cur_ref_charge.range_max_value) then
                vn_refine_charge := cur_ref_charge.refining_charge;
                vn_max_range     := cur_ref_charge.range_max_value;
                vn_min_range     := cur_ref_charge.range_min_value;
                vn_typical_val   := cc.typical;
              end if;
            end if;
            --I will exit from the loop when it is tier base ,
            --as the inner loop is done the calculation.
            if cur_ref_charge.range_type = 'Price Range' and
               cur_ref_charge.charge_type = 'Variable' then
              exit;
            end if;
          end loop;
          dbms_output.put_line('The typical value is  ' || vn_typical_val);
          dbms_output.put_line('The Assay Range Applicable for this typical is ' ||
                               vn_min_range || ' --' || vn_max_range);
          dbms_output.put_line('The Refine charge for this assay Range is  ' ||
                               vn_refine_charge);
        exception
          when others then
            vn_refine_charge := 0;
            vc_price_unit_id := null;
        end;
        --Find ing element quantity  form the concentrate.
        --After that the RC will multiply on that amount.
        --Refine charge is applyed on element wise
      
        /*if cc.ratio_name = '%' then
          vn_element_qty           := round(vn_item_qty * (cc.typical / 100),
                                            4);
          vc_qty_unit_id_numerator := pc_rc_qty_unit_id;
        else
          vn_converted_qty         := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                           pc_rc_qty_unit_id,
                                                                           cc.qty_unit_id_denominator,
                                                                           vn_item_qty);
          vn_element_qty           := vn_converted_qty * cc.typical;
          vc_qty_unit_id_numerator := cc.qty_unit_id_numerator;
        end if;*/
      end if;
    
      vn_pricable_qty      := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                   pc_rc_qty_unit_id,
                                                                   vc_rc_weight_unit_id,
                                                                   vn_item_qty);
      vn_tot_refine_charge := vn_pricable_qty * vn_refine_charge;
      dbms_output.put_line('The refine  quantity is ' || vn_element_qty);
    end loop;
    pn_total_rc_charge := vn_tot_refine_charge;
    pc_rc_cur_id       := vc_cur_id;
  
  exception
    when others then
      vn_tot_refine_charge := -1;
      vc_price_unit_id     := null;
    
  end;

  procedure sp_get_treatment_charge(pc_inter_cont_item_ref_no varchar2,
                                    pc_element_id             varchar2,
                                    pc_dbd_id                 varchar2,
                                    pn_dry_qty                number,
                                    pn_wet_qty                number,
                                    pc_qty_unit_id            varchar2,
                                    pn_cp_price               number,
                                    pc_cp_unit_id             varchar2,
                                    pn_total_tc_charge        out number,
                                    pc_tc_cur_id              out varchar2) is
    vn_treatment_charge    number;
    vn_total_treat_charge  number;
    vn_item_qty            number;
    vn_max_range           number;
    vn_min_range           number;
    vn_typical_val         number;
    vc_weight_type         varchar2(20);
    vn_contract_price      number;
    vn_base_tret_charge    number;
    vn_each_tier_tc_charge number;
    vn_range_gap           number;
    vc_price_unit_id       varchar2(10);
    vc_cur_id              varchar2(10);
    vn_converted_qty       number;
    vc_rc_weight_unit_id   varchar2(15);
  begin
    vn_contract_price   := pn_cp_price;
    vn_treatment_charge := 0;
    for cc in (select pci.item_qty,
                      pci.item_qty_unit_id,
                      pqca.element_id,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      aml.underlying_product_id,
                      pcpd.unit_of_measure,
                      pci.pcpq_id,
                      pci.pcdi_id
                 from pci_physical_contract_item  pci,
                      pcdi_pc_delivery_item       pcdi,
                      pcpd_pc_product_definition  pcpd,
                      pcpq_pc_product_quality     pcpq,
                      pqca_pq_chemical_attributes pqca,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      aml_attribute_master_list   aml,
                      qum_quantity_unit_master    qum,
                      rm_ratio_master             rm
                where pci.pcdi_id = pcdi.pcdi_id
                  and pci.pcpq_id = pcpq.pcpq_id
                  and pcpq.pcpd_id = pcpd.pcpd_id
                  and pci.dbd_id = pc_dbd_id
                  and pcdi.dbd_id = pc_dbd_id
                  and pcpd.dbd_id = pc_dbd_id
                  and pcpq.dbd_id = pc_dbd_id
                  and pcpq.assay_header_id = ash.ash_id
                  and pqca.asm_id = asm.asm_id
                  and asm.ash_id = ash.ash_id
                  and ash.assay_type = 'Contractual Assay'
                  and pci.internal_contract_item_ref_no =
                      pc_inter_cont_item_ref_no
                  and aml.attribute_id = pqca.element_id
                  and qum.qty_unit_id = pci.item_qty_unit_id
                  and pqca.element_id = pc_element_id
                  and rm.ratio_id = pqca.unit_of_measure)
    loop
      begin
        for cur_tret_charge in (select pcth.range_type,
                                       pcetc.treatment_charge,
                                       pcetc.treatment_charge_unit_id,
                                       pcetc.charge_type,
                                       pcetc.charge_basis,
                                       pcetc.weight_type,
                                       pcetc.position,
                                       pcetc.range_min_op,
                                       nvl(pcetc.range_min_value, 0) range_min_value,
                                       pcetc.range_max_op,
                                       pcetc.range_max_value,
                                       pcth.pcth_id,
                                       pum.price_unit_id,
                                       nvl(pcetc.esc_desc_unit_id,
                                           pum.cur_id) cur_id,
                                       pum.weight_unit_id
                                  from pcth_pc_treatment_header       pcth,
                                       ted_treatment_element_details  red,
                                       pcetc_pc_elem_treatment_charge pcetc,
                                       tqd_treatment_quality_details  tqd,
                                       dith_di_treatment_header       dith,
                                       ppu_product_price_units        ppu,
                                       pum_price_unit_master          pum
                                 where pcth.pcth_id = red.pcth_id
                                   and pcth.pcth_id = pcetc.pcth_id
                                   and pcth.pcth_id = tqd.pcth_id
                                   and pcth.pcth_id = dith.pcth_id
                                   and tqd.pcpq_id = cc.pcpq_id
                                   and dith.pcdi_id = cc.pcdi_id
                                   and pcth.dbd_id = pc_dbd_id
                                   and red.dbd_id = pc_dbd_id
                                   and pcetc.dbd_id = pc_dbd_id
                                   and tqd.dbd_id = pc_dbd_id
                                   and dith.dbd_id = pc_dbd_id
                                   and red.element_id = cc.element_id
                                   and pcetc.treatment_charge_unit_id =
                                       ppu.internal_price_unit_id
                                   and ppu.price_unit_id = pum.price_unit_id
                                   and pcetc.is_active = 'Y'
                                   and pcth.is_active = 'Y'
                                   and red.is_active = 'Y'
                                   and tqd.is_active = 'Y'
                                   and dith.is_active = 'Y')
        loop
          vc_cur_id            := cur_tret_charge.cur_id;
          vc_price_unit_id     := cur_tret_charge.price_unit_id;
          vc_rc_weight_unit_id := cur_tret_charge.weight_unit_id;
          vc_weight_type       := cur_tret_charge.weight_type;
          if cur_tret_charge.range_type = 'Price Range' then
            --if the CHARGE_TYPE is fixed then it will
            --behave as the slab as same as the assay range
            --No base concept is here
            -- Modified by Janna on 9th May 2012
            -- Compared Based on Each Type of Position along with the sign associated
            if cur_tret_charge.charge_type = 'Fixed' then
              if (cur_tret_charge.position = 'Range Begining' and
                 cur_tret_charge.range_max_op = '<=' and
                 cur_tret_charge.range_max_value <= vn_contract_price) or
                 (cur_tret_charge.position = 'Range Begining' and
                 cur_tret_charge.range_max_op = '<' and
                 cur_tret_charge.range_max_value < vn_contract_price) or
                 (cur_tret_charge.position = 'Range End' and
                 cur_tret_charge.range_min_op = '>=' and
                 vn_contract_price >= cur_tret_charge.range_min_value) or
                 (cur_tret_charge.position = 'Range End' and
                 cur_tret_charge.range_min_op = '>' and
                 vn_contract_price > cur_tret_charge.range_min_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>' and
                 cur_tret_charge.range_max_op = '<' and
                 vn_contract_price > cur_tret_charge.range_min_value and
                 vn_contract_price < cur_tret_charge.range_max_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>=' and
                 cur_tret_charge.range_max_op = '<' and
                 vn_contract_price >= cur_tret_charge.range_min_value and
                 vn_contract_price < cur_tret_charge.range_max_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>' and
                 cur_tret_charge.range_max_op = '<=' and
                 vn_contract_price > cur_tret_charge.range_min_value and
                 vn_contract_price <= cur_tret_charge.range_max_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>=' and
                 cur_tret_charge.range_max_op = '<=' and
                 vn_contract_price >= cur_tret_charge.range_min_value and
                 vn_contract_price <= cur_tret_charge.range_max_value) then
                vn_treatment_charge := cur_tret_charge.treatment_charge;
                dbms_output.put_line(vn_treatment_charge);
              end if;
            elsif cur_tret_charge.charge_type = 'Variable' then
              -- Take the base price and its min and max range
              begin
                select pcetc.range_min_value,
                       pcetc.range_max_value,
                       pcetc.treatment_charge
                  into vn_min_range,
                       vn_max_range,
                       vn_base_tret_charge
                  from pcetc_pc_elem_treatment_charge pcetc
                 where pcetc.pcth_id = cur_tret_charge.pcth_id
                   and pcetc.position = 'Base'
                   and pcetc.charge_type = 'Variable'
                   and pcetc.dbd_id = pc_dbd_id;
              exception
                when no_data_found then
                  vn_max_range        := 0;
                  vn_min_range        := 0;
                  vn_base_tret_charge := 0;
              end;
              --according to the contract price , the price tier 
              --will be find out, it may forward or back ward
              --Both vn_max_range and vn_min_range are same 
              --in case if base
              if vn_contract_price > vn_max_range then
                vn_treatment_charge := vn_base_tret_charge;
                --go forward for the price range
                for cur_forward_price in (select pcetc.range_min_value,
                                                 pcetc.range_min_op,
                                                 pcetc.range_max_value,
                                                 pcetc.range_max_op,
                                                 pcetc.esc_desc_value,
                                                 pcetc.esc_desc_unit_id,
                                                 pcetc.treatment_charge,
                                                 pcetc.treatment_charge_unit_id,
                                                 pcetc.charge_basis
                                            from pcetc_pc_elem_treatment_charge pcetc
                                           where pcetc.pcth_id =
                                                 cur_tret_charge.pcth_id
                                             and nvl(pcetc.range_min_value,
                                                     0) < vn_contract_price
                                             and nvl(pcetc.range_min_value,
                                                     0) >= vn_min_range
                                             and nvl(pcetc.position, 'a') <>
                                                 'Base'
                                             and pcetc.dbd_id = pc_dbd_id)
                loop
                  --for full Range
                  if cur_forward_price.range_max_value <= vn_contract_price then
                    vn_range_gap := cur_forward_price.range_max_value -
                                    cur_forward_price.range_min_value;
                  elsif nvl(cur_forward_price.range_max_value,
                            vn_contract_price + 1) > vn_contract_price then
                    --For the Half  Range 
                    vn_range_gap := vn_contract_price -
                                    cur_forward_price.range_min_value;
                  end if;
                  if cur_forward_price.charge_basis = 'absolute' then
                    vn_each_tier_tc_charge := ceil(vn_range_gap /
                                                   nvl(cur_forward_price.esc_desc_value,
                                                       1)) *
                                              cur_forward_price.treatment_charge;
                  elsif cur_forward_price.charge_basis =
                        'fractions Pro-Rata' then
                    vn_each_tier_tc_charge := (vn_range_gap /
                                              nvl(cur_forward_price.esc_desc_value,
                                                   1)) *
                                              cur_forward_price.treatment_charge;
                  end if;
                
                  vn_treatment_charge := vn_treatment_charge +
                                         vn_each_tier_tc_charge;
                end loop;
              elsif vn_contract_price < vn_min_range then
                vn_treatment_charge := vn_base_tret_charge;
                --go back ward for the price range
                for cur_backward_price in (select nvl(pcetc.range_min_value,
                                                      0) range_min_value,
                                                  pcetc.range_min_op,
                                                  pcetc.range_max_value,
                                                  pcetc.range_max_op,
                                                  pcetc.esc_desc_value,
                                                  pcetc.esc_desc_unit_id,
                                                  pcetc.treatment_charge,
                                                  pcetc.treatment_charge_unit_id,
                                                  pcetc.charge_basis
                                             from pcetc_pc_elem_treatment_charge pcetc
                                            where pcetc.pcth_id =
                                                  cur_tret_charge.pcth_id
                                              and nvl(pcetc.range_min_value,
                                                      0) < vn_contract_price
                                              and nvl(pcetc.range_min_value,
                                                      0) <= vn_min_range
                                              and nvl(pcetc.position, 'a') <>
                                                  'Base'
                                              and pcetc.dbd_id = pc_dbd_id)
                loop
                  --For the full Range 
                  if cur_backward_price.range_max_value <=
                     vn_contract_price then
                    vn_range_gap := cur_backward_price.range_max_value -
                                    cur_backward_price.range_min_value;
                  elsif cur_backward_price.range_max_value >
                        vn_contract_price then
                    --For the Half  Range 
                    vn_range_gap := vn_contract_price -
                                    cur_backward_price.range_min_value;
                  end if;
                  if cur_backward_price.charge_basis = 'absolute' then
                    vn_each_tier_tc_charge := ceil(vn_range_gap /
                                                   nvl(cur_backward_price.esc_desc_value,
                                                       1)) *
                                              cur_backward_price.treatment_charge;
                  elsif cur_backward_price.charge_basis =
                        'fractions Pro-Rata' then
                    vn_each_tier_tc_charge := (vn_range_gap /
                                              nvl(cur_backward_price.esc_desc_value,
                                                   1)) *
                                              cur_backward_price.treatment_charge;
                  end if;
                  vn_treatment_charge := vn_treatment_charge +
                                         vn_each_tier_tc_charge;
                end loop;
              elsif vn_contract_price = vn_min_range and
                    vn_contract_price = vn_max_range then
                vn_treatment_charge := vn_base_tret_charge;
                --take the base price only
              
              end if;
            end if;
          elsif cur_tret_charge.range_type = 'Assay Range' then
            --Make sure the range for the element is mentation properly.
            --Only Slab basics charge
            if (cur_tret_charge.position = 'Range Begining' and
               cur_tret_charge.range_max_op = '<=' and
               cur_tret_charge.range_max_value <= cc.typical) or
               (cur_tret_charge.position = 'Range Begining' and
               cur_tret_charge.range_max_op = '<' and
               cur_tret_charge.range_max_value < cc.typical) or
               (cur_tret_charge.position = 'Range End' and
               cur_tret_charge.range_min_op = '>=' and
               cc.typical >= cur_tret_charge.range_min_value) or
               (cur_tret_charge.position = 'Range End' and
               cur_tret_charge.range_min_op = '>' and
               cc.typical > cur_tret_charge.range_min_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>' and
               cur_tret_charge.range_max_op = '<' and
               cc.typical > cur_tret_charge.range_min_value and
               cc.typical < cur_tret_charge.range_max_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>=' and
               cur_tret_charge.range_max_op = '<' and
               cc.typical >= cur_tret_charge.range_min_value and
               cc.typical < cur_tret_charge.range_max_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>' and
               cur_tret_charge.range_max_op = '<=' and
               cc.typical > cur_tret_charge.range_min_value and
               cc.typical <= cur_tret_charge.range_max_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>=' and
               cur_tret_charge.range_max_op = '<=' and
               cc.typical >= cur_tret_charge.range_min_value and
               cc.typical <= cur_tret_charge.range_max_value) then
              vn_treatment_charge := cur_tret_charge.treatment_charge;
              vn_max_range        := cur_tret_charge.range_max_value;
              vn_min_range        := cur_tret_charge.range_min_value;
              vn_typical_val      := cc.typical;
              vc_weight_type      := cur_tret_charge.weight_type;
            end if;
          end if;
          --I will exit from the loop when it is tier base ,
          --as the inner loop is done the calculation.
          if cur_tret_charge.range_type = 'Price Range' and
             cur_tret_charge.charge_type = 'Variable' then
            exit;
          end if;
        end loop;
        dbms_output.put_line('The typical value is  ' || vn_typical_val);
        dbms_output.put_line('The Assay Range Applicable for this typical is ' ||
                             vn_min_range || ' --' || vn_max_range);
        dbms_output.put_line('The Treatment  charge for this assay Range is  ' ||
                             vn_treatment_charge);
        if vn_treatment_charge <> 0 then
          --Converting from wet to dry
          -- vn_item_qty := pn_qty;
        
          if vc_weight_type = 'Wet' then
            vn_item_qty := pn_wet_qty;
          else
            vn_item_qty := pn_dry_qty;
          end if;
        else
          vn_item_qty := 0;
        end if;
        --For TC , it is calculated on item Qty not on the element Qty
        vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                 pc_qty_unit_id,
                                                                 vc_rc_weight_unit_id,
                                                                 vn_item_qty);
        --Here no need of the typicla value as penalty is on item level   not on the element level                                           
        dbms_output.put_line('The Item  Quantity is   :-- ' ||
                             vn_converted_qty);
        vn_total_treat_charge := vn_converted_qty * vn_treatment_charge;
        dbms_output.put_line('the treatment  charge is ' ||
                             vn_total_treat_charge);
      exception
        when no_data_found then
          dbms_output.put_line(sqlerrm);
      end;
    end loop;
    pn_total_tc_charge := vn_total_treat_charge;
    pc_tc_cur_id       := vc_cur_id;
  exception
    when others then
      pn_total_tc_charge := -1;
      pc_tc_cur_id       := null;
  end;

  function fn_get_next_month_prompt_date(pc_promp_del_cal_id varchar2,
                                         pd_trade_date       date)
    return date is
    cursor cr_monthly_prompt_rule is
      select mpc.*
        from mpc_monthly_prompt_calendar mpc
       where mpc.prompt_delivery_calendar_id = pc_promp_del_cal_id;
  
    cursor cr_applicable_months is
      select mpcm.*
        from mpcm_monthly_prompt_cal_month mpcm,
             mnm_month_name_master         mnm
       where mpcm.prompt_delivery_calendar_id = pc_promp_del_cal_id
         and mpcm.applicable_month = mnm.month_name_id
       order by mnm.display_order;
  
    pc_pdc_period_type_id      varchar2(15);
    pc_month_prompt_start_date date;
    pc_equ_period_type         number;
    cr_monthly_prompt_rule_rec cr_monthly_prompt_rule%rowtype;
    pc_period_to               number;
    pc_start_date              date;
    pc_end_date                date;
    pc_month                   varchar2(15);
    pc_year                    number;
    pn_month_count             number(5);
    vc_prompt_date             date;
  begin
    pc_month_prompt_start_date := pd_trade_date;
    pn_month_count             := 0;
    begin
      select pm.period_type_id
        into pc_pdc_period_type_id
        from pm_period_master pm
       where pm.period_type_name = 'Month';
    end;
  
    open cr_monthly_prompt_rule;
  
    fetch cr_monthly_prompt_rule
      into cr_monthly_prompt_rule_rec;
  
    pc_period_to := cr_monthly_prompt_rule_rec.period_for; --no of forward months required
  
    begin
      select pm.equivalent_days
        into pc_equ_period_type
        from pm_period_master pm
       where pm.period_type_id = cr_monthly_prompt_rule_rec.period_type_id;
    end;
    pc_start_date := pc_month_prompt_start_date;
    pc_end_date   := pc_month_prompt_start_date +
                     (pc_period_to * pc_equ_period_type);
    for cr_applicable_months_rec in cr_applicable_months
    loop
      pc_month_prompt_start_date := to_date(('01-' ||
                                            cr_applicable_months_rec.applicable_month || '-' ||
                                            to_char(pc_start_date, 'YYYY')),
                                            'dd/mm/yyyy');
      --------------------
      dbms_output.put_line('pc_month_prompt_start_date ' ||
                           pc_month_prompt_start_date);
      if (pc_month_prompt_start_date >=
         to_date(('01-' || to_char(pc_start_date, 'Mon-YYYY')),
                  'dd/mm/yyyy') and
         pc_month_prompt_start_date <= pc_end_date) then
        pn_month_count := pn_month_count + 1;
        if pn_month_count = 1 then
          pc_month := to_char(pc_month_prompt_start_date, 'Mon');
          pc_year  := to_char(pc_month_prompt_start_date, 'YYYY');
        end if;
      end if;
      exit when pn_month_count > 1;
      dbms_output.put_line('pc_month pc_year ' || pc_month || '-' ||
                           pc_year);
      ---------------
    end loop;
    close cr_monthly_prompt_rule;
    if pc_month is not null and pc_year is not null then
      vc_prompt_date := to_date('01-' || pc_month || '-' || pc_year,
                                'dd-Mon-yyyy');
    end if;
    return vc_prompt_date;
  end;
  procedure sp_get_gmr_treatment_charge(pc_inter_gmr_ref_no varchar2,
                                        pc_inter_grd_ref_no varchar2,
                                        pc_element_id       varchar2,
                                        pc_dbd_id           varchar2,
                                        pn_cp_price         number,
                                        pc_cp_unit_id       varchar2,
                                        pn_total_tc_charge  out number,
                                        pc_tc_cur_id        out varchar2) is
    vn_treatment_charge    number;
    vn_total_treat_charge  number;
    vn_max_range           number;
    vn_min_range           number;
    vn_typical_val         number;
    vc_weight_type         varchar2(20);
    vn_contract_price      number;
    vn_base_tret_charge    number;
    vn_each_tier_tc_charge number;
    vn_range_gap           number;
    vc_price_unit_id       varchar2(10);
    vc_cur_id              varchar2(10);
    vn_converted_qty       number;
    vc_rc_weight_unit_id   varchar2(15);
    vn_total_gmr_tc_value  number := 0;
  begin
    vn_contract_price   := pn_cp_price;
    vn_treatment_charge := 0;
    for cc in (select gmr.internal_gmr_ref_no,
                      grd.internal_grd_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      grd.current_qty,
                      pkg_metals_general.fn_get_assay_dry_qty(grd.product_id,
                                                              ash.ash_id,
                                                              grd.current_qty,
                                                              grd.qty_unit_id) dry_weight,
                      grd.qty_unit_id net_weight_unit,
                      pci.pcpq_id
                 from gmr_goods_movement_record   gmr,
                      grd_goods_record_detail     grd,
                      sam_stock_assay_mapping     sam,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pqca_pq_chemical_attributes pqca,
                      rm_ratio_master             rm,
                      aml_attribute_master_list   aml,
                      pci_physical_contract_item  pci
               
                where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                  and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and pqca.element_id = pc_element_id
                  and gmr.dbd_id = pc_dbd_id
                  and grd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and grd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and grd.internal_grd_ref_no = pc_inter_grd_ref_no
               union all
               select gmr.internal_gmr_ref_no,
                      dgrd.internal_dgrd_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      asm.net_weight,
                      asm.dry_weight,
                      asm.net_weight_unit,
                      pci.pcpq_id
                 from gmr_goods_movement_record   gmr,
                      dgrd_delivered_grd          dgrd,
                      sam_stock_assay_mapping     sam,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pqca_pq_chemical_attributes pqca,
                      rm_ratio_master             rm,
                      aml_attribute_master_list   aml,
                      pci_physical_contract_item  pci
                where gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
                  and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and pqca.element_id = pc_element_id
                  and gmr.dbd_id = pc_dbd_id
                  and dgrd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and dgrd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and dgrd.internal_dgrd_ref_no = pc_inter_grd_ref_no)
    loop
      begin
        for cur_tret_charge in (select pcth.range_type,
                                       pcetc.treatment_charge,
                                       pcetc.treatment_charge_unit_id,
                                       pcetc.charge_type,
                                       pcetc.charge_basis,
                                       pcetc.weight_type,
                                       pcetc.position,
                                       pcetc.range_min_op,
                                       nvl(pcetc.range_min_value, 0) range_min_value,
                                       pcetc.range_max_op,
                                       pcetc.range_max_value,
                                       pcth.pcth_id,
                                       pum.price_unit_id,
                                       nvl(pcetc.esc_desc_unit_id,
                                           pum.cur_id) cur_id,
                                       pum.weight_unit_id
                                  from pcth_pc_treatment_header       pcth,
                                       ted_treatment_element_details  red,
                                       pcetc_pc_elem_treatment_charge pcetc,
                                       tqd_treatment_quality_details  tqd,
                                       ppu_product_price_units        ppu,
                                       pum_price_unit_master          pum,
                                       gth_gmr_treatment_header       gth
                                 where pcth.pcth_id = red.pcth_id
                                   and pcth.pcth_id = pcetc.pcth_id
                                   and pcth.pcth_id = tqd.pcth_id
                                   and tqd.pcpq_id = cc.pcpq_id
                                   and pcth.dbd_id = pc_dbd_id
                                   and red.dbd_id = pc_dbd_id
                                   and pcetc.dbd_id = pc_dbd_id
                                   and tqd.dbd_id = pc_dbd_id
                                   and red.element_id = cc.element_id
                                   and pcetc.treatment_charge_unit_id =
                                       ppu.internal_price_unit_id
                                   and ppu.price_unit_id = pum.price_unit_id
                                   and gth.internal_gmr_ref_no =
                                       pc_inter_gmr_ref_no
                                   and gth.pcth_id = pcth.pcth_id
                                   and gth.is_active = 'Y'
                                   and pcetc.is_active = 'Y'
                                   and pcth.is_active = 'Y'
                                   and red.is_active = 'Y'
                                   and tqd.is_active = 'Y')
        loop
          vc_cur_id            := cur_tret_charge.cur_id;
          vc_price_unit_id     := cur_tret_charge.price_unit_id;
          vc_rc_weight_unit_id := cur_tret_charge.weight_unit_id;
          vc_weight_type       := cur_tret_charge.weight_type;
          if cur_tret_charge.range_type = 'Price Range' then
            --if the CHARGE_TYPE is fixed then it will
            --behave as the slab as same as the assay range
            --No base concept is here
            if cur_tret_charge.charge_type = 'Fixed' then
              if (cur_tret_charge.position = 'Range Begining' and
                 cur_tret_charge.range_max_op = '<=' and
                 cur_tret_charge.range_max_value <= vn_contract_price) or
                 (cur_tret_charge.position = 'Range Begining' and
                 cur_tret_charge.range_max_op = '<' and
                 cur_tret_charge.range_max_value < vn_contract_price) or
                 (cur_tret_charge.position = 'Range End' and
                 cur_tret_charge.range_min_op = '>=' and
                 vn_contract_price >= cur_tret_charge.range_min_value) or
                 (cur_tret_charge.position = 'Range End' and
                 cur_tret_charge.range_min_op = '>' and
                 vn_contract_price > cur_tret_charge.range_min_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>' and
                 cur_tret_charge.range_max_op = '<' and
                 vn_contract_price > cur_tret_charge.range_min_value and
                 vn_contract_price < cur_tret_charge.range_max_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>=' and
                 cur_tret_charge.range_max_op = '<' and
                 vn_contract_price >= cur_tret_charge.range_min_value and
                 vn_contract_price < cur_tret_charge.range_max_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>' and
                 cur_tret_charge.range_max_op = '<=' and
                 vn_contract_price > cur_tret_charge.range_min_value and
                 vn_contract_price <= cur_tret_charge.range_max_value) or
                 (cur_tret_charge.position is null and
                 cur_tret_charge.range_min_op = '>=' and
                 cur_tret_charge.range_max_op = '<=' and
                 vn_contract_price >= cur_tret_charge.range_min_value and
                 vn_contract_price <= cur_tret_charge.range_max_value) then
                vn_treatment_charge := cur_tret_charge.treatment_charge;
                dbms_output.put_line(vn_treatment_charge);
              end if;
            elsif cur_tret_charge.charge_type = 'Variable' then
              --Take the base price and its min and max range
              begin
                select pcetc.range_min_value,
                       pcetc.range_max_value,
                       pcetc.treatment_charge
                  into vn_min_range,
                       vn_max_range,
                       vn_base_tret_charge
                  from pcetc_pc_elem_treatment_charge pcetc
                 where pcetc.pcth_id = cur_tret_charge.pcth_id
                   and pcetc.position = 'Base'
                   and pcetc.charge_type = 'Variable'
                   and pcetc.dbd_id = pc_dbd_id;
              exception
                when no_data_found then
                  vn_max_range        := 0;
                  vn_min_range        := 0;
                  vn_base_tret_charge := 0;
              end;
              --according to the contract price , the price tier
              --will be find out, it may forward or back ward
              --Both vn_max_range and vn_min_range are same
              --in case if base
              if vn_contract_price > vn_max_range then
                vn_treatment_charge := vn_base_tret_charge;
                --go forward for the price range
                for cur_forward_price in (select pcetc.range_min_value,
                                                 pcetc.range_min_op,
                                                 pcetc.range_max_value,
                                                 pcetc.range_max_op,
                                                 pcetc.esc_desc_value,
                                                 pcetc.esc_desc_unit_id,
                                                 pcetc.treatment_charge,
                                                 pcetc.treatment_charge_unit_id,
                                                 pcetc.charge_basis
                                            from pcetc_pc_elem_treatment_charge pcetc
                                           where pcetc.pcth_id =
                                                 cur_tret_charge.pcth_id
                                             and nvl(pcetc.range_min_value,
                                                     0) < vn_contract_price
                                             and nvl(pcetc.range_min_value,
                                                     0) >= vn_min_range
                                             and nvl(pcetc.position, 'a') <>
                                                 'Base'
                                             and pcetc.dbd_id = pc_dbd_id)
                loop
                  --for full Range
                  if cur_forward_price.range_max_value <= vn_contract_price then
                    vn_range_gap := cur_forward_price.range_max_value -
                                    cur_forward_price.range_min_value;
                  elsif nvl(cur_forward_price.range_max_value,
                            vn_contract_price + 1) > vn_contract_price then
                    --For the Half  Range
                    vn_range_gap := vn_contract_price -
                                    cur_forward_price.range_min_value;
                  end if;
                  if cur_forward_price.charge_basis = 'absolute' then
                    vn_each_tier_tc_charge := ceil(vn_range_gap /
                                                   nvl(cur_forward_price.esc_desc_value,
                                                       1)) *
                                              cur_forward_price.treatment_charge;
                  elsif cur_forward_price.charge_basis =
                        'fractions Pro-Rata' then
                    vn_each_tier_tc_charge := (vn_range_gap /
                                              nvl(cur_forward_price.esc_desc_value,
                                                   1)) *
                                              cur_forward_price.treatment_charge;
                  end if;
                
                  vn_treatment_charge := vn_treatment_charge +
                                         vn_each_tier_tc_charge;
                end loop;
              elsif vn_contract_price < vn_min_range then
                vn_treatment_charge := vn_base_tret_charge;
                --go back ward for the price range
                for cur_backward_price in (select nvl(pcetc.range_min_value,
                                                      0) range_min_value,
                                                  pcetc.range_min_op,
                                                  pcetc.range_max_value,
                                                  pcetc.range_max_op,
                                                  pcetc.esc_desc_value,
                                                  pcetc.esc_desc_unit_id,
                                                  pcetc.treatment_charge,
                                                  pcetc.treatment_charge_unit_id,
                                                  pcetc.charge_basis
                                             from pcetc_pc_elem_treatment_charge pcetc
                                            where pcetc.pcth_id =
                                                  cur_tret_charge.pcth_id
                                              and nvl(pcetc.range_min_value,
                                                      0) < vn_contract_price
                                              and nvl(pcetc.range_min_value,
                                                      0) <= vn_min_range
                                              and nvl(pcetc.position, 'a') <>
                                                  'Base'
                                              and pcetc.dbd_id = pc_dbd_id)
                loop
                  --For the full Range
                  if cur_backward_price.range_max_value <=
                     vn_contract_price then
                    vn_range_gap := cur_backward_price.range_max_value -
                                    cur_backward_price.range_min_value;
                  elsif cur_backward_price.range_max_value >
                        vn_contract_price then
                    --For the Half  Range
                    vn_range_gap := vn_contract_price -
                                    cur_backward_price.range_min_value;
                  end if;
                  if cur_backward_price.charge_basis = 'absolute' then
                    vn_each_tier_tc_charge := ceil(vn_range_gap /
                                                   nvl(cur_backward_price.esc_desc_value,
                                                       1)) *
                                              cur_backward_price.treatment_charge;
                  elsif cur_backward_price.charge_basis =
                        'fractions Pro-Rata' then
                    vn_each_tier_tc_charge := (vn_range_gap /
                                              nvl(cur_backward_price.esc_desc_value,
                                                   1)) *
                                              cur_backward_price.treatment_charge;
                  end if;
                  vn_treatment_charge := vn_treatment_charge +
                                         vn_each_tier_tc_charge;
                end loop;
              elsif vn_contract_price = vn_min_range and
                    vn_contract_price = vn_max_range then
                vn_treatment_charge := vn_base_tret_charge;
                --take the base price only
              
              end if;
            end if;
          elsif cur_tret_charge.range_type = 'Assay Range' then
            --Make sure the range for the element is mentation properly.
            --Only Slab basics charge
            if (cur_tret_charge.position = 'Range Begining' and
               cur_tret_charge.range_max_op = '<=' and
               cur_tret_charge.range_max_value <= cc.typical) or
               (cur_tret_charge.position = 'Range Begining' and
               cur_tret_charge.range_max_op = '<' and
               cur_tret_charge.range_max_value < cc.typical) or
               (cur_tret_charge.position = 'Range End' and
               cur_tret_charge.range_min_op = '>=' and
               cc.typical >= cur_tret_charge.range_min_value) or
               (cur_tret_charge.position = 'Range End' and
               cur_tret_charge.range_min_op = '>' and
               cc.typical > cur_tret_charge.range_min_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>' and
               cur_tret_charge.range_max_op = '<' and
               cc.typical > cur_tret_charge.range_min_value and
               cc.typical < cur_tret_charge.range_max_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>=' and
               cur_tret_charge.range_max_op = '<' and
               cc.typical >= cur_tret_charge.range_min_value and
               cc.typical < cur_tret_charge.range_max_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>' and
               cur_tret_charge.range_max_op = '<=' and
               cc.typical > cur_tret_charge.range_min_value and
               cc.typical <= cur_tret_charge.range_max_value) or
               (cur_tret_charge.position is null and
               cur_tret_charge.range_min_op = '>=' and
               cur_tret_charge.range_max_op = '<=' and
               cc.typical >= cur_tret_charge.range_min_value and
               cc.typical <= cur_tret_charge.range_max_value) then
              vn_treatment_charge := cur_tret_charge.treatment_charge;
              vn_max_range        := cur_tret_charge.range_max_value;
              vn_min_range        := cur_tret_charge.range_min_value;
              vn_typical_val      := cc.typical;
              vc_weight_type      := cur_tret_charge.weight_type;
            end if;
          end if;
          --I will exit from the loop when it is tier base ,
          --as the inner loop is done the calculation.
          if cur_tret_charge.range_type = 'Price Range' and
             cur_tret_charge.charge_type = 'Variable' then
            exit;
          end if;
        end loop;
        dbms_output.put_line('The typical value is  ' || vn_typical_val);
        dbms_output.put_line('The Assay Range Applicable for this typical is ' ||
                             vn_min_range || ' --' || vn_max_range);
        dbms_output.put_line('The Treatment  charge for this assay Range is  ' ||
                             vn_treatment_charge);
      
        --For TC , it is calculated on item Qty not on the element Qty
        vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                 cc.net_weight_unit,
                                                                 vc_rc_weight_unit_id,
                                                                 cc.dry_weight);
        --Here no need of the typicla value as penalty is on item level   not on the element level
        dbms_output.put_line('The Item  Quantity is   :-- ' ||
                             vn_converted_qty);
        vn_total_treat_charge := vn_converted_qty * vn_treatment_charge;
        dbms_output.put_line('the treatment  charge is ' ||
                             vn_total_treat_charge);
      exception
        when no_data_found then
          dbms_output.put_line(sqlerrm);
      end;
    
      vn_total_gmr_tc_value := vn_total_gmr_tc_value +
                               vn_total_treat_charge;
    end loop;
    pn_total_tc_charge := vn_total_gmr_tc_value;
    pc_tc_cur_id       := vc_cur_id;
  exception
    when others then
      pn_total_tc_charge := -1;
      pc_tc_cur_id       := null;
  end;

  procedure sp_get_gmr_refine_charge(pc_inter_gmr_ref_no varchar2,
                                     pc_inter_grd_ref_no varchar2,
                                     pc_element_id       varchar2,
                                     pc_dbd_id           varchar2,
                                     pn_cp_price         number,
                                     pc_cp_unit_id       varchar2,
                                     pn_total_rc_charge  out number,
                                     pc_rc_cur_id        out varchar2) is
    vn_refine_charge       number;
    vc_price_unit_id       varchar2(100);
    vn_tot_refine_charge   number;
    vn_max_range           number;
    vn_typical_val         number;
    vn_contract_price      number;
    vn_min_range           number;
    vn_base_refine_charge  number;
    vn_range_gap           number;
    vn_each_tier_rc_charge number;
    vc_cur_id              varchar2(10);
    vc_rc_weight_unit_id   varchar2(15);
    vn_pricable_qty        number;
    vc_include_ref_charge  char(1);
    vn_gmr_rc_charges      number := 0;
  begin
    vn_refine_charge  := 0;
    vn_contract_price := pn_cp_price;
    --Get the Charge Details 
    for cc in (select gmr.internal_gmr_ref_no,
                      grd.internal_grd_ref_no,
                      gmr.internal_contract_ref_no,
                      grd.internal_contract_item_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      grd.current_qty net_weight,
                      pkg_metals_general.fn_get_assay_dry_qty(grd.product_id,
                                                              ash.ash_id,
                                                              grd.current_qty,
                                                              grd.qty_unit_id) dry_weight,
                      grd.qty_unit_id net_weight_unit,
                      pci.pcpq_id,
                      (case
                        when rm.ratio_name = '%' then
                         (pqcapd.payable_percentage * asm.dry_weight) / 100
                        else
                         pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                              asm.net_weight_unit,
                                                              rm.qty_unit_id_denominator,
                                                              asm.dry_weight) *
                         pqcapd.payable_percentage
                      
                      end) payable_qty,
                      (case
                        when rm.ratio_name = '%' then
                         ash.net_weight_unit
                        else
                         rm.qty_unit_id_numerator
                      end) payable_qty_unit
               
                 from gmr_goods_movement_record      gmr,
                      grd_goods_record_detail        grd,
                      sam_stock_assay_mapping        sam,
                      ash_assay_header               ash,
                      asm_assay_sublot_mapping       asm,
                      pqca_pq_chemical_attributes    pqca,
                      pqcapd_prd_qlty_cattr_pay_dtls pqcapd,
                      rm_ratio_master                rm,
                      aml_attribute_master_list      aml,
                      pci_physical_contract_item     pci
               
                where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                  and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and pqca.pqca_id = pqcapd.pqca_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and pqca.element_id = pc_element_id
                  and gmr.dbd_id = pc_dbd_id
                  and grd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and grd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and grd.internal_grd_ref_no = pc_inter_grd_ref_no
               union
               select gmr.internal_gmr_ref_no,
                      dgrd.internal_dgrd_ref_no,
                      gmr.internal_contract_ref_no,
                      dgrd.internal_contract_item_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      asm.net_weight,
                      asm.dry_weight,
                      asm.net_weight_unit,
                      pci.pcpq_id,
                      (case
                        when rm.ratio_name = '%' then
                         (pqcapd.payable_percentage * asm.dry_weight) / 100
                        else
                         pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                              asm.net_weight_unit,
                                                              rm.qty_unit_id_denominator,
                                                              asm.dry_weight) *
                         pqcapd.payable_percentage
                      
                      end) payable_qty,
                      (case
                        when rm.ratio_name = '%' then
                         ash.net_weight_unit
                        else
                         rm.qty_unit_id_numerator
                      end) payable_qty_unit
                 from gmr_goods_movement_record      gmr,
                      dgrd_delivered_grd             dgrd,
                      sam_stock_assay_mapping        sam,
                      ash_assay_header               ash,
                      asm_assay_sublot_mapping       asm,
                      pqca_pq_chemical_attributes    pqca,
                      pqcapd_prd_qlty_cattr_pay_dtls pqcapd,
                      rm_ratio_master                rm,
                      aml_attribute_master_list      aml,
                      pci_physical_contract_item     pci
                where gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
                  and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and pqca.pqca_id = pqcapd.pqca_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and pqca.element_id = pc_element_id
                  and gmr.dbd_id = pc_dbd_id
                  and dgrd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and dgrd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and dgrd.internal_dgrd_ref_no = pc_inter_grd_ref_no)
    loop
      --for refine charge , the charge will applyed on
      --payable qty only.So deduct the moisture and other deductable item
      --from the item qty. 
      --include refine charge from the contract creation.
      --If Yes then take the conract include_ref_charge 
      --else go for the Charge Range
      begin
        select pcepc.include_ref_charges
          into vc_include_ref_charge
          from /*pcm_physical_contract_main     pcm,*/
               pcpch_pc_payble_content_header pcpch,
               pcepc_pc_elem_payable_content  pcepc
         where /*pcm.internal_contract_ref_no =
               pcpch.internal_contract_ref_no
           and */pcpch.pcpch_id = pcepc.pcpch_id
           /*and pcm.dbd_id = pc_dbd_id*/
           and pcpch.dbd_id = pc_dbd_id
           and pcepc.dbd_id = pc_dbd_id
           and pcpch.element_id = cc.element_id
           and pcpch.internal_contract_ref_no = cc.internal_contract_ref_no
           and (pcepc.range_min_value <= cc.typical or
               pcepc.position = 'Range Begining')
           and (pcepc.range_max_value > cc.typical or
               pcepc.position = 'Range End')
           /*and pcm.is_active = 'Y'*/
           and pcpch.is_active = 'Y'
           and pcepc.is_active = 'Y';
      exception
        when no_data_found then
          vc_include_ref_charge := 'N';
      end;
    
      if vc_include_ref_charge = 'Y' then
        begin
          --Take the price and its details 
          --, This price wil store when contract is created.
          for cur_ref_charge in (select pcpch.pcpch_id,
                                        pcepc.range_max_op,
                                        pcepc.range_max_value,
                                        pcepc.range_min_op,
                                        pcepc.range_min_value,
                                        pcepc.position,
                                        pcepc.refining_charge_value,
                                        pcepc.refining_charge_unit_id,
                                        pum.cur_id,
                                        pum.price_unit_id,
                                        pum.weight_unit_id
                                   from /*pcm_physical_contract_main     pcm,
                                        */pcdi_pc_delivery_item          pcdi,
                                        pci_physical_contract_item     pci,
                                        pcpch_pc_payble_content_header pcpch,
                                        pcepc_pc_elem_payable_content  pcepc,
                                        ppu_product_price_units        ppu,
                                        pum_price_unit_master          pum,
                                        gmr_goods_movement_record      gmr,
                                        grh_gmr_refining_header        grh
                                  where pcpch.internal_contract_ref_no =
                                        pcdi.internal_contract_ref_no
                                    and pcdi.pcdi_id = pci.pcdi_id
                                    /*and pcm.internal_contract_ref_no =
                                        pcpch.internal_contract_ref_no*/
                                    and pcpch.element_id = cc.element_id
                                    and pcpch.pcpch_id = pcepc.pcpch_id
                                    and pcepc.include_ref_charges = 'Y'
                                    and ppu.internal_price_unit_id =
                                        pcepc.refining_charge_unit_id
                                    and ppu.price_unit_id =
                                        pum.price_unit_id
                                    and pci.internal_contract_item_ref_no =
                                        cc.internal_contract_item_ref_no
                                    and gmr.internal_contract_ref_no =
                                        cc.internal_contract_ref_no
                                    and gmr.internal_gmr_ref_no =
                                        grh.internal_gmr_ref_no
                                    and pci.dbd_id = pc_dbd_id
                                    and pcdi.dbd_id = pc_dbd_id
                                    /*and pcm.dbd_id = pc_dbd_id
                                    */and pcpch.dbd_id = pc_dbd_id
                                    and pcepc.dbd_id = pc_dbd_id
                                    and pci.is_active = 'Y'
                                    /*and pcm.is_active = 'Y'*/
                                    and pcdi.is_active = 'Y'
                                    and pcpch.is_active = 'Y'
                                    and pcepc.is_active = 'Y')
          loop
            vc_rc_weight_unit_id := cur_ref_charge.weight_unit_id;
            vc_cur_id            := cur_ref_charge.cur_id;
            vc_price_unit_id     := cur_ref_charge.price_unit_id;
          
            if (cur_ref_charge.position = 'Range Begining' and
               cur_ref_charge.range_max_op = '<=' and
               cur_ref_charge.range_max_value <= cc.typical) or
               (cur_ref_charge.position = 'Range Begining' and
               cur_ref_charge.range_max_op = '<' and
               cur_ref_charge.range_max_value < cc.typical) or
               (cur_ref_charge.position = 'Range End' and
               cur_ref_charge.range_min_op = '>=' and
               cc.typical >= cur_ref_charge.range_min_value) or
               (cur_ref_charge.position = 'Range End' and
               cur_ref_charge.range_min_op = '>' and
               cc.typical > cur_ref_charge.range_min_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>' and
               cur_ref_charge.range_max_op = '<' and
               cc.typical > cur_ref_charge.range_min_value and
               cc.typical < cur_ref_charge.range_max_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>=' and
               cur_ref_charge.range_max_op = '<' and
               cc.typical >= cur_ref_charge.range_min_value and
               cc.typical < cur_ref_charge.range_max_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>' and
               cur_ref_charge.range_max_op = '<=' and
               cc.typical > cur_ref_charge.range_min_value and
               cc.typical <= cur_ref_charge.range_max_value) or
               (cur_ref_charge.position is null and
               cur_ref_charge.range_min_op = '>=' and
               cur_ref_charge.range_max_op = '<=' and
               cc.typical >= cur_ref_charge.range_min_value and
               cc.typical <= cur_ref_charge.range_max_value) then
              vn_refine_charge := cur_ref_charge.refining_charge_value;
            end if;
          end loop;
        exception
          when others then
            vn_refine_charge := 0;
            vc_price_unit_id := null;
        end;
      
      else
        begin
          for cur_ref_charge in (select pcrh.range_type,
                                        pcerc.refining_charge,
                                        pcerc.refining_charge_unit_id,
                                        pcerc.charge_type,
                                        pcerc.charge_basis,
                                        pcerc.position,
                                        pcerc.range_min_op,
                                        pcerc.range_min_value,
                                        pcerc.range_max_op,
                                        pcerc.range_max_value,
                                        pcrh.pcrh_id,
                                        nvl(pcerc.esc_desc_unit_id,
                                            pum.cur_id) cur_id,
                                        pum.price_unit_id,
                                        pum.weight_unit_id
                                   from pcrh_pc_refining_header       pcrh,
                                        red_refining_element_details  red,
                                        pcerc_pc_elem_refining_charge pcerc,
                                        rqd_refining_quality_details  rqd,
                                        ppu_product_price_units       ppu,
                                        pum_price_unit_master         pum,
                                        grh_gmr_refining_header       grh
                                  where pcrh.pcrh_id = red.pcrh_id
                                    and pcrh.pcrh_id = pcerc.pcrh_id
                                    and pcrh.pcrh_id = rqd.pcrh_id
                                    and grh.internal_gmr_ref_no =
                                        pc_inter_gmr_ref_no
                                    and grh.pcrh_id = pcrh.pcrh_id
                                    and rqd.pcpq_id = cc.pcpq_id
                                    and pcrh.dbd_id = pc_dbd_id
                                    and red.dbd_id = pc_dbd_id
                                    and pcerc.dbd_id = pc_dbd_id
                                    and rqd.dbd_id = pc_dbd_id
                                    and red.element_id = pc_element_id
                                    and ppu.internal_price_unit_id =
                                        pcerc.refining_charge_unit_id
                                    and ppu.price_unit_id =
                                        pum.price_unit_id
                                    and pcerc.is_active = 'Y'
                                    and pcrh.is_active = 'Y'
                                    and red.is_active = 'Y'
                                    and rqd.is_active = 'Y'
                                    and grh.is_active = 'Y'
                                  order by range_min_value)
          loop
            vc_rc_weight_unit_id := cur_ref_charge.weight_unit_id;
            vc_cur_id            := cur_ref_charge.cur_id;
            vc_price_unit_id     := cur_ref_charge.price_unit_id;
            if cur_ref_charge.range_type = 'Price Range' then
              --if the CHARGE_TYPE is fixed then it will
              --behave as the slab as same as the assay range
              --No base concept is here
              if cur_ref_charge.charge_type = 'Fixed' then
                if (cur_ref_charge.position = 'Range Begining' and
                   cur_ref_charge.range_max_op = '<=' and
                   cur_ref_charge.range_max_value <= vn_contract_price) or
                   (cur_ref_charge.position = 'Range Begining' and
                   cur_ref_charge.range_max_op = '<' and
                   cur_ref_charge.range_max_value < vn_contract_price) or
                   (cur_ref_charge.position = 'Range End' and
                   cur_ref_charge.range_min_op = '>=' and
                   vn_contract_price >= cur_ref_charge.range_min_value) or
                   (cur_ref_charge.position = 'Range End' and
                   cur_ref_charge.range_min_op = '>' and
                   vn_contract_price > cur_ref_charge.range_min_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>' and
                   cur_ref_charge.range_max_op = '<' and
                   vn_contract_price > cur_ref_charge.range_min_value and
                   vn_contract_price < cur_ref_charge.range_max_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>=' and
                   cur_ref_charge.range_max_op = '<' and
                   vn_contract_price >= cur_ref_charge.range_min_value and
                   vn_contract_price < cur_ref_charge.range_max_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>' and
                   cur_ref_charge.range_max_op = '<=' and
                   vn_contract_price > cur_ref_charge.range_min_value and
                   vn_contract_price <= cur_ref_charge.range_max_value) or
                   (cur_ref_charge.position is null and
                   cur_ref_charge.range_min_op = '>=' and
                   cur_ref_charge.range_max_op = '<=' and
                   vn_contract_price >= cur_ref_charge.range_min_value and
                   vn_contract_price <= cur_ref_charge.range_max_value) then
                  vn_refine_charge := cur_ref_charge.refining_charge;
                  dbms_output.put_line(vn_refine_charge);
                end if;
              elsif cur_ref_charge.charge_type = 'Variable' then
                --Take the base price and its min and max range
                begin
                  select pcerc.range_min_value,
                         pcerc.range_max_value,
                         pcerc.refining_charge
                    into vn_min_range,
                         vn_max_range,
                         vn_base_refine_charge
                    from pcerc_pc_elem_refining_charge pcerc
                   where pcerc.pcrh_id = cur_ref_charge.pcrh_id
                     and pcerc.position = 'Base'
                     and pcerc.charge_type = 'Variable'
                     and pcerc.dbd_id = pc_dbd_id;
                exception
                  when no_data_found then
                    vn_min_range          := 0;
                    vn_max_range          := 0;
                    vn_base_refine_charge := 0;
                end;
                --according to the contract price , the price tier
                --will be find out, it may forward or back ward
                --Both vn_max_range and vn_min_range are same in case if base
                if vn_contract_price > vn_max_range then
                  --go forward for the price range
                  vn_refine_charge := vn_base_refine_charge;
                  for cur_forward_price in (select pcerc.range_min_value,
                                                   pcerc.range_min_op,
                                                   pcerc.range_max_value,
                                                   pcerc.range_max_op,
                                                   pcerc.esc_desc_value,
                                                   pcerc.esc_desc_unit_id,
                                                   pcerc.refining_charge,
                                                   pcerc.refining_charge_unit_id,
                                                   pcerc.charge_basis
                                              from pcerc_pc_elem_refining_charge pcerc
                                             where pcerc.pcrh_id =
                                                   cur_ref_charge.pcrh_id
                                               and nvl(pcerc.range_min_value,
                                                       0) <
                                                   vn_contract_price
                                               and nvl(pcerc.range_min_value,
                                                       0) >= vn_min_range
                                               and nvl(pcerc.position, 'a') <>
                                                   'Base'
                                               and pcerc.dbd_id = pc_dbd_id)
                  loop
                    --for full Range
                    if cur_forward_price.range_max_value <=
                       vn_contract_price then
                      vn_range_gap := cur_forward_price.range_max_value -
                                      cur_forward_price.range_min_value;
                    elsif nvl(cur_forward_price.range_max_value,
                              vn_contract_price + 1) > vn_contract_price then
                      --For the Half  Range
                      vn_range_gap := vn_contract_price -
                                      cur_forward_price.range_min_value;
                    end if;
                  
                    if cur_forward_price.charge_basis = 'absolute' then
                      vn_each_tier_rc_charge := ceil(vn_range_gap /
                                                     nvl(cur_forward_price.esc_desc_value,
                                                         1)) *
                                                cur_forward_price.refining_charge;
                    elsif cur_forward_price.charge_basis =
                          'fractions Pro-Rata' then
                      vn_each_tier_rc_charge := (vn_range_gap /
                                                nvl(cur_forward_price.esc_desc_value,
                                                     1)) *
                                                cur_forward_price.refining_charge;
                    end if;
                    vn_refine_charge := vn_refine_charge +
                                        vn_each_tier_rc_charge;
                  
                  end loop;
                elsif vn_contract_price < vn_min_range then
                  --go back ward for the price range
                  vn_refine_charge := vn_base_refine_charge;
                  for cur_backward_price in (select nvl(pcerc.range_min_value,
                                                        0) range_min_value,
                                                    pcerc.range_min_op,
                                                    pcerc.range_max_value,
                                                    pcerc.range_max_op,
                                                    pcerc.esc_desc_value,
                                                    pcerc.esc_desc_unit_id,
                                                    pcerc.refining_charge,
                                                    pcerc.refining_charge_unit_id,
                                                    pcerc.charge_basis
                                               from pcerc_pc_elem_refining_charge pcerc
                                              where pcerc.pcrh_id =
                                                    cur_ref_charge.pcrh_id
                                                and nvl(pcerc.range_min_value,
                                                        0) <
                                                    vn_contract_price
                                                and nvl(pcerc.range_min_value,
                                                        0) <= vn_min_range
                                                and nvl(pcerc.position, 'a') <>
                                                    'Base'
                                                and pcerc.dbd_id = pc_dbd_id)
                  loop
                    --For the full Range
                    if cur_backward_price.range_max_value <=
                       vn_contract_price then
                      vn_range_gap := cur_backward_price.range_max_value -
                                      cur_backward_price.range_min_value;
                    elsif cur_backward_price.range_max_value >
                          vn_contract_price then
                      --For the Half  Range
                      vn_range_gap := vn_contract_price -
                                      cur_backward_price.range_min_value;
                    end if;
                    if cur_backward_price.charge_basis = 'absolute' then
                      vn_each_tier_rc_charge := ceil(vn_range_gap /
                                                     nvl(cur_backward_price.esc_desc_value,
                                                         1)) *
                                                cur_backward_price.refining_charge;
                    elsif cur_backward_price.charge_basis =
                          'fractions Pro-Rata' then
                      vn_each_tier_rc_charge := (vn_range_gap /
                                                nvl(cur_backward_price.esc_desc_value,
                                                     1)) *
                                                cur_backward_price.refining_charge;
                    end if;
                    vn_refine_charge := vn_refine_charge +
                                        vn_each_tier_rc_charge;
                  end loop;
                elsif vn_contract_price = vn_min_range and
                      vn_contract_price = vn_max_range then
                  vn_refine_charge := vn_base_refine_charge;
                  --take the base price only
                end if;
              end if;
            elsif cur_ref_charge.range_type = 'Assay Range' then
              --Make sure the range for the element is mentation properly.
              if (cur_ref_charge.position = 'Range Begining' and
                 cur_ref_charge.range_max_op = '<=' and
                 cur_ref_charge.range_max_value <= cc.typical) or
                 (cur_ref_charge.position = 'Range Begining' and
                 cur_ref_charge.range_max_op = '<' and
                 cur_ref_charge.range_max_value < cc.typical) or
                 (cur_ref_charge.position = 'Range End' and
                 cur_ref_charge.range_min_op = '>=' and
                 cc.typical >= cur_ref_charge.range_min_value) or
                 (cur_ref_charge.position = 'Range End' and
                 cur_ref_charge.range_min_op = '>' and
                 cc.typical > cur_ref_charge.range_min_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>' and
                 cur_ref_charge.range_max_op = '<' and
                 cc.typical > cur_ref_charge.range_min_value and
                 cc.typical < cur_ref_charge.range_max_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>=' and
                 cur_ref_charge.range_max_op = '<' and
                 cc.typical >= cur_ref_charge.range_min_value and
                 cc.typical < cur_ref_charge.range_max_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>' and
                 cur_ref_charge.range_max_op = '<=' and
                 cc.typical > cur_ref_charge.range_min_value and
                 cc.typical <= cur_ref_charge.range_max_value) or
                 (cur_ref_charge.position is null and
                 cur_ref_charge.range_min_op = '>=' and
                 cur_ref_charge.range_max_op = '<=' and
                 cc.typical >= cur_ref_charge.range_min_value and
                 cc.typical <= cur_ref_charge.range_max_value) then
                vn_refine_charge := cur_ref_charge.refining_charge;
                vn_max_range     := cur_ref_charge.range_max_value;
                vn_min_range     := cur_ref_charge.range_min_value;
                vn_typical_val   := cc.typical;
              end if;
            end if;
            --I will exit from the loop when it is tier base ,
            --as the inner loop is done the calculation.
            if cur_ref_charge.range_type = 'Price Range' and
               cur_ref_charge.charge_type = 'Variable' then
              exit;
            end if;
          end loop;
          dbms_output.put_line('The typical value is  ' || vn_typical_val);
          dbms_output.put_line('The Assay Range Applicable for this typical is ' ||
                               vn_min_range || ' --' || vn_max_range);
          dbms_output.put_line('The Refine charge for this assay Range is  ' ||
                               vn_refine_charge);
        exception
          when others then
            vn_refine_charge := 0;
            vc_price_unit_id := null;
        end;
      end if;
    
      vn_pricable_qty      := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                   cc.payable_qty_unit,
                                                                   vc_rc_weight_unit_id,
                                                                   cc.payable_qty);
      vn_tot_refine_charge := vn_pricable_qty * vn_refine_charge;
      dbms_output.put_line('The refine  quantity is ' || vn_pricable_qty);
      vn_gmr_rc_charges := vn_gmr_rc_charges + vn_tot_refine_charge;
      dbms_output.put_line('The refine  Amount is ' ||
                           vn_tot_refine_charge);
    end loop;
    pn_total_rc_charge := vn_gmr_rc_charges;
    pc_rc_cur_id       := vc_cur_id;
  
  exception
    when others then
      vn_tot_refine_charge := -1;
      vc_price_unit_id     := null;
    
  end;
  procedure sp_get_gmr_penalty_charge(pc_inter_gmr_ref_no varchar2,
                                      pc_inter_grd_ref_no varchar2,
                                      pc_dbd_id           varchar2,
                                      pc_element_id       varchar2,
                                      pn_total_pc_charge  out number,
                                      pc_pc_cur_id        out varchar2) is
    vn_penalty_charge      number;
    vc_penalty_weight_type varchar2(20);
    vn_max_range           number;
    vn_min_range           number;
    vn_typical_val         number := 0;
    vn_converted_qty       number;
    vn_element_pc_charge   number;
    vn_range_gap           number;
    vn_tier_penalty        number;
    vc_price_unit_id       varchar2(15);
    vc_cur_id              varchar2(15);
  begin
    vn_penalty_charge    := 0;
    vn_element_pc_charge := 0;
    vn_tier_penalty      := 0;
    pn_total_pc_charge   := 0;
    --Take all the Elements associated with the conttract.
    for cc in (select gmr.internal_gmr_ref_no,
                      grd.internal_grd_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      grd.current_qty,
                      pkg_metals_general.fn_get_assay_dry_qty(grd.product_id,
                                                              ash.ash_id,
                                                              grd.current_qty,
                                                              grd.qty_unit_id) dry_weight,
                      grd.qty_unit_id net_weight_unit,
                      pci.pcpq_id
                 from gmr_goods_movement_record   gmr,
                      grd_goods_record_detail     grd,
                      sam_stock_assay_mapping     sam,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pqca_pq_chemical_attributes pqca,
                      rm_ratio_master             rm,
                      aml_attribute_master_list   aml,
                      pci_physical_contract_item  pci
               
                where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                  and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and nvl(pqca.is_elem_for_pricing, 'N') = 'N'
                  and pqca.element_id = pc_element_id
                  and gmr.dbd_id = pc_dbd_id
                  and grd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and grd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and grd.internal_grd_ref_no = pc_inter_grd_ref_no)
    loop
      vn_element_pc_charge := 0;
      vn_tier_penalty      := 0;
      --Passing each element which is getting  from the outer loop.
      --and checking ,is it non payable or not.
      for cur_pc_charge in (select pcap.penalty_charge_type,
                                   pcap.penalty_basis,
                                   pcap.penalty_amount,
                                   pcap.range_min_value,
                                   pcap.range_max_value,
                                   pcap.range_min_op,
                                   pcap.range_max_op,
                                   pcap.position,
                                   pcap.charge_basis,
                                   pcap.penalty_weight_type,
                                   pcap.pcaph_id,
                                   pcaph.slab_tier,
                                   pum.price_unit_id,
                                   pum.cur_id,
                                   pum.weight_unit_id
                              from pcaph_pc_attr_penalty_header  pcaph,
                                   pcap_pc_attribute_penalty     pcap,
                                   pqd_penalty_quality_details   pqd,
                                   pad_penalty_attribute_details pad,
                                   gph_gmr_penalty_header        gph,
                                   ppu_product_price_units       ppu,
                                   pum_price_unit_master         pum
                             where pcaph.pcaph_id = pcap.pcaph_id
                               and pcaph.pcaph_id = pqd.pcaph_id
                               and pcaph.pcaph_id = pad.pcaph_id
                               and pcaph.pcaph_id = gph.pcaph_id
                               and pqd.pcpq_id = cc.pcpq_id
                               and pcaph.dbd_id = pc_dbd_id
                               and pcap.dbd_id = pc_dbd_id
                               and pqd.dbd_id = pc_dbd_id
                               and pad.dbd_id = pc_dbd_id
                               and pcaph.is_active = 'Y'
                               and pcap.is_active = 'Y'
                               and pqd.is_active = 'Y'
                               and pad.is_active = 'Y'
                               and gph.is_active = 'Y'
                               and gph.internal_gmr_ref_no =
                                   pc_inter_gmr_ref_no
                               and pad.element_id = cc.element_id
                               and pcap.penalty_unit_id =
                                   ppu.internal_price_unit_id
                               and ppu.price_unit_id = pum.price_unit_id
                               and (pcap.range_max_value > cc.typical or
                                   pcap.position = 'Range End')
                               and (pcap.range_min_value <= cc.typical or
                                   pcap.position = 'Range Begining'))
      loop
        vc_price_unit_id     := cur_pc_charge.price_unit_id;
        vc_cur_id            := cur_pc_charge.cur_id;
        vn_element_pc_charge := 0;
        --check the penalty charge type
        if cur_pc_charge.penalty_charge_type = 'Fixed' then
          vc_penalty_weight_type := cur_pc_charge.penalty_weight_type;
          --Find the PC charge which will fall in the appropriate range.
          --as according to the typical value   
          if (cur_pc_charge.position = 'Range Begining' and
             cur_pc_charge.range_max_op = '<=' and
             cur_pc_charge.range_max_value <= cc.typical) or
             (cur_pc_charge.position = 'Range Begining' and
             cur_pc_charge.range_max_op = '<' and
             cur_pc_charge.range_max_value < cc.typical) or
             (cur_pc_charge.position = 'Range End' and
             cur_pc_charge.range_min_op = '>=' and
             cc.typical >= cur_pc_charge.range_min_value) or
             (cur_pc_charge.position = 'Range End' and
             cur_pc_charge.range_min_op = '>' and
             cc.typical > cur_pc_charge.range_min_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>' and
             cur_pc_charge.range_max_op = '<' and
             cc.typical > cur_pc_charge.range_min_value and
             cc.typical < cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>=' and
             cur_pc_charge.range_max_op = '<' and
             cc.typical >= cur_pc_charge.range_min_value and
             cc.typical < cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>' and
             cur_pc_charge.range_max_op = '<=' and
             cc.typical > cur_pc_charge.range_min_value and
             cc.typical <= cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>=' and
             cur_pc_charge.range_max_op = '<=' and
             cc.typical >= cur_pc_charge.range_min_value and
             cc.typical <= cur_pc_charge.range_max_value) then
          
            vn_penalty_charge := cur_pc_charge.penalty_amount;
            vn_max_range      := cur_pc_charge.range_max_value;
            vn_min_range      := cur_pc_charge.range_min_value;
            vn_typical_val    := cc.typical;
          
            vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                     cc.net_weight_unit,
                                                                     cur_pc_charge.weight_unit_id,
                                                                     cc.dry_weight);
          
            vn_element_pc_charge := vn_penalty_charge * vn_converted_qty;
          end if;
        elsif cur_pc_charge.penalty_charge_type = 'Variable' then
          if cur_pc_charge.penalty_basis = 'Quantity' and
             cur_pc_charge.slab_tier = 'Tier' then
            vn_typical_val := cc.typical;
            --find the range where the typical falls in 
            if (cur_pc_charge.position = 'Range Begining' and
               cur_pc_charge.range_max_op = '<=' and
               cur_pc_charge.range_max_value <= vn_typical_val) or
               (cur_pc_charge.position = 'Range Begining' and
               cur_pc_charge.range_max_op = '<' and
               cur_pc_charge.range_max_value < vn_typical_val) or
               (cur_pc_charge.position = 'Range End' and
               cur_pc_charge.range_min_op = '>=' and
               vn_typical_val >= cur_pc_charge.range_min_value) or
               (cur_pc_charge.position = 'Range End' and
               cur_pc_charge.range_min_op = '>' and
               vn_typical_val > cur_pc_charge.range_min_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>' and
               cur_pc_charge.range_max_op = '<' and
               vn_typical_val > cur_pc_charge.range_min_value and
               vn_typical_val < cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>=' and
               cur_pc_charge.range_max_op = '<' and
               vn_typical_val >= cur_pc_charge.range_min_value and
               vn_typical_val < cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>' and
               cur_pc_charge.range_max_op = '<=' and
               vn_typical_val > cur_pc_charge.range_min_value and
               vn_typical_val <= cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>=' and
               cur_pc_charge.range_max_op = '<=' and
               vn_typical_val >= cur_pc_charge.range_min_value and
               vn_typical_val <= cur_pc_charge.range_max_value) then
              --Finding all the  assay range form the start range to  last range 
              --for the different Tier basics ,assording to the typicla value
              for cur_range in (select nvl(pcap.range_min_value, 0) min_range,
                                       pcap.range_max_value max_range,
                                       pcap.penalty_amount,
                                       pcap.per_increase_value
                                  from pcap_pc_attribute_penalty pcap
                                 where nvl(pcap.range_min_value, 0) <=
                                       vn_typical_val
                                   and pcap.pcaph_id =
                                       cur_pc_charge.pcaph_id
                                   and pcap.dbd_id = pc_dbd_id)
              loop
                --for half range
                if vn_typical_val > 0 then
                  if cur_range.min_range < vn_typical_val and
                     nvl(cur_range.max_range, vn_typical_val + 1) >
                     vn_typical_val then
                    vn_penalty_charge := cur_range.penalty_amount;
                    vn_range_gap      := vn_typical_val -
                                         cur_range.min_range;
                    --for full range                 
                  elsif cur_range.min_range <= vn_typical_val and
                        cur_range.max_range <= vn_typical_val then
                    vn_penalty_charge := cur_range.penalty_amount;
                    vn_range_gap      := cur_range.max_range -
                                         cur_range.min_range;
                  end if;
                end if;
                if cur_pc_charge.charge_basis = 'absolute' then
                  vn_penalty_charge := ceil(vn_range_gap /
                                            cur_range.per_increase_value) *
                                       vn_penalty_charge;
                elsif cur_pc_charge.charge_basis = 'fractions Pro-Rata' then
                  vn_penalty_charge := (vn_range_gap /
                                       cur_range.per_increase_value) *
                                       vn_penalty_charge;
                end if;
                vn_tier_penalty := vn_tier_penalty + vn_penalty_charge;
              
              end loop;
            end if;
          elsif cur_pc_charge.penalty_basis = 'Payable Content' then
            --Take the payable content qty from the table and 
            --find the penalty But for the time being this feature is not applied
            null;
          end if;
        
          --Penalty Charge is applyed on the item wise not on the element  wise
          --This item qty may be dry or wet
          vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                   cc.net_weight_unit,
                                                                   cur_pc_charge.weight_unit_id,
                                                                   cc.dry_weight);
          --Here no need of the typical value as penalty is on item level  
          vn_element_pc_charge := vn_tier_penalty * vn_converted_qty;
        end if;
      end loop;
      pn_total_pc_charge := pn_total_pc_charge + vn_element_pc_charge;
    end loop;
  
    pc_pc_cur_id := vc_cur_id;
  exception
    when others then
      pn_total_pc_charge := -1;
      pc_pc_cur_id       := null;
  end;
  procedure sp_get_gmr_penalty_charge_new(pc_inter_gmr_ref_no varchar2,
                                          pc_inter_grd_ref_no varchar2,
                                          pc_dbd_id           varchar2,
                                          pn_total_pc_charge  out number,
                                          pc_pc_cur_id        out varchar2) is
    vn_penalty_charge      number;
    vc_penalty_weight_type varchar2(20);
    vn_max_range           number;
    vn_min_range           number;
    vn_typical_val         number := 0;
    vn_converted_qty       number;
    vn_element_pc_charge   number;
    vn_range_gap           number;
    vn_tier_penalty        number;
    vc_price_unit_id       varchar2(15);
    vc_cur_id              varchar2(15);
  begin
    vn_penalty_charge    := 0;
    vn_element_pc_charge := 0;
    vn_tier_penalty      := 0;
    pn_total_pc_charge   := 0;
    --Take all the Elements associated with the conttract.
    for cc in (select gmr.internal_gmr_ref_no,
                      grd.internal_grd_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      grd.current_qty net_weight,
                      pkg_metals_general.fn_get_assay_dry_qty(grd.product_id,
                                                              ash.ash_id,
                                                              grd.current_qty,
                                                              grd.qty_unit_id) dry_weight,
                      grd.qty_unit_id net_weight_unit,
                      pci.pcpq_id
                 from gmr_goods_movement_record   gmr,
                      grd_goods_record_detail     grd,
                      sam_stock_assay_mapping     sam,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pqca_pq_chemical_attributes pqca,
                      rm_ratio_master             rm,
                      aml_attribute_master_list   aml,
                      pci_physical_contract_item  pci
               
                where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                  and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and nvl(pqca.is_elem_for_pricing, 'N') = 'N'
                  and gmr.dbd_id = pc_dbd_id
                  and grd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and grd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and grd.internal_grd_ref_no = pc_inter_grd_ref_no
               union
               select gmr.internal_gmr_ref_no,
                      dgrd.internal_grd_ref_no,
                      ash.ash_id,
                      ash.assay_type,
                      asm.sub_lot_no,
                      pqca.typical,
                      rm.qty_unit_id_numerator,
                      rm.qty_unit_id_denominator,
                      rm.ratio_name,
                      pqca.element_id,
                      aml.underlying_product_id,
                      asm.net_weight,
                      asm.dry_weight,
                      asm.net_weight_unit,
                      pci.pcpq_id
                 from gmr_goods_movement_record   gmr,
                      dgrd_delivered_grd          dgrd,
                      sam_stock_assay_mapping     sam,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pqca_pq_chemical_attributes pqca,
                      rm_ratio_master             rm,
                      aml_attribute_master_list   aml,
                      pci_physical_contract_item  pci
               
                where gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
                  and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                  and sam.ash_id = ash.ash_id
                  and sam.is_latest_pricing_assay = 'Y'
                  and ash.ash_id = asm.ash_id
                  and asm.asm_id = pqca.asm_id
                  and rm.ratio_id = pqca.unit_of_measure
                  and ash.is_active = 'Y'
                  and asm.is_active = 'Y'
                  and aml.attribute_id = pqca.element_id
                  and nvl(pqca.is_elem_for_pricing, 'N') = 'N'
                  and gmr.dbd_id = pc_dbd_id
                  and dgrd.dbd_id = pc_dbd_id
                  and pci.dbd_id = pc_dbd_id
                  and dgrd.internal_contract_item_ref_no =
                      pci.internal_contract_item_ref_no
                  and gmr.internal_gmr_ref_no = pc_inter_gmr_ref_no
                  and dgrd.internal_dgrd_ref_no = pc_inter_grd_ref_no)
    loop
      vn_element_pc_charge := 0;
      vn_tier_penalty      := 0;
      --Passing each element which is getting  from the outer loop.
      --and checking ,is it non payable or not.
      for cur_pc_charge in (select pcap.penalty_charge_type,
                                   pcap.penalty_basis,
                                   pcap.penalty_amount,
                                   pcap.range_min_value,
                                   pcap.range_max_value,
                                   pcap.range_min_op,
                                   pcap.range_max_op,
                                   pcap.position,
                                   pcap.charge_basis,
                                   pcap.penalty_weight_type,
                                   pcap.pcaph_id,
                                   pcaph.slab_tier,
                                   pum.price_unit_id,
                                   pum.cur_id,
                                   pum.weight_unit_id
                              from pcaph_pc_attr_penalty_header  pcaph,
                                   pcap_pc_attribute_penalty     pcap,
                                   pqd_penalty_quality_details   pqd,
                                   pad_penalty_attribute_details pad,
                                   gph_gmr_penalty_header        gph,
                                   ppu_product_price_units       ppu,
                                   pum_price_unit_master         pum
                             where pcaph.pcaph_id = pcap.pcaph_id
                               and pcaph.pcaph_id = pqd.pcaph_id
                               and pcaph.pcaph_id = pad.pcaph_id
                               and pcaph.pcaph_id = gph.pcaph_id
                               and pqd.pcpq_id = cc.pcpq_id
                               and pcaph.dbd_id = pc_dbd_id
                               and pcap.dbd_id = pc_dbd_id
                               and pqd.dbd_id = pc_dbd_id
                               and pad.dbd_id = pc_dbd_id
                               and pcaph.is_active = 'Y'
                               and pcap.is_active = 'Y'
                               and pqd.is_active = 'Y'
                               and pad.is_active = 'Y'
                               and gph.is_active = 'Y'
                               and gph.internal_gmr_ref_no =
                                   pc_inter_gmr_ref_no
                               and pad.element_id = cc.element_id
                               and pcap.penalty_unit_id =
                                   ppu.internal_price_unit_id
                               and ppu.price_unit_id = pum.price_unit_id
                               and (pcap.range_max_value > cc.typical or
                                   pcap.position = 'Range End')
                               and (pcap.range_min_value <= cc.typical or
                                   pcap.position = 'Range Begining'))
      loop
        vc_price_unit_id     := cur_pc_charge.price_unit_id;
        vc_cur_id            := cur_pc_charge.cur_id;
        vn_element_pc_charge := 0;
        --check the penalty charge type
        if cur_pc_charge.penalty_charge_type = 'Fixed' then
          vc_penalty_weight_type := cur_pc_charge.penalty_weight_type;
          --Find the PC charge which will fall in the appropriate range.
          --as according to the typical value   
          if (cur_pc_charge.position = 'Range Begining' and
             cur_pc_charge.range_max_op = '<=' and
             cur_pc_charge.range_max_value <= cc.typical) or
             (cur_pc_charge.position = 'Range Begining' and
             cur_pc_charge.range_max_op = '<' and
             cur_pc_charge.range_max_value < cc.typical) or
             (cur_pc_charge.position = 'Range End' and
             cur_pc_charge.range_min_op = '>=' and
             cc.typical >= cur_pc_charge.range_min_value) or
             (cur_pc_charge.position = 'Range End' and
             cur_pc_charge.range_min_op = '>' and
             cc.typical > cur_pc_charge.range_min_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>' and
             cur_pc_charge.range_max_op = '<' and
             cc.typical > cur_pc_charge.range_min_value and
             cc.typical < cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>=' and
             cur_pc_charge.range_max_op = '<' and
             cc.typical >= cur_pc_charge.range_min_value and
             cc.typical < cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>' and
             cur_pc_charge.range_max_op = '<=' and
             cc.typical > cur_pc_charge.range_min_value and
             cc.typical <= cur_pc_charge.range_max_value) or
             (cur_pc_charge.position is null and
             cur_pc_charge.range_min_op = '>=' and
             cur_pc_charge.range_max_op = '<=' and
             cc.typical >= cur_pc_charge.range_min_value and
             cc.typical <= cur_pc_charge.range_max_value) then
          
            vn_penalty_charge := cur_pc_charge.penalty_amount;
            vn_max_range      := cur_pc_charge.range_max_value;
            vn_min_range      := cur_pc_charge.range_min_value;
            vn_typical_val    := cc.typical;
          
            vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                     cc.net_weight_unit,
                                                                     cur_pc_charge.weight_unit_id,
                                                                     cc.dry_weight);
          
            vn_element_pc_charge := vn_penalty_charge * vn_converted_qty;
          end if;
        elsif cur_pc_charge.penalty_charge_type = 'Variable' then
          if cur_pc_charge.penalty_basis = 'Quantity' and
             cur_pc_charge.slab_tier = 'Tier' then
            vn_typical_val := cc.typical;
            --find the range where the typical falls in 
            if (cur_pc_charge.position = 'Range Begining' and
               cur_pc_charge.range_max_op = '<=' and
               cur_pc_charge.range_max_value <= vn_typical_val) or
               (cur_pc_charge.position = 'Range Begining' and
               cur_pc_charge.range_max_op = '<' and
               cur_pc_charge.range_max_value < vn_typical_val) or
               (cur_pc_charge.position = 'Range End' and
               cur_pc_charge.range_min_op = '>=' and
               vn_typical_val >= cur_pc_charge.range_min_value) or
               (cur_pc_charge.position = 'Range End' and
               cur_pc_charge.range_min_op = '>' and
               vn_typical_val > cur_pc_charge.range_min_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>' and
               cur_pc_charge.range_max_op = '<' and
               vn_typical_val > cur_pc_charge.range_min_value and
               vn_typical_val < cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>=' and
               cur_pc_charge.range_max_op = '<' and
               vn_typical_val >= cur_pc_charge.range_min_value and
               vn_typical_val < cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>' and
               cur_pc_charge.range_max_op = '<=' and
               vn_typical_val > cur_pc_charge.range_min_value and
               vn_typical_val <= cur_pc_charge.range_max_value) or
               (cur_pc_charge.position is null and
               cur_pc_charge.range_min_op = '>=' and
               cur_pc_charge.range_max_op = '<=' and
               vn_typical_val >= cur_pc_charge.range_min_value and
               vn_typical_val <= cur_pc_charge.range_max_value) then
              --Finding all the  assay range form the start range to  last range 
              --for the different Tier basics ,assording to the typicla value
              for cur_range in (select nvl(pcap.range_min_value, 0) min_range,
                                       pcap.range_max_value max_range,
                                       pcap.penalty_amount,
                                       pcap.per_increase_value
                                  from pcap_pc_attribute_penalty pcap
                                 where nvl(pcap.range_min_value, 0) <=
                                       vn_typical_val
                                   and pcap.pcaph_id =
                                       cur_pc_charge.pcaph_id
                                   and pcap.dbd_id = pc_dbd_id)
              loop
                --for half range
                if vn_typical_val > 0 then
                  if cur_range.min_range < vn_typical_val and
                     nvl(cur_range.max_range, vn_typical_val + 1) >
                     vn_typical_val then
                    vn_penalty_charge := cur_range.penalty_amount;
                    vn_range_gap      := vn_typical_val -
                                         cur_range.min_range;
                    --for full range                 
                  elsif cur_range.min_range <= vn_typical_val and
                        cur_range.max_range <= vn_typical_val then
                    vn_penalty_charge := cur_range.penalty_amount;
                    vn_range_gap      := cur_range.max_range -
                                         cur_range.min_range;
                  end if;
                end if;
                if cur_pc_charge.charge_basis = 'absolute' then
                  vn_penalty_charge := ceil(vn_range_gap /
                                            cur_range.per_increase_value) *
                                       vn_penalty_charge;
                elsif cur_pc_charge.charge_basis = 'fractions Pro-Rata' then
                  vn_penalty_charge := (vn_range_gap /
                                       cur_range.per_increase_value) *
                                       vn_penalty_charge;
                end if;
                vn_tier_penalty := vn_tier_penalty + vn_penalty_charge;
              
              end loop;
            end if;
          elsif cur_pc_charge.penalty_basis = 'Payable Content' then
            --Take the payable content qty from the table and 
            --find the penalty But for the time being this feature is not applied
            null;
          end if;
        
          --Penalty Charge is applyed on the item wise not on the element  wise
          --This item qty may be dry or wet
          vn_converted_qty := pkg_general.f_get_converted_quantity(cc.underlying_product_id,
                                                                   cc.net_weight_unit,
                                                                   cur_pc_charge.weight_unit_id,
                                                                   cc.dry_weight);
          --Here no need of the typical value as penalty is on item level  
          vn_element_pc_charge := vn_tier_penalty * vn_converted_qty;
        end if;
      end loop;
      pn_total_pc_charge := pn_total_pc_charge + vn_element_pc_charge;
    end loop;
  
    pc_pc_cur_id := vc_cur_id;
  exception
    when others then
      pn_total_pc_charge := -1;
      pc_pc_cur_id       := null;
  end;

  function f_get_next_day(p_date     in date,
                          p_day      in varchar2,
                          p_position in number) return date is
  
    v_position_date      date;
    v_next_position      number;
    v_start_day          varchar2(10);
    v_first_day_position date;
  
  begin
  
    begin
      v_next_position := (p_position - 1) * 7;
      v_start_day     := to_char(to_date('01-' ||
                                         to_char(trunc(p_date), 'mon-yyyy'),
                                         'dd-mon-yyyy'),
                                 'dy');
      if upper(trim(v_start_day)) = upper(trim(p_day)) then
        v_first_day_position := to_date('01-' ||
                                        to_char(trunc(p_date), 'mon-yyyy'),
                                        'dd-mon-yyyy');
      else
        v_first_day_position := next_day(to_date('01-' ||
                                                 to_char(p_date, 'mon-yyyy'),
                                                 'dd-mon-yyyy'),
                                         trim(p_day));
      end if;
    
      if v_next_position <= 1 then
        v_position_date := trunc(v_first_day_position);
      else
        v_position_date := trunc(v_first_day_position) + v_next_position;
      end if;
    exception
      when no_data_found then
        return null;
      when others then
        return null;
    end;
    return v_position_date;
  end f_get_next_day;
  function f_is_day_holiday(pc_instrumentid in varchar2,
                            pc_trade_date   date) return boolean is
    pc_counter number(1);
    result_val boolean;
  begin
    --Checking the Week End Holiday List
    begin
      select count(*)
        into pc_counter
        from dual
       where to_char(pc_trade_date, 'Dy') in
             (select clwh.holiday
                from dim_der_instrument_master    dim,
                     clm_calendar_master          clm,
                     clwh_calendar_weekly_holiday clwh
               where dim.holiday_calender_id = clm.calendar_id
                 and clm.calendar_id = clwh.calendar_id
                 and dim.instrument_id = pc_instrumentid
                 and clm.is_deleted = 'N'
                 and clwh.is_deleted = 'N');
      if (pc_counter = 1) then
        result_val := true;
      else
        result_val := false;
      end if;
      if (result_val = false) then
        --Checking Other Holiday List
        select count(*)
          into pc_counter
          from dual
         where trim(pc_trade_date) in
               (select trim(hl.holiday_date)
                  from hm_holiday_master         hm,
                       hl_holiday_list           hl,
                       dim_der_instrument_master dim,
                       clm_calendar_master       clm
                 where hm.holiday_id = hl.holiday_id
                   and dim.holiday_calender_id = clm.calendar_id
                   and clm.calendar_id = hm.calendar_id
                   and dim.instrument_id = pc_instrumentid
                   and hm.is_deleted = 'N'
                   and hl.is_deleted = 'N');
        if (pc_counter = 1) then
          result_val := true;
        else
          result_val := false;
        end if;
      end if;
    end;
    return result_val;
  end f_is_day_holiday;
  procedure sp_quality_premium_fw_rate(pc_int_contract_item_ref_no in varchar2,
                                       pc_corporate_id             in varchar2,
                                       pd_trade_date               in date,
                                       pc_price_unit_id            in varchar2,
                                       pc_base_cur_id              in varchar2,
                                       pd_payment_due_date         in date,
                                       pc_product_id               in varchar2,
                                       pc_base_qty_unit_id         in varchar2,
                                       pc_process_id               in varchar2,
                                       pn_premium                  out number,
                                       pc_exch_rate_string         out varchar2) is
  
    cursor cur_preimium is
      select pcqpd.premium_disc_value,
             pcqpd.premium_disc_unit_id
        from pci_physical_contract_item     pci,
             pcpq_pc_product_quality        pcpq,
             pcpdqd_pd_quality_details      pcpdqd,
             pcqpd_pc_qual_premium_discount pcqpd
       where pci.pcpq_id = pcpq.pcpq_id
         and pcpq.pcpq_id = pcpdqd.pcpq_id
         and pcpdqd.pcqpd_id = pcqpd.pcqpd_id
         and pci.process_id = pc_process_id
         and pcpq.process_id = pc_process_id
         and pcqpd.process_id = pc_process_id
         and pcpdqd.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             pc_int_contract_item_ref_no;
    vn_premium                 number;
    vn_total_premium           number := 0;
    vc_premium_cur_id          varchar2(15);
    vc_premium_main_cur_id     varchar2(15);
    vc_premium_main_cur_code   varchar2(15);
    vn_premium_cur_main_factor number;
    vc_premium_weight_unit_id  varchar2(15);
    vn_premium_weight          number;
    vn_premium_to_base_fw_rate number;
    vn_forward_points          number;
    vc_base_cur_code           varchar2(15);
    vobj_error_log             tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count         number := 1;
  begin
    select cm.cur_code
      into vc_base_cur_code
      from cm_currency_master cm
     where cm.cur_id = pc_base_cur_id;
    for cur_preimium_rows in cur_preimium
    loop
      if cur_preimium_rows.premium_disc_unit_id = pc_price_unit_id then
        vn_premium := cur_preimium_rows.premium_disc_value;
      else
        --
        -- Get the Currency, Weight Unit and Weight Unit of Premium Price Unit
        --
        select ppu.cur_id,
               ppu.weight_unit_id,
               nvl(ppu.weight, 1)
          into vc_premium_cur_id,
               vc_premium_weight_unit_id,
               vn_premium_weight
          from v_ppu_pum ppu
         where ppu.product_price_unit_id = pc_price_unit_id;
      
        --
        -- Get the Main Currency of the Premium Price Unit
        --
        pkg_general.sp_get_base_cur_detail(vc_premium_cur_id,
                                           vc_premium_main_cur_id,
                                           vc_premium_main_cur_code,
                                           vn_premium_cur_main_factor);
        --
        -- Exchange Rate from Premium to Base Currency
        --                                           
        pkg_general.sp_forward_cur_exchange_new(pc_corporate_id,
                                                pd_trade_date,
                                                pd_payment_due_date,
                                                vc_premium_main_cur_id,
                                                pc_base_cur_id,
                                                30,
                                                vn_premium_to_base_fw_rate,
                                                vn_forward_points);
        if pc_exch_rate_string is null then
          pc_exch_rate_string := '1 ' || vc_base_cur_code || '=' ||
                                 vn_premium_to_base_fw_rate || ' ' ||
                                 vc_premium_main_cur_code;
        else
          pc_exch_rate_string := pc_exch_rate_string || ',' || '1 ' ||
                                 vc_base_cur_code || '=' ||
                                 vn_premium_to_base_fw_rate || ' ' ||
                                 vc_premium_main_cur_code;
        end if;
      
        if vc_premium_main_cur_code <> vc_base_cur_code then
          if vn_premium_to_base_fw_rate is null or
             vn_premium_to_base_fw_rate = 0 then
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_quality_premium_fw_rate-sp_calc_phy_open_unrealized ',
                                                                 'PHY-005',
                                                                 vc_base_cur_code ||
                                                                 ' to ' ||
                                                                 vc_premium_main_cur_code || ' (' ||
                                                                 to_char(pd_payment_due_date,
                                                                         'dd-Mon-yyyy') || ') ',
                                                                 '',
                                                                 pkg_phy_physical_process.gvc_process,
                                                                 null, --pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
          end if;
        end if;
        vn_premium := (cur_preimium_rows.premium_disc_value /
                      vn_premium_cur_main_factor) *
                      vn_premium_to_base_fw_rate *
                      pkg_general.f_get_converted_quantity(pc_product_id,
                                                           vc_premium_weight_unit_id,
                                                           pc_base_qty_unit_id,
                                                           1);
      end if;
      vn_total_premium := vn_total_premium + vn_premium;
    end loop;
    pn_premium := vn_total_premium;
  end;
end; 
/


create or replace package pkg_phy_conc_unrealized_pnl is
  procedure sp_calc_phy_opencon_unreal_pnl(pc_corporate_id        varchar2,
                                           pd_trade_date          date,
                                           pc_process_id          varchar2,
                                           pc_dbd_id              varchar2,
                                           pc_user_id             varchar2,
                                           pc_process             varchar2,
                                           pc_previous_process_id varchar2);
  procedure sp_stock_unreal_sntt_conc(pc_corporate_id        varchar2,
                                      pd_trade_date          date,
                                      pc_process_id          varchar2,
                                      pc_dbd_id              varchar2,
                                      pc_user_id             varchar2,
                                      pc_process             varchar2,
                                      pc_previous_process_id varchar2);
  procedure sp_stock_unreal_inv_in_conc(pc_corporate_id        varchar2,
                                        pd_trade_date          date,
                                        pc_process_id          varchar2,
                                        pc_user_id             varchar2,
                                        pc_process             varchar2,
                                        pc_previous_process_id varchar2,
                                        pc_dbd_id              varchar2);

end;
/
create or replace package body pkg_phy_conc_unrealized_pnl is
  procedure sp_calc_phy_opencon_unreal_pnl(pc_corporate_id        varchar2,
                                           pd_trade_date          date,
                                           pc_process_id          varchar2,
                                           pc_dbd_id              varchar2,
                                           pc_user_id             varchar2,
                                           pc_process             varchar2,
                                           pc_previous_process_id varchar2) is
  
    cursor cur_unrealized is
      select pcm.corporate_id,
             akc.corporate_name,
             pc_process_id,
             pcdi.pcdi_id,
             pcdi.delivery_item_no,
             pcdi.prefix,
             pcdi.middle_no,
             pcdi.suffix,
             pcdi.internal_contract_ref_no,
             pcm.contract_ref_no,
             pcm.issue_date,
             pci.internal_contract_item_ref_no,
             pci.del_distribution_item_no,
             pcdi.basis_type,
             pcdi.delivery_period_type,
             pcdi.delivery_from_month,
             pcdi.delivery_from_year,
             pcdi.delivery_to_month,
             pcdi.delivery_to_year,
             pcdi.delivery_from_date,
             pcdi.delivery_to_date,
             pcdi.transit_days,
             pcm.purchase_sales,
             pcm.contract_status,
             'Unrealized' unrealized_type,
             pcpd.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             pcm.cp_id,
             phd_cp.companyname cp_name,
             pcm.trader_id,
             (case
               when pcm.trader_id is not null then
                (select gab.firstname || ' ' || gab.lastname
                   from gab_globaladdressbook       gab,
                        ak_corporate_user@eka_appdb aku
                  where gab.gabid = aku.gabid
                    and aku.user_id = pcm.trader_id)
               else
                ''
             end) trader_user_name,
             pcpd.product_id conc_product_id,
             pdm_conc.product_desc conc_product_name,
             aml.underlying_product_id product_id,
             pdm.product_desc product_name,
             ciqs.open_qty item_qty,
             ciqs.item_qty_unit_id qty_unit_id,
             qum.qty_unit,
             qum.decimals item_qty_decimal,
             pcpq.quality_template_id conc_quality_id,
             qat.quality_name conc_quality_name,
             qav.comp_quality_id quality_id,
             qat_und.quality_name,
             pcdb.inco_term_id,
             itm.incoterm,
             pcdb.city_id origination_city_id,
             cim1.city_name origination_city,
             pcdb.country_id origination_country_id,
             cym1.country_name origination_country,
             pcdb.city_id destination_city_id,
             cim2.city_name destination_city,
             pcdb.country_id destination_country_id,
             cym2.country_name destination_country,
             rem_cym1.region_id origination_region_id,
             rem_cym1.region_name origination_region,
             rem_cym2.region_id destination_region_id,
             rem_cym2.region_name destination_region,
             pcm.payment_term_id,
             pym.payment_term,
             cm.cur_id as base_cur_id,
             cm.cur_code as base_cur_code,
             cm.decimals as base_cur_decimal,
             gcd.groupid,
             gcd.groupname,
             cm_gcd.cur_id cur_id_gcd,
             cm_gcd.cur_code cur_code_gcd,
             qum_gcd.qty_unit_id qty_unit_id_gcd,
             qum_gcd.qty_unit qty_unit_gcd,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             qum_pdm.decimals as base_qty_decimal,
             qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
             qum_pdm_conc.qty_unit as conc_base_qty_unit,
             qum_pdm_conc.decimals as conc_base_qty_decimal,
             pcpd.strategy_id,
             css.strategy_name,
             cipde.element_id,
             aml.attribute_name,
             pcpq.assay_header_id,
             pcpq.unit_of_measure,
             ceqs.assay_qty,
             ceqs.assay_qty_unit_id,
             cipq.payable_qty,
             cipq.qty_unit_id payable_qty_unit_id,
             cipde.contract_price,
             cipde.price_unit_id,
             cipde.price_unit_cur_id,
             cipde.price_unit_cur_code,
             cipde.price_unit_weight_unit_id,
             cipde.price_unit_weight,
             cipde.price_unit_weight_unit,
             cipde.price_basis fixation_method,
             cipde.price_description,
             cipde.price_fixation_status,
             cipde.price_fixation_details,
             nvl(cipde.payment_due_date, pd_trade_date) payment_due_date,
             pci.expected_delivery_month || '-' ||
             pci.expected_delivery_year item_delivery_period_string,
             md.net_m2m_price net_m2m_price,
             md.m2m_price_unit_id,
             md.m2m_price_unit_cur_id,
             md.m2m_price_unit_cur_code,
             md.m2m_price_unit_weight,
             md.m2m_price_unit_weight_unit_id,
             md.m2m_price_unit_weight_unit,
             md.m2m_main_cur_id,
             md.m2m_main_cur_code,
             md.m2m_main_cur_decimals,
             md.main_currency_factor,
             md.md_id,
             0 m2m_amt,
             nvl(md.treatment_charge, 0) m2m_treatment_charge, -- will be in base price unit id
             nvl(md.refine_charge, 0) m2m_refining_charge, -- will be in base price unit id
             tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
             tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
             tc_ppu_pum.cur_id m2m_tc_cur_id,
             tc_ppu_pum.weight m2m_tc_weight,
             tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
             rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
             rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
             rc_ppu_pum.cur_id m2m_rc_cur_id,
             rc_ppu_pum.weight m2m_rc_weight,
             rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
             nvl(ciscs.avg_cost_fw_rate, 0) sc_in_base_cur,
             md.derivative_def_id,
             md.valuation_exchange_id,
             emt.exchange_name,
             md.valuation_dr_id,
             drm.dr_id_name,
             md.valuation_month,
             md.valuation_date,
             md.m2m_loc_incoterm_deviation,
             dense_rank() over(partition by cipde.internal_contract_item_ref_no order by cipde.element_id) ele_rank,
             md.base_price_unit_id_in_ppu,
             md.base_price_unit_id_in_pum,
             pum_base_price_id.price_unit_name base_price_unit_name,
             pum_loc_base.weight_unit_id loc_qty_unit_id,
             tmpc.mvp_id,
             tmpc.shipment_month,
             tmpc.shipment_year,
             nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
             ciscs.fw_rate_string accrual_to_base_fw_exch_rate,
             md.m2m_ld_fw_exch_rate,
             md.m2m_rc_fw_exch_rate,
             md.m2m_tc_fw_exch_rate,
             nvl(pcdb.premium, 0) delivery_premium,
             pcdb.premium_unit_id delivery_premium_unit_id,
             pcm.approval_status,
             (case when pcm.approval_status='Approved' then
             'Y'
             else
             'N'
             end) approval_flag
        from pcm_physical_contract_main pcm,
             ak_corporate akc,
             pcdi_pc_delivery_item pcdi,
             pci_physical_contract_item pci,
             pcpd_pc_product_definition pcpd,
             cpc_corporate_profit_center cpc,
             phd_profileheaderdetails phd_cp,
             pdm_productmaster pdm,
             ciqs_contract_item_qty_status ciqs,
             qum_quantity_unit_master qum,
             pcpq_pc_product_quality pcpq,
             qat_quality_attributes qat,
             qat_quality_attributes qat_und,
             qav_quality_attribute_values qav,
             ppm_product_properties_mapping ppm,
             aml_attribute_master_list aml,
             pcdb_pc_delivery_basis pcdb,
             itm_incoterm_master itm,
             cim_citymaster cim1,
             cim_citymaster cim2,
             cym_countrymaster cym1,
             cym_countrymaster cym2,
             rem_region_master@eka_appdb rem_cym1,
             rem_region_master@eka_appdb rem_cym2,
             pym_payment_terms_master pym,
             cm_currency_master cm,
             gcd_groupcorporatedetails gcd,
             cm_currency_master cm_gcd,
             qum_quantity_unit_master qum_gcd,
             qum_quantity_unit_master qum_pdm,
             pdm_productmaster pdm_conc,
             qum_quantity_unit_master qum_pdm_conc,
             css_corporate_strategy_setup css,
             pum_price_unit_master pum_base_price_id,
             pum_price_unit_master pum_loc_base,
             cipde_cipd_element_price cipde,
             (select md1.*
                from md_m2m_daily md1
               where md1.rate_type = 'OPEN'
                 and md1.corporate_id = pc_corporate_id
                 and md1.product_type = 'CONCENTRATES'
                 and md1.process_id = pc_process_id) md,
             (select tmp.*
                from tmpc_temp_m2m_pre_check tmp
               where tmp.corporate_id = pc_corporate_id
                 and tmp.product_type = 'CONCENTRATES'
                 and tmp.section_name = 'OPEN') tmpc,
             drm_derivative_master drm,
             emt_exchangemaster emt,
             v_ppu_pum tc_ppu_pum,
             v_ppu_pum rc_ppu_pum,
             cipq_contract_item_payable_qty cipq,
             ceqs_contract_ele_qty_status ceqs,
             ciscs_cisc_summary ciscs
       where pcm.corporate_id = akc.corporate_id
         and pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
         and pcdi.pcdi_id = pci.pcdi_id
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpq.pcpd_id = pcpd.pcpd_id
         and pcpd.profit_center_id = cpc.profit_center_id
         and pcm.cp_id = phd_cp.profileid
         and pci.internal_contract_item_ref_no =
             ciqs.internal_contract_item_ref_no
         and ciqs.item_qty_unit_id = qum.qty_unit_id
         and pci.pcpq_id = pcpq.pcpq_id
         and pcpq.quality_template_id = qat.quality_id
         and qat.quality_id = qav.quality_id
         and qav.attribute_id = ppm.property_id
         and qav.comp_quality_id = qat_und.quality_id
         and ppm.attribute_id = aml.attribute_id
         and aml.underlying_product_id = pdm.product_id
         and aml.attribute_id = cipde.element_id
         and pci.pcdb_id = pcdb.pcdb_id
         and pcdb.inco_term_id = itm.incoterm_id
         and pcdb.city_id = cim1.city_id(+)
         and pcdb.city_id = cim2.city_id(+)
         and pcdb.country_id = cym1.country_id(+)
         and pcdb.country_id = cym2.country_id(+)
         and cym1.region_id = rem_cym1.region_id(+)
         and cym2.region_id = rem_cym2.region_id(+)
         and pcm.payment_term_id = pym.payment_term_id
         and akc.base_cur_id = cm.cur_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
         and qum_pdm.qty_unit_id = pdm.base_quantity_unit
         and pcpd.product_id = pdm_conc.product_id
         and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
         and pcpd.strategy_id = css.strategy_id
         and pci.internal_contract_item_ref_no =
             cipde.internal_contract_item_ref_no
         and pci.internal_contract_item_ref_no =
             tmpc.internal_contract_item_ref_no(+)
         and tmpc.element_id = cipde.element_id
         and tmpc.internal_m2m_id = md.md_id(+)
         and md.element_id = cipde.element_id
         and md.valuation_dr_id = drm.dr_id(+)
         and md.valuation_exchange_id = emt.exchange_id(+)
         and pcm.corporate_id = pc_corporate_id
         and ciqs.open_qty > 0
         and pcm.contract_status = 'In Position'
         and pcm.contract_type = 'CONCENTRATES'
         and pcpd.input_output = 'Input'
         and pcm.is_tolling_contract = 'N'
         and pcm.is_tolling_extn = 'N'
         and pcm.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and pcdb.is_active = 'Y'
         and pcpd.is_active = 'Y'
         and pcpq.is_active = 'Y'
         and ciqs.is_active = 'Y'
         and ppm.is_active = 'Y'
         and ppm.is_deleted = 'N'
         and qav.is_deleted = 'N'
         and qav.is_comp_product_attribute = 'Y'
         and qat.is_active = 'Y'
         and qat.is_deleted = 'N'
         and aml.is_active = 'Y'
         and aml.is_deleted = 'N'
         and qat_und.is_active = 'Y'
         and qat_und.is_deleted = 'N'
         and md.base_price_unit_id_in_pum = pum_base_price_id.price_unit_id
         and md.base_price_unit_id_in_pum = pum_loc_base.price_unit_id
         and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
         and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
         and pci.internal_contract_item_ref_no =
             cipq.internal_contract_item_ref_no
         and aml.attribute_id = cipq.element_id
         and pci.internal_contract_item_ref_no =
             ceqs.internal_contract_item_ref_no
         and aml.attribute_id = ceqs.element_id
         and pcm.process_id = pc_process_id
         and pcdi.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and ciqs.process_id = pc_process_id
         and pcpq.process_id = pc_process_id
         and pcdb.process_id = pc_process_id
         and cipde.process_id = pc_process_id
         and cipq.process_id = pc_process_id
         and ceqs.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             ciscs.internal_contract_item_ref_no(+)
         and pci.process_id = ciscs.process_id(+);
    vn_ele_qty_in_base             number;
    vn_ele_m2m_amt                 number;
    vc_m2m_cur_id                  varchar2(15);
    vc_m2m_cur_code                varchar2(15);
    vn_m2m_base_fx_rate            number;
    vn_m2m_base_deviation          number;
    vn_m2m_sub_cur_id_factor       number;
    vn_m2m_cur_decimals            number;
    vn_ele_m2m_amount_in_base      number;
    vn_ele_m2m_total_amount        number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vn_cont_price_cur_id_factor    number;
    vn_cont_price_cur_decimals     number;
    vn_ele_cont_value_in_price_cur number;
    vn_fx_price_to_base            number;
    vn_forward_exch_rate           number;
    vn_ele_cont_premium            number;
    vn_ele_cont_total_premium      number;
    vn_ele_cont_value_in_base_cur  number;
    vn_ele_exp_cog_in_base_cur     number;
    vn_ele_unreal_pnl_in_base_cur  number;
    vn_unrealized_pnl_in_m2m_unit  number;
    vc_m2m_price_unit_id           varchar2(15);
    vc_m2m_price_unit_cur_id       varchar2(15);
    vc_m2m_price_unit_cur_code     varchar2(15);
    vc_m2m_price_unit_wgt_unit_id  varchar2(15);
    vc_m2m_price_unit_wgt_unit     varchar2(15);
    vn_m2m_price_unit_wgt_unit_wt  number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_dry_qty                     number;
    vn_wet_qty                     number;
    vn_sc_in_base_cur              number;
    vn_qty_in_base                 number;
    vn_con_treatment_charge        number;
    vc_con_treatment_cur_id        varchar2(15);
    vn_base_con_treatment_charge   number;
    vn_con_refine_charge           number;
    vc_con_refine_cur_id           varchar2(15);
    vn_base_con_refine_charge      number;
    vn_con_penality_charge         number;
    vn_base_con_penality_charge    number;
    vc_con_penality_cur_id         varchar2(15);
    vn_dry_qty_in_base             number;
    vn_ele_m2m_treatment_charge    number;
    vn_ele_m2m_refine_charge       number;
    vn_loc_amount                  number;
    vn_loc_total_amount            number;
    vn_m2m_penality                number;
    vn_m2m_total_penality          number;
    vc_price_unit_id               varchar2(15);
    vc_con_tc_main_cur_id          varchar2(15);
    vc_con_tc_main_cur_code        varchar2(15);
    vc_con_tc_main_cur_factor      number;
    vn_con_tc_to_base_fw_rate      number;
    vn_forward_points              number;
    vc_contract_tc_fw_exch_rate    varchar2(50);
    vc_con_rc_main_cur_id          varchar2(15);
    vc_con_rc_main_cur_code        varchar2(15);
    vc_con_rc_main_cur_factor      number;
    vn_con_rc_to_base_fw_rate      number;
    vc_contract_rc_fw_exch_rate    varchar2(50);
    vc_con_pc_main_cur_id          varchar2(15);
    vc_con_pc_main_cur_code        varchar2(15);
    vc_con_pc_main_cur_factor      number;
    vn_con_pc_to_base_fw_rate      number;
    vc_contract_pc_fw_exch_rate    varchar2(50);
    vc_price_to_base_fw_rate       varchar2(25);
    vc_m2m_to_base_fw_rate         varchar2(25);
    vc_m2m_pc_fw_exch_rate         varchar2(50);
    vc_m2m_total_pc_fw_exch_rate   varchar2(50);
    vc_error_msg                   varchar2(100);
    -- M2M Varibles
    vc_m2m_tc_main_cur_id          varchar2(15);
    vc_m2m_tc_main_cur_code        varchar2(15);
    vc_m2m_tc_main_cur_factor      number;
    vn_m2m_tc_to_base_fw_rate      number;
    vc_m2m_rc_main_cur_id          varchar2(15);
    vc_m2m_rc_main_cur_code        varchar2(15);
    vc_m2m_rc_main_cur_factor      number;
    vn_m2m_rc_to_base_fw_rate      number;
    vn_cont_delivery_premium       number;
    vn_cont_del_premium_amt        number;
    vc_contract_pp_fw_exch_rate    varchar2(50);
    vc_base_price_unit_id          varchar2(15);
    vn_del_to_base_fw_rate         varchar2(50);
    vc_del_premium_cur_id          varchar2(15);
    vc_del_premium_cur_code        varchar2(15);
    vn_del_premium_weight          number;
    vc_del_premium_weight_unit_id  varchar2(15);
    vc_del_premium_main_cur_id     varchar2(15);
    vc_del_premium_main_cur_code   varchar2(15);
    vn_del_premium_cur_main_factor number;
  begin
    vc_error_msg := '10269';
    for cur_unrealized_rows in cur_unrealized
    loop
      vc_contract_tc_fw_exch_rate  := null;
      vc_contract_rc_fw_exch_rate  := null;
      vc_contract_pc_fw_exch_rate  := null;
      vc_price_to_base_fw_rate     := null;
      vc_contract_pp_fw_exch_rate  := null;
      vn_del_to_base_fw_rate       := null;
      vc_m2m_to_base_fw_rate       := null;
      vc_m2m_pc_fw_exch_rate       := null;
      vc_m2m_total_pc_fw_exch_rate := null;
    
      begin
        select ppu.product_price_unit_id
          into vc_base_price_unit_id
          from v_ppu_pum ppu
         where ppu.cur_id = cur_unrealized_rows.base_cur_id
           and ppu.weight_unit_id =
               cur_unrealized_rows.conc_base_qty_unit_id
           and nvl(ppu.weight, 1) = 1
           and ppu.product_id = cur_unrealized_rows.conc_product_id;
      exception
        when others then
          null;
      end;
      -- convert wet qty to dry qty
      if cur_unrealized_rows.unit_of_measure = 'Wet' then
        vn_dry_qty   := round(pkg_metals_general.fn_get_assay_dry_qty(cur_unrealized_rows.conc_product_id,
                                                                      cur_unrealized_rows.assay_header_id,
                                                                      cur_unrealized_rows.item_qty,
                                                                      cur_unrealized_rows.qty_unit_id),
                              cur_unrealized_rows.item_qty_decimal);
        vc_error_msg := '10279';
      else
        vn_dry_qty := round(cur_unrealized_rows.item_qty,
                            cur_unrealized_rows.item_qty_decimal);
      end if;
    
      vn_wet_qty := cur_unrealized_rows.item_qty;
      -- convert into dry qty to base qty element level
      vn_dry_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                       cur_unrealized_rows.qty_unit_id,
                                                                       cur_unrealized_rows.base_qty_unit_id,
                                                                       1) *
                                  vn_dry_qty,
                                  cur_unrealized_rows.base_qty_decimal);
    
      vc_error_msg := '10295';
      -- contract treatment charges
      pkg_metals_general.sp_get_treatment_charge(cur_unrealized_rows.internal_contract_item_ref_no,
                                                 cur_unrealized_rows.element_id,
                                                 pc_dbd_id,
                                                 vn_dry_qty,
                                                 vn_wet_qty,
                                                 cur_unrealized_rows.qty_unit_id,
                                                 cur_unrealized_rows.contract_price,
                                                 cur_unrealized_rows.price_unit_id,
                                                 vn_con_treatment_charge,
                                                 vc_con_treatment_cur_id);
      vc_error_msg := '10307';
      if vn_con_treatment_charge is null then
        vn_con_treatment_charge := 0;
      end if;
      -- Converted treatment charges to base currency
      if (vc_con_treatment_cur_id <> cur_unrealized_rows.base_cur_id) and
         vn_con_treatment_charge <> 0 then
        -- Bank FX Rate from TC to Base Currency
        vc_error_msg := '10311';
        pkg_general.sp_get_base_cur_detail(vc_con_treatment_cur_id,
                                           vc_con_tc_main_cur_id,
                                           vc_con_tc_main_cur_code,
                                           vc_con_tc_main_cur_factor);
        vc_error_msg := '10316';
        pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                    pd_trade_date,
                                    cur_unrealized_rows.payment_due_date,
                                    vc_con_tc_main_cur_id,
                                    cur_unrealized_rows.base_cur_id,
                                    30,
                                    'sp_calc_phy_opencon_unreal_pnl TC to Base Currency',
                                    pc_process,
                                    vn_con_tc_to_base_fw_rate,
                                    vn_forward_points);
        vc_error_msg                 := '10325';
        vn_base_con_treatment_charge := round((vn_con_treatment_charge *
                                              vn_con_tc_to_base_fw_rate *
                                              vc_con_tc_main_cur_factor),
                                              cur_unrealized_rows.base_cur_decimal);
        vc_contract_tc_fw_exch_rate  := '1 ' || vc_con_tc_main_cur_code || '=' ||
                                        vn_con_tc_to_base_fw_rate || ' ' ||
                                        cur_unrealized_rows.base_cur_code;
      else
        vc_error_msg                 := '10334';
        vn_con_tc_to_base_fw_rate    := 1;
        vn_base_con_treatment_charge := round(vn_con_treatment_charge,
                                              cur_unrealized_rows.base_cur_decimal);
      
      end if;
      vc_error_msg := '10338';
      --- contract refine chrges
      pkg_metals_general.sp_get_refine_charge(cur_unrealized_rows.internal_contract_item_ref_no,
                                              cur_unrealized_rows.element_id,
                                              pc_dbd_id,
                                              cur_unrealized_rows.payable_qty,
                                              cur_unrealized_rows.payable_qty_unit_id,
                                              cur_unrealized_rows.contract_price,
                                              cur_unrealized_rows.price_unit_id,
                                              vn_con_refine_charge,
                                              vc_con_refine_cur_id);
      vc_error_msg := '10350';
      if vn_con_refine_charge is null then
        vn_con_refine_charge := 0;
      end if;
      --- Converted refine charges to base currency                                              
      if (vc_con_refine_cur_id <> cur_unrealized_rows.base_cur_id) and
         vn_con_refine_charge <> 0 then
        pkg_general.sp_get_base_cur_detail(vc_con_refine_cur_id,
                                           vc_con_rc_main_cur_id,
                                           vc_con_rc_main_cur_code,
                                           vc_con_rc_main_cur_factor);
      
        pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                    pd_trade_date,
                                    cur_unrealized_rows.payment_due_date,
                                    vc_con_refine_cur_id,
                                    cur_unrealized_rows.base_cur_id,
                                    30,
                                    'sp_calc_phy_opencon_unreal_pnl RC to Base Currency',
                                    pc_process,
                                    vn_con_rc_to_base_fw_rate,
                                    vn_forward_points);
        vc_error_msg              := '10366';
        vn_base_con_refine_charge := round((vn_con_refine_charge *
                                           vn_con_rc_to_base_fw_rate *
                                           vc_con_rc_main_cur_factor),
                                           cur_unrealized_rows.base_cur_decimal);
      
        vc_contract_rc_fw_exch_rate := '1 ' || vc_con_rc_main_cur_code || '=' ||
                                       vn_con_rc_to_base_fw_rate || ' ' ||
                                       cur_unrealized_rows.base_cur_code;
      
      else
        vn_con_rc_to_base_fw_rate := 1;
        vn_base_con_refine_charge := round(vn_con_refine_charge,
                                           cur_unrealized_rows.base_cur_decimal);
      end if;
      vc_error_msg := '10380';
    
      --- contract penality charges   
      if cur_unrealized_rows.ele_rank = 1 then
        pkg_metals_general.sp_get_penalty_charge(cur_unrealized_rows.internal_contract_item_ref_no,
                                                 pc_dbd_id,
                                                 vn_dry_qty,
                                                 cur_unrealized_rows.qty_unit_id,
                                                 vn_con_penality_charge,
                                                 vc_con_penality_cur_id);
      
        -- Convert to Base with Bank FX Rate
        vc_error_msg := '10391';
        if vn_con_penality_charge <> 0 then
          vc_error_msg := '1039WWW1 ' || vc_con_penality_cur_id;
          vc_error_msg := 'vn_con_penality_charge ' ||
                          vn_con_penality_charge || ' ' ||
                          vc_con_penality_cur_id;
        
          pkg_general.sp_get_base_cur_detail(vc_con_penality_cur_id,
                                             vc_con_pc_main_cur_id,
                                             vc_con_pc_main_cur_code,
                                             vc_con_pc_main_cur_factor);
        
          if vc_con_pc_main_cur_id <> cur_unrealized_rows.base_cur_id then
          
            pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                        pd_trade_date,
                                        cur_unrealized_rows.payment_due_date,
                                        vc_con_pc_main_cur_id,
                                        cur_unrealized_rows.base_cur_id,
                                        30,
                                        'sp_calc_phy_opencon_unreal_pnl Contract Penalty to Base Currency',
                                        pc_process,
                                        vn_con_pc_to_base_fw_rate,
                                        vn_forward_points);
            vc_error_msg                := '10406';
            vn_base_con_penality_charge := round((vn_con_penality_charge *
                                                 vn_con_pc_to_base_fw_rate *
                                                 vc_con_pc_main_cur_factor),
                                                 cur_unrealized_rows.base_cur_decimal);
          
            vc_contract_pc_fw_exch_rate := '1 ' || vc_con_pc_main_cur_code || '=' ||
                                           vn_con_pc_to_base_fw_rate || ' ' ||
                                           cur_unrealized_rows.base_cur_code;
          
          else
            vn_base_con_penality_charge := round(vn_con_penality_charge,
                                                 cur_unrealized_rows.base_cur_decimal);
          
          end if;
        else
          vn_base_con_penality_charge := 0;
        end if;
      end if;
      vc_error_msg   := '10422';
      vn_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                   cur_unrealized_rows.qty_unit_id,
                                                                   cur_unrealized_rows.conc_base_qty_unit_id,
                                                                   1) *
                              vn_wet_qty,
                              cur_unrealized_rows.conc_base_qty_decimal);
    
      vn_ele_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                                       cur_unrealized_rows.payable_qty_unit_id,
                                                                       cur_unrealized_rows.base_qty_unit_id,
                                                                       1) *
                                  cur_unrealized_rows.payable_qty,
                                  cur_unrealized_rows.base_qty_decimal);
      vc_error_msg       := '10435';
      if cur_unrealized_rows.valuation_against_underlying = 'Y' then
        vn_ele_m2m_amt := nvl(cur_unrealized_rows.net_m2m_price, 0) /
                          nvl(cur_unrealized_rows.m2m_price_unit_weight, 1) *
                          pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                               cur_unrealized_rows.payable_qty_unit_id,
                                                               cur_unrealized_rows.m2m_price_unit_weight_unit_id,
                                                               cur_unrealized_rows.payable_qty);
      
        pkg_general.sp_get_main_cur_detail(nvl(cur_unrealized_rows.m2m_price_unit_cur_id,
                                               cur_unrealized_rows.base_cur_id),
                                           vc_m2m_cur_id,
                                           vc_m2m_cur_code,
                                           vn_m2m_sub_cur_id_factor,
                                           vn_m2m_cur_decimals);
        vn_ele_m2m_amt := round(vn_ele_m2m_amt * vn_m2m_sub_cur_id_factor,
                                vn_m2m_cur_decimals);
        vc_error_msg   := '10453';
        pkg_general.sp_bank_fx_rate(cur_unrealized_rows.corporate_id,
                                    pd_trade_date,
                                    cur_unrealized_rows.payment_due_date,
                                    vc_m2m_cur_id,
                                    cur_unrealized_rows.base_cur_id,
                                    30,
                                    'sp_calc_phy_opencon_unreal_pnl M2M to Base Currency',
                                    pc_process,
                                    vn_m2m_base_fx_rate,
                                    vn_m2m_base_deviation);
        if vc_m2m_cur_id <> cur_unrealized_rows.base_cur_id then
          if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
            null;
          else
            vc_m2m_to_base_fw_rate := '1 ' || vc_m2m_cur_code || '=' ||
                                      vn_m2m_base_fx_rate || ' ' ||
                                      cur_unrealized_rows.base_cur_code;
          
          end if;
        else
          vn_m2m_base_fx_rate := 1;
        end if;
        vn_ele_m2m_amount_in_base := round(vn_ele_m2m_amt *
                                           vn_m2m_base_fx_rate,
                                           cur_unrealized_rows.base_cur_decimal);
      else
        vn_ele_m2m_amt := nvl(cur_unrealized_rows.net_m2m_price, 0) /
                          nvl(cur_unrealized_rows.m2m_price_unit_weight, 1) *
                          pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                               cur_unrealized_rows.conc_base_qty_unit_id,
                                                               cur_unrealized_rows.m2m_price_unit_weight_unit_id,
                                                               vn_dry_qty_in_base);
      
        pkg_general.sp_get_main_cur_detail(nvl(cur_unrealized_rows.m2m_price_unit_cur_id,
                                               cur_unrealized_rows.base_cur_id),
                                           vc_m2m_cur_id,
                                           vc_m2m_cur_code,
                                           vn_m2m_sub_cur_id_factor,
                                           vn_m2m_cur_decimals);
        vn_ele_m2m_amt := round(vn_ele_m2m_amt * vn_m2m_sub_cur_id_factor,
                                vn_m2m_cur_decimals);
      
        pkg_general.sp_bank_fx_rate(cur_unrealized_rows.corporate_id,
                                    pd_trade_date,
                                    cur_unrealized_rows.payment_due_date,
                                    vc_m2m_cur_id,
                                    cur_unrealized_rows.base_cur_id,
                                    30,
                                    'sp_calc_phy_opencon_unreal_pnl M2M to Base Currency',
                                    pc_process,
                                    vn_m2m_base_fx_rate,
                                    vn_m2m_base_deviation);
        vc_error_msg := '10513';
        if vc_m2m_cur_id <> cur_unrealized_rows.base_cur_id then
          if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
            null;
          else
            vc_m2m_to_base_fw_rate := '1 ' || vc_m2m_cur_code || '=' ||
                                      vn_m2m_base_fx_rate || ' ' ||
                                      cur_unrealized_rows.base_cur_code;
          
          end if;
        end if;
        if cur_unrealized_rows.ele_rank = 1 then
          vn_ele_m2m_amount_in_base := vn_ele_m2m_amt * vn_m2m_base_fx_rate;
        else
          vn_ele_m2m_amount_in_base := 0;
          vn_ele_m2m_amt            := 0;
        end if;
      end if;
      vc_error_msg := '10546';
    
      if cur_unrealized_rows.ele_rank = 1 then
      
        vn_cont_delivery_premium := 0;
        vn_cont_del_premium_amt  := 0;
      
        if cur_unrealized_rows.delivery_premium <> 0 then
          if cur_unrealized_rows.delivery_premium_unit_id <>
             vc_base_price_unit_id then
          
            vc_error_msg := '11';
            --
            -- Get the Delivery Premium Currency 
            --
            select ppu.cur_id,
                   cm.cur_code,
                   nvl(ppu.weight, 1),
                   ppu.weight_unit_id
              into vc_del_premium_cur_id,
                   vc_del_premium_cur_code,
                   vn_del_premium_weight,
                   vc_del_premium_weight_unit_id
              from v_ppu_pum          ppu,
                   cm_currency_master cm
             where ppu.product_price_unit_id =
                   cur_unrealized_rows.delivery_premium_unit_id
               and cm.cur_id = ppu.cur_id;
            --
            -- Get the Main Currency of the Delivery Premium Price Unit
            --
            vc_error_msg := '12';
            pkg_general.sp_get_base_cur_detail(vc_del_premium_cur_id,
                                               vc_del_premium_main_cur_id,
                                               vc_del_premium_main_cur_code,
                                               vn_del_premium_cur_main_factor);
          
            pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                        pd_trade_date,
                                        cur_unrealized_rows.payment_due_date,
                                        vc_del_premium_main_cur_id,
                                        cur_unrealized_rows.base_cur_id,
                                        30,
                                        'Sp_calc_phy_oepncon_unreal_pnl Delivery To Base Currency',
                                        pc_process,
                                        vn_del_to_base_fw_rate,
                                        vn_forward_points);
          
            vc_error_msg := '13';
          
            vn_cont_delivery_premium := (cur_unrealized_rows.delivery_premium /
                                        vn_del_premium_weight) *
                                        vn_del_premium_cur_main_factor *
                                        vn_del_to_base_fw_rate *
                                        pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                             vc_del_premium_weight_unit_id,
                                                                             cur_unrealized_rows.conc_base_qty_unit_id,
                                                                             1);
            vc_error_msg             := '14';
            if cur_unrealized_rows.base_cur_code <>
               vc_del_premium_main_cur_code then
              vc_contract_pp_fw_exch_rate := '1 ' ||
                                             vc_del_premium_main_cur_code || '=' ||
                                             vn_del_to_base_fw_rate || ' ' ||
                                             cur_unrealized_rows.base_cur_code;
            end if;
          
            if cur_unrealized_rows.base_cur_code <>
               vc_del_premium_main_cur_code then
              if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure pkg_phy_physical_process-sp_calc_phy_open_unrealized ',
                                                                     'PHY-005',
                                                                     cur_unrealized_rows.base_cur_code ||
                                                                     ' to ' ||
                                                                     vc_del_premium_main_cur_code || ' (' ||
                                                                     to_char(cur_unrealized_rows.payment_due_date,
                                                                             'dd-Mon-yyyy') || ') ',
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
              end if;
            end if;
          else
            vn_cont_delivery_premium := cur_unrealized_rows.delivery_premium;
          end if;
          vn_cont_del_premium_amt := round(vn_cont_delivery_premium *
                                           vn_qty_in_base,
                                           2);
        else
          vn_cont_delivery_premium := 0;
          vn_cont_del_premium_amt  := 0;
        end if;
      end if;
      -- Forward Rate from M2M Treatment Charge to Base Currency
      pkg_general.sp_get_base_cur_detail(cur_unrealized_rows.m2m_tc_cur_id,
                                         vc_m2m_tc_main_cur_id,
                                         vc_m2m_tc_main_cur_code,
                                         vc_m2m_tc_main_cur_factor);
      if vc_m2m_tc_main_cur_id <> cur_unrealized_rows.base_cur_id then
        pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                    pd_trade_date,
                                    cur_unrealized_rows.payment_due_date,
                                    cur_unrealized_rows.m2m_tc_cur_id,
                                    cur_unrealized_rows.base_cur_id,
                                    30,
                                    'sp_calc_phy_opencon_unreal_pnl M2M TC to Base Currency',
                                    pc_process,
                                    vn_m2m_tc_to_base_fw_rate,
                                    vn_forward_points);
      else
        vn_m2m_tc_to_base_fw_rate := 1;
      end if;
    
      vn_ele_m2m_treatment_charge := round((cur_unrealized_rows.m2m_treatment_charge /
                                           nvl(cur_unrealized_rows.m2m_tc_weight,
                                                1)) *
                                           vn_m2m_tc_to_base_fw_rate *
                                           (pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                                 cur_unrealized_rows.qty_unit_id,
                                                                                 cur_unrealized_rows.m2m_tc_weight_unit_id,
                                                                                 vn_dry_qty)),
                                           cur_unrealized_rows.base_cur_decimal);
      vc_error_msg                := '10554';
      -- Forward Rate from M2M Refining Charge to Base Currency
    
      pkg_general.sp_get_base_cur_detail(cur_unrealized_rows.m2m_rc_cur_id,
                                         vc_m2m_rc_main_cur_id,
                                         vc_m2m_rc_main_cur_code,
                                         vc_m2m_rc_main_cur_factor);
      if vc_m2m_rc_main_cur_id <> cur_unrealized_rows.base_cur_id then
        pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                    pd_trade_date,
                                    cur_unrealized_rows.payment_due_date,
                                    cur_unrealized_rows.m2m_rc_cur_id,
                                    cur_unrealized_rows.base_cur_id,
                                    30,
                                    'sp_calc_phy_opencon_unreal_pnl M2M RC to Base Currency',
                                    pc_process,
                                    vn_m2m_rc_to_base_fw_rate,
                                    vn_forward_points);
      else
        vn_m2m_rc_to_base_fw_rate := 1;
      end if;
    
      vn_ele_m2m_refine_charge := round((cur_unrealized_rows.m2m_refining_charge /
                                        nvl(cur_unrealized_rows.m2m_rc_weight,
                                             1)) *
                                        vn_m2m_rc_to_base_fw_rate *
                                        (pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                                              cur_unrealized_rows.payable_qty_unit_id,
                                                                              cur_unrealized_rows.m2m_rc_weight_unit_id,
                                                                              cur_unrealized_rows.payable_qty)),
                                        cur_unrealized_rows.base_cur_decimal);
    
      vn_loc_amount := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                  cur_unrealized_rows.qty_unit_id,
                                                                  cur_unrealized_rows.conc_base_qty_unit_id,
                                                                  1) *
                             cur_unrealized_rows.m2m_loc_incoterm_deviation,
                             cur_unrealized_rows.base_cur_decimal);
    
      vn_loc_total_amount   := round(vn_loc_amount * vn_qty_in_base,
                                     cur_unrealized_rows.base_cur_decimal);
      vn_m2m_total_penality := 0;
      vc_error_msg          := '1074';
      if cur_unrealized_rows.ele_rank = 1 then
        begin
          select ppu.product_price_unit_id
            into vc_price_unit_id
            from v_ppu_pum         ppu,
                 pdm_productmaster pdm,
                 ak_corporate      akc
           where ppu.product_id = cur_unrealized_rows.conc_product_id
             and ppu.product_id = pdm.product_id
             and pdm.base_quantity_unit = ppu.weight_unit_id
             and ppu.cur_id = akc.base_cur_id
             and nvl(ppu.weight, 1) = 1
             and akc.corporate_id = pc_corporate_id;
        
        exception
          when no_data_found then
            vc_price_unit_id := null;
        end;
        vn_m2m_total_penality := 0;
        for cc in (select pci.internal_contract_item_ref_no,
                          pqca.element_id,
                          pcpq.quality_template_id
                     from pci_physical_contract_item  pci,
                          pcpq_pc_product_quality     pcpq,
                          ash_assay_header            ash,
                          asm_assay_sublot_mapping    asm,
                          pqca_pq_chemical_attributes pqca
                    where pci.pcpq_id = pcpq.pcpq_id
                      and pcpq.assay_header_id = ash.ash_id
                      and ash.ash_id = asm.ash_id
                      and asm.asm_id = pqca.asm_id
                      and pci.process_id = pc_process_id
                      and pcpq.process_id = pc_process_id
                      and pci.is_active = 'Y'
                      and pcpq.is_active = 'Y'
                      and ash.is_active = 'Y'
                      and asm.is_active = 'Y'
                      and pqca.is_active = 'Y'
                      and pqca.is_elem_for_pricing = 'N'
                      and pqca.is_deductible = 'Y'
                      and pci.internal_contract_item_ref_no =
                          cur_unrealized_rows.internal_contract_item_ref_no)
        loop
          pkg_phy_pre_check_process.sp_m2m_tc_pc_rc_charge(cur_unrealized_rows.corporate_id,
                                                           pd_trade_date,
                                                           cur_unrealized_rows.conc_product_id,
                                                           cur_unrealized_rows.conc_quality_id,
                                                           cur_unrealized_rows.mvp_id,
                                                           'Penalties',
                                                           cc.element_id,
                                                           cur_unrealized_rows.shipment_month,
                                                           cur_unrealized_rows.shipment_year,
                                                           vc_price_unit_id,
                                                           cur_unrealized_rows.payment_due_date,
                                                           vn_m2m_penality,
                                                           vc_m2m_pc_fw_exch_rate);
          vc_error_msg := '10631';
          if vc_m2m_pc_fw_exch_rate is not null then
            if vc_m2m_total_pc_fw_exch_rate is null then
              vc_m2m_total_pc_fw_exch_rate := vc_m2m_pc_fw_exch_rate;
            else
              if instr(vc_m2m_total_pc_fw_exch_rate, vc_m2m_pc_fw_exch_rate) = 0 then
                vc_m2m_total_pc_fw_exch_rate := vc_m2m_total_pc_fw_exch_rate || ',' ||
                                                vc_m2m_pc_fw_exch_rate;
              end if;
            end if;
          end if;
        
          if nvl(vn_m2m_penality, 0) <> 0 then
            vn_m2m_total_penality := round(vn_m2m_total_penality +
                                           (vn_m2m_penality *
                                           vn_dry_qty_in_base),
                                           cur_unrealized_rows.base_cur_decimal);
          end if;
        
        end loop;
      
      end if;
      vc_error_msg            := '10653';
      vn_ele_m2m_total_amount := vn_ele_m2m_amount_in_base -
                                 vn_ele_m2m_treatment_charge -
                                 vn_ele_m2m_refine_charge;
    
      pkg_general.sp_get_main_cur_detail(cur_unrealized_rows.price_unit_cur_id,
                                         vc_price_cur_id,
                                         vc_price_cur_code,
                                         vn_cont_price_cur_id_factor,
                                         vn_cont_price_cur_decimals);
    
      vn_ele_cont_value_in_price_cur := (cur_unrealized_rows.contract_price /
                                        nvl(cur_unrealized_rows.price_unit_weight,
                                             1)) *
                                        (pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                                              cur_unrealized_rows.payable_qty_unit_id,
                                                                              cur_unrealized_rows.price_unit_weight_unit_id,
                                                                              cur_unrealized_rows.payable_qty)) *
                                        vn_cont_price_cur_id_factor;
      pkg_general.sp_bank_fx_rate(cur_unrealized_rows.corporate_id,
                                  pd_trade_date,
                                  cur_unrealized_rows.payment_due_date,
                                  vc_price_cur_id,
                                  cur_unrealized_rows.base_cur_id,
                                  30,
                                  'sp_calc_phy_opencon_unreal_pnl Price to Base Currency',
                                  pc_process,
                                  vn_fx_price_to_base,
                                  vn_forward_exch_rate);
      vc_error_msg := '10680';
      if vc_price_cur_id <> cur_unrealized_rows.base_cur_id then
        if vn_fx_price_to_base is null or vn_fx_price_to_base = 0 then
          null;
        else
          vc_price_to_base_fw_rate := '1 ' || vc_price_cur_code || '=' ||
                                      vn_fx_price_to_base || ' ' ||
                                      cur_unrealized_rows.base_cur_code;
        end if;
      end if;
    
      -- contract value in value currency will store the data in base currency
      vn_ele_cont_value_in_price_cur := round(vn_ele_cont_value_in_price_cur *
                                              nvl(vn_fx_price_to_base, 1),
                                              cur_unrealized_rows.base_cur_decimal);
    
      vn_ele_cont_premium := vn_base_con_treatment_charge +
                             vn_base_con_refine_charge;
    
      vn_ele_cont_total_premium := round((nvl(vn_ele_cont_premium, 0) *
                                         vn_ele_qty_in_base),
                                         cur_unrealized_rows.base_cur_decimal);
    
      vn_ele_cont_value_in_base_cur := vn_ele_cont_value_in_price_cur -
                                       vn_ele_cont_total_premium;
      vc_error_msg                  := '10716';
      -- secondray cost                                 
      if cur_unrealized_rows.ele_rank = 1 then
        vn_sc_in_base_cur := round(cur_unrealized_rows.sc_in_base_cur *
                                   vn_qty_in_base,
                                   cur_unrealized_rows.base_cur_decimal);
      end if;
      -- below variable set as zero as it's not used in any calculation.
      vn_unrealized_pnl_in_m2m_unit := 0;
      vc_m2m_price_unit_id          := cur_unrealized_rows.m2m_price_unit_id;
      vc_m2m_price_unit_cur_id      := cur_unrealized_rows.m2m_price_unit_cur_id;
      vc_m2m_price_unit_cur_code    := cur_unrealized_rows.m2m_price_unit_cur_code;
      vc_m2m_price_unit_wgt_unit_id := cur_unrealized_rows.m2m_price_unit_weight_unit_id;
      vc_m2m_price_unit_wgt_unit    := cur_unrealized_rows.m2m_price_unit_weight_unit;
      vn_m2m_price_unit_wgt_unit_wt := cur_unrealized_rows.m2m_price_unit_weight;
    
      insert into poued_element_details
        (corporate_id,
         corporate_name,
         process_id,
         md_id,
         internal_contract_item_ref_no,
         element_id,
         element_name,
         assay_header_id,
         assay_qty,
         assay_qty_unit_id,
         payable_qty,
         payable_qty_unit_id,
         refining_charge,
         treatment_charge,
         pricing_details,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight_unit_id,
         price_unit_weight,
         price_unit_weight_unit,
         m2m_price,
         m2m_price_unit_id,
         m2m_price_cur_id,
         m2m_price_cur_code,
         m2m_price_weight,
         m2m_price_weght_unit_id,
         m2m_price_weight_unit,
         contract_value,
         contract_value_cur_id,
         contract_value_cur_code,
         contract_value_in_base,
         contract_premium_value_in_base,
         m2m_value,
         m2m_value_cur_id,
         m2m_value_cur_code,
         m2m_refining_charge,
         m2m_treatment_charge,
         m2m_loc_diff,
         m2m_amt_in_base,
         valuation_dr_id,
         valuation_dr_id_name,
         valuation_month,
         valuation_date,
         expected_cog_net_sale_value,
         unrealized_pnl_in_base_cur,
         base_cur_id,
         base_cur_code,
         price_cur_to_base_cur_fx_rate,
         m2m_cur_to_base_cur_fx_rate,
         derivative_def_id,
         valuation_exchange_id,
         valuation_exchange,
         element_qty_in_base_unit,
         base_price_unit_id_ppu,
         base_price_unit_name,
         valuation_against_underlying,
         contract_rc_fw_exch_rate,
         contract_tc_fw_exch_rate,
         m2m_rc_fw_exch_rate,
         m2m_tc_fw_exch_rate,
         m2m_ld_fw_exch_rate,
         price_to_base_fw_exch_rate)
      values
        (cur_unrealized_rows.corporate_id,
         cur_unrealized_rows.corporate_name,
         pc_process_id,
         cur_unrealized_rows.md_id,
         cur_unrealized_rows.internal_contract_item_ref_no,
         cur_unrealized_rows.element_id,
         cur_unrealized_rows.attribute_name,
         cur_unrealized_rows.assay_header_id,
         cur_unrealized_rows.assay_qty,
         cur_unrealized_rows.assay_qty_unit_id,
         cur_unrealized_rows.payable_qty,
         cur_unrealized_rows.payable_qty_unit_id,
         vn_base_con_refine_charge,
         vn_base_con_treatment_charge,
         cur_unrealized_rows.attribute_name ||
         cur_unrealized_rows.price_description, --pricing_details,
         cur_unrealized_rows.contract_price,
         cur_unrealized_rows.price_unit_id,
         cur_unrealized_rows.price_unit_cur_id,
         cur_unrealized_rows.price_unit_cur_code,
         cur_unrealized_rows.price_unit_weight_unit_id,
         cur_unrealized_rows.price_unit_weight,
         cur_unrealized_rows.price_unit_weight_unit,
         cur_unrealized_rows.net_m2m_price,
         cur_unrealized_rows.m2m_price_unit_id,
         cur_unrealized_rows.m2m_price_unit_cur_id,
         cur_unrealized_rows.m2m_price_unit_cur_code,
         decode(cur_unrealized_rows.m2m_price_unit_weight,
                1,
                null,
                cur_unrealized_rows.m2m_price_unit_weight),
         cur_unrealized_rows.m2m_price_unit_weight_unit_id,
         cur_unrealized_rows.m2m_price_unit_weight_unit,
         vn_ele_cont_value_in_price_cur, --contract_value,
         vc_price_cur_id, --contract_value_cur_id,
         vc_price_cur_code, --contract_value_cur_code,
         vn_ele_cont_value_in_price_cur, --contract_value_in_base, 
         vn_ele_cont_total_premium, -- contract_premium_value_in_base , 
         vn_ele_m2m_amount_in_base, --m2m_value,
         vc_m2m_cur_id,
         vc_m2m_cur_code,
         vn_ele_m2m_refine_charge,
         vn_ele_m2m_treatment_charge,
         cur_unrealized_rows.m2m_loc_incoterm_deviation,
         vn_ele_m2m_amount_in_base, -- updated by siva on 14sep2011 vn_ele_m2m_total_amount, --m2m_amt_in_base, ---used to sum at main table
         -- round(vn_ele_sc_in_base_cur, 3), --sc_in_base_cur,
         cur_unrealized_rows.valuation_dr_id,
         cur_unrealized_rows.dr_id_name,
         cur_unrealized_rows.valuation_month,
         cur_unrealized_rows.valuation_date,
         vn_ele_exp_cog_in_base_cur, --expected_cog_net_sale_value,
         vn_ele_unreal_pnl_in_base_cur, --unrealized_pnl_in_base_cur,
         cur_unrealized_rows.base_cur_id,
         cur_unrealized_rows.base_cur_code,
         vn_fx_price_to_base, --price_cur_to_base_cur_fx_rate,
         vn_m2m_base_fx_rate, --m2m_cur_to_base_cur_fx_rate,
         cur_unrealized_rows.derivative_def_id,
         cur_unrealized_rows.valuation_exchange_id,
         cur_unrealized_rows.exchange_name,
         vn_ele_qty_in_base,
         cur_unrealized_rows.base_price_unit_id_in_ppu,
         cur_unrealized_rows.base_price_unit_name,
         cur_unrealized_rows.valuation_against_underlying,
         vc_contract_rc_fw_exch_rate,
         vc_contract_tc_fw_exch_rate,
         cur_unrealized_rows.m2m_rc_fw_exch_rate,
         cur_unrealized_rows.m2m_tc_fw_exch_rate,
         cur_unrealized_rows.m2m_ld_fw_exch_rate,
         vc_price_to_base_fw_rate);
    
      if cur_unrealized_rows.ele_rank = 1 then
        insert into poue_phy_open_unreal_element
          (corporate_id,
           corporate_name,
           process_id,
           pcdi_id,
           delivery_item_no,
           prefix,
           middle_no,
           suffix,
           internal_contract_ref_no,
           contract_ref_no,
           contract_issue_date,
           internal_contract_item_ref_no,
           basis_type,
           delivery_period_type,
           delivery_from_month,
           delivery_from_year,
           delivery_to_month,
           delivery_to_year,
           delivery_from_date,
           delivery_to_date,
           transit_days,
           contract_type,
           approval_status,
           unrealized_type,
           profit_center_id,
           profit_center_name,
           profit_center_short_name,
           cp_profile_id,
           cp_name,
           trade_user_id,
           trade_user_name,
           product_id,
           product_name,
           item_dry_qty,
           item_wet_qty,
           qty_unit_id,
           qty_unit,
           quality_id,
           quality_name,
           fixation_method,
           price_string,
           price_fixation_status,
           price_fixation_details,
           item_delivery_period_string,
           incoterm_id,
           incoterm,
           origination_city_id,
           origination_city,
           origination_country_id,
           origination_country,
           destination_city_id,
           destination_city,
           destination_country_id,
           destination_country,
           origination_region_id,
           origination_region,
           destination_region_id,
           destination_region,
           payment_term_id,
           payment_term,
           contract_price_string,
           contract_rc_tc_pen_string,
           m2m_price_string,
           m2m_rc_tc_pen_string,
           net_contract_value_in_base_cur,
           net_contract_prem_in_base_cur,
           net_m2m_amt_in_base_cur,
           net_sc_in_base_cur,
           expected_cog_net_sale_value,
           unrealized_pnl_in_base_cur,
           unreal_pnl_in_base_per_unit,
           prev_day_unr_pnl_in_base_cur,
           trade_day_pnl_in_base_cur,
           base_cur_id,
           base_cur_code,
           group_id,
           group_name,
           group_cur_id,
           group_cur_code,
           group_qty_unit_id,
           group_qty_unit,
           base_qty_unit_id,
           base_qty_unit,
           cont_unr_status,
           qty_in_base_unit,
           process_trade_date,
           strategy_id,
           strategy_name,
           del_distribution_item_no,
           penalty_charge,
           m2m_penalty_charge,
           m2m_loc_diff_premium,
           valuation_against_underlying,
           contract_pc_fw_exch_rate,
           accrual_to_base_fw_exch_rate,
           location_premium_per_unit,
           location_premium,
           location_premium_fw_exch_rate,
           contract_status,
           is_approved)
        values
          (cur_unrealized_rows.corporate_id,
           cur_unrealized_rows.corporate_name,
           pc_process_id,
           cur_unrealized_rows.pcdi_id,
           cur_unrealized_rows.delivery_item_no,
           cur_unrealized_rows.prefix,
           cur_unrealized_rows.middle_no,
           cur_unrealized_rows.suffix,
           cur_unrealized_rows.internal_contract_ref_no,
           cur_unrealized_rows.contract_ref_no,
           cur_unrealized_rows.issue_date,
           cur_unrealized_rows.internal_contract_item_ref_no,
           cur_unrealized_rows.basis_type,
           cur_unrealized_rows.delivery_period_type,
           cur_unrealized_rows.delivery_from_month,
           cur_unrealized_rows.delivery_from_year,
           cur_unrealized_rows.delivery_to_month,
           cur_unrealized_rows.delivery_to_year,
           cur_unrealized_rows.delivery_from_date,
           cur_unrealized_rows.delivery_to_date,
           cur_unrealized_rows.transit_days,
           cur_unrealized_rows.purchase_sales,
           cur_unrealized_rows.approval_status,--
           cur_unrealized_rows.unrealized_type,
           cur_unrealized_rows.profit_center_id,
           cur_unrealized_rows.profit_center_name,
           cur_unrealized_rows.profit_center_short_name,
           cur_unrealized_rows.cp_id,
           cur_unrealized_rows.cp_name,
           cur_unrealized_rows.trader_id,
           cur_unrealized_rows.trader_user_name,
           cur_unrealized_rows.conc_product_id,
           cur_unrealized_rows.conc_product_name,
           vn_dry_qty,
           vn_wet_qty,
           cur_unrealized_rows.qty_unit_id,
           cur_unrealized_rows.qty_unit,
           cur_unrealized_rows.conc_quality_id,
           cur_unrealized_rows.conc_quality_name,
           cur_unrealized_rows.fixation_method,
           cur_unrealized_rows.price_description,
           cur_unrealized_rows.price_fixation_status,
           cur_unrealized_rows.price_fixation_details,
           cur_unrealized_rows.item_delivery_period_string,
           cur_unrealized_rows.inco_term_id,
           cur_unrealized_rows.incoterm,
           cur_unrealized_rows.origination_city_id,
           cur_unrealized_rows.origination_city,
           cur_unrealized_rows.origination_country_id,
           cur_unrealized_rows.origination_country,
           cur_unrealized_rows.destination_city_id,
           cur_unrealized_rows.destination_city,
           cur_unrealized_rows.destination_country_id,
           cur_unrealized_rows.destination_country,
           cur_unrealized_rows.origination_region_id,
           cur_unrealized_rows.origination_region,
           cur_unrealized_rows.destination_region_id,
           cur_unrealized_rows.destination_region,
           cur_unrealized_rows.payment_term_id,
           cur_unrealized_rows.payment_term,
           null, -- contract_price_string,
           null, --contract_rc_tc_pen_string,
           null, -- m2m_price_string,
           null, -- m2m_rc_tc_pen_string,
           null, -- net_contract_value_in_base_cur,
           null, -- net_contract_prem_in_base_cur,
           null, -- net_m2m_amt_in_base_cur, 
           vn_sc_in_base_cur, -- net_sc_in_base_cur,
           null, -- expected_cog_net_sale_value,
           null, -- unrealized_pnl_in_base_cur,
           null, -- unreal_pnl_in_base_per_unit,
           null, -- prev_day_unr_pnl_in_base_cur,
           null, -- trade_day_pnl_in_base_cur,
           cur_unrealized_rows.base_cur_id,
           cur_unrealized_rows.base_cur_code,
           cur_unrealized_rows.groupid,
           cur_unrealized_rows.groupname,
           cur_unrealized_rows.cur_id_gcd,
           cur_unrealized_rows.cur_code_gcd,
           cur_unrealized_rows.qty_unit_id_gcd,
           cur_unrealized_rows.qty_unit_gcd,
           cur_unrealized_rows.base_qty_unit_id,
           cur_unrealized_rows.base_qty_unit,
           null, -- cont_unr_status,
           vn_qty_in_base,
           pd_trade_date,
           cur_unrealized_rows.strategy_id,
           cur_unrealized_rows.strategy_name,
           cur_unrealized_rows.del_distribution_item_no,
           vn_base_con_penality_charge,
           vn_m2m_total_penality,
           vn_loc_total_amount,
           cur_unrealized_rows.valuation_against_underlying,
           vc_contract_pc_fw_exch_rate,
           cur_unrealized_rows.accrual_to_base_fw_exch_rate,
           vn_cont_delivery_premium,
           vn_cont_del_premium_amt,
           vc_contract_pp_fw_exch_rate,
           cur_unrealized_rows.contract_status,
           cur_unrealized_rows.approval_flag);
        dbms_output.put_line('vn_m2m_total_penality' ||
                             vn_m2m_total_penality);
      end if;
    
    end loop;
    vc_error_msg := '11066';
    for cur_update_pnl in (select poude.internal_contract_item_ref_no,
                                  sum(poude.contract_value_in_base) net_contract_value_in_base_cur,
                                  sum(poude.contract_premium_value_in_base) net_contract_prem_in_base_cur,
                                  sum(poude.m2m_amt_in_base) net_m2m_amt_in_base_cur,
                                  sum(poude.treatment_charge) net_contract_treatment_charge,
                                  sum(poude.refining_charge) net_contract_refining_charge,
                                  sum(poude.m2m_treatment_charge) net_m2m_treatment_charge,
                                  sum(poude.m2m_refining_charge) net_m2m_refining_charge,
                                  stragg(poude.element_name || '-' ||
                                         poude.contract_price || ' ' ||
                                         poude.price_unit_cur_code || '/' ||
                                         poude.price_unit_weight ||
                                         poude.price_unit_weight_unit) contract_price_string,
                                  (case
                                     when poude.valuation_against_underlying = 'N' then
                                      max((case
                                     when nvl(poude.m2m_price, 0) <> 0 then
                                      (poude.m2m_price || ' ' ||
                                      poude.m2m_price_cur_code || '/' ||
                                      poude.m2m_price_weight ||
                                      poude.m2m_price_weight_unit)
                                     else
                                      null
                                   end)) else stragg((case
                                    when nvl(poude.m2m_price,
                                             0) <> 0 then
                                     (poude.element_name || '-' ||
                                     poude.m2m_price || ' ' ||
                                     poude.m2m_price_cur_code || '/' ||
                                     poude.m2m_price_weight ||
                                     poude.m2m_price_weight_unit)
                                    else
                                     null
                                  end)) end) m2m_price_string, -- TODO if underly valuation = n, show the concentrate price
                                  stragg('TC:' || poude.element_name || '-' ||
                                         poude.treatment_charge || ' ' ||
                                         poude.base_cur_code || '  ' ||
                                         'RC:' || poude.element_name || '-' ||
                                         poude.refining_charge || ' ' ||
                                         poude.base_cur_code) contract_rc_tc_pen_string,
                                  stragg('TC:' || poude.element_name || '-' ||
                                         poude.m2m_treatment_charge || ' ' ||
                                         poude.base_cur_code || ' ' || 'RC:' ||
                                         poude.element_name || '-' ||
                                         poude.m2m_refining_charge || ' ' ||
                                         poude.base_cur_code) m2m_rc_tc_pen_string,
                                  stragg(poude.pricing_details) price_string,
                                  stragg(poude.price_to_base_fw_exch_rate) price_to_base_fw_exch_rate
                             from poued_element_details poude
                            where poude.corporate_id = pc_corporate_id
                              and poude.process_id = pc_process_id
                            group by poude.internal_contract_item_ref_no,
                                     poude.valuation_against_underlying)
    loop
      update poue_phy_open_unreal_element poue
         set poue.net_contract_value_in_base_cur = round(cur_update_pnl.net_contract_value_in_base_cur,
                                                         2),
             poue.net_contract_prem_in_base_cur  = round(cur_update_pnl.net_contract_prem_in_base_cur,
                                                         2),
             poue.net_m2m_amt_in_base_cur        = round(cur_update_pnl.net_m2m_amt_in_base_cur,
                                                         2),
             poue.net_contract_treatment_charge  = round(cur_update_pnl.net_contract_treatment_charge,
                                                         2),
             poue.net_contract_refining_charge   = round(cur_update_pnl.net_contract_refining_charge,
                                                         2),
             poue.net_m2m_treatment_charge       = round(cur_update_pnl.net_m2m_treatment_charge,
                                                         2),
             poue.net_m2m_refining_charge        = round(cur_update_pnl.net_m2m_refining_charge,
                                                         2),
             poue.contract_price_string          = cur_update_pnl.contract_price_string,
             poue.m2m_price_string               = cur_update_pnl.m2m_price_string,
             poue.contract_rc_tc_pen_string      = cur_update_pnl.contract_rc_tc_pen_string,
             poue.m2m_rc_tc_pen_string           = cur_update_pnl.m2m_rc_tc_pen_string,
             poue.price_string                   = cur_update_pnl.price_string,
             poue.price_to_base_fw_exch_rate     = cur_update_pnl.price_to_base_fw_exch_rate
       where poue.internal_contract_item_ref_no =
             cur_update_pnl.internal_contract_item_ref_no
         and poue.process_id = pc_process_id
         and poue.corporate_id = pc_corporate_id;
    end loop;
    commit;
    vc_error_msg := '11139';
    update poue_phy_open_unreal_element poue
       set poue.expected_cog_net_sale_value = poue.net_contract_value_in_base_cur +
                                              poue.location_premium -
                                              poue.net_contract_treatment_charge -
                                              poue.penalty_charge -
                                              poue.net_contract_refining_charge +
                                              poue.net_sc_in_base_cur
     where poue.corporate_id = pc_corporate_id
       and poue.process_id = pc_process_id;
    commit;
    --- Update Unrealized PNL
    update poue_phy_open_unreal_element poue
       set poue.unrealized_pnl_in_base_cur = --
            (case when poue.contract_type = 'P' then --
            (poue.net_m2m_amt_in_base_cur - poue.net_m2m_treatment_charge - poue.net_m2m_refining_charge - --
            nvl(poue.m2m_penalty_charge, 0) + poue.m2m_loc_diff_premium) - --
            (poue.expected_cog_net_sale_value) --
            else(poue.expected_cog_net_sale_value) - --
            (poue.net_m2m_amt_in_base_cur - poue.net_m2m_treatment_charge - poue.net_m2m_refining_charge - --
            nvl(poue.m2m_penalty_charge, 0) + poue.m2m_loc_diff_premium) end)
     where poue.corporate_id = pc_corporate_id
       and poue.process_id = pc_process_id;
    commit;
    -- Update PNL Per Base Unit, This should never be rounded off
    update poue_phy_open_unreal_element poue
       set poue.unreal_pnl_in_base_per_unit = poue.unrealized_pnl_in_base_cur /
                                              poue.qty_in_base_unit
     where poue.corporate_id = pc_corporate_id
       and poue.process_id = pc_process_id
       and poue.qty_in_base_unit <> 0;
  
    -- update previous eod data  
    begin
      for cur_update in (select poue_prev_day.internal_contract_item_ref_no,
                                poue_prev_day.unreal_pnl_in_base_per_unit,
                                poue_prev_day.unrealized_type
                           from poue_phy_open_unreal_element poue_prev_day
                          where poue_prev_day.process_id =
                                pc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update poue_phy_open_unreal_element poue_today
           set poue_today.prev_day_unr_pnl_in_base_cur = round(cur_update.unreal_pnl_in_base_per_unit *
                                                               poue_today.qty_in_base_unit,
                                                               2),
               poue_today.cont_unr_status              = 'EXISTING_TRADE'
         where poue_today.internal_contract_item_ref_no =
               cur_update.internal_contract_item_ref_no
           and poue_today.process_id = pc_process_id
           and poue_today.unrealized_type = cur_update.unrealized_type
           and poue_today.corporate_id = pc_corporate_id;
      end loop;
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  
    -- mark the trades came as new in this eod/eom
    update poue_phy_open_unreal_element poue
       set poue.cont_unr_status = 'NEW_TRADE'
     where poue.cont_unr_status is null
       and poue.process_id = pc_process_id
       and poue.corporate_id = pc_corporate_id;
  
    update poue_phy_open_unreal_element poue
       set poue.trade_day_pnl_in_base_cur = round(nvl(poue.unrealized_pnl_in_base_cur,
                                                      0) - nvl(poue.prev_day_unr_pnl_in_base_cur,
                                                               0),
                                                  2)
     where poue.process_id = pc_process_id
       and poue.corporate_id = pc_corporate_id
       and poue.unrealized_type = 'Unrealized';
    vc_error_msg := '11215';
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_phy_opencon_unreal_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           ' Line:' ||
                                                           vc_error_msg,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_stock_unreal_sntt_conc(pc_corporate_id        varchar2,
                                      pd_trade_date          date,
                                      pc_process_id          varchar2,
                                      pc_dbd_id              varchar2,
                                      pc_user_id             varchar2,
                                      pc_process             varchar2,
                                      pc_previous_process_id varchar2) is
  
    cursor cur_grd is
      select tt.section_type,
             tt.profit_center,
             tt.profit_center_name,
             tt.profit_center_short_name,
             tt.process_id,
             tt.corporate_id,
             tt.corporate_name,
             tt.internal_gmr_ref_no,
             tt.internal_contract_item_ref_no,
             tt.del_distribution_item_no,
             tt.delivery_item_no,
             tt.contract_ref_no,
             tt.purchase_sales,
             tt.conc_product_id,
             tt.conc_product_name,
             tt.product_id,
             tt.product_name,
             tt.origin_id,
             tt.origin_name,
             tt.conc_quality_id,
             tt.conc_quality_name,
             tt.quality_id,
             tt.quality_name,
             tt.container_no,
             tt.stock_qty,
             tt.qty_unit_id,
             tt.gmr_qty_unit_id,
             tt.qty_unit,
             tt.stocky_qty_decimal,
             tt.no_of_units,
             tt.md_id,
             tt.m2m_price_unit_id,
             tt.net_m2m_price,
             tt.m2m_price_unit_cur_id,
             tt.m2m_price_unit_cur_code,
             tt.m2m_price_unit_weight_unit_id,
             tt.m2m_price_unit_weight_unit,
             tt.m2m_price_unit_weight,
             tt.m2m_price_unit_str,
             tt.m2m_main_cur_id,
             tt.m2m_main_cur_code,
             tt.m2m_main_cur_decimals,
             tt.main_currency_factor,
             tt.settlement_cur_id,
             tt.settlement_to_val_fx_rate,
             tt.element_id,
             tt.attribute_name,
             tt.assay_header_id,
             tt.assay_qty,
             tt.assay_qty_unit_id,
             tt.payable_qty,
             tt.payable_qty_unit_id,
             tt.payable_qty_unit,
             tt.contract_price,
             tt.price_unit_id,
             tt.price_unit_weight_unit_id,
             tt.price_unit_weight,
             tt.price_unit_cur_id,
             tt.price_unit_cur_code,
             tt.price_unit_weight_unit,
             tt.price_fixation_details,
             tt.price_description,
             tt.payment_due_date,
             tt.base_cur_id,
             tt.base_cur_code,
             tt.base_cur_decimal,
             tt.inventory_status,
             tt.shipment_status,
             tt.section_name,
             tt.price_basis,
             tt.shed_id,
             tt.destination_city_id,
             tt.price_fixation_status,
             tt.base_qty_unit_id,
             tt.conc_base_qty_unit_id,
             tt.base_qty_decimal,
             tt.strategy_id,
             tt.strategy_name,
             tt.valuation_exchange_id,
             tt.valuation_month,
             tt.derivative_def_id,
             tt.is_voyage_gmr,
             tt.gmr_contract_type,
             tt.int_alloc_group_id,
             tt.internal_grd_dgrd_ref_no,
             tt.stock_ref_no,
             tt.trader_id,
             tt.trader_user_name,
             tt.m2m_loc_incoterm_deviation,
             tt.m2m_treatment_charge,
             tt.m2m_refine_charge,
             tt.m2m_tc_price_unit_id,
             tt.m2m_tc_price_unit_name,
             tt.m2m_tc_cur_id,
             tt.m2m_tc_weight,
             tt.m2m_tc_weight_unit_id,
             tt.m2m_rc_price_unit_id,
             tt.m2m_rc_price_unit_name,
             tt.m2m_rc_cur_id,
             tt.m2m_rc_weight,
             tt.m2m_rc_weight_unit_id,
             tt.base_price_unit_id_in_ppu,
             tt.base_price_unit_id_in_pum,
             tt.eval_basis,
             dense_rank() over(partition by tt.internal_contract_item_ref_no order by tt.element_id) ele_rank,
             tt.unit_of_measure,
             tt.loc_qty_unit_id,
             tt.mvp_id,
             tt.shipment_month,
             tt.shipment_year,
             tt.base_price_unit_name,
             tt.valuation_against_underlying,
             tt.m2m_rc_fw_exch_rate,
             tt.m2m_tc_fw_exch_rate,
             tt.m2m_ld_fw_exch_rate,
             tt.sc_in_base_cur,
             tt.accrual_to_base_fw_rate,
             tt.incoterm_id,
             tt.incoterm,
             tt.cp_id,
             tt.cp_name,
             tt.delivery_month,
             tt.delivery_premium,
             tt.delivery_premium_unit_id
        from (
              ----  Stock non event based GMR price using CIPDE
              select 'Purchase' section_type,
                      pcpd.profit_center_id profit_center,
                      cpc.profit_center_name,
                      cpc.profit_center_short_name,
                      pc_process_id process_id,
                      gmr.corporate_id,
                      akc.corporate_name,
                      gmr.internal_gmr_ref_no,
                      grd.internal_contract_item_ref_no,
                      pci.del_distribution_item_no,
                      pcdi.delivery_item_no,
                      pcm.contract_ref_no,
                      pcm.purchase_sales,
                      pcpd.product_id conc_product_id,
                      pdm_conc.product_desc conc_product_name,
                      aml.underlying_product_id product_id,
                      pdm.product_desc product_name,
                      grd.origin_id,
                      orm.origin_name,
                      pcpq.quality_template_id conc_quality_id,
                      qat.quality_name conc_quality_name,
                      qav.comp_quality_id quality_id,
                      qat_und.quality_name,
                      grd.container_no,
                      grd.current_qty stock_qty,
                      grd.qty_unit_id,
                      gmr.qty_unit_id gmr_qty_unit_id,
                      qum.qty_unit,
                      qum.decimals stocky_qty_decimal,
                      grd.no_of_units,
                      md.md_id,
                      md.m2m_price_unit_id,
                      md.net_m2m_price,
                      md.m2m_price_unit_cur_id,
                      md.m2m_price_unit_cur_code,
                      md.m2m_price_unit_weight_unit_id,
                      md.m2m_price_unit_weight_unit,
                      nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                      md.m2m_price_unit_cur_code || '/' ||
                      decode(md.m2m_price_unit_weight,
                             1,
                             null,
                             md.m2m_price_unit_weight) ||
                      md.m2m_price_unit_weight_unit m2m_price_unit_str,
                      md.m2m_main_cur_id,
                      md.m2m_main_cur_code,
                      md.m2m_main_cur_decimals,
                      md.main_currency_factor,
                      md.settlement_cur_id,
                      md.settlement_to_val_fx_rate,
                      cipde.element_id,
                      aml.attribute_name,
                      sam.ash_id assay_header_id,
                      ceqs.assay_qty,
                      ceqs.assay_qty_unit_id,
                      gmr_qty.payable_qty,
                      gmr_qty.qty_unit_id payable_qty_unit_id,
                      gmr_qum.qty_unit payable_qty_unit,
                      cipde.contract_price,
                      cipde.price_unit_id,
                      cipde.price_unit_weight_unit_id,
                      cipde.price_unit_weight,
                      cipde.price_unit_cur_id,
                      cipde.price_unit_cur_code,
                      cipde.price_unit_weight_unit,
                      cipde.price_fixation_details,
                      cipde.price_description,
                      nvl(cipde.payment_due_date, pd_trade_date) payment_due_date,
                      akc.base_cur_id as base_cur_id,
                      akc.base_currency_name base_cur_code,
                      cm.decimals as base_cur_decimal,
                      grd.inventory_status,
                      gsm.status shipment_status,
                      (case
                        when nvl(grd.is_afloat, 'N') = 'Y' and
                             nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                         'Shipped NTT'
                        when nvl(grd.is_afloat, 'N') = 'Y' and
                             nvl(grd.inventory_status, 'NA') = 'In' then
                         'Shipped IN'
                        when nvl(grd.is_afloat, 'N') = 'Y' and
                             nvl(grd.inventory_status, 'NA') = 'Out' then
                         'Shipped TT'
                        when nvl(grd.is_afloat, 'N') = 'N' and
                             nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                         'Stock NTT'
                        when nvl(grd.is_afloat, 'N') = 'N' and
                             nvl(grd.inventory_status, 'NA') = 'In' then
                         'Stock IN'
                        when nvl(grd.is_afloat, 'N') = 'N' and
                             nvl(grd.inventory_status, 'NA') = 'Out' then
                         'Stock TT'
                        else
                         'Others'
                      end) section_name,
                      cipde.price_basis,
                      gmr.shed_id,
                      gmr.destination_city_id,
                      cipde.price_fixation_status price_fixation_status,
                      pdm.base_quantity_unit base_qty_unit_id,
                      qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                      qum_pdm_conc.decimals as base_qty_decimal,
                      pcpd.strategy_id,
                      css.strategy_name,
                      md.valuation_exchange_id,
                      md.valuation_month,
                      md.derivative_def_id,
                      nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                      gmr.contract_type gmr_contract_type,
                      null int_alloc_group_id,
                      grd.internal_grd_ref_no internal_grd_dgrd_ref_no,
                      grd.internal_stock_ref_no stock_ref_no,
                      pcm.trader_id,
                      (case
                        when pcm.trader_id is not null then
                         (select gab.firstname || ' ' || gab.lastname
                            from gab_globaladdressbook gab,
                                 ak_corporate_user     aku
                           where gab.gabid = aku.gabid
                             and aku.user_id = pcm.trader_id)
                        else
                         ''
                      end) trader_user_name,
                      md.m2m_loc_incoterm_deviation,
                      md.treatment_charge m2m_treatment_charge,
                      md.refine_charge m2m_refine_charge,
                      tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                      tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                      tc_ppu_pum.cur_id m2m_tc_cur_id,
                      tc_ppu_pum.weight m2m_tc_weight,
                      tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                      rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                      rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                      rc_ppu_pum.cur_id m2m_rc_cur_id,
                      rc_ppu_pum.weight m2m_rc_weight,
                      rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                      md.base_price_unit_id_in_ppu,
                      md.base_price_unit_id_in_pum,
                      qat.eval_basis,
                      pcpq.unit_of_measure,
                      pum_loc_base.weight_unit_id loc_qty_unit_id,
                      tmpc.mvp_id,
                      tmpc.shipment_month,
                      tmpc.shipment_year,
                      pum_base_price_id.price_unit_name base_price_unit_name,
                      nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
                      md.m2m_rc_fw_exch_rate,
                      md.m2m_tc_fw_exch_rate,
                      md.m2m_ld_fw_exch_rate,
                      nvl(gscs.avg_cost_fw_rate, 0) sc_in_base_cur,
                      gscs.fw_rate_string accrual_to_base_fw_rate,
                      itm.incoterm_id,
                      itm.incoterm,
                      phd_cp.profileid cp_id,
                      phd_cp.companyname cp_name,
                      (case
                        when pcdi.delivery_period_type = 'Month' then
                         pcdi.delivery_to_month || '-' || pcdi.delivery_to_year
                        else
                         to_char(pcdi.delivery_to_date, 'Mon-YYYY')
                      end) delivery_month,
                      nvl(pcdb.premium, 0) delivery_premium,
                      pcdb.premium_unit_id delivery_premium_unit_id
                from gmr_goods_movement_record gmr,
                      grd_goods_record_detail grd,
                      pcm_physical_contract_main pcm,
                      pcpd_pc_product_definition pcpd,
                      cpc_corporate_profit_center cpc,
                      pdm_productmaster pdm,
                      orm_origin_master orm,
                      (select tmp.*
                         from tmpc_temp_m2m_pre_check tmp
                        where tmp.corporate_id = pc_corporate_id
                          and tmp.product_type = 'CONCENTRATES'
                          and tmp.section_name <> 'OPEN') tmpc,
                      qum_quantity_unit_master qum,
                      qat_quality_attributes qat,
                      (select md1.*
                         from md_m2m_daily md1
                        where md1.rate_type <> 'OPEN'
                          and md1.corporate_id = pc_corporate_id
                          and md1.product_type = 'CONCENTRATES'
                          and md1.process_id = pc_process_id) md,
                      cipde_cipd_element_price cipde,
                      ciqs_contract_item_qty_status ciqs,
                      pci_physical_contract_item pci,
                      pcpq_pc_product_quality pcpq,
                      pcdi_pc_delivery_item pcdi,
                      qav_quality_attribute_values qav,
                      ppm_product_properties_mapping ppm,
                      qat_quality_attributes qat_und,
                      aml_attribute_master_list aml,
                      pcdb_pc_delivery_basis pcdb,
                      ak_corporate akc,
                      cm_currency_master cm,
                      gsm_gmr_stauts_master gsm,
                      css_corporate_strategy_setup css,
                      pdm_productmaster pdm_conc,
                      qum_quantity_unit_master qum_pdm_conc,
                      pum_price_unit_master pum_loc_base,
                      pum_price_unit_master pum_base_price_id,
                      v_gmr_stockpayable_qty gmr_qty,
                      qum_quantity_unit_master gmr_qum,
                      v_ppu_pum tc_ppu_pum,
                      v_ppu_pum rc_ppu_pum,
                      ceqs_contract_ele_qty_status ceqs,
                      sam_stock_assay_mapping sam,
                      gscs_gmr_sec_cost_summary gscs,
                      itm_incoterm_master itm,
                      phd_profileheaderdetails phd_cp
               where grd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and grd.origin_id = orm.origin_id(+)
                 and grd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and grd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and grd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = cipde.element_id
                 and md.element_id = cipde.element_id
                 and grd.internal_contract_item_ref_no =
                     cipde.internal_contract_item_ref_no
                 and grd.process_id = cipde.process_id
                 and cipde.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and grd.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and ppm.attribute_id = aml.attribute_id
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = cipde.element_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = gmr_qty.internal_grd_ref_no
                 and cipde.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and cipde.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and pcm.purchase_sales = 'P'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'N'
                 and pcm.is_tolling_extn = 'N'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
                 and gmr.is_deleted = 'N'
                 and nvl(grd.inventory_status, 'NA') = 'NA'
                 and pcm.purchase_sales = 'P'
                 and nvl(grd.current_qty, 0) > 0
                 and gmr.is_internal_movement = 'N'
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and gmr.internal_gmr_ref_no = gscs.internal_gmr_ref_no(+)
                 and gmr.process_id = gscs.process_id(+)
                 and pcdb.inco_term_id = itm.incoterm_id
                 and pcm.cp_id = phd_cp.profileid(+)
                 and not exists
               (select gpd.process_id
                        from gpd_gmr_conc_price_daily gpd
                       where gpd.process_id = gmr.process_id
                         and gpd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                         and gpd.corporate_id = gmr.corporate_id
                         and gpd.element_id = tmpc.element_id)
              union all
              ------  Stock event based GMR price using GPD
              select 'Purchase' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     grd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     grd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     grd.container_no,
                     grd.current_qty stock_qty,
                     grd.qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     grd.no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     ceqs.element_id,
                     aml.attribute_name,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     gpd.contract_price,
                     gpd.price_unit_id,
                     gpd.price_unit_weight_unit_id,
                     gpd.price_unit_weight,
                     gpd.price_unit_cur_id,
                     gpd.price_unit_cur_code,
                     gpd.price_unit_weight_unit,
                     gpd.price_fixation_details,
                     gpd.price_description price_description,
                     (case
                       when nvl(pcdi.payment_due_date, pd_trade_date) <
                            pd_trade_date then
                        pd_trade_date
                       else
                        nvl(pcdi.payment_due_date, pd_trade_date)
                     end) payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     grd.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                        'Shipped NTT'
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') = 'In' then
                        'Shipped IN'
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                        'Stock NTT'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') = 'In' then
                        'Stock IN'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     gpd.price_basis,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     gpd.price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     null int_alloc_group_id,
                     grd.internal_grd_ref_no internal_grd_dgrd_ref_no,
                     grd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
                     md.m2m_rc_fw_exch_rate,
                     md.m2m_tc_fw_exch_rate,
                     md.m2m_ld_fw_exch_rate,
                     nvl(gscs.avg_cost_fw_rate, 0) sc_in_base_cur,
                     gscs.fw_rate_string accrual_to_base_fw_rate,
                     itm.incoterm_id,
                     itm.incoterm,
                     phd_cp.profileid cp_id,
                     phd_cp.companyname cp_name,
                     (case
                       when pcdi.delivery_period_type = 'Month' then
                        pcdi.delivery_to_month || '-' || pcdi.delivery_to_year
                       else
                        to_char(pcdi.delivery_to_date, 'Mon-YYYY')
                     end) delivery_month,
                     nvl(pcdb.premium, 0) delivery_premium,
                     pcdb.premium_unit_id delivery_premium_unit_id
                from gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     gpd_gmr_conc_price_daily gpd,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qum_quantity_unit_master qum,
                     qat_quality_attributes qat,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     ciqs_contract_item_qty_status ciqs,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     pcdi_pc_delivery_item pcdi,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     pcdb_pc_delivery_basis pcdb,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam,
                     gscs_gmr_sec_cost_summary gscs,
                     itm_incoterm_master itm,
                     phd_profileheaderdetails phd_cp
               where grd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and grd.origin_id = orm.origin_id(+)
                 and gmr.internal_gmr_ref_no = gpd.internal_gmr_ref_no(+)
                 and gmr.process_id = gpd.process_id(+)
                 and gpd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no
                 and gpd.element_id = tmpc.element_id
                 and grd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and grd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and grd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = gpd.element_id
                 and md.element_id = gpd.element_id
                 and grd.process_id = gpd.process_id
                 and grd.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and ppm.attribute_id = aml.attribute_id
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = gpd.element_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = gmr_qty.internal_grd_ref_no
                 and gpd.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and gpd.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and pcm.purchase_sales = 'P'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'N'
                 and pcm.is_tolling_extn = 'N'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
                 and gmr.is_deleted = 'N'
                 and nvl(grd.inventory_status, 'NA') = 'NA'
                 and pcm.purchase_sales = 'P'
                 and nvl(grd.current_qty, 0) > 0
                 and gmr.is_internal_movement = 'N'
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and gmr.internal_gmr_ref_no = gscs.internal_gmr_ref_no(+)
                 and gmr.process_id = gscs.process_id(+)
                 and pcdb.inco_term_id = itm.incoterm_id
                 and pcm.cp_id = phd_cp.profileid(+)
              
              union all
              ------  Sales non event based GMR price using CIPDE
              select 'Sales' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     dgrd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     dgrd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     '' container_no,
                     dgrd.net_weight stock_qty,
                     dgrd.net_weight_unit_id qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     gmr.current_no_of_units no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     cipde.element_id,
                     aml.attribute_name,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     cipde.contract_price,
                     cipde.price_unit_id,
                     cipde.price_unit_weight_unit_id,
                     cipde.price_unit_weight,
                     cipde.price_unit_cur_id,
                     cipde.price_unit_cur_code,
                     cipde.price_unit_weight_unit,
                     cipde.price_fixation_details,
                     cipde.price_description,
                     nvl(cipde.payment_due_date, pd_trade_date) payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     gmr.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') in ('None', 'NA') then
                        'Shipped NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') = 'In' then
                        'Shipped IN'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') in ('None', 'NA') then
                        'Stock NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') = 'In' then
                        'Stock IN'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     cipde.price_basis,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     cipde.price_fixation_status price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     agh.int_alloc_group_id,
                     dgrd.internal_dgrd_ref_no internal_grd_dgrd_ref_no,
                     dgrd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
                     md.m2m_rc_fw_exch_rate,
                     md.m2m_tc_fw_exch_rate,
                     md.m2m_ld_fw_exch_rate,
                     nvl(gscs.avg_cost_fw_rate, 0) sc_in_base_cur,
                     gscs.fw_rate_string accrual_to_base_fw_rate,
                     itm.incoterm_id,
                     itm.incoterm,
                     phd_cp.profileid cp_id,
                     phd_cp.companyname cp_name,
                     (case
                       when pcdi.delivery_period_type = 'Month' then
                        pcdi.delivery_to_month || '-' || pcdi.delivery_to_year
                       else
                        to_char(pcdi.delivery_to_date, 'Mon-YYYY')
                     end) delivery_month,
                     nvl(pcdb.premium, 0) delivery_premium,
                     pcdb.premium_unit_id delivery_premium_unit_id
              
                from gmr_goods_movement_record gmr,
                     dgrd_delivered_grd dgrd,
                     agh_alloc_group_header agh,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qat_quality_attributes qat,
                     qum_quantity_unit_master qum,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     cipde_cipd_element_price cipde,
                     pcdi_pc_delivery_item pcdi,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     ciqs_contract_item_qty_status ciqs,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pcdb_pc_delivery_basis pcdb,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam,
                     gscs_gmr_sec_cost_summary gscs,
                     itm_incoterm_master itm,
                     phd_profileheaderdetails phd_cp
               where dgrd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and dgrd.int_alloc_group_id = agh.int_alloc_group_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and dgrd.origin_id = orm.origin_id(+)
                 and dgrd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and dgrd.internal_dgrd_ref_no = tmpc.internal_grd_ref_no(+)
                 and dgrd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and dgrd.net_weight_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = cipde.element_id
                 and md.element_id = cipde.element_id
                 and dgrd.internal_contract_item_ref_no =
                     cipde.internal_contract_item_ref_no
                 and cipde.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pci.internal_contract_item_ref_no =
                     cipde.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and pcpq.quality_template_id = qat.quality_id
                 and ppm.attribute_id = aml.attribute_id(+)
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = cipde.element_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and pci.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and cm.cur_code = akc.base_currency_name
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and dgrd.internal_dgrd_ref_no = gmr_qty.internal_dgrd_ref_no
                 and cipde.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and pcm.purchase_sales = 'S'
                 and gsm.is_required_for_m2m = 'Y'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'N'
                 and pcm.is_tolling_extn = 'N'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcdb.is_active = 'Y'
                 and gmr.is_deleted = 'N'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and dgrd.process_id = pc_process_id
                 and agh.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and cipde.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and upper(dgrd.realized_status) in
                     ('UNREALIZED', 'REVERSEREALIZED')
                 and dgrd.status = 'Active'
                 and nvl(dgrd.net_weight, 0) > 0
                 and agh.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.is_internal_movement = 'N'
                 and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and pcdb.inco_term_id = itm.incoterm_id
                 and not exists
               (select gpd.process_id
                        from gpd_gmr_conc_price_daily gpd
                       where gpd.process_id = gmr.process_id
                         and gpd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                         and gpd.corporate_id = gmr.corporate_id
                         and gpd.element_id = tmpc.element_id)
                 and gmr.internal_gmr_ref_no = gscs.internal_gmr_ref_no(+)
                 and gmr.process_id = gscs.process_id(+)
                 and pcm.cp_id = phd_cp.profileid(+)
              
              union all
              ------  Sales  event based GMR price using GPE
              select 'Sales' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     dgrd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     dgrd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     '' container_no,
                     dgrd.net_weight stock_qty,
                     dgrd.net_weight_unit_id qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     gmr.current_no_of_units no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     ceqs.element_id,
                     aml.attribute_name,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     gpd.contract_price,
                     gpd.price_unit_id,
                     gpd.price_unit_weight_unit_id,
                     gpd.price_unit_weight,
                     gpd.price_unit_cur_id,
                     gpd.price_unit_cur_code,
                     gpd.price_unit_weight_unit,
                     gpd.price_fixation_details,
                     gpd.price_description,
                     (case
                       when nvl(pcdi.payment_due_date, pd_trade_date) <
                            pd_trade_date then
                        pd_trade_date
                       else
                        nvl(pcdi.payment_due_date, pd_trade_date)
                     end) payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     gmr.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') in ('None', 'NA') then
                        'Shipped NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') = 'In' then
                        'Shipped IN'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') in ('None', 'NA') then
                        'Stock NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') = 'In' then
                        'Stock IN'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     gpd.price_basis,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     gpd.price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     agh.int_alloc_group_id,
                     dgrd.internal_dgrd_ref_no internal_grd_dgrd_ref_no,
                     dgrd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
                     md.m2m_rc_fw_exch_rate,
                     md.m2m_tc_fw_exch_rate,
                     md.m2m_ld_fw_exch_rate,
                     nvl(gscs.avg_cost_fw_rate, 0) sc_in_base_cur,
                     gscs.fw_rate_string accrual_to_base_fw_rate,
                     itm.incoterm_id,
                     itm.incoterm,
                     phd_cp.profileid cp_id,
                     phd_cp.companyname cp_name,
                     (case
                       when pcdi.delivery_period_type = 'Month' then
                        pcdi.delivery_to_month || '-' || pcdi.delivery_to_year
                       else
                        to_char(pcdi.delivery_to_date, 'Mon-YYYY')
                     end) delivery_month,
                     nvl(pcdb.premium, 0) delivery_premium,
                     pcdb.premium_unit_id delivery_premium_unit_id
              
                from gmr_goods_movement_record gmr,
                     gpd_gmr_conc_price_daily gpd,
                     dgrd_delivered_grd dgrd,
                     agh_alloc_group_header agh,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qat_quality_attributes qat,
                     qum_quantity_unit_master qum,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     pcdi_pc_delivery_item pcdi,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     ciqs_contract_item_qty_status ciqs,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pcdb_pc_delivery_basis pcdb,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam,
                     gscs_gmr_sec_cost_summary gscs,
                     itm_incoterm_master itm,
                     phd_profileheaderdetails phd_cp
               where dgrd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and dgrd.int_alloc_group_id = agh.int_alloc_group_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and dgrd.origin_id = orm.origin_id(+)
                 and dgrd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and dgrd.internal_dgrd_ref_no = tmpc.internal_grd_ref_no(+)
                 and dgrd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and dgrd.net_weight_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = gpd.element_id
                 and md.element_id = gpd.element_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pci.pcpq_id = pcpq.pcpq_id
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and pcpq.quality_template_id = qat.quality_id
                 and ppm.attribute_id = aml.attribute_id(+)
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = gpd.element_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and pci.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and cm.cur_code = akc.base_currency_name
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and dgrd.internal_dgrd_ref_no = gmr_qty.internal_dgrd_ref_no
                 and gpd.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and pcm.purchase_sales = 'S'
                 and gsm.is_required_for_m2m = 'Y'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'N'
                 and pcm.is_tolling_extn = 'N'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcdb.is_active = 'Y'
                 and gmr.is_deleted = 'N'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and dgrd.process_id = pc_process_id
                 and agh.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and gpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and upper(dgrd.realized_status) in
                     ('UNREALIZED', 'REVERSEREALIZED')
                 and dgrd.status = 'Active'
                 and nvl(dgrd.net_weight, 0) > 0
                 and agh.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.is_internal_movement = 'N'
                 and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and gmr.internal_gmr_ref_no = gscs.internal_gmr_ref_no(+)
                 and gmr.process_id = gscs.process_id(+)
                 and pcdb.inco_term_id = itm.incoterm_id
                 and pcm.cp_id = phd_cp.profileid(+)) tt;
  
    vn_cont_price                  number;
    vc_cont_price_unit_id          varchar2(15);
    vc_cont_price_unit_cur_id      varchar2(15);
    vc_cont_price_unit_cur_code    varchar2(15);
    vn_cont_price_wt               number;
    vc_cont_price_wt_unit_id       varchar2(15);
    vc_cont_price_wt_unit          varchar2(15);
    vc_price_fixation_status       varchar2(50);
    vc_psu_id                      varchar2(500);
    vn_qty_in_base                 number;
    vn_ele_qty_in_base             number;
    vn_m2m_amt                     number;
    vc_m2m_price_unit_cur_id       varchar2(15);
    vc_m2m_cur_id                  varchar2(15);
    vc_m2m_cur_code                varchar2(15);
    vn_m2m_sub_cur_id_factor       number;
    vn_m2m_cur_decimals            number;
    vn_m2m_base_fx_rate            number;
    vn_m2m_base_deviation          number;
    vn_ele_m2m_amount_in_base      number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_ele_m2m_total_amount        number;
    vn_ele_m2m_amt_per_unit        number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vn_cont_price_cur_id_factor    number;
    vn_contract_value_in_price_cur number;
    vn_cont_price_cur_decimals     number;
    vn_fx_price_to_base            number;
    vn_fx_price_deviation          number;
    vn_contract_value_in_val_cur   number;
    vn_contract_value_in_base_cur  number;
    vn_ele_m2m_treatment_charge    number;
    vn_dry_qty                     number;
    vn_wet_qty                     number;
    vn_dry_qty_in_base             number;
    vn_ele_m2m_refine_charge       number;
    vn_loc_amount                  number;
    vn_loc_total_amount            number;
    vn_m2m_total_penality          number;
    vn_m2m_penality                number;
    vc_penality_price_unit_id      varchar2(15);
    vc_price_unit_id               varchar2(15);
    vc_m2m_to_base_fw_rate         varchar2(50);
    vc_price_to_base_fw_rate       varchar2(50);
    vc_pc_exch_rate_string         varchar2(100);
    vc_total_pc_exch_rate_string   varchar2(100); -- Contract Penalty 
    vn_con_treatment_charge        number;
    vn_base_con_treatment_charge   number;
    vc_con_treatment_cur_id        varchar2(15);
    vc_con_tc_main_cur_id          varchar2(15);
    vc_con_tc_main_cur_code        varchar2(15);
    vc_con_tc_main_cur_factor      number;
    vn_con_tc_to_base_fw_rate      number;
    vc_contract_tc_fw_exch_rate    varchar2(50);
    vn_forward_points              number;
    vn_con_refine_charge           number;
    vn_base_con_refine_charge      number;
    vc_con_refine_cur_id           varchar2(15);
    vc_con_rc_main_cur_id          varchar2(15);
    vc_con_rc_main_cur_code        varchar2(15);
    vc_con_rc_main_cur_factor      number;
    vn_con_rc_to_base_fw_rate      number;
    vc_contract_rc_fw_exch_rate    varchar2(50);
    vn_sc_in_base_cur              number;
    vn_con_penality_charge         number;
    vc_con_penality_cur_id         varchar2(15);
    vc_conc_pc_main_cur_id         varchar2(15);
    vc_con_pc_main_cur_code        varchar2(15);
    vc_con_pc_main_cur_factor      number;
    vn_con_pc_to_base_fw_rate      number;
    vn_base_con_penality_charge    number;
    vc_contract_pc_fw_exch_rate    varchar2(50);
    vc_error_msg                   varchar2(10);
    vc_m2m_tc_main_cur_id          varchar2(15);
    vc_m2m_tc_main_cur_code        varchar2(15);
    vc_m2m_tc_main_cur_factor      number;
    vn_m2m_tc_to_base_fw_rate      number;
    vc_m2m_rc_main_cur_id          varchar2(15);
    vc_m2m_rc_main_cur_code        varchar2(15);
    vc_m2m_rc_main_cur_factor      number;
    vn_m2m_rc_to_base_fw_rate      number;
    vn_cont_delivery_premium       number;
    vn_cont_del_premium_amt        number;
    vc_contract_pp_fw_exch_rate    varchar2(50);
    vc_base_price_unit_id          varchar2(15);
    vn_del_to_base_fw_rate         varchar2(50);
    vc_del_premium_cur_id          varchar2(15);
    vc_del_premium_cur_code        varchar2(15);
    vn_del_premium_weight          number;
    vc_del_premium_weight_unit_id  varchar2(15);
    vc_del_premium_main_cur_id     varchar2(15);
    vc_del_premium_main_cur_code   varchar2(15);
    vn_del_premium_cur_main_factor number;
  begin
    vc_error_msg := '18647';
    for cur_grd_rows in cur_grd
    loop
      vc_price_to_base_fw_rate     := null;
      vc_pc_exch_rate_string       := null;
      vc_total_pc_exch_rate_string := null;
      vc_contract_tc_fw_exch_rate  := null;
      vc_contract_rc_fw_exch_rate  := null;
      vc_contract_pc_fw_exch_rate  := null;
      vc_contract_pp_fw_exch_rate  := null;
      vc_m2m_to_base_fw_rate       := null;
    
      vn_cont_price               := cur_grd_rows.contract_price;
      vc_cont_price_unit_id       := cur_grd_rows.price_unit_id;
      vc_cont_price_unit_cur_id   := cur_grd_rows.price_unit_cur_id;
      vc_cont_price_unit_cur_code := cur_grd_rows.price_unit_cur_code;
      vn_cont_price_wt            := cur_grd_rows.price_unit_weight;
      vc_cont_price_wt_unit_id    := cur_grd_rows.price_unit_weight_unit_id;
      vc_cont_price_wt_unit       := cur_grd_rows.price_unit_weight_unit;
      vc_price_fixation_status    := cur_grd_rows.price_fixation_status;
    
      begin
        select ppu.product_price_unit_id
          into vc_base_price_unit_id
          from v_ppu_pum ppu
         where ppu.cur_id = cur_grd_rows.base_cur_id
           and ppu.weight_unit_id = cur_grd_rows.conc_base_qty_unit_id
           and nvl(ppu.weight, 1) = 1
           and ppu.product_id = cur_grd_rows.conc_product_id;
      exception
        when others then
          null;
      end;
    
      if cur_grd_rows.stock_qty <> 0 then
        vc_psu_id := cur_grd_rows.internal_gmr_ref_no || '-' ||
                     cur_grd_rows.internal_grd_dgrd_ref_no || '-' ||
                     cur_grd_rows.internal_contract_item_ref_no || '-' ||
                     cur_grd_rows.container_no;
      
        if cur_grd_rows.unit_of_measure = 'Wet' then
          vn_dry_qty := round(pkg_metals_general.fn_get_assay_dry_qty(cur_grd_rows.conc_product_id,
                                                                      cur_grd_rows.assay_header_id,
                                                                      cur_grd_rows.stock_qty,
                                                                      cur_grd_rows.qty_unit_id),
                              cur_grd_rows.stocky_qty_decimal);
        else
          vn_dry_qty := cur_grd_rows.stock_qty;
        end if;
      
        vn_wet_qty := cur_grd_rows.stock_qty;
      
        -- convert into dry qty to base qty element level
        vc_error_msg := '18677';
        if cur_grd_rows.qty_unit_id <> cur_grd_rows.base_qty_unit_id then
          vn_dry_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                           cur_grd_rows.qty_unit_id,
                                                                           cur_grd_rows.base_qty_unit_id,
                                                                           1) *
                                      vn_dry_qty,
                                      cur_grd_rows.base_qty_decimal);
        else
          vn_dry_qty_in_base := round(vn_dry_qty,
                                      cur_grd_rows.base_qty_decimal);
        end if;
        if cur_grd_rows.qty_unit_id <> cur_grd_rows.conc_base_qty_unit_id then
        
          vn_qty_in_base := round(cur_grd_rows.stock_qty *
                                  pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                       cur_grd_rows.qty_unit_id,
                                                                       cur_grd_rows.conc_base_qty_unit_id,
                                                                       1),
                                  cur_grd_rows.base_qty_decimal);
        else
          vn_qty_in_base := round(cur_grd_rows.stock_qty,
                                  cur_grd_rows.base_qty_decimal);
        end if;
      
        if cur_grd_rows.payable_qty_unit_id <>
           cur_grd_rows.base_qty_unit_id then
          vn_ele_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                           cur_grd_rows.payable_qty_unit_id,
                                                                           cur_grd_rows.base_qty_unit_id,
                                                                           1) *
                                      cur_grd_rows.payable_qty,
                                      cur_grd_rows.base_qty_decimal);
        else
          vn_ele_qty_in_base := round(cur_grd_rows.payable_qty,
                                      cur_grd_rows.base_qty_decimal);
        end if;
      
        if cur_grd_rows.valuation_against_underlying = 'Y' then
          if cur_grd_rows.eval_basis = 'FIXED' then
            vn_m2m_amt               := 0;
            vc_m2m_price_unit_cur_id := cur_grd_rows.base_cur_id;
          else
            vc_m2m_price_unit_cur_id := nvl(cur_grd_rows.m2m_price_unit_cur_id,
                                            cur_grd_rows.base_cur_id);
            vn_m2m_amt               := nvl(cur_grd_rows.net_m2m_price, 0) /
                                        nvl(cur_grd_rows.m2m_price_unit_weight,
                                            1) *
                                        pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                             cur_grd_rows.payable_qty_unit_id,
                                                                             cur_grd_rows.m2m_price_unit_weight_unit_id,
                                                                             cur_grd_rows.payable_qty);
          end if;
        
          pkg_general.sp_get_main_cur_detail(nvl(vc_m2m_price_unit_cur_id,
                                                 cur_grd_rows.base_cur_id),
                                             vc_m2m_cur_id,
                                             vc_m2m_cur_code,
                                             vn_m2m_sub_cur_id_factor,
                                             vn_m2m_cur_decimals);
        
          vn_m2m_amt := round(vn_m2m_amt * vn_m2m_sub_cur_id_factor,
                              cur_grd_rows.base_cur_decimal);
        
          pkg_general.sp_bank_fx_rate(cur_grd_rows.corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      nvl(vc_m2m_cur_id,
                                          cur_grd_rows.base_cur_id),
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      
                                      'sp_stock_unreal_sntt_conc M2M to Base Currency',
                                      pc_process,
                                      vn_m2m_base_fx_rate,
                                      vn_m2m_base_deviation);
          vc_error_msg := '18734';
          if vc_m2m_cur_id <> cur_grd_rows.base_cur_id then
            if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
              null;
            else
              vc_m2m_to_base_fw_rate := '1 ' || vc_m2m_cur_code || '=' ||
                                        vn_m2m_base_fx_rate || ' ' ||
                                        cur_grd_rows.base_cur_code;
            end if;
          end if;
        
          vn_ele_m2m_amount_in_base := vn_m2m_amt * vn_m2m_base_fx_rate;
        else
          -- If valuation against underly is no, then use total concentrate qty and market price to calculate the
          -- Market value for the gmr level.
          if cur_grd_rows.eval_basis = 'FIXED' then
            vn_m2m_amt               := 0;
            vc_m2m_price_unit_cur_id := cur_grd_rows.base_cur_id;
          else
            vc_m2m_price_unit_cur_id := nvl(cur_grd_rows.m2m_price_unit_cur_id,
                                            cur_grd_rows.base_cur_id);
            vn_m2m_amt               := nvl(cur_grd_rows.net_m2m_price, 0) /
                                        nvl(cur_grd_rows.m2m_price_unit_weight,
                                            1) *
                                        pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                             cur_grd_rows.conc_base_qty_unit_id,
                                                                             cur_grd_rows.m2m_price_unit_weight_unit_id,
                                                                             vn_dry_qty_in_base);
          end if;
        
          pkg_general.sp_get_main_cur_detail(nvl(vc_m2m_price_unit_cur_id,
                                                 cur_grd_rows.base_cur_id),
                                             vc_m2m_cur_id,
                                             vc_m2m_cur_code,
                                             vn_m2m_sub_cur_id_factor,
                                             vn_m2m_cur_decimals);
        
          vn_m2m_amt := round(vn_m2m_amt * vn_m2m_sub_cur_id_factor,
                              cur_grd_rows.base_cur_decimal);
        
          pkg_general.sp_bank_fx_rate(cur_grd_rows.corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      nvl(vc_m2m_cur_id,
                                          cur_grd_rows.base_cur_id),
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_sntt_conc M2M to Base Currency',
                                      pc_process,
                                      vn_m2m_base_fx_rate,
                                      vn_m2m_base_deviation);
        
          if vc_m2m_cur_id <> cur_grd_rows.base_cur_id then
            if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
              null;
            else
              vc_m2m_to_base_fw_rate := '1 ' || vc_m2m_cur_code || '=' ||
                                        vn_m2m_base_fx_rate || ' ' ||
                                        cur_grd_rows.base_cur_code;
            
            end if;
          else
            vn_m2m_base_fx_rate := 1;
          end if;
          if cur_grd_rows.ele_rank = 1 then
            vn_ele_m2m_amount_in_base := vn_m2m_amt * vn_m2m_base_fx_rate;
          else
            vn_ele_m2m_amount_in_base := 0;
            vn_m2m_amt                := 0;
          end if;
        
        end if;
        --
        -- Forward Rate from M2M Treatment Charge to Base Currency
        -- 
        pkg_general.sp_get_base_cur_detail(cur_grd_rows.m2m_tc_cur_id,
                                           vc_m2m_tc_main_cur_id,
                                           vc_m2m_tc_main_cur_code,
                                           vc_m2m_tc_main_cur_factor);
        if vc_m2m_tc_main_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      cur_grd_rows.m2m_tc_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_sntt_conc M2M TC to Base Currency',
                                      pc_process,
                                      vn_m2m_tc_to_base_fw_rate,
                                      vn_forward_points);
        else
          vn_m2m_tc_to_base_fw_rate := 1;
        end if;
        dbms_output.put_line('vn_dry_qty=' || vn_dry_qty);
        vn_ele_m2m_treatment_charge := round((cur_grd_rows.m2m_treatment_charge /
                                             nvl(cur_grd_rows.m2m_tc_weight,
                                                  1)) *
                                             vn_m2m_tc_to_base_fw_rate *
                                             (pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                                   cur_grd_rows.qty_unit_id,
                                                                                   cur_grd_rows.m2m_tc_weight_unit_id,
                                                                                   vn_dry_qty)),
                                             cur_grd_rows.base_cur_decimal);
      
        dbms_output.put_line('Test' || vn_ele_m2m_treatment_charge);
      
        pkg_general.sp_get_base_cur_detail(cur_grd_rows.m2m_rc_cur_id,
                                           vc_m2m_rc_main_cur_id,
                                           vc_m2m_rc_main_cur_code,
                                           vc_m2m_rc_main_cur_factor);
        if vc_m2m_rc_main_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      cur_grd_rows.m2m_rc_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_sntt_conc M2M RC to Base Currency',
                                      pc_process,
                                      vn_m2m_rc_to_base_fw_rate,
                                      vn_forward_points);
        else
          vn_m2m_rc_to_base_fw_rate := 1;
        end if;
      
        vn_ele_m2m_refine_charge := round((cur_grd_rows.m2m_refine_charge /
                                          nvl(cur_grd_rows.m2m_rc_weight,
                                               1)) *
                                          vn_m2m_rc_to_base_fw_rate *
                                          (pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                                cur_grd_rows.payable_qty_unit_id,
                                                                                cur_grd_rows.m2m_rc_weight_unit_id,
                                                                                cur_grd_rows.payable_qty)),
                                          cur_grd_rows.base_cur_decimal);
      
        if cur_grd_rows.ele_rank = 1 then
          vn_loc_amount := round(pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                      cur_grd_rows.qty_unit_id,
                                                                      cur_grd_rows.conc_base_qty_unit_id,
                                                                      1) *
                                 cur_grd_rows.m2m_loc_incoterm_deviation,
                                 cur_grd_rows.base_cur_decimal);
        
          vn_loc_total_amount := round(vn_loc_amount * vn_qty_in_base,
                                       cur_grd_rows.base_cur_decimal);
          -- Contract Penalty Charge                    
          pkg_metals_general.sp_get_gmr_penalty_charge_new(cur_grd_rows.internal_gmr_ref_no,
                                                           cur_grd_rows.internal_grd_dgrd_ref_no,
                                                           pc_dbd_id,
                                                           vn_con_penality_charge,
                                                           vc_con_penality_cur_id);
        
          if vn_con_penality_charge <> 0 then
            pkg_general.sp_get_base_cur_detail(vc_con_penality_cur_id,
                                               vc_conc_pc_main_cur_id,
                                               vc_con_pc_main_cur_code,
                                               vc_con_pc_main_cur_factor);
            if vc_conc_pc_main_cur_id <> cur_grd_rows.base_cur_id then
            
              pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                          pd_trade_date,
                                          cur_grd_rows.payment_due_date,
                                          vc_conc_pc_main_cur_id,
                                          cur_grd_rows.base_cur_id,
                                          30,
                                          'sp_stock_unreal_sntt_conc Contract PC to Base Currency',
                                          pc_process,
                                          vn_con_pc_to_base_fw_rate,
                                          vn_forward_points);
              vn_base_con_penality_charge := round((vn_con_penality_charge *
                                                   vn_con_pc_to_base_fw_rate *
                                                   vc_con_pc_main_cur_factor),
                                                   cur_grd_rows.base_cur_decimal);
            
              vc_contract_pc_fw_exch_rate := '1 ' ||
                                             vc_con_pc_main_cur_code || '=' ||
                                             vn_con_pc_to_base_fw_rate || ' ' ||
                                             cur_grd_rows.base_cur_code;
            
            else
              vn_base_con_penality_charge := round(vn_con_penality_charge,
                                                   cur_grd_rows.base_cur_decimal);
            
            end if;
          else
            vn_base_con_penality_charge := 0;
          end if;
        
        end if;
        vn_m2m_total_penality := 0;
        if cur_grd_rows.ele_rank = 1 then
          begin
            select ppu.product_price_unit_id
              into vc_price_unit_id
              from v_ppu_pum         ppu,
                   pdm_productmaster pdm,
                   ak_corporate      akc
             where ppu.product_id = cur_grd_rows.conc_product_id
               and ppu.product_id = pdm.product_id
               and pdm.base_quantity_unit = ppu.weight_unit_id
               and ppu.cur_id = akc.base_cur_id
               and nvl(ppu.weight, 1) = 1
               and akc.corporate_id = pc_corporate_id;
          
          exception
            when no_data_found then
              vc_price_unit_id := null;
          end;
        
          vn_m2m_total_penality := 0;
          for cc in (select pci.internal_contract_item_ref_no,
                            pqca.element_id,
                            pcpq.quality_template_id
                       from pci_physical_contract_item  pci,
                            pcpq_pc_product_quality     pcpq,
                            ash_assay_header            ash,
                            asm_assay_sublot_mapping    asm,
                            pqca_pq_chemical_attributes pqca
                      where pci.pcpq_id = pcpq.pcpq_id
                        and pcpq.assay_header_id = ash.ash_id
                        and ash.ash_id = asm.ash_id
                        and asm.asm_id = pqca.asm_id
                        and pci.process_id = pc_process_id
                        and pcpq.process_id = pc_process_id
                        and pci.is_active = 'Y'
                        and pcpq.is_active = 'Y'
                        and ash.is_active = 'Y'
                        and asm.is_active = 'Y'
                        and pqca.is_active = 'Y'
                        and pqca.is_elem_for_pricing = 'N'
                        and pqca.is_deductible = 'Y'
                        and pci.internal_contract_item_ref_no =
                            cur_grd_rows.internal_contract_item_ref_no)
          loop
          
            pkg_phy_pre_check_process.sp_calc_m2m_tc_pc_rc_charge(cur_grd_rows.corporate_id,
                                                                  pd_trade_date,
                                                                  cur_grd_rows.conc_product_id,
                                                                  cur_grd_rows.conc_quality_id,
                                                                  cur_grd_rows.mvp_id,
                                                                  'Penalties',
                                                                  cc.element_id,
                                                                  cur_grd_rows.shipment_month,
                                                                  cur_grd_rows.shipment_year,
                                                                  vc_price_unit_id,
                                                                  vn_m2m_penality,
                                                                  vc_penality_price_unit_id);
            if nvl(vn_m2m_penality, 0) <> 0 then
              vn_m2m_total_penality := round(vn_m2m_total_penality +
                                             (vn_m2m_penality *
                                             vn_dry_qty_in_base),
                                             cur_grd_rows.base_cur_decimal);
            
              if vc_pc_exch_rate_string is not null then
                vc_total_pc_exch_rate_string := vc_pc_exch_rate_string;
              else
                if instr(vc_total_pc_exch_rate_string,
                         vc_pc_exch_rate_string) = 0 then
                  vc_total_pc_exch_rate_string := vc_total_pc_exch_rate_string || ',' ||
                                                  vc_pc_exch_rate_string;
                end if;
              end if;
            end if;
          
          end loop;
        
        end if;
      
        vn_ele_m2m_total_amount := vn_ele_m2m_amount_in_base -
                                   vn_ele_m2m_treatment_charge -
                                   vn_ele_m2m_refine_charge;
      
        vn_ele_m2m_amt_per_unit := round(vn_ele_m2m_total_amount /
                                         vn_ele_qty_in_base,
                                         cur_grd_rows.base_cur_decimal);
      
        pkg_general.sp_get_main_cur_detail(nvl(vc_cont_price_unit_cur_id,
                                               cur_grd_rows.base_cur_id),
                                           vc_price_cur_id,
                                           vc_price_cur_code,
                                           vn_cont_price_cur_id_factor,
                                           vn_cont_price_cur_decimals);
      
        if nvl(vn_cont_price, 0) <> 0 and
           vc_cont_price_wt_unit_id is not null then
        
          vn_contract_value_in_price_cur := (vn_cont_price /
                                            nvl(vn_cont_price_wt, 1)) *
                                            (pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                                  cur_grd_rows.payable_qty_unit_id,
                                                                                  vc_cont_price_wt_unit_id,
                                                                                  cur_grd_rows.payable_qty)) *
                                            vn_cont_price_cur_id_factor;
        else
          vn_contract_value_in_price_cur := 0;
        end if;
      
        if vc_price_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_bank_fx_rate(cur_grd_rows.corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      vc_price_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_sntt_conc Price to Base Currency',
                                      pc_process,
                                      vn_fx_price_to_base,
                                      vn_fx_price_deviation);
        else
          vn_fx_price_to_base := 1;
        end if;
      
        if vc_price_cur_code <> cur_grd_rows.base_cur_code then
          if vn_fx_price_to_base <> 1 then
            vc_price_to_base_fw_rate := '1 ' || vc_price_cur_code || '=' ||
                                        vn_fx_price_to_base || ' ' ||
                                        cur_grd_rows.base_cur_code;
          end if;
        end if;
        vn_contract_value_in_price_cur := round(vn_contract_value_in_price_cur,
                                                vn_cont_price_cur_decimals);
      
        vn_contract_value_in_val_cur  := round((vn_contract_value_in_price_cur *
                                               nvl(vn_fx_price_to_base, 1)),
                                               cur_grd_rows.base_cur_decimal);
        vn_contract_value_in_base_cur := vn_contract_value_in_val_cur;
        --
        -- contract treatment charges
        --
        pkg_metals_general.sp_get_treatment_charge(cur_grd_rows.internal_contract_item_ref_no,
                                                   cur_grd_rows.element_id,
                                                   pc_dbd_id,
                                                   vn_dry_qty,
                                                   vn_wet_qty,
                                                   cur_grd_rows.qty_unit_id,
                                                   cur_grd_rows.contract_price,
                                                   cur_grd_rows.price_unit_id,
                                                   vn_con_treatment_charge,
                                                   vc_con_treatment_cur_id);
      
        -- Converted treatment charges to base currency
        if vc_con_treatment_cur_id <> cur_grd_rows.base_cur_id then
          -- Bank FX Rate from TC to Base Currency
          pkg_general.sp_get_base_cur_detail(vc_con_treatment_cur_id,
                                             vc_con_tc_main_cur_id,
                                             vc_con_tc_main_cur_code,
                                             vc_con_tc_main_cur_factor);
        
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      vc_con_tc_main_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_sntt_conc Contract TC to Base Currency',
                                      pc_process,
                                      vn_con_tc_to_base_fw_rate,
                                      vn_forward_points);
        
          vn_base_con_treatment_charge := round((vn_con_treatment_charge *
                                                vn_con_tc_to_base_fw_rate *
                                                vc_con_tc_main_cur_factor),
                                                cur_grd_rows.base_cur_decimal);
          vc_contract_tc_fw_exch_rate  := '1 ' || vc_con_tc_main_cur_code || '=' ||
                                          vn_con_tc_to_base_fw_rate || ' ' ||
                                          cur_grd_rows.base_cur_code;
        else
          vn_base_con_treatment_charge := round(vn_con_treatment_charge,
                                                cur_grd_rows.base_cur_decimal);
        
        end if;
      
        --
        --- contract refine chrges
        --
        pkg_metals_general.sp_get_refine_charge(cur_grd_rows.internal_contract_item_ref_no,
                                                cur_grd_rows.element_id,
                                                pc_dbd_id,
                                                cur_grd_rows.payable_qty,
                                                cur_grd_rows.payable_qty_unit_id,
                                                cur_grd_rows.contract_price,
                                                cur_grd_rows.price_unit_id,
                                                vn_con_refine_charge,
                                                vc_con_refine_cur_id);
        --- Converted refine charges to base currency                                              
        if vc_con_refine_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_get_base_cur_detail(vc_con_refine_cur_id,
                                             vc_con_rc_main_cur_id,
                                             vc_con_rc_main_cur_code,
                                             vc_con_rc_main_cur_factor);
        
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      vc_con_refine_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_sntt_conc Contract RC to Base Currency',
                                      pc_process,
                                      vn_con_rc_to_base_fw_rate,
                                      vn_forward_points);
        
          vn_base_con_refine_charge := round((vn_con_refine_charge *
                                             vn_con_rc_to_base_fw_rate *
                                             vc_con_rc_main_cur_factor),
                                             cur_grd_rows.base_cur_decimal);
        
          vc_contract_rc_fw_exch_rate := '1 ' || vc_con_rc_main_cur_code || '=' ||
                                         vn_con_rc_to_base_fw_rate || ' ' ||
                                         cur_grd_rows.base_cur_code;
        
        else
          vn_base_con_refine_charge := round(vn_con_refine_charge,
                                             cur_grd_rows.base_cur_decimal);
        end if;
      
      end if;
    
      insert into psue_element_details
        (corporate_id,
         process_id,
         internal_contract_item_ref_no,
         psu_id,
         internal_gmr_ref_no,
         element_id,
         element_name,
         assay_header_id,
         assay_qty,
         assay_qty_unit_id,
         payable_qty,
         payable_qty_unit_id,
         payable_qty_unit,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight_unit_id,
         price_unit_weight,
         price_unit_weight_unit,
         md_id,
         m2m_price,
         m2m_price_cur_id,
         m2m_price_cur_code,
         m2m_price_weight_unit_id,
         m2m_price_weight_unit,
         m2m_price_weight_unit_weight,
         m2m_refining_charge,
         m2m_treatment_charge,
         pricing_details,
         m2m_price_unit_id,
         m2m_price_unit_str,
         m2m_amt,
         m2m_amt_cur_id,
         m2m_amt_cur_code,
         contract_value_in_price_cur,
         contract_price_cur_id,
         contract_price_cur_code,
         material_cost_in_base_cur,
         element_qty_in_base_unit,
         total_m2m_amount,
         m2m_amt_per_unit,
         price_cur_to_base_cur_fx_rate,
         m2m_cur_to_base_cur_fx_rate,
         base_price_unit_id_in_ppu,
         base_price_unit_id_in_pum,
         valuation_against_underlying,
         internal_grd_dgrd_ref_no,
         price_to_base_fw_exch_rate,
         m2m_to_base_fw_exch_rate,
         m2m_rc_fw_exch_rate,
         m2m_tc_fw_exch_rate,
         m2m_ld_fw_exch_rate,
         contract_rc_in_base_cur,
         contract_tc_in_base_cur,
         contract_rc_fw_exch_rate,
         contract_tc_fw_exch_rate)
      values
        (cur_grd_rows.corporate_id,
         pc_process_id,
         cur_grd_rows.internal_contract_item_ref_no,
         vc_psu_id,
         cur_grd_rows.internal_gmr_ref_no,
         cur_grd_rows.element_id,
         cur_grd_rows.attribute_name,
         cur_grd_rows.assay_header_id,
         cur_grd_rows.assay_qty,
         cur_grd_rows.assay_qty_unit_id,
         cur_grd_rows.payable_qty,
         cur_grd_rows.payable_qty_unit_id,
         cur_grd_rows.payable_qty_unit,
         vn_cont_price,
         vc_cont_price_unit_id,
         vc_cont_price_unit_cur_id,
         vc_cont_price_unit_cur_code,
         vc_cont_price_wt_unit_id,
         vn_cont_price_wt,
         vc_cont_price_wt_unit,
         cur_grd_rows.md_id,
         cur_grd_rows.net_m2m_price,
         cur_grd_rows.m2m_price_unit_cur_id,
         cur_grd_rows.m2m_price_unit_cur_code,
         cur_grd_rows.m2m_price_unit_weight_unit_id,
         cur_grd_rows.m2m_price_unit_weight_unit,
         decode(cur_grd_rows.m2m_price_unit_weight,
                1,
                null,
                cur_grd_rows.m2m_price_unit_weight),
         vn_ele_m2m_refine_charge,
         vn_ele_m2m_treatment_charge,
         cur_grd_rows.price_description,
         cur_grd_rows.m2m_price_unit_id,
         cur_grd_rows.m2m_price_unit_str,
         vn_m2m_amt, --m2m_amt
         cur_grd_rows.base_cur_id,
         cur_grd_rows.base_cur_code,
         vn_contract_value_in_price_cur,
         vc_price_cur_id,
         vc_price_cur_code,
         vn_contract_value_in_base_cur,
         vn_ele_qty_in_base,
         vn_ele_m2m_total_amount, --total_m2m_amount,
         vn_ele_m2m_amt_per_unit, --m2m_amt_per_unit,
         vn_fx_price_to_base, --price_cur_to_base_cur_fx_rate,   
         vn_m2m_base_fx_rate, --m2m_cur_to_base_cur_fx_rate,
         cur_grd_rows.base_price_unit_id_in_ppu, --base_price_unit_id_in_ppu,
         cur_grd_rows.base_price_unit_id_in_pum, --base_price_unit_id_in_pum)*/
         cur_grd_rows.valuation_against_underlying,
         cur_grd_rows.internal_grd_dgrd_ref_no,
         vc_price_to_base_fw_rate,
         vc_m2m_to_base_fw_rate,
         cur_grd_rows.m2m_rc_fw_exch_rate,
         cur_grd_rows.m2m_tc_fw_exch_rate,
         cur_grd_rows.m2m_ld_fw_exch_rate,
         vn_base_con_refine_charge,
         vn_base_con_treatment_charge,
         vc_contract_rc_fw_exch_rate,
         vc_contract_tc_fw_exch_rate);
    
      if cur_grd_rows.ele_rank = 1 then
        vn_sc_in_base_cur := vn_qty_in_base * cur_grd_rows.sc_in_base_cur;
      
        if cur_grd_rows.ele_rank = 1 then
        
          vn_cont_delivery_premium := 0;
          vn_cont_del_premium_amt  := 0;
        
          if cur_grd_rows.delivery_premium <> 0 then
            if cur_grd_rows.delivery_premium_unit_id <>
               vc_base_price_unit_id then
            
              vc_error_msg := '11';
              --
              -- Get the Delivery Premium Currency 
              --
              select ppu.cur_id,
                     cm.cur_code,
                     nvl(ppu.weight, 1),
                     ppu.weight_unit_id
                into vc_del_premium_cur_id,
                     vc_del_premium_cur_code,
                     vn_del_premium_weight,
                     vc_del_premium_weight_unit_id
                from v_ppu_pum          ppu,
                     cm_currency_master cm
               where ppu.product_price_unit_id =
                     cur_grd_rows.delivery_premium_unit_id
                 and cm.cur_id = ppu.cur_id;
              --
              -- Get the Main Currency of the Delivery Premium Price Unit
              --
              vc_error_msg := '12';
              pkg_general.sp_get_base_cur_detail(vc_del_premium_cur_id,
                                                 vc_del_premium_main_cur_id,
                                                 vc_del_premium_main_cur_code,
                                                 vn_del_premium_cur_main_factor);
            
              pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                          pd_trade_date,
                                          cur_grd_rows.payment_due_date,
                                          vc_del_premium_main_cur_id,
                                          cur_grd_rows.base_cur_id,
                                          30,
                                          'sp_stock_unreal_sntt_con Delivery to Base',
                                          pc_process,
                                          vn_del_to_base_fw_rate,
                                          vn_forward_points);
              vc_error_msg := '13';
            
              vn_cont_delivery_premium := (cur_grd_rows.delivery_premium /
                                          vn_del_premium_weight) *
                                          vn_del_premium_cur_main_factor *
                                          vn_del_to_base_fw_rate *
                                          pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                               vc_del_premium_weight_unit_id,
                                                                               cur_grd_rows.conc_base_qty_unit_id,
                                                                               1);
              vc_error_msg             := '14';
              if cur_grd_rows.base_cur_code <> vc_del_premium_main_cur_code then
                vc_contract_pp_fw_exch_rate := '1 ' ||
                                               vc_del_premium_main_cur_code || '=' ||
                                               vn_del_to_base_fw_rate || ' ' ||
                                               cur_grd_rows.base_cur_code;
              end if;
            
              if cur_grd_rows.base_cur_code <> vc_del_premium_main_cur_code then
                if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
                  vobj_error_log.extend;
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure pkg_phy_physical_process-sp_calc_phy_open_unrealized ',
                                                                       'PHY-005',
                                                                       cur_grd_rows.base_cur_code ||
                                                                       ' to ' ||
                                                                       vc_del_premium_main_cur_code || ' (' ||
                                                                       to_char(cur_grd_rows.payment_due_date,
                                                                               'dd-Mon-yyyy') || ') ',
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
                end if;
              end if;
            else
              vn_cont_delivery_premium := cur_grd_rows.delivery_premium;
            end if;
            vn_cont_del_premium_amt := round(vn_cont_delivery_premium *
                                             vn_qty_in_base,
                                             2);
          else
            vn_cont_delivery_premium := 0;
            vn_cont_del_premium_amt  := 0;
          end if;
        
        end if;
      
        insert into psue_phy_stock_unrealized_ele
          (process_id,
           psu_id,
           corporate_id,
           corporate_name,
           internal_gmr_ref_no,
           internal_contract_item_ref_no,
           contract_ref_no,
           delivery_item_no,
           del_distribution_item_no,
           product_id,
           product_name,
           origin_id,
           origin_name,
           quality_id,
           quality_name,
           container_no,
           stock_wet_qty,
           stock_dry_qty,
           qty_unit_id,
           qty_unit,
           qty_in_base_unit,
           no_of_units,
           prod_base_qty_unit_id,
           prod_base_qty_unit,
           inventory_status,
           shipment_status,
           section_name,
           strategy_id,
           strategy_name,
           valuation_month,
           contract_type,
           profit_center_id,
           profit_center_name,
           profit_center_short_name,
           valuation_exchange_id,
           derivative_def_id,
           gmr_contract_type,
           is_voyage_gmr,
           gmr_ref_no,
           warehouse_id,
           warehouse_name,
           shed_id,
           shed_name,
           int_alloc_group_id,
           internal_grd_dgrd_ref_no,
           price_type_id,
           fixation_method,
           price_fixation_details,
           stock_ref_no,
           trader_name,
           trader_id,
           contract_qty_string,
           contract_price_string,
           m2m_price_string,
           m2m_rc_tc_string,
           m2m_penalty_charge,
           m2m_treatment_charge,
           m2m_refining_charge,
           m2m_loc_diff_premium,
           net_contract_value_in_base_cur,
           net_m2m_amount_in_base_cur,
           prev_net_m2m_amt_in_base_cur,
           pnl_type,
           pnl_in_base_cur,
           pnl_in_per_base_unit,
           prev_day_pnl_in_base_cur,
           prev_day_pnl_per_base_unit,
           trade_day_pnl_in_base_cur,
           trade_day_pnl_per_base_unit,
           cont_unr_status,
           prev_m2m_price_string,
           prev_m2m_rc_tc_string,
           prev_m2m_penalty_charge,
           prev_m2m_treatment_charge,
           prev_m2m_refining_charge,
           prev_m2m_loc_diff_premium,
           base_price_unit_id,
           base_price_unit_name,
           base_cur_id,
           base_cur_code,
           valuation_against_underlying,
           price_to_base_fw_exch_rate,
           m2m_to_base_fw_exch_rate,
           contract_pc_in_base_cur,
           sc_in_base_cur,
           accrual_to_base_fw_exch_rate,
           incoterm_id,
           incoterm,
           cp_id,
           cp_name,
           delivery_month,
           location_premium_per_unit,
           location_premium,
           location_premium_fw_exch_rate,
           contract_pc_fw_exch_rate)
        values
          (pc_process_id,
           vc_psu_id,
           cur_grd_rows.corporate_id,
           cur_grd_rows.corporate_name,
           cur_grd_rows.internal_gmr_ref_no,
           cur_grd_rows.internal_contract_item_ref_no,
           cur_grd_rows.contract_ref_no,
           cur_grd_rows.delivery_item_no,
           cur_grd_rows.del_distribution_item_no,
           cur_grd_rows.conc_product_id,
           cur_grd_rows.conc_product_name,
           cur_grd_rows.origin_id,
           cur_grd_rows.origin_name,
           cur_grd_rows.conc_quality_id,
           cur_grd_rows.conc_quality_name,
           cur_grd_rows.container_no,
           vn_wet_qty,
           vn_dry_qty,
           cur_grd_rows.qty_unit_id,
           cur_grd_rows.qty_unit,
           vn_qty_in_base,
           cur_grd_rows.no_of_units,
           null, --prod_base_qty_unit_id
           null, --prod_base_qty_unit
           cur_grd_rows.inventory_status,
           cur_grd_rows.shipment_status,
           cur_grd_rows.section_name,
           cur_grd_rows.strategy_id,
           cur_grd_rows.strategy_name,
           cur_grd_rows.valuation_month,
           cur_grd_rows.purchase_sales,
           cur_grd_rows.profit_center,
           cur_grd_rows.profit_center_name,
           cur_grd_rows.profit_center_short_name,
           cur_grd_rows.valuation_exchange_id,
           cur_grd_rows.derivative_def_id,
           cur_grd_rows.gmr_contract_type,
           cur_grd_rows.is_voyage_gmr,
           null, --gmr_ref_no
           null, --warehouse_id,
           null, --warehouse_name,
           null, --shed_id,
           null, --shed_name
           cur_grd_rows.int_alloc_group_id,
           cur_grd_rows.internal_grd_dgrd_ref_no,
           cur_grd_rows.price_basis,
           vc_price_fixation_status,
           cur_grd_rows.price_fixation_details,
           cur_grd_rows.stock_ref_no,
           cur_grd_rows.trader_user_name,
           cur_grd_rows.trader_id,
           null, --contract_qty_string,
           null, --contract_price_string,  
           null, --m2m_price_string,   
           null, --m2m_rc_tc_string,
           vn_m2m_total_penality, --m2m_penalty_charge,--Not sure why this is pushed here
           null, --m2m_treatment_charge,
           null, --m2m_refining_charge,
           vn_loc_total_amount, --m2m_loc_diff_premium,
           null, --net_contract_value_in_base_cur, 
           null, --net_m2m_amount_in_base_cur,
           null, --prev_net_m2m_amt_in_base_cur,
           'Unrealized',
           null, -- pnl_in_base_cur,
           null, -- pnl_in_per_base_unit,
           null, -- prev_day_pnl_in_base_cur,
           null, -- prev_day_pnl_per_base_unit,
           null, --trade_day_pnl_in_base_cur,
           null, --trade_day_pnl_per_base_unit,
           null, --cont_unr_status,
           null, --prev_m2m_price_string,    
           null, --prev_m2m_rc_tc_string,
           null, --prev_m2m_penalty_charge, 
           null, --prev_m2m_treatment_charge, 
           null, --prev_m2m_refining_charge, 
           null, --prev_m2m_loc_diff_premium,
           cur_grd_rows.base_price_unit_id_in_ppu,
           cur_grd_rows.base_price_unit_name,
           cur_grd_rows.base_cur_id,
           cur_grd_rows.base_cur_code,
           cur_grd_rows.valuation_against_underlying,
           vc_price_to_base_fw_rate,
           vc_m2m_to_base_fw_rate,
           vn_base_con_penality_charge,
           vn_sc_in_base_cur,
           cur_grd_rows.accrual_to_base_fw_rate,
           cur_grd_rows.incoterm_id,
           cur_grd_rows.incoterm,
           cur_grd_rows.cp_id,
           cur_grd_rows.cp_name,
           cur_grd_rows.delivery_month,
           vn_cont_delivery_premium,
           vn_cont_del_premium_amt,
           vc_contract_pp_fw_exch_rate,
           vc_contract_pc_fw_exch_rate);
      end if;
    end loop;
  
    for cur_update_pnl in (select psue.psu_id,
                                  sum(psue.material_cost_in_base_cur) net_contract_value_in_base_cur,
                                  sum(psue.m2m_amt) net_m2m_amt,
                                  sum(psue.m2m_treatment_charge) net_m2m_treatment_charge,
                                  sum(psue.m2m_refining_charge) net_m2m_refining_charge,
                                  stragg(psue.element_name || '-' ||
                                         psue.payable_qty || ' ' ||
                                         psue.payable_qty_unit) contract_qty_string,
                                  stragg(psue.element_name || '-' ||
                                         psue.contract_price || ' ' ||
                                         psue.price_unit_cur_code || '/' ||
                                         psue.price_unit_weight ||
                                         psue.price_unit_weight_unit) contract_price_string,
                                  (case
                                     when psue.valuation_against_underlying = 'N' then
                                      max((case
                                     when nvl(psue.m2m_price, 0) <> 0 then
                                      (psue.m2m_price || ' ' ||
                                      psue.m2m_price_cur_code || '/' ||
                                      psue.m2m_price_weight_unit_weight ||
                                      psue.m2m_price_weight_unit)
                                     else
                                      null
                                   end)) else stragg((case
                                    when nvl(psue.m2m_price,
                                             0) <> 0 then
                                     (psue.element_name || '-' ||
                                     psue.m2m_price || ' ' ||
                                     psue.m2m_price_cur_code || '/' ||
                                     psue.m2m_price_weight_unit_weight ||
                                     psue.m2m_price_weight_unit)
                                    else
                                     null
                                  end)) end) m2m_price_string, -- TODO if underly valuation = n, show the concentrate price
                                  stragg('TC:' || psue.element_name || '-' ||
                                         psue.m2m_treatment_charge || ' ' ||
                                         
                                         psue.price_unit_cur_code || ' ' ||
                                         'RC:' || psue.element_name || '-' ||
                                         psue.m2m_refining_charge || ' ' ||
                                         psue.price_unit_cur_code) m2m_rc_tc_pen_string,
                                  stragg(psue.contract_rc_fw_exch_rate) contract_rc_fw_exch_rate,
                                  stragg(psue.contract_tc_fw_exch_rate) contract_tc_fw_exch_rate,
                                  stragg(psue.pricing_details) pricing_details
                             from psue_element_details          psue,
                                  psue_phy_stock_unrealized_ele psueh
                            where psue.corporate_id = pc_corporate_id
                              and psue.process_id = pc_process_id
                              and psueh.process_id = pc_process_id
                              and psueh.psu_id = psue.psu_id
                              and psueh.section_name in
                                  ('Shipped NTT', 'Stock NTT')
                            group by psue.psu_id,
                                     psue.valuation_against_underlying)
    loop
    
      update psue_phy_stock_unrealized_ele psuee
         set psuee.net_contract_value_in_base_cur = cur_update_pnl.
                                                    net_contract_value_in_base_cur,
             psuee.net_m2m_amount                 = cur_update_pnl.net_m2m_amt,
             psuee.m2m_treatment_charge           = cur_update_pnl.net_m2m_treatment_charge,
             psuee.m2m_refining_charge            = cur_update_pnl.net_m2m_refining_charge,
             psuee.contract_price_string          = cur_update_pnl.contract_price_string,
             psuee.m2m_price_string               = cur_update_pnl.m2m_price_string,
             psuee.m2m_rc_tc_string               = cur_update_pnl.m2m_rc_tc_pen_string,
             psuee.contract_qty_string            = cur_update_pnl.contract_qty_string,
             psuee.contract_rc_fw_exch_rate       = cur_update_pnl.contract_rc_fw_exch_rate,
             psuee.contract_tc_fw_exch_rate       = cur_update_pnl.contract_tc_fw_exch_rate,
             psuee.price_description              = cur_update_pnl.pricing_details
       where psuee.psu_id = cur_update_pnl.psu_id
         and psuee.process_id = pc_process_id
         and psuee.corporate_id = pc_corporate_id
         and psuee.section_name in ('Shipped NTT', 'Stock NTT');
    end loop;
  
    -- Update Contract TC/RC/Material Cost in Header
  
    update psue_phy_stock_unrealized_ele psue
       set (psue.contract_rc_in_base_cur, psue.contract_tc_in_base_cur, psue.material_cost_in_base_cur) = --
            (select sum(psued.contract_rc_in_base_cur),
                    sum(psued.contract_tc_in_base_cur),
                    sum(psued.material_cost_in_base_cur)
               from psue_element_details psued
              where psued.process_id = pc_process_id
                and psue.psu_id = psued.psu_id
              group by psued.psu_id)
     where psue.process_id = pc_process_id
       and psue.section_name in ('Shipped NTT', 'Stock NTT');
    -- Update TC/RC/PC String    
    update psue_phy_stock_unrealized_ele psu
       set psu.contract_rc_tc_pen_string = (select stragg('TC:' ||
                                                          poude.element_name || '-' ||
                                                          poude.contract_tc_in_base_cur || ' ' ||
                                                          psu.base_cur_code || '  ' ||
                                                          'RC:' ||
                                                          poude.element_name || '-' ||
                                                          poude.contract_rc_in_base_cur || ' ' ||
                                                          psu.base_cur_code) contract_rc_tc_pen_string
                                              from psue_element_details poude
                                             where poude.process_id =
                                                   pc_process_id
                                               and psu.process_id =
                                                   pc_process_id
                                               and psu.internal_grd_dgrd_ref_no =
                                                   poude.internal_grd_dgrd_ref_no
                                               and psu.internal_contract_item_ref_no =
                                                   poude.internal_contract_item_ref_no
                                             group by psu.internal_contract_item_ref_no,
                                                      psu.internal_grd_dgrd_ref_no)
     where psu.process_id = pc_process_id
       and psu.section_name in ('Shipped NTT', 'Stock NTT');
  
    update psue_phy_stock_unrealized_ele psuee
       set psuee.net_m2m_amount_in_base_cur = (psuee.net_m2m_amount -
                                              psuee.m2m_treatment_charge -
                                              psuee.m2m_refining_charge -
                                              psuee.m2m_penalty_charge +
                                              psuee.m2m_loc_diff_premium)
     where psuee.corporate_id = pc_corporate_id
       and psuee.process_id = pc_process_id
       and psuee.section_name in ('Shipped NTT', 'Stock NTT');
    --- previous EOD Data
    for cur_update in (select psue_prev_day.net_m2m_amount_in_base_cur,
                              psue_prev_day.net_m2m_amount,
                              psue_prev_day.pnl_in_per_base_unit,
                              psue_prev_day.m2m_price_string,
                              psue_prev_day.m2m_rc_tc_string,
                              psue_prev_day.m2m_penalty_charge,
                              psue_prev_day.m2m_treatment_charge,
                              psue_prev_day.m2m_refining_charge,
                              psue_prev_day.m2m_loc_diff_premium,
                              psue_prev_day.qty_in_base_unit,
                              psue_prev_day.psu_id,
                              psue_prev_day.m_pnl_in_per_base_unit
                         from psue_phy_stock_unrealized_ele psue_prev_day
                        where process_id = pc_previous_process_id
                          and corporate_id = pc_corporate_id
                          and psue_prev_day.section_name in
                              ('Shipped NTT', 'Stock NTT'))
    loop
      update psue_phy_stock_unrealized_ele psue_today
         set psue_today.prev_net_m2m_amt_in_base_cur = cur_update.net_m2m_amount_in_base_cur,
             psue_today.m_prev_day_pnl_in_base_cur   = cur_update.m_pnl_in_per_base_unit *
                                                       psue_today.qty_in_base_unit,
             psue_today.prev_net_m2m_amount          = cur_update.net_m2m_amount,
             psue_today.prev_day_pnl_per_base_unit   = cur_update.pnl_in_per_base_unit,
             psue_today.prev_day_pnl_in_base_cur     = psue_today.qty_in_base_unit *
                                                       cur_update.pnl_in_per_base_unit, --added
             psue_today.prev_m2m_price_string        = cur_update.m2m_price_string,
             psue_today.prev_m2m_rc_tc_string        = cur_update.m2m_rc_tc_string,
             psue_today.prev_m2m_penalty_charge      = cur_update.m2m_penalty_charge,
             psue_today.prev_m2m_treatment_charge    = cur_update.m2m_treatment_charge,
             psue_today.prev_m2m_refining_charge     = cur_update.m2m_refining_charge,
             psue_today.prev_m2m_loc_diff_premium    = cur_update.m2m_loc_diff_premium,
             psue_today.cont_unr_status              = 'EXISTING_TRADE'
       where psue_today.process_id = pc_process_id
         and psue_today.corporate_id = pc_corporate_id
         and psue_today.psu_id = cur_update.psu_id
         and psue_today.section_name in ('Shipped NTT', 'Stock NTT');
    end loop;
  
    begin
      update psue_phy_stock_unrealized_ele psue
         set psue.prev_net_m2m_amt_in_base_cur = psue.net_m2m_amount_in_base_cur,
             psue.prev_day_pnl_in_base_cur     = 0,
             psue.prev_day_pnl_per_base_unit   = 0,
             psue.m_prev_day_pnl_in_base_cur   = 0,
             psue.m_prev_day_pnl_per_base_unit = 0,
             psue.prev_net_m2m_amount          = psue.net_m2m_amount,
             psue.prev_m2m_price_string        = psue.m2m_price_string,
             psue.prev_m2m_rc_tc_string        = psue.m2m_rc_tc_string,
             psue.prev_m2m_penalty_charge      = psue.m2m_penalty_charge,
             psue.prev_m2m_treatment_charge    = psue.m2m_treatment_charge,
             psue.prev_m2m_refining_charge     = psue.m2m_refining_charge,
             psue.prev_m2m_loc_diff_premium    = psue.m2m_loc_diff_premium,
             psue.cont_unr_status              = 'NEW_TRADE'
       where psue.cont_unr_status is null
         and psue.process_id = pc_process_id
         and psue.corporate_id = pc_corporate_id
         and psue.section_name in ('Shipped NTT', 'Stock NTT');
    end;
  
    update psue_phy_stock_unrealized_ele psue
       set psue.m_pnl_in_base_cur      = psue.net_m2m_amount_in_base_cur -
                                         psue.prev_net_m2m_amt_in_base_cur,
           psue.m_pnl_in_per_base_unit = (psue.net_m2m_amount_in_base_cur -
                                         psue.prev_net_m2m_amt_in_base_cur) /
                                         psue.qty_in_base_unit
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.section_name in ('Shipped NTT', 'Stock NTT');
    -- Calculate PNL in Base Currency = MC - TC - RC - PC + SC ( +- M2M)
    update psue_phy_stock_unrealized_ele psue
       set psue.pnl_in_base_cur      = case when psue.contract_type = 'P' then psue.net_m2m_amount_in_base_cur - (psue.material_cost_in_base_cur + psue.location_premium - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur) else(psue.material_cost_in_base_cur - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur + psue.location_premium) - psue.net_m2m_amount_in_base_cur end,
           psue.pnl_in_per_base_unit = (case when psue.contract_type = 'P' then psue.net_m2m_amount_in_base_cur - (psue.material_cost_in_base_cur - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur + psue.location_premium) else(psue.material_cost_in_base_cur + psue.location_premium - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur) - psue.net_m2m_amount_in_base_cur end) / psue.qty_in_base_unit
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.section_name in ('Shipped NTT', 'Stock NTT');
    update psue_phy_stock_unrealized_ele psue
       set m_trade_day_pnl_in_base_cur   = nvl(psue.m_pnl_in_base_cur, 0) -
                                           nvl(psue.m_prev_day_pnl_in_base_cur,
                                               0),
           trade_day_pnl_in_base_cur     = nvl(psue.pnl_in_base_cur, 0) -
                                           nvl(psue.prev_day_pnl_in_base_cur,
                                               0),
           m_trade_day_pnl_per_base_unit = (nvl(psue.m_pnl_in_base_cur, 0) -
                                           nvl(psue.m_prev_day_pnl_in_base_cur,
                                                0)) / psue.qty_in_base_unit,
           trade_day_pnl_per_base_unit   = (nvl(psue.pnl_in_base_cur, 0) -
                                           nvl(psue.prev_day_pnl_in_base_cur,
                                                0)) / psue.qty_in_base_unit
    
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.section_name in ('Shipped NTT', 'Stock NTT');
  
    update psue_phy_stock_unrealized_ele psue
       set (gmr_ref_no, warehouse_id, warehouse_name, shed_id, shed_name, prod_base_qty_unit_id, prod_base_qty_unit) = --
            (select gmr.gmr_ref_no,
                    gmr.warehouse_profile_id,
                    phd_gmr.companyname as warehouse_profile_name,
                    gmr.shed_id,
                    sld.storage_location_name,
                    pdm.base_quantity_unit,
                    qum.qty_unit
               from gmr_goods_movement_record   gmr,
                    pdm_productmaster           pdm,
                    phd_profileheaderdetails    phd_gmr,
                    sld_storage_location_detail sld,
                    qum_quantity_unit_master    qum
              where gmr.internal_gmr_ref_no = psue.internal_gmr_ref_no
                and psue.product_id = pdm.product_id
                and pdm.base_quantity_unit = qum.qty_unit_id
                and gmr.warehouse_profile_id = phd_gmr.profileid(+)
                and gmr.shed_id = sld.storage_loc_id(+)
                and psue.process_id = gmr.process_id
                and psue.process_id = pc_process_id)
     where psue.process_id = pc_process_id
       and psue.section_name in ('Shipped NTT', 'Stock NTT');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_stock_unreal_sntt_conc ',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm || '- ' ||
                                                           vc_error_msg,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;
  procedure sp_stock_unreal_inv_in_conc(pc_corporate_id        varchar2,
                                        pd_trade_date          date,
                                        pc_process_id          varchar2,
                                        pc_user_id             varchar2,
                                        pc_process             varchar2,
                                        pc_previous_process_id varchar2,
                                        pc_dbd_id              varchar2) is
  
    cursor cur_grd is
      select tt.section_type,
             tt.profit_center,
             tt.profit_center_name,
             tt.profit_center_short_name,
             tt.process_id,
             tt.corporate_id,
             tt.corporate_name,
             tt.internal_gmr_ref_no,
             tt.internal_contract_item_ref_no,
             tt.del_distribution_item_no,
             tt.delivery_item_no,
             tt.contract_ref_no,
             tt.purchase_sales,
             tt.conc_product_id,
             tt.conc_product_name,
             tt.product_id,
             tt.product_name,
             tt.origin_id,
             tt.origin_name,
             tt.conc_quality_id,
             tt.conc_quality_name,
             tt.quality_id,
             tt.quality_name,
             tt.container_no,
             tt.stock_qty,
             tt.qty_unit_id,
             tt.gmr_qty_unit_id,
             tt.qty_unit,
             tt.stocky_qty_decimal,
             tt.no_of_units,
             tt.md_id,
             tt.m2m_price_unit_id,
             tt.net_m2m_price,
             tt.m2m_price_unit_cur_id,
             tt.m2m_price_unit_cur_code,
             tt.m2m_price_unit_weight_unit_id,
             tt.m2m_price_unit_weight_unit,
             tt.m2m_price_unit_weight,
             tt.m2m_price_unit_str,
             tt.m2m_main_cur_id,
             tt.m2m_main_cur_code,
             tt.m2m_main_cur_decimals,
             tt.main_currency_factor,
             tt.settlement_cur_id,
             tt.settlement_to_val_fx_rate,
             tt.element_id,
             tt.attribute_name,
             tt.assay_header_id,
             tt.assay_qty,
             tt.assay_qty_unit_id,
             tt.payable_qty,
             tt.payable_qty_unit_id,
             tt.payable_qty_unit,
             tt.contract_price,
             tt.price_unit_id,
             tt.price_unit_weight_unit_id,
             tt.price_unit_weight,
             tt.price_unit_cur_id,
             tt.price_unit_cur_code,
             tt.price_unit_weight_unit,
             tt.price_fixation_details,
             tt.price_description,
             tt.payment_due_date,
             tt.base_cur_id,
             tt.base_cur_code,
             tt.base_cur_decimal,
             tt.inventory_status,
             tt.shipment_status,
             tt.section_name,
             tt.shed_id,
             tt.destination_city_id,
             tt.price_fixation_status,
             tt.base_qty_unit_id,
             tt.conc_base_qty_unit_id,
             tt.base_qty_decimal,
             tt.strategy_id,
             tt.strategy_name,
             tt.valuation_exchange_id,
             tt.valuation_month,
             tt.derivative_def_id,
             tt.is_voyage_gmr,
             tt.gmr_contract_type,
             tt.internal_grd_dgrd_ref_no,
             tt.stock_ref_no,
             tt.trader_id,
             tt.trader_user_name,
             tt.m2m_loc_incoterm_deviation,
             tt.m2m_treatment_charge,
             tt.m2m_refine_charge,
             tt.m2m_tc_price_unit_id,
             tt.m2m_tc_price_unit_name,
             tt.m2m_tc_cur_id,
             tt.m2m_tc_weight,
             tt.m2m_tc_weight_unit_id,
             tt.m2m_rc_price_unit_id,
             tt.m2m_rc_price_unit_name,
             tt.m2m_rc_cur_id,
             tt.m2m_rc_weight,
             tt.m2m_rc_weight_unit_id,
             tt.base_price_unit_id_in_ppu,
             tt.base_price_unit_id_in_pum,
             tt.eval_basis,
             dense_rank() over(partition by tt.internal_contract_item_ref_no order by tt.element_id) ele_rank,
             tt.unit_of_measure,
             tt.loc_qty_unit_id,
             tt.mvp_id,
             tt.shipment_month,
             tt.shipment_year,
             tt.base_price_unit_name,
             tt.valuation_against_underlying,
             m2m_rc_fw_exch_rate,
             m2m_tc_fw_exch_rate,
             m2m_ld_fw_exch_rate,
             sc_in_base_cur,
             accrual_to_base_fw_rate,
             tt.total_sc_charges,
             tt.incoterm_id,
             tt.incoterm,
             tt.cp_id,
             tt.cp_name,
             tt.delivery_month,
             tt.mc_per_unit,
             tt.mc_price_unit_id,
             tt.mc_price_unit_name,
             tt.tc_per_unit,
             tt.tc_price_unit_id,
             tt.tc_price_unit_name,
             tt.rc_per_unit,
             tt.rc_price_unit_id,
             tt.rc_price_unit_name,
             tt.is_marked_for_consignment,
             nvl(tt.product_premium_per_unit, 0) product_premium_per_unit,
             tt.contract_pp_fw_exch_rate,
             tt.price_to_base_fw_exch_rate
        from (select 'Purchase' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     grd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     grd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     grd.container_no,
                     grd.current_qty stock_qty,
                     grd.qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     grd.no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     ceqs.element_id,
                     aml.attribute_name,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     invme.mc_per_unit contract_price,
                     invme.mc_price_unit_id price_unit_id,
                     invme.mc_price_unit_weight_unit_id price_unit_weight_unit_id,
                     invme.mc_price_unit_weight price_unit_weight,
                     invme.mc_price_unit_cur_id price_unit_cur_id,
                     invme.mc_price_unit_cur_code price_unit_cur_code,
                     invme.mc_price_unit_weight_unit price_unit_weight_unit,
                     null price_fixation_details,
                     null price_description,
                     pd_trade_date payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     grd.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                        'Shipped NTT'
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') = 'In' then
                        'Shipped IN'
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                        'Stock NTT'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') = 'In' then
                        'Stock IN'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     null price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     grd.internal_grd_ref_no internal_grd_dgrd_ref_no,
                     grd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
                     md.m2m_rc_fw_exch_rate,
                     md.m2m_tc_fw_exch_rate,
                     md.m2m_ld_fw_exch_rate,
                     0 sc_in_base_cur,
                     invm.accrual_to_base_fw_exch_rate accrual_to_base_fw_rate,
                     invm.total_sc_charges,
                     itm.incoterm_id,
                     itm.incoterm,
                     phd_cp.profileid cp_id,
                     phd_cp.companyname cp_name,
                     (case
                       when pcdi.delivery_period_type = 'Month' then
                        pcdi.delivery_to_month || '-' ||
                        pcdi.delivery_to_year
                       else
                        to_char(pcdi.delivery_to_date, 'Mon-YYYY')
                     end) delivery_month,
                     invme.mc_per_unit,
                     invme.mc_price_unit_id,
                     invme.mc_price_unit_name,
                     invme.tc_per_unit,
                     invme.tc_price_unit_id,
                     invme.tc_price_unit_name,
                     invme.rc_per_unit,
                     invme.rc_price_unit_id,
                     invme.rc_price_unit_name,
                     decode(grd.partnership_type, 'Consignment', 'Y', 'N') as is_marked_for_consignment,
                     invm.product_premium_per_unit,
                     invm.contract_pp_fw_exch_rate,
                     invme.price_to_base_fw_exch_rate
                from gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qum_quantity_unit_master qum,
                     qat_quality_attributes qat,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     ciqs_contract_item_qty_status ciqs,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     pcdi_pc_delivery_item pcdi,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     pcdb_pc_delivery_basis pcdb,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam,
                     gscs_gmr_sec_cost_summary gscs,
                     invm_cog invm,
                     itm_incoterm_master itm,
                     phd_profileheaderdetails phd_cp,
                     invme_cog_element invme
               where grd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and grd.origin_id = orm.origin_id(+)
                 and grd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and grd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and grd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and grd.process_id = pc_process_id
                 and grd.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and ppm.attribute_id = aml.attribute_id
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = ceqs.element_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = gmr_qty.internal_grd_ref_no
                 and ceqs.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and pcm.purchase_sales = 'P'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'N'
                 and pcm.is_tolling_extn = 'N'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
                 and gmr.is_deleted = 'N'
                 and nvl(grd.inventory_status, 'NA') = 'In'
                 and pcm.purchase_sales = 'P'
                 and nvl(grd.current_qty, 0) > 0
                 and grd.internal_contract_item_ref_no is not null
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and gmr.internal_gmr_ref_no = gscs.internal_gmr_ref_no(+)
                 and gmr.process_id = gscs.process_id(+)
                 and grd.internal_grd_ref_no = invm.internal_grd_ref_no
                 and grd.process_id = invm.process_id
                 and pcdb.inco_term_id = itm.incoterm_id
                 and pcm.cp_id = phd_cp.profileid(+)
                 and tmpc.element_id = ceqs.element_id
                 and invme.process_id = pc_process_id
                 and invme.internal_grd_ref_no = grd.internal_grd_ref_no
                 and invme.element_id = ceqs.element_id) tt;
  
    vn_cont_price                  number;
    vc_cont_price_unit_id          varchar2(15);
    vc_cont_price_unit_cur_id      varchar2(15);
    vc_cont_price_unit_cur_code    varchar2(15);
    vn_cont_price_wt               number;
    vc_cont_price_wt_unit_id       varchar2(15);
    vc_cont_price_wt_unit          varchar2(15);
    vc_price_fixation_status       varchar2(50);
    vc_psu_id                      varchar2(500);
    vn_qty_in_base                 number;
    vn_ele_qty_in_base             number;
    vn_m2m_amt                     number;
    vc_m2m_price_unit_cur_id       varchar2(15);
    vc_m2m_cur_id                  varchar2(15);
    vc_m2m_cur_code                varchar2(15);
    vn_m2m_sub_cur_id_factor       number;
    vn_m2m_cur_decimals            number;
    vn_m2m_base_fx_rate            number;
    vn_m2m_base_deviation          number;
    vn_ele_m2m_amount_in_base      number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_ele_m2m_total_amount        number;
    vn_ele_m2m_amt_per_unit        number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vn_cont_price_cur_id_factor    number;
    vn_contract_value_in_price_cur number;
    vn_cont_price_cur_decimals     number;
    vn_fx_price_to_base            number;
    vn_contract_value_in_val_cur   number;
    vn_contract_value_in_base_cur  number;
    vn_ele_m2m_treatment_charge    number;
    vn_dry_qty                     number;
    vn_wet_qty                     number;
    vn_dry_qty_in_base             number;
    vn_ele_m2m_refine_charge       number;
    vn_loc_amount                  number;
    vn_loc_total_amount            number;
    vn_m2m_total_penality          number;
    vn_m2m_penality                number;
    vc_penality_price_unit_id      varchar2(15);
    vc_price_unit_id               varchar2(15);
    vc_m2m_to_base_fw_rate         varchar2(50);
    vc_price_to_base_fw_rate       varchar2(50);
    vc_m2m_pc_exch_rate_string     varchar2(100);
    vc_m2m_tot_pc_exch_rate_string varchar2(100); -- M2M Penalty 
    vn_sc_in_base_cur              number;
    --vn_base_con_penality_charge    number;
    vc_error_msg                varchar2(10);
    vn_forward_points           number;
    vc_m2m_tc_main_cur_id       varchar2(15);
    vc_m2m_tc_main_cur_code     varchar2(15);
    vn_m2m_tc_main_cur_factor   number;
    vn_m2m_tc_to_base_fw_rate   number;
    vc_m2m_rc_main_cur_id       varchar2(15);
    vc_m2m_rc_main_cur_code     varchar2(15);
    vc_m2m_rc_main_cur_factor   number;
    vn_m2m_rc_to_base_fw_rate   number;
    vn_fx_price_deviation       number;
    vn_product_premium_per_unit number;
    vn_product_premium_amt      number;
    --
    vn_ele_tc_charges number;
    vc_ele_tc_cur_id  varchar2(15);
    --  vn_ele_tc_fx_exch_rate    varchar2(50);--??
    vc_ele_tc_main_cur_id     varchar2(15);
    vc_ele_tc_main_cur_code   varchar2(15);
    vc_ele_tc_main_cur_factor number;
    vn_ele_tc_to_base_fw_rate number;
    vc_ele_tc_fw_exch_rate    varchar2(50);
    vn_base_ele_tc_charges    number;
  
    vn_ele_rc_charges number;
    vc_ele_rc_cur_id  varchar2(15);
    --  vn_ele_rc_fx_exch_rate    varchar2(50);
    vc_ele_rc_main_cur_id     varchar2(15);
    vc_ele_rc_main_cur_code   varchar2(15);
    vc_ele_rc_main_cur_factor number;
    vn_ele_rc_to_base_fw_rate number;
    vc_ele_rc_fw_exch_rate    varchar2(50);
    vn_base_ele_rc_charges    number;
  
    vn_contract_pc_charges         number;
    vc_contract_pc_cur_id          varchar2(15);
    vn_contract_pc_fx_exch_rate    varchar2(50);
    vc_contract_pc_main_cur_id     varchar2(15);
    vc_contract_pc_main_cur_code   varchar2(15);
    vc_contract_pc_main_cur_factor number;
    vn_contract_pc_to_base_fw_rate number;
    vc_contract_pc_fw_exch_rate    varchar2(50);
  
  begin
    vc_error_msg := '18647';
    for cur_grd_rows in cur_grd
    loop
      vc_m2m_to_base_fw_rate         := null;
      vc_m2m_pc_exch_rate_string     := null;
      vc_m2m_tot_pc_exch_rate_string := null;
      vc_ele_tc_fw_exch_rate         := null;
      vc_ele_rc_fw_exch_rate         := null;
      vn_contract_pc_fx_exch_rate    := null;
      vc_contract_pc_fw_exch_rate    := null;
      vn_cont_price                  := cur_grd_rows.contract_price;
      vc_cont_price_unit_id          := cur_grd_rows.price_unit_id;
      vc_cont_price_unit_cur_id      := cur_grd_rows.price_unit_cur_id;
      vc_cont_price_unit_cur_code    := cur_grd_rows.price_unit_cur_code;
      vn_cont_price_wt               := cur_grd_rows.price_unit_weight;
      vc_cont_price_wt_unit_id       := cur_grd_rows.price_unit_weight_unit_id;
      vc_cont_price_wt_unit          := cur_grd_rows.price_unit_weight_unit;
      vc_price_fixation_status       := cur_grd_rows.price_fixation_status;
    
      if cur_grd_rows.stock_qty <> 0 then
        vc_psu_id := cur_grd_rows.internal_gmr_ref_no || '-' ||
                     cur_grd_rows.internal_grd_dgrd_ref_no || '-' ||
                     cur_grd_rows.internal_contract_item_ref_no || '-' ||
                     cur_grd_rows.container_no;
      
        if cur_grd_rows.unit_of_measure = 'Wet' then
          vn_dry_qty := round(pkg_metals_general.fn_get_assay_dry_qty(cur_grd_rows.conc_product_id,
                                                                      cur_grd_rows.assay_header_id,
                                                                      cur_grd_rows.stock_qty,
                                                                      cur_grd_rows.qty_unit_id),
                              cur_grd_rows.stocky_qty_decimal);
        else
          vn_dry_qty := cur_grd_rows.stock_qty;
        end if;
      
        vn_wet_qty := cur_grd_rows.stock_qty;
      
        -- convert into dry qty to base qty element level
        vc_error_msg := '18677';
        if cur_grd_rows.qty_unit_id <> cur_grd_rows.base_qty_unit_id then
          vn_dry_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                           cur_grd_rows.qty_unit_id,
                                                                           cur_grd_rows.base_qty_unit_id,
                                                                           1) *
                                      vn_dry_qty,
                                      cur_grd_rows.base_qty_decimal);
        else
          vn_dry_qty_in_base := round(vn_dry_qty,
                                      cur_grd_rows.base_qty_decimal);
        
        end if;
      
        if cur_grd_rows.qty_unit_id <> cur_grd_rows.conc_base_qty_unit_id then
          vn_qty_in_base := round(cur_grd_rows.stock_qty *
                                  pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                       cur_grd_rows.qty_unit_id,
                                                                       cur_grd_rows.conc_base_qty_unit_id,
                                                                       1),
                                  cur_grd_rows.base_qty_decimal);
        else
          vn_qty_in_base := round(cur_grd_rows.stock_qty,
                                  cur_grd_rows.base_qty_decimal);
        end if;
      
        if cur_grd_rows.payable_qty_unit_id <>
           cur_grd_rows.base_qty_unit_id then
          vn_ele_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                           cur_grd_rows.payable_qty_unit_id,
                                                                           cur_grd_rows.base_qty_unit_id,
                                                                           1) *
                                      cur_grd_rows.payable_qty,
                                      cur_grd_rows.base_qty_decimal);
        else
          vn_ele_qty_in_base := round(cur_grd_rows.payable_qty,
                                      cur_grd_rows.base_qty_decimal);
        end if;
        if cur_grd_rows.valuation_against_underlying = 'Y' then
          if cur_grd_rows.eval_basis = 'FIXED' then
            dbms_output.put_line('fixed');
            vn_m2m_amt               := 0;
            vc_m2m_price_unit_cur_id := cur_grd_rows.base_cur_id;
          else
            vc_m2m_price_unit_cur_id := nvl(cur_grd_rows.m2m_price_unit_cur_id,
                                            cur_grd_rows.base_cur_id);
            vn_m2m_amt               := nvl(cur_grd_rows.net_m2m_price, 0) /
                                        nvl(cur_grd_rows.m2m_price_unit_weight,
                                            1) *
                                        pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                             cur_grd_rows.payable_qty_unit_id,
                                                                             cur_grd_rows.m2m_price_unit_weight_unit_id,
                                                                             cur_grd_rows.payable_qty);
          end if;
        
          pkg_general.sp_get_main_cur_detail(nvl(vc_m2m_price_unit_cur_id,
                                                 cur_grd_rows.base_cur_id),
                                             vc_m2m_cur_id,
                                             vc_m2m_cur_code,
                                             vn_m2m_sub_cur_id_factor,
                                             vn_m2m_cur_decimals);
        
          vn_m2m_amt := round(vn_m2m_amt * vn_m2m_sub_cur_id_factor,
                              cur_grd_rows.base_cur_decimal);
          pkg_general.sp_bank_fx_rate(cur_grd_rows.corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      nvl(vc_m2m_cur_id,
                                          cur_grd_rows.base_cur_id),
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc M2M to Base',
                                      pc_process,
                                      vn_m2m_base_fx_rate,
                                      vn_m2m_base_deviation);
          vc_error_msg := '18734';
          if vc_m2m_cur_id <> cur_grd_rows.base_cur_id then
            if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
              null;
            else
              vc_m2m_to_base_fw_rate := '1 ' || vc_m2m_cur_code || '=' ||
                                        vn_m2m_base_fx_rate || ' ' ||
                                        cur_grd_rows.base_cur_code;
            end if;
          end if;
        
          vn_ele_m2m_amount_in_base := vn_m2m_amt * vn_m2m_base_fx_rate;
        else
          -- If valuation against underly is no, then use total concentrate qty and market price to calculate the
          -- Market value for the gmr level.
          if cur_grd_rows.eval_basis = 'FIXED' then
            vn_m2m_amt               := 0;
            vc_m2m_price_unit_cur_id := cur_grd_rows.base_cur_id;
          else
            vc_m2m_price_unit_cur_id := nvl(cur_grd_rows.m2m_price_unit_cur_id,
                                            cur_grd_rows.base_cur_id);
            vn_m2m_amt               := nvl(cur_grd_rows.net_m2m_price, 0) /
                                        nvl(cur_grd_rows.m2m_price_unit_weight,
                                            1) *
                                        pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                             cur_grd_rows.conc_base_qty_unit_id,
                                                                             cur_grd_rows.m2m_price_unit_weight_unit_id,
                                                                             vn_dry_qty_in_base);
          end if;
        
          pkg_general.sp_get_main_cur_detail(nvl(vc_m2m_price_unit_cur_id,
                                                 cur_grd_rows.base_cur_id),
                                             vc_m2m_cur_id,
                                             vc_m2m_cur_code,
                                             vn_m2m_sub_cur_id_factor,
                                             vn_m2m_cur_decimals);
        
          vn_m2m_amt := round(vn_m2m_amt * vn_m2m_sub_cur_id_factor,
                              cur_grd_rows.base_cur_decimal);
        
          pkg_general.sp_bank_fx_rate(cur_grd_rows.corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      nvl(vc_m2m_cur_id,
                                          cur_grd_rows.base_cur_id),
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc M2M to Base',
                                      pc_process,
                                      vn_m2m_base_fx_rate,
                                      vn_m2m_base_deviation);
        
          if vc_m2m_cur_id <> cur_grd_rows.base_cur_id then
            if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
              null;
            else
              vc_m2m_to_base_fw_rate := '1 ' || vc_m2m_cur_code || '=' ||
                                        vn_m2m_base_fx_rate || ' ' ||
                                        cur_grd_rows.base_cur_code;
            
            end if;
          else
            vn_m2m_base_fx_rate := 1;
          end if;
        
        end if;
        -- Element Treatment Charge        
        pkg_metals_general.sp_get_gmr_treatment_charge(cur_grd_rows.internal_gmr_ref_no,
                                                       cur_grd_rows.internal_grd_dgrd_ref_no,
                                                       cur_grd_rows.element_id,
                                                       pc_dbd_id,
                                                       vn_cont_price,
                                                       vc_cont_price_unit_id,
                                                       vn_ele_tc_charges,
                                                       vc_ele_tc_cur_id);
      
        if vc_ele_tc_cur_id <> cur_grd_rows.base_cur_id then
          -- Bank FX Rate from TC to Base Currency
          pkg_general.sp_get_base_cur_detail(vc_ele_tc_cur_id,
                                             vc_ele_tc_main_cur_id,
                                             vc_ele_tc_main_cur_code,
                                             vc_ele_tc_main_cur_factor);
        
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      vc_ele_tc_main_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc Contract TC to Base Currency',
                                      pc_process,
                                      vn_ele_tc_to_base_fw_rate,
                                      vn_forward_points);
        
          vn_base_ele_tc_charges := round((vn_ele_tc_charges *
                                          vn_ele_tc_to_base_fw_rate *
                                          vc_ele_tc_main_cur_factor),
                                          cur_grd_rows.base_cur_decimal);
          vc_ele_tc_fw_exch_rate := '1 ' || vc_ele_tc_main_cur_code || '=' ||
                                    vn_ele_tc_to_base_fw_rate || ' ' ||
                                    cur_grd_rows.base_cur_code;
        else
          vn_ele_tc_to_base_fw_rate := 1;
          vn_base_ele_tc_charges    := round(vn_ele_tc_charges,
                                             cur_grd_rows.base_cur_decimal);
        
        end if;
        -- Refining Changes
        pkg_metals_general.sp_get_gmr_refine_charge(cur_grd_rows.internal_gmr_ref_no,
                                                    cur_grd_rows.internal_grd_dgrd_ref_no,
                                                    cur_grd_rows.element_id,
                                                    pc_dbd_id,
                                                    vn_cont_price,
                                                    vc_cont_price_unit_id,
                                                    vn_ele_rc_charges,
                                                    vc_ele_rc_cur_id);
      
        if vc_ele_rc_cur_id <> cur_grd_rows.base_cur_id then
          -- Bank FX Rate from RC to Base Currency
          pkg_general.sp_get_base_cur_detail(vc_ele_rc_cur_id,
                                             vc_ele_rc_main_cur_id,
                                             vc_ele_rc_main_cur_code,
                                             vc_ele_rc_main_cur_factor);
        
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      vc_ele_rc_main_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc Contract RC to Base Currency',
                                      pc_process,
                                      vn_ele_rc_to_base_fw_rate,
                                      vn_forward_points);
        
          vn_base_ele_rc_charges := round((vn_ele_rc_charges *
                                          vn_ele_rc_to_base_fw_rate *
                                          vc_ele_rc_main_cur_factor),
                                          cur_grd_rows.base_cur_decimal);
          vc_ele_rc_fw_exch_rate := '1 ' || vc_ele_rc_main_cur_code || '=' ||
                                    vn_ele_rc_to_base_fw_rate || ' ' ||
                                    cur_grd_rows.base_cur_code;
        else
          vn_ele_rc_to_base_fw_rate := 1;
          vn_base_ele_rc_charges    := round(vn_ele_rc_charges,
                                             cur_grd_rows.base_cur_decimal);
        
        end if;
        -- Penalty Changes
        if cur_grd_rows.ele_rank = 1 then
          pkg_metals_general.sp_get_gmr_penalty_charge_new(cur_grd_rows.internal_gmr_ref_no,
                                                           cur_grd_rows.internal_grd_dgrd_ref_no,
                                                           pc_dbd_id,
                                                           vn_contract_pc_charges,
                                                           vc_contract_pc_cur_id);
        
          if vc_contract_pc_cur_id <> cur_grd_rows.base_cur_id then
            -- Bank FX Rate from Penalty to Base Currency
            pkg_general.sp_get_base_cur_detail(vc_contract_pc_cur_id,
                                               vc_contract_pc_main_cur_id,
                                               vc_contract_pc_main_cur_code,
                                               vc_contract_pc_main_cur_factor);
          
            pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                        pd_trade_date,
                                        cur_grd_rows.payment_due_date,
                                        vc_contract_pc_main_cur_id,
                                        cur_grd_rows.base_cur_id,
                                        30,
                                        'sp_stock_unreal_inv_in_conc Contract pc to Base Currency',
                                        pc_process,
                                        vn_contract_pc_to_base_fw_rate,
                                        vn_forward_points);
          
            vn_contract_pc_charges      := round((vn_contract_pc_charges *
                                                 vn_contract_pc_to_base_fw_rate *
                                                 vc_contract_pc_main_cur_factor),
                                                 cur_grd_rows.base_cur_decimal);
            vc_contract_pc_fw_exch_rate := '1 ' ||
                                           vc_contract_pc_main_cur_code || '=' ||
                                           vn_contract_pc_to_base_fw_rate || ' ' ||
                                           cur_grd_rows.base_cur_code;
          else
            vn_contract_pc_to_base_fw_rate := 1;
            vn_contract_pc_charges         := round(vn_contract_pc_charges,
                                                    cur_grd_rows.base_cur_decimal);
          
          end if;
        end if;
        --
        -- Forward Rate from M2M Treatment Charge to Base Currency
        -- 
        pkg_general.sp_get_base_cur_detail(cur_grd_rows.m2m_tc_cur_id,
                                           vc_m2m_tc_main_cur_id,
                                           vc_m2m_tc_main_cur_code,
                                           vn_m2m_tc_main_cur_factor);
        if vc_m2m_tc_main_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      cur_grd_rows.m2m_tc_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc M2M TC to Base',
                                      pc_process,
                                      vn_m2m_tc_to_base_fw_rate,
                                      vn_forward_points);
        else
          vn_m2m_tc_to_base_fw_rate := 1;
        end if;
        if cur_grd_rows.qty_unit_id <> cur_grd_rows.m2m_tc_weight_unit_id then
          vn_ele_m2m_treatment_charge := round((cur_grd_rows.m2m_treatment_charge /
                                               nvl(cur_grd_rows.m2m_tc_weight,
                                                    1)) *
                                               vn_m2m_tc_to_base_fw_rate *
                                               (pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                                     cur_grd_rows.qty_unit_id,
                                                                                     cur_grd_rows.m2m_tc_weight_unit_id,
                                                                                     vn_dry_qty)),
                                               cur_grd_rows.base_cur_decimal);
        else
          vn_ele_m2m_treatment_charge := round((cur_grd_rows.m2m_treatment_charge /
                                               nvl(cur_grd_rows.m2m_tc_weight,
                                                    1)) *
                                               vn_m2m_tc_to_base_fw_rate *
                                               vn_dry_qty,
                                               cur_grd_rows.base_cur_decimal);
        end if;
        pkg_general.sp_get_base_cur_detail(cur_grd_rows.m2m_rc_cur_id,
                                           vc_m2m_rc_main_cur_id,
                                           vc_m2m_rc_main_cur_code,
                                           vc_m2m_rc_main_cur_factor);
        if vc_m2m_rc_main_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      cur_grd_rows.m2m_rc_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc M2M RC to Base',
                                      pc_process,
                                      vn_m2m_rc_to_base_fw_rate,
                                      vn_forward_points);
        else
          vn_m2m_rc_to_base_fw_rate := 1;
        end if;
        if cur_grd_rows.payable_qty_unit_id <>
           cur_grd_rows.m2m_rc_weight_unit_id then
          vn_ele_m2m_refine_charge := round((cur_grd_rows.m2m_refine_charge /
                                            nvl(cur_grd_rows.m2m_rc_weight,
                                                 1)) *
                                            vn_m2m_rc_to_base_fw_rate *
                                            (pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                                  cur_grd_rows.payable_qty_unit_id,
                                                                                  cur_grd_rows.m2m_rc_weight_unit_id,
                                                                                  cur_grd_rows.payable_qty)),
                                            cur_grd_rows.base_cur_decimal);
        else
          vn_ele_m2m_refine_charge := round((cur_grd_rows.m2m_refine_charge /
                                            nvl(cur_grd_rows.m2m_rc_weight,
                                                 1)) *
                                            vn_m2m_rc_to_base_fw_rate *
                                            cur_grd_rows.payable_qty,
                                            cur_grd_rows.base_cur_decimal);
        end if;
      
        if cur_grd_rows.ele_rank = 1 then
          if cur_grd_rows.loc_qty_unit_id <>
             cur_grd_rows.conc_base_qty_unit_id then
            vn_loc_amount := round(pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                        cur_grd_rows.qty_unit_id,
                                                                        cur_grd_rows.conc_base_qty_unit_id,
                                                                        1) *
                                   cur_grd_rows.m2m_loc_incoterm_deviation,
                                   cur_grd_rows.base_cur_decimal);
          else
            vn_loc_amount := round(cur_grd_rows.m2m_loc_incoterm_deviation,
                                   cur_grd_rows.base_cur_decimal);
          
          end if;
        
          vn_loc_total_amount := round(vn_loc_amount * vn_qty_in_base,
                                       cur_grd_rows.base_cur_decimal);
        end if;
        vn_m2m_total_penality := 0;
      
        if cur_grd_rows.ele_rank = 1 then
        
          begin
            select ppu.product_price_unit_id
              into vc_price_unit_id
              from v_ppu_pum         ppu,
                   pdm_productmaster pdm,
                   ak_corporate      akc
             where ppu.product_id = cur_grd_rows.conc_product_id
               and ppu.product_id = pdm.product_id
               and pdm.base_quantity_unit = ppu.weight_unit_id
               and ppu.cur_id = akc.base_cur_id
               and nvl(ppu.weight, 1) = 1
               and akc.corporate_id = pc_corporate_id;
          
          exception
            when no_data_found then
              vc_price_unit_id := null;
          end;
        
          vn_m2m_total_penality := 0;
          for cc in (select pci.internal_contract_item_ref_no,
                            pqca.element_id,
                            pcpq.quality_template_id
                       from pci_physical_contract_item  pci,
                            pcpq_pc_product_quality     pcpq,
                            ash_assay_header            ash,
                            asm_assay_sublot_mapping    asm,
                            pqca_pq_chemical_attributes pqca
                      where pci.pcpq_id = pcpq.pcpq_id
                        and pcpq.assay_header_id = ash.ash_id
                        and ash.ash_id = asm.ash_id
                        and asm.asm_id = pqca.asm_id
                        and pci.process_id = pc_process_id
                        and pcpq.process_id = pc_process_id
                        and pci.is_active = 'Y'
                        and pcpq.is_active = 'Y'
                        and ash.is_active = 'Y'
                        and asm.is_active = 'Y'
                        and pqca.is_active = 'Y'
                        and pqca.is_elem_for_pricing = 'N'
                        and pqca.is_deductible = 'Y'
                        and pci.internal_contract_item_ref_no =
                            cur_grd_rows.internal_contract_item_ref_no)
          loop
          
            pkg_phy_pre_check_process.sp_calc_m2m_tc_pc_rc_charge(cur_grd_rows.corporate_id,
                                                                  pd_trade_date,
                                                                  cur_grd_rows.conc_product_id,
                                                                  cur_grd_rows.conc_quality_id,
                                                                  cur_grd_rows.mvp_id,
                                                                  'Penalties',
                                                                  cc.element_id,
                                                                  cur_grd_rows.shipment_month,
                                                                  cur_grd_rows.shipment_year,
                                                                  vc_price_unit_id,
                                                                  vn_m2m_penality,
                                                                  vc_penality_price_unit_id);
            if nvl(vn_m2m_penality, 0) <> 0 then
            
              vn_m2m_total_penality := round(vn_m2m_total_penality +
                                             (vn_m2m_penality *
                                             vn_dry_qty_in_base),
                                             cur_grd_rows.base_cur_decimal);
            
              if vc_m2m_pc_exch_rate_string is not null then
                vc_m2m_tot_pc_exch_rate_string := vc_m2m_pc_exch_rate_string;
              else
                if instr(vc_m2m_tot_pc_exch_rate_string,
                         vc_m2m_pc_exch_rate_string) = 0 then
                  vc_m2m_tot_pc_exch_rate_string := vc_m2m_tot_pc_exch_rate_string || ',' ||
                                                    vc_m2m_pc_exch_rate_string;
                end if;
              end if;
            end if;
          
          end loop;
        
        end if;
      
        vn_ele_m2m_total_amount := vn_ele_m2m_amount_in_base -
                                   vn_ele_m2m_treatment_charge -
                                   vn_ele_m2m_refine_charge;
      
        vn_ele_m2m_amt_per_unit := round(vn_ele_m2m_total_amount /
                                         vn_ele_qty_in_base,
                                         cur_grd_rows.base_cur_decimal);
      
        vc_price_cur_id             := cur_grd_rows.base_cur_id;
        vc_price_cur_code           := cur_grd_rows.base_cur_code;
        vn_cont_price_cur_id_factor := 1;
        vn_cont_price_cur_decimals  := 2;
      
        vn_contract_value_in_price_cur := (vn_cont_price /
                                          nvl(vn_cont_price_wt, 1)) *
                                          (pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                                cur_grd_rows.payable_qty_unit_id,
                                                                                vc_cont_price_wt_unit_id,
                                                                                cur_grd_rows.payable_qty)) *
                                          vn_cont_price_cur_id_factor;
      
        vn_contract_value_in_price_cur := round(vn_contract_value_in_price_cur,
                                                vn_cont_price_cur_decimals);
      
        vn_contract_value_in_val_cur := round((vn_contract_value_in_price_cur),
                                              cur_grd_rows.base_cur_decimal);
      
        if vc_price_cur_id <> cur_grd_rows.base_cur_id then
          pkg_general.sp_bank_fx_rate(cur_grd_rows.corporate_id,
                                      pd_trade_date,
                                      cur_grd_rows.payment_due_date,
                                      vc_price_cur_id,
                                      cur_grd_rows.base_cur_id,
                                      30,
                                      'sp_stock_unreal_inv_in_conc Price to Base Currency',
                                      pc_process,
                                      vn_fx_price_to_base,
                                      vn_fx_price_deviation);
        else
          vn_fx_price_to_base := 1;
        end if;
      
        vn_contract_value_in_base_cur := vn_contract_value_in_val_cur *
                                         vn_fx_price_to_base;
      end if;
      vc_price_to_base_fw_rate := cur_grd_rows.price_to_base_fw_exch_rate;
    
      insert into psue_element_details
        (corporate_id,
         process_id,
         internal_contract_item_ref_no,
         psu_id,
         internal_gmr_ref_no,
         element_id,
         element_name,
         assay_header_id,
         assay_qty,
         assay_qty_unit_id,
         payable_qty,
         payable_qty_unit_id,
         payable_qty_unit,
         contract_price,
         price_unit_id,
         price_unit_name,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight_unit_id,
         price_unit_weight,
         price_unit_weight_unit,
         md_id,
         m2m_price,
         m2m_price_cur_id,
         m2m_price_cur_code,
         m2m_price_weight_unit_id,
         m2m_price_weight_unit,
         m2m_price_weight_unit_weight,
         m2m_refining_charge,
         m2m_treatment_charge,
         pricing_details,
         m2m_price_unit_id,
         m2m_price_unit_str,
         m2m_amt,
         m2m_amt_cur_id,
         m2m_amt_cur_code,
         contract_value_in_price_cur,
         contract_price_cur_id,
         contract_price_cur_code,
         material_cost_in_base_cur,
         element_qty_in_base_unit,
         total_m2m_amount,
         m2m_amt_per_unit,
         price_cur_to_base_cur_fx_rate,
         m2m_cur_to_base_cur_fx_rate,
         base_price_unit_id_in_ppu,
         base_price_unit_id_in_pum,
         valuation_against_underlying,
         internal_grd_dgrd_ref_no,
         price_to_base_fw_exch_rate,
         m2m_to_base_fw_exch_rate,
         m2m_rc_fw_exch_rate,
         m2m_tc_fw_exch_rate,
         m2m_ld_fw_exch_rate,
         contract_rc_in_base_cur,
         contract_tc_in_base_cur,
         contract_rc_fw_exch_rate,
         contract_tc_fw_exch_rate)
      values
        (cur_grd_rows.corporate_id,
         pc_process_id,
         cur_grd_rows.internal_contract_item_ref_no,
         vc_psu_id,
         cur_grd_rows.internal_gmr_ref_no,
         cur_grd_rows.element_id,
         cur_grd_rows.attribute_name,
         cur_grd_rows.assay_header_id,
         cur_grd_rows.assay_qty,
         cur_grd_rows.assay_qty_unit_id,
         cur_grd_rows.payable_qty,
         cur_grd_rows.payable_qty_unit_id,
         cur_grd_rows.payable_qty_unit,
         vn_cont_price,
         vc_cont_price_unit_id,
         cur_grd_rows.mc_price_unit_name,
         vc_cont_price_unit_cur_id,
         vc_cont_price_unit_cur_code,
         vc_cont_price_wt_unit_id,
         vn_cont_price_wt,
         vc_cont_price_wt_unit,
         cur_grd_rows.md_id,
         cur_grd_rows.net_m2m_price,
         cur_grd_rows.m2m_price_unit_cur_id,
         cur_grd_rows.m2m_price_unit_cur_code,
         cur_grd_rows.m2m_price_unit_weight_unit_id,
         cur_grd_rows.m2m_price_unit_weight_unit,
         decode(cur_grd_rows.m2m_price_unit_weight,
                1,
                null,
                cur_grd_rows.m2m_price_unit_weight),
         vn_ele_m2m_refine_charge,
         vn_ele_m2m_treatment_charge,
         cur_grd_rows.price_description,
         cur_grd_rows.m2m_price_unit_id,
         cur_grd_rows.m2m_price_unit_str,
         vn_m2m_amt,
         cur_grd_rows.base_cur_id,
         cur_grd_rows.base_cur_code,
         vn_contract_value_in_price_cur,
         vc_price_cur_id,
         vc_price_cur_code,
         vn_contract_value_in_base_cur,
         vn_ele_qty_in_base,
         vn_ele_m2m_total_amount,
         vn_ele_m2m_amt_per_unit,
         vn_fx_price_to_base,
         vn_m2m_base_fx_rate,
         cur_grd_rows.base_price_unit_id_in_ppu,
         cur_grd_rows.base_price_unit_id_in_pum,
         cur_grd_rows.valuation_against_underlying,
         cur_grd_rows.internal_grd_dgrd_ref_no,
         vc_price_to_base_fw_rate,
         vc_m2m_to_base_fw_rate,
         cur_grd_rows.m2m_rc_fw_exch_rate,
         cur_grd_rows.m2m_tc_fw_exch_rate,
         cur_grd_rows.m2m_ld_fw_exch_rate,
         vn_base_ele_rc_charges, -- base_con_refine_charge,
         vn_base_ele_tc_charges, -- base_con_treatment_charge,
         vc_ele_rc_fw_exch_rate, -- contract_rc_fw_exch_rate,
         vc_ele_tc_fw_exch_rate); -- contract_tc_fw_exch_rate)
    
      if cur_grd_rows.ele_rank = 1 then
        vn_sc_in_base_cur           := cur_grd_rows.total_sc_charges;
        vn_product_premium_per_unit := cur_grd_rows.product_premium_per_unit;
        vn_product_premium_amt      := cur_grd_rows.product_premium_per_unit *
                                       vn_qty_in_base;
        insert into psue_phy_stock_unrealized_ele
          (process_id,
           psu_id,
           corporate_id,
           corporate_name,
           internal_gmr_ref_no,
           internal_contract_item_ref_no,
           contract_ref_no,
           delivery_item_no,
           del_distribution_item_no,
           product_id,
           product_name,
           origin_id,
           origin_name,
           quality_id,
           quality_name,
           container_no,
           stock_wet_qty,
           stock_dry_qty,
           qty_unit_id,
           qty_unit,
           qty_in_base_unit,
           no_of_units,
           prod_base_qty_unit_id,
           prod_base_qty_unit,
           inventory_status,
           shipment_status,
           section_name,
           strategy_id,
           strategy_name,
           valuation_month,
           contract_type,
           profit_center_id,
           profit_center_name,
           profit_center_short_name,
           valuation_exchange_id,
           derivative_def_id,
           gmr_contract_type,
           is_voyage_gmr,
           gmr_ref_no,
           warehouse_id,
           warehouse_name,
           shed_id,
           shed_name,
           internal_grd_dgrd_ref_no,
           fixation_method,
           price_fixation_details,
           stock_ref_no,
           trader_name,
           trader_id,
           contract_qty_string,
           contract_price_string,
           m2m_price_string,
           m2m_rc_tc_string,
           m2m_penalty_charge,
           m2m_treatment_charge,
           m2m_refining_charge,
           m2m_loc_diff_premium,
           net_contract_value_in_base_cur,
           net_m2m_amount_in_base_cur,
           prev_net_m2m_amt_in_base_cur,
           pnl_type,
           pnl_in_base_cur,
           pnl_in_per_base_unit,
           prev_day_pnl_in_base_cur,
           prev_day_pnl_per_base_unit,
           trade_day_pnl_in_base_cur,
           trade_day_pnl_per_base_unit,
           cont_unr_status,
           prev_m2m_price_string,
           prev_m2m_rc_tc_string,
           prev_m2m_penalty_charge,
           prev_m2m_treatment_charge,
           prev_m2m_refining_charge,
           prev_m2m_loc_diff_premium,
           base_price_unit_id,
           base_price_unit_name,
           base_cur_id,
           base_cur_code,
           valuation_against_underlying,
           price_to_base_fw_exch_rate,
           m2m_to_base_fw_exch_rate,
           contract_pc_in_base_cur,
           sc_in_base_cur,
           accrual_to_base_fw_exch_rate,
           material_cost_in_base_cur,
           contract_rc_in_base_cur,
           contract_tc_in_base_cur,
           contract_rc_fw_exch_rate,
           contract_tc_fw_exch_rate,
           contract_pc_fw_exch_rate,
           incoterm_id,
           incoterm,
           cp_id,
           cp_name,
           delivery_month,
           contract_rc_tc_pen_string,
           is_marked_for_consignment,
           location_premium_per_unit,
           location_premium,
           location_premium_fw_exch_rate)
        values
          (pc_process_id,
           vc_psu_id,
           cur_grd_rows.corporate_id,
           cur_grd_rows.corporate_name,
           cur_grd_rows.internal_gmr_ref_no,
           cur_grd_rows.internal_contract_item_ref_no,
           cur_grd_rows.contract_ref_no,
           cur_grd_rows.delivery_item_no,
           cur_grd_rows.del_distribution_item_no,
           cur_grd_rows.conc_product_id,
           cur_grd_rows.conc_product_name,
           cur_grd_rows.origin_id,
           cur_grd_rows.origin_name,
           cur_grd_rows.conc_quality_id,
           cur_grd_rows.conc_quality_name,
           cur_grd_rows.container_no,
           vn_wet_qty,
           vn_dry_qty,
           cur_grd_rows.qty_unit_id,
           cur_grd_rows.qty_unit,
           vn_qty_in_base,
           cur_grd_rows.no_of_units,
           null, --prod_base_qty_unit_id
           null, --prod_base_qty_unit
           cur_grd_rows.inventory_status,
           cur_grd_rows.shipment_status,
           cur_grd_rows.section_name,
           cur_grd_rows.strategy_id,
           cur_grd_rows.strategy_name,
           cur_grd_rows.valuation_month,
           cur_grd_rows.purchase_sales,
           cur_grd_rows.profit_center,
           cur_grd_rows.profit_center_name,
           cur_grd_rows.profit_center_short_name,
           cur_grd_rows.valuation_exchange_id,
           cur_grd_rows.derivative_def_id,
           cur_grd_rows.gmr_contract_type,
           cur_grd_rows.is_voyage_gmr,
           null, --gmr_ref_no
           null, --warehouse_id,
           null, --warehouse_name,
           null, --shed_id,
           null, --shed_name
           cur_grd_rows.internal_grd_dgrd_ref_no,
           vc_price_fixation_status,
           cur_grd_rows.price_fixation_details,
           cur_grd_rows.stock_ref_no,
           cur_grd_rows.trader_user_name,
           cur_grd_rows.trader_id,
           null, --contract_qty_string,
           null, --contract_price_string,  
           null, --m2m_price_string,   
           null, --m2m_rc_tc_string,
           vn_m2m_total_penality,
           null, --m2m_treatment_charge,
           null, --m2m_refining_charge,
           vn_loc_total_amount, --m2m_loc_diff_premium,
           null, --net_contract_value_in_base_cur, 
           null, --net_m2m_amount_in_base_cur,
           null, --prev_net_m2m_amt_in_base_cur,
           'Unrealized',
           null, -- pnl_in_base_cur,
           null, -- pnl_in_per_base_unit,
           null, -- prev_day_pnl_in_base_cur,
           null, -- prev_day_pnl_per_base_unit,
           null, --trade_day_pnl_in_base_cur,
           null, --trade_day_pnl_per_base_unit,
           null, --cont_unr_status,
           null, --prev_m2m_price_string,    
           null, --prev_m2m_rc_tc_string,
           null, --prev_m2m_penalty_charge, 
           null, --prev_m2m_treatment_charge, 
           null, --prev_m2m_refining_charge, 
           null, --prev_m2m_loc_diff_premium,
           cur_grd_rows.base_price_unit_id_in_ppu,
           cur_grd_rows.base_price_unit_name,
           cur_grd_rows.base_cur_id,
           cur_grd_rows.base_cur_code,
           cur_grd_rows.valuation_against_underlying,
           vc_price_to_base_fw_rate,
           vc_m2m_to_base_fw_rate,
           vn_contract_pc_charges,
           vn_sc_in_base_cur,
           cur_grd_rows.accrual_to_base_fw_rate,
           vn_contract_value_in_base_cur,
           null, -- cur_grd_rows.total_rc_charges,
           null, -- cur_grd_rows.total_tc_charges,
           null, --cur_grd_rows.contract_rc_fw_exch_rate,
           null, -- cur_grd_rows.contract_tc_fw_exch_rate,
           vc_contract_pc_fw_exch_rate,
           cur_grd_rows.incoterm_id,
           cur_grd_rows.incoterm,
           cur_grd_rows.cp_id,
           cur_grd_rows.cp_name,
           cur_grd_rows.delivery_month,
           null, -- vc_contract_rc_tc_pc_string,
           cur_grd_rows.is_marked_for_consignment,
           vn_product_premium_per_unit,
           vn_product_premium_amt,
           cur_grd_rows.contract_pp_fw_exch_rate);
      end if;
    end loop;
    for cur_update_pnl in (select psue.psu_id,
                                  sum(psue.material_cost_in_base_cur) material_cost_in_base_cur,
                                  sum(psue.contract_tc_in_base_cur) contract_tc_in_base_cur,
                                  sum(psue.contract_rc_in_base_cur) contract_rc_in_base_cur,
                                  sum(psue.m2m_amt) net_m2m_amt,
                                  sum(psue.m2m_treatment_charge) net_m2m_treatment_charge,
                                  sum(psue.m2m_refining_charge) net_m2m_refining_charge,
                                  stragg(psue.element_name || '-' ||
                                         psue.payable_qty || ' ' ||
                                         psue.payable_qty_unit) contract_qty_string,
                                  stragg(psue.element_name || '-' ||
                                         psue.contract_price || ' ' ||
                                         psue.price_unit_name) contract_price_string,
                                  (case
                                     when psue.valuation_against_underlying = 'N' then
                                      max((case
                                     when nvl(psue.m2m_price, 0) <> 0 then
                                      (psue.m2m_price || ' ' ||
                                      psue.m2m_price_cur_code || '/' ||
                                      psue.m2m_price_weight_unit_weight ||
                                      psue.m2m_price_weight_unit)
                                     else
                                      null
                                   end)) else stragg((case
                                    when nvl(psue.m2m_price,
                                             0) <> 0 then
                                     (psue.element_name || '-' ||
                                     psue.m2m_price || ' ' ||
                                     psue.m2m_price_cur_code || '/' ||
                                     psue.m2m_price_weight_unit_weight ||
                                     psue.m2m_price_weight_unit)
                                    else
                                     null
                                  end)) end) m2m_price_string, -- TODO if underly valuation = n, show the concentrate price
                                  stragg('TC:' || psue.element_name || '-' ||
                                         psue.m2m_treatment_charge || ' ' ||
                                         akc.base_currency_name || ' ' ||
                                         'RC:' || psue.element_name || '-' ||
                                         psue.m2m_refining_charge || ' ' ||
                                         akc.base_currency_name) m2m_rc_tc_pen_string,
                                  stragg(psueh.contract_rc_fw_exch_rate) contract_rc_fw_exch_rate,
                                  stragg(psueh.contract_tc_fw_exch_rate) contract_tc_fw_exch_rate,
                                  'TC :' ||
                                  sum(psue.contract_tc_in_base_cur) || ' ' ||
                                  psueh.base_cur_code || ',RC :' ||
                                  sum(psue.contract_rc_in_base_cur) || ' ' ||
                                  psueh.base_cur_code || ',PC :' ||
                                  psueh.contract_pc_in_base_cur || ' ' ||
                                  psueh.base_cur_code contract_rc_tc_pc_string,
                                  stragg(psueh.price_to_base_fw_exch_rate) price_to_base_fw_exch_rate
                             from psue_element_details          psue,
                                  psue_phy_stock_unrealized_ele psueh,
                                  ak_corporate                  akc
                            where psue.corporate_id = pc_corporate_id
                              and psue.process_id = pc_process_id
                              and psueh.process_id = pc_process_id
                              and psueh.psu_id = psue.psu_id
                              and psueh.section_name in
                                  ('Stock IN', 'Shipped IN')
                              and akc.corporate_id = psue.corporate_id
                            group by psue.psu_id,
                                     psue.valuation_against_underlying,
                                     psueh.base_cur_code,
                                     psueh.contract_pc_in_base_cur)
    loop
    
      update psue_phy_stock_unrealized_ele psuee
         set psuee.net_m2m_amount             = cur_update_pnl.net_m2m_amt,
             psuee.m2m_treatment_charge       = cur_update_pnl.net_m2m_treatment_charge,
             psuee.m2m_refining_charge        = cur_update_pnl.net_m2m_refining_charge,
             psuee.contract_price_string      = cur_update_pnl.contract_price_string,
             psuee.m2m_price_string           = cur_update_pnl.m2m_price_string,
             psuee.m2m_rc_tc_string           = cur_update_pnl.m2m_rc_tc_pen_string,
             psuee.contract_qty_string        = cur_update_pnl.contract_qty_string,
             psuee.material_cost_in_base_cur  = cur_update_pnl.material_cost_in_base_cur,
             psuee.contract_rc_in_base_cur    = cur_update_pnl.contract_rc_in_base_cur,
             psuee.contract_tc_in_base_cur    = cur_update_pnl.contract_tc_in_base_cur,
             psuee.contract_rc_tc_pen_string  = cur_update_pnl.contract_rc_tc_pc_string,
             psuee.price_to_base_fw_exch_rate = cur_update_pnl.price_to_base_fw_exch_rate
       where psuee.psu_id = cur_update_pnl.psu_id
         and psuee.process_id = pc_process_id
         and psuee.corporate_id = pc_corporate_id
         and psuee.section_name in ('Stock IN', 'Shipped IN');
    end loop;
  
    update psue_phy_stock_unrealized_ele psuee
       set psuee.net_m2m_amount_in_base_cur = (psuee.net_m2m_amount -
                                              psuee.m2m_treatment_charge -
                                              psuee.m2m_refining_charge -
                                              psuee.m2m_penalty_charge +
                                              psuee.m2m_loc_diff_premium)
     where psuee.corporate_id = pc_corporate_id
       and psuee.process_id = pc_process_id
       and psuee.section_name in ('Stock IN', 'Shipped IN');
    --- previous EOD Data
    for cur_update in (select psue_prev_day.net_m2m_amount_in_base_cur,
                              psue_prev_day.net_m2m_amount,
                              psue_prev_day.pnl_in_per_base_unit,
                              psue_prev_day.m2m_price_string,
                              psue_prev_day.m2m_rc_tc_string,
                              psue_prev_day.m2m_penalty_charge,
                              psue_prev_day.m2m_treatment_charge,
                              psue_prev_day.m2m_refining_charge,
                              psue_prev_day.m2m_loc_diff_premium,
                              psue_prev_day.qty_in_base_unit,
                              psue_prev_day.psu_id,
                              psue_prev_day.m_pnl_in_per_base_unit,
                              psue_prev_day.section_name
                         from psue_phy_stock_unrealized_ele psue_prev_day
                        where process_id = pc_previous_process_id
                          and corporate_id = pc_corporate_id
                          and psue_prev_day.section_name in
                              ('Stock IN', 'Shipped IN'))
    loop
      update psue_phy_stock_unrealized_ele psue_today
         set psue_today.prev_net_m2m_amt_in_base_cur = cur_update.net_m2m_amount_in_base_cur,
             psue_today.m_prev_day_pnl_in_base_cur   = cur_update.m_pnl_in_per_base_unit *
                                                       psue_today.qty_in_base_unit,
             psue_today.prev_net_m2m_amount          = cur_update.net_m2m_amount,
             psue_today.prev_day_pnl_in_base_cur     = cur_update.pnl_in_per_base_unit *
                                                       psue_today.qty_in_base_unit,
             psue_today.prev_day_pnl_per_base_unit   = cur_update.pnl_in_per_base_unit,
             psue_today.prev_m2m_price_string        = cur_update.m2m_price_string,
             psue_today.prev_m2m_rc_tc_string        = cur_update.m2m_rc_tc_string,
             psue_today.prev_m2m_penalty_charge      = cur_update.m2m_penalty_charge,
             psue_today.prev_m2m_treatment_charge    = cur_update.m2m_treatment_charge,
             psue_today.prev_m2m_refining_charge     = cur_update.m2m_refining_charge,
             psue_today.prev_m2m_loc_diff_premium    = cur_update.m2m_loc_diff_premium,
             psue_today.cont_unr_status              = 'EXISTING_TRADE'
       where psue_today.process_id = pc_process_id
         and psue_today.corporate_id = pc_corporate_id
         and psue_today.psu_id = cur_update.psu_id
         and psue_today.section_name in ('Stock IN', 'Shipped IN');
    end loop;
  
    begin
      update psue_phy_stock_unrealized_ele psue
         set psue.prev_net_m2m_amt_in_base_cur = psue.net_m2m_amount_in_base_cur,
             psue.prev_day_pnl_in_base_cur     = 0,
             psue.prev_day_pnl_per_base_unit   = 0,
             psue.m_prev_day_pnl_in_base_cur   = 0,
             psue.m_prev_day_pnl_per_base_unit = 0,
             psue.prev_net_m2m_amount          = psue.net_m2m_amount,
             psue.prev_m2m_price_string        = psue.m2m_price_string,
             psue.prev_m2m_rc_tc_string        = psue.m2m_rc_tc_string,
             psue.prev_m2m_penalty_charge      = psue.m2m_penalty_charge,
             psue.prev_m2m_treatment_charge    = psue.m2m_treatment_charge,
             psue.prev_m2m_refining_charge     = psue.m2m_refining_charge,
             psue.prev_m2m_loc_diff_premium    = psue.m2m_loc_diff_premium,
             psue.cont_unr_status              = 'NEW_TRADE'
       where psue.cont_unr_status is null
         and psue.process_id = pc_process_id
         and psue.corporate_id = pc_corporate_id
         and psue.section_name in ('Stock IN', 'Shipped IN');
    end;
  
    update psue_phy_stock_unrealized_ele psue
       set psue.m_pnl_in_base_cur      = psue.net_m2m_amount_in_base_cur -
                                         psue.prev_net_m2m_amt_in_base_cur,
           psue.m_pnl_in_per_base_unit = (psue.net_m2m_amount_in_base_cur -
                                         psue.prev_net_m2m_amt_in_base_cur) /
                                         psue.qty_in_base_unit
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.section_name in ('Stock IN', 'Shipped IN');
    -- Calculate PNL in Base Currency = MC - TC - RC - PC + SC ( +- M2M)
    update psue_phy_stock_unrealized_ele psue
       set psue.net_contract_value_in_base_cur = psue.material_cost_in_base_cur -
                                                 psue.contract_tc_in_base_cur -
                                                 psue.contract_rc_in_base_cur -
                                                 psue.contract_pc_in_base_cur +
                                                 psue.sc_in_base_cur +
                                                 psue.location_premium,
           psue.pnl_in_base_cur                = case when psue.contract_type = 'P' then psue.net_m2m_amount_in_base_cur - (psue.material_cost_in_base_cur + psue.location_premium - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur) else(psue.material_cost_in_base_cur + psue.location_premium_per_unit - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur) - psue.net_m2m_amount_in_base_cur end,
           psue.pnl_in_per_base_unit           = (case when psue.contract_type = 'P' then psue.net_m2m_amount_in_base_cur - (psue.material_cost_in_base_cur + psue.location_premium - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur) else(psue.material_cost_in_base_cur + psue.location_premium - psue.contract_tc_in_base_cur - psue.contract_rc_in_base_cur - psue.contract_pc_in_base_cur + psue.sc_in_base_cur) - psue.net_m2m_amount_in_base_cur end) / psue.qty_in_base_unit
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.section_name in ('Stock IN', 'Shipped IN');
    update psue_phy_stock_unrealized_ele psue
       set m_trade_day_pnl_in_base_cur = nvl(psue.m_pnl_in_base_cur, 0) -
                                         nvl(psue.m_prev_day_pnl_in_base_cur,
                                             0),
           trade_day_pnl_in_base_cur   = nvl(psue.pnl_in_base_cur, 0) -
                                         nvl(psue.prev_day_pnl_in_base_cur,
                                             0),
           
           m_trade_day_pnl_per_base_unit = nvl(psue.m_pnl_in_base_cur, 0) -
                                           nvl(psue.m_prev_day_pnl_in_base_cur,
                                               0) / psue.qty_in_base_unit,
           trade_day_pnl_per_base_unit   = nvl(psue.pnl_in_base_cur, 0) -
                                           nvl(psue.prev_day_pnl_in_base_cur,
                                               0) / psue.qty_in_base_unit
    
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.section_name in ('Stock IN', 'Shipped IN');
  
    update psue_phy_stock_unrealized_ele psue
       set (gmr_ref_no, warehouse_id, warehouse_name, shed_id, shed_name, prod_base_qty_unit_id, prod_base_qty_unit) = --
            (select gmr.gmr_ref_no,
                    gmr.warehouse_profile_id,
                    phd_gmr.companyname as warehouse_profile_name,
                    gmr.shed_id,
                    sld.storage_location_name,
                    pdm.base_quantity_unit,
                    qum.qty_unit
               from gmr_goods_movement_record   gmr,
                    pdm_productmaster           pdm,
                    phd_profileheaderdetails    phd_gmr,
                    sld_storage_location_detail sld,
                    qum_quantity_unit_master    qum
              where gmr.internal_gmr_ref_no = psue.internal_gmr_ref_no
                and psue.product_id = pdm.product_id
                and pdm.base_quantity_unit = qum.qty_unit_id
                and gmr.warehouse_profile_id = phd_gmr.profileid(+)
                and gmr.shed_id = sld.storage_loc_id(+)
                and psue.process_id = gmr.process_id
                and psue.process_id = pc_process_id)
     where psue.process_id = pc_process_id
       and psue.section_name in ('Stock IN', 'Shipped IN');
    --
    -- Update Price String from CIPDE
    --   
    for cur_price_string in (select cipde.internal_contract_item_ref_no,
                                    stragg(cipde.price_description) price_description,
                                    stragg(cipde.price_fixation_details) price_fixation_details
                               from cipde_cipd_element_price cipde
                              where cipde.process_id = pc_process_id
                              group by cipde.internal_contract_item_ref_no)
    loop
      update psue_phy_stock_unrealized_ele psu
         set psu.price_description      = cur_price_string.price_description,
             psu.price_fixation_details = cur_price_string.price_fixation_details
       where psu.process_id = pc_process_id
         and psu.internal_contract_item_ref_no =
             cur_price_string.internal_contract_item_ref_no;
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_stock_unreal_inv_in_conc ',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm || '- ' ||
                                                           vc_error_msg,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
end;
/

create or replace package pkg_phy_eod_price is
  procedure sp_calc_contract_price(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pc_dbd_id       varchar2,
                                   pc_process      varchar2);

  procedure sp_calc_gmr_price(pc_corporate_id varchar2,
                              pd_trade_date   date,
                              pc_process_id   varchar2,
                              pc_user_id      varchar2,
                              pc_dbd_id       varchar2,
                              pc_process      varchar2);
  procedure sp_calc_stock_price(pc_process_id varchar2);
  procedure sp_calc_conc_gmr_price(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pc_dbd_id       varchar2,
                                   pc_process      varchar2);

  procedure sp_calc_contract_conc_price(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_dbd_id       varchar2,
                                        pc_process      varchar2);

end;
/
create or replace package body "PKG_PHY_EOD_PRICE" is

  procedure sp_calc_contract_price(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pc_dbd_id       varchar2,
                                   pc_process      varchar2) is
  
    vobj_error_log      tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count  number := 1;
    vd_valid_quote_date date;
  
    cursor cur_pcdi is
      select pcdi.pcdi_id,
             pcdi.internal_contract_ref_no,
             pcdi.delivery_item_no,
             pcdi.delivery_period_type,
             pcdi.delivery_from_month,
             pcdi.delivery_from_year,
             pcdi.delivery_to_month,
             pcdi.delivery_to_year,
             pcdi.delivery_from_date,
             pcdi.delivery_to_date,
             pd_trade_date eod_trade_date,
             pcdi.basis_type,
             nvl(pcdi.transit_days, 0) transit_days,
             pcdi.qp_declaration_date,
             pcdi.is_price_optionality_present,
             pcdi.is_phy_optionality_present,
             pcdi.price_option_call_off_status,
             pci.internal_contract_item_ref_no,
             pcm.contract_ref_no,
             (case
               when nvl(pcdi.payment_due_date, pd_trade_date) <
                    pd_trade_date then
                pd_trade_date
               else
                nvl(pcdi.payment_due_date, pd_trade_date)
             end) payment_due_date,
             pci.item_qty,
             pci.item_qty_unit_id,
             pcm.invoice_currency_id,
             pcpd.qty_unit_id,
             pcpd.product_id,
             qat.instrument_id,
             akc.base_cur_id,
             akc.base_currency_name,
             dim.instrument_name,
             ps.price_source_id,
             ps.price_source_name,
             apm.available_price_id,
             apm.available_price_name,
             pum.price_unit_name,
             vdip.ppu_price_unit_id,
             div.price_unit_id,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable
        from pcdi_pc_delivery_item pcdi,
             pci_physical_contract_item pci,
             pcm_physical_contract_main pcm,
             ak_corporate akc,
             pcpd_pc_product_definition pcpd,
             pcpq_pc_product_quality pcpq,
             (select *
                from ced_contract_exchange_detail ced
               where ced.corporate_id = pc_corporate_id) qat,
             dim_der_instrument_master dim,
             div_der_instrument_valuation div,
             ps_price_source ps,
             apm_available_price_master apm,
             pum_price_unit_master pum,
             v_der_instrument_price_unit vdip,
             pdc_prompt_delivery_calendar pdc
       where pcdi.pcdi_id = pci.pcdi_id
         and pcdi.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpq.pcpd_id = pcpd.pcpd_id
         and pci.pcpq_id = pcpq.pcpq_id
         and pcm.corporate_id = akc.corporate_id
         and pcm.contract_status = 'In Position'
         and pcm.contract_type = 'BASEMETAL'
         and pcpd.input_output = 'Input'
         and pci.internal_contract_item_ref_no =
             qat.internal_contract_item_ref_no(+)
         and qat.instrument_id = dim.instrument_id(+)
         and dim.instrument_id = div.instrument_id(+)
         and div.is_deleted(+) = 'N'
         and div.price_source_id = ps.price_source_id(+)
         and div.available_price_id = apm.available_price_id(+)
         and div.price_unit_id = pum.price_unit_id(+)
         and dim.instrument_id = vdip.instrument_id(+)
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+)
         and pci.item_qty > 0
         and pcdi.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcm.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and pcpq.process_id = pc_process_id
         and pcpd.is_active = 'Y'
         and pcpq.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcm.is_active = 'Y';
  
    cursor cur_called_off(pc_pcdi_id varchar2) is
      select poch.poch_id,
             poch.internal_action_ref_no,
             pocd.pricing_formula_id,
             pcbpd.pcbpd_id,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description price_description
        from poch_price_opt_call_off_header poch,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph
       where poch.pcdi_id = pc_pcdi_id
         and poch.poch_id = pocd.poch_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and poch.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    cursor cur_not_called_off(pc_pcdi_id varchar2, pc_int_cont_item_ref_no varchar2) is
      select pcbpd.pcbpd_id,
             pcbph.internal_contract_ref_no,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from pci_physical_contract_item pci,
             pcipf_pci_pricing_formula  pcipf,
             pcbph_pc_base_price_header pcbph,
             pcbpd_pc_base_price_detail pcbpd
       where pci.internal_contract_item_ref_no =
             pcipf.internal_contract_item_ref_no
         and pcipf.pcbph_id = pcbph.pcbph_id
         and pcbph.pcbph_id = pcbpd.pcbph_id
         and pci.pcdi_id = pc_pcdi_id
         and pci.internal_contract_item_ref_no = pc_int_cont_item_ref_no
         and pci.process_id = pc_process_id
         and pcipf.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbpd.process_id = pc_process_id
         and pci.is_active = 'Y'
         and pcipf.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    vn_contract_price              number;
    vc_price_unit_id               varchar2(15);
    vc_price_basis                 varchar2(15);
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vc_price_weight_unit           number;
    vc_price_weight_unit_id        varchar2(15);
    vc_price_qty_unit              varchar2(15);
    vn_contract_equity_premium     varchar2(15);
    vn_market_equity_premium       varchar2(15);
    vc_mar_equ_prem_price_unit_id  varchar2(15);
    vc_con_equ_prem_price_unit_id  varchar2(15);
    vc_price_fixation_status       varchar2(50);
    vn_price_fixed_qty             number;
    vn_total_qty                   number;
    vn_total_quantity              number;
    vn_qty_to_be_priced            number;
    vn_total_contract_value        number;
    vn_average_price               number;
    vc_contract_base_price_unit_id varchar2(15);
    vc_contract_main_cur_id        varchar2(15);
    vc_contract_main_cur_code      varchar2(15);
    vc_base_main_cur_id            varchar2(15);
    vc_base_main_cur_code          varchar2(15);
    vn_forward_points              number;
    vn_fw_exch_rate_price_to_base  number;
    vd_qp_start_date               date;
    vd_qp_end_date                 date;
    vc_period                      varchar2(15);
    vd_shipment_date               date;
    vd_arrival_date                date;
    vc_before_price_dr_id          varchar2(15);
    vn_before_qp_price             number;
    vc_before_qp_price_unit_id     varchar2(15);
    vd_3rd_wed_of_qp               date;
    vc_holiday                     char(1);
    vd_payment_due_date            date;
    vc_price_description           varchar2(500);
    vn_contract_main_cur_factor    number;
    vd_dur_qp_start_date           date;
    vd_dur_qp_end_date             date;
    vn_during_val_price            number;
    vc_during_val_price_unit_id    varchar2(15);
    vn_during_total_set_price      number;
    vn_during_total_val_price      number;
    vn_count_set_qp                number;
    vn_count_val_qp                number;
    workings_days                  number;
    vd_quotes_date                 date;
    vn_during_qp_price             number;
    vc_during_price_dr_id          varchar2(15);
    vc_during_qp_price_unit_id     varchar2(15);
    vn_error_no                    number := 0;
    vn_market_flag                 char(1);
    vn_any_day_price_fix_qty_amt   number;
    vn_any_day_price_unfix_qty_amt number;
    vn_any_day_unfixed_qty         number;
    vn_any_day_fixed_qty           number;
    vc_prompt_month                varchar2(15);
    vc_prompt_year                 number;
    vc_prompt_date                 date;
    vc_exch_rate_string            varchar2(300);
    vn_price_in_base_price_unit_id number;
    vc_fixed_price_unit_id         varchar2(15); -- During QP , Fixed Price Unit
  begin
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          2001,
                          'Start of base contract price');
    delete from ced_contract_exchange_detail ced
     where ced.corporate_id = pc_corporate_id;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          2001,
                          'End delete CED');
  
    insert into ced_contract_exchange_detail
      (corporate_id,
       internal_contract_item_ref_no,
       pcdi_id,
       element_id,
       instrument_id,
       instrument_name,
       derivative_def_id,
       derivative_def_name,
       exchange_id,
       exchange_name)
      select pc_corporate_id,
             tt.internal_contract_item_ref_no,
             tt.pcdi_id,
             tt.element_id,
             tt.instrument_id,
             dim.instrument_name,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             emt.exchange_id,
             emt.exchange_name
        from (select pci.internal_contract_item_ref_no,
                     poch.element_id,
                     ppfd.instrument_id,
                     pci.pcdi_id
                from pci_physical_contract_item     pci,
                     pcdi_pc_delivery_item          pcdi,
                     poch_price_opt_call_off_header poch,
                     pocd_price_option_calloff_dtls pocd,
                     pcbpd_pc_base_price_detail     pcbpd,
                     ppfh_phy_price_formula_header  ppfh,
                     ppfd_phy_price_formula_details ppfd,
                     pcm_physical_contract_main     pcm
               where pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.pcdi_id = poch.pcdi_id
                 and poch.poch_id = pocd.poch_id
                 and pocd.pcbpd_id = pcbpd.pcbpd_id
                 and pcbpd.pcbpd_id = ppfh.pcbpd_id
                 and ppfh.ppfh_id = ppfd.ppfh_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pci.process_id = pcdi.process_id
                 and pcdi.process_id = pcbpd.process_id
                 and pcbpd.process_id = ppfh.process_id
                 and ppfh.process_id = ppfd.process_id
                 and ppfd.process_id = pcm.process_id
                 and pcm.process_id = pc_process_id
                 and pcm.is_active = 'Y'
                 and pci.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and poch.is_active = 'Y'
                 and pocd.is_active = 'Y'
                 and pcbpd.is_active = 'Y'
                 and ppfh.is_active = 'Y'
                 and ppfd.is_active = 'Y'
                 and pcm.product_group_type = 'BASEMETAL'
                 and pcdi.price_option_call_off_status in
                     ('Called Off', 'Not Applicable')
               group by pci.internal_contract_item_ref_no,
                        ppfd.instrument_id,
                        poch.element_id,
                        pci.pcdi_id
              union all
              select pci.internal_contract_item_ref_no,
                     pcbpd.element_id,
                     ppfd.instrument_id,
                     pci.pcdi_id
                from pci_physical_contract_item     pci,
                     pcdi_pc_delivery_item          pcdi,
                     pcipf_pci_pricing_formula      pcipf,
                     pcbph_pc_base_price_header     pcbph,
                     pcbpd_pc_base_price_detail     pcbpd,
                     ppfh_phy_price_formula_header  ppfh,
                     ppfd_phy_price_formula_details ppfd,
                     pcm_physical_contract_main     pcm
               where pci.internal_contract_item_ref_no =
                     pcipf.internal_contract_item_ref_no
                 and pcipf.pcbph_id = pcbph.pcbph_id
                 and pcbph.pcbph_id = pcbpd.pcbph_id
                 and pcbpd.pcbpd_id = ppfh.pcbpd_id
                 and ppfh.ppfh_id = ppfd.ppfh_id
                 and pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pci.process_id = pcdi.process_id
                 and pcdi.process_id = pcipf.process_id
                 and pcipf.process_id = pcbph.process_id
                 and pcbph.process_id = ppfh.process_id
                 and ppfh.process_id = ppfd.process_id
                 and ppfd.process_id = pcm.process_id
                 and pcbpd.process_id = pcm.process_id
                 and pcm.process_id = pc_process_id
                 and pcdi.is_active = 'Y'
                 and pcm.product_group_type = 'BASEMETAL'
                 and pcdi.price_option_call_off_status = 'Not Called Off'
                 and pci.is_active = 'Y'
                 and pcipf.is_active = 'Y'
                 and pcbph.is_active = 'Y'
                 and pcbpd.is_active = 'Y'
                 and ppfh.is_active = 'Y'
                 and ppfd.is_active = 'Y'
               group by pci.internal_contract_item_ref_no,
                        ppfd.instrument_id,
                        pcbpd.element_id,
                        pci.pcdi_id
              union all
              select pci.internal_contract_item_ref_no,
                     pcbpd.element_id,
                     ppfd.instrument_id,
                     pci.pcdi_id
                from pci_physical_contract_item     pci,
                     pcdi_pc_delivery_item          pcdi,
                     poch_price_opt_call_off_header poch,
                     pocd_price_option_calloff_dtls pocd,
                     pcbpd_pc_base_price_detail     pcbpd,
                     ppfh_phy_price_formula_header  ppfh,
                     ppfd_phy_price_formula_details ppfd,
                     dipq_delivery_item_payable_qty dipq,
                     pcm_physical_contract_main     pcm
               where pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.pcdi_id = poch.pcdi_id
                 and poch.poch_id = pocd.poch_id
                 and pocd.pcbpd_id = pcbpd.pcbpd_id
                 and pcbpd.pcbpd_id = ppfh.pcbpd_id
                 and ppfh.ppfh_id = ppfd.ppfh_id
                 and pcdi.pcdi_id = dipq.pcdi_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pci.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcbpd.process_id = pc_process_id
                 and ppfh.process_id = pc_process_id
                 and ppfd.process_id = pc_process_id
                 and dipq.process_id = pc_process_id
                 and pcbpd.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and dipq.element_id = pcbpd.element_id
                 and pcdi.is_active = 'Y'
                 and dipq.price_option_call_off_status in
                     ('Called Off', 'Not Applicable')
                 and pcm.product_group_type = 'CONCENTRATES'
                 and pcm.is_active = 'Y'
                 and dipq.is_active = 'Y'
                 and pci.is_active = 'Y'
                 and pcbpd.is_active = 'Y'
                 and poch.is_active = 'Y'
                 and pocd.is_active = 'Y'
                 and ppfh.is_active = 'Y'
                 and ppfd.is_active = 'Y'
               group by pci.internal_contract_item_ref_no,
                        ppfd.instrument_id,
                        pcbpd.element_id,
                        pci.pcdi_id
              union all
              select pci.internal_contract_item_ref_no,
                     pcbpd.element_id,
                     ppfd.instrument_id,
                     pci.pcdi_id
                from pci_physical_contract_item     pci,
                     pcdi_pc_delivery_item          pcdi,
                     pcipf_pci_pricing_formula      pcipf,
                     pcbph_pc_base_price_header     pcbph,
                     pcbpd_pc_base_price_detail     pcbpd,
                     ppfh_phy_price_formula_header  ppfh,
                     ppfd_phy_price_formula_details ppfd,
                     dipq_delivery_item_payable_qty dipq,
                     pcm_physical_contract_main     pcm
               where pci.internal_contract_item_ref_no =
                     pcipf.internal_contract_item_ref_no
                 and pcipf.pcbph_id = pcbph.pcbph_id
                 and pcbph.pcbph_id = pcbpd.pcbph_id
                 and pcbpd.pcbpd_id = ppfh.pcbpd_id
                 and ppfh.ppfh_id = ppfd.ppfh_id
                 and pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.pcdi_id = dipq.pcdi_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pci.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcipf.process_id = pc_process_id
                 and pcbph.process_id = pc_process_id
                 and ppfh.process_id = pc_process_id
                 and ppfd.process_id = pc_process_id
                 and dipq.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and dipq.element_id = pcbpd.element_id
                 and pcdi.is_active = 'Y'
                 and dipq.price_option_call_off_status = 'Not Called Off'
                 and pcm.product_group_type = 'CONCENTRATES'
                 and pcm.is_active = 'Y'
                 and dipq.is_active = 'Y'
                 and pci.is_active = 'Y'
                 and pcipf.is_active = 'Y'
                 and pcbph.is_active = 'Y'
                 and pcbpd.is_active = 'Y'
                 and ppfh.is_active = 'Y'
                 and ppfd.is_active = 'Y'
               group by pci.internal_contract_item_ref_no,
                        ppfd.instrument_id,
                        pcbpd.element_id,
                        pci.pcdi_id) tt,
             dim_der_instrument_master dim,
             pdd_product_derivative_def pdd,
             emt_exchangemaster emt
       where tt.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.exchange_id = emt.exchange_id(+)
       group by tt.internal_contract_item_ref_no,
                tt.element_id,
                tt.instrument_id,
                dim.instrument_name,
                pdd.derivative_def_id,
                pdd.derivative_def_name,
                emt.exchange_id,
                emt.exchange_name,
                tt.pcdi_id;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          2001,
                          'Start of Loop after Insert CED');
    for cur_pcdi_rows in cur_pcdi
    loop
      if cur_pcdi_rows.payment_due_date is null then
        vd_payment_due_date := pd_trade_date;
      else
        vd_payment_due_date := cur_pcdi_rows.payment_due_date;
      end if;
      -- Get the base main cur id
      vc_base_main_cur_id      := cur_pcdi_rows.base_cur_id;
      vc_base_main_cur_code    := cur_pcdi_rows.base_currency_name;
      vc_price_fixation_status := null;
      vn_total_contract_value  := 0;
      vc_exch_rate_string      := null;
    
      if cur_pcdi_rows.price_option_call_off_status in
         ('Called Off', 'Not Applicable') then
        vc_price_fixation_status := null;
        for cur_called_off_rows in cur_called_off(cur_pcdi_rows.pcdi_id)
        loop
          vc_price_basis       := cur_called_off_rows.price_basis;
          vc_price_description := cur_called_off_rows.price_description;
        
          if cur_called_off_rows.price_basis = 'Fixed' then
          
            vn_contract_price        := cur_called_off_rows.price_value;
            vn_total_quantity        := cur_pcdi_rows.item_qty;
            vn_qty_to_be_priced      := cur_called_off_rows.qty_to_be_priced;
            vn_total_contract_value  := vn_total_contract_value +
                                        vn_total_quantity *
                                        (vn_qty_to_be_priced / 100) *
                                        vn_contract_price;
            vc_price_unit_id         := cur_called_off_rows.price_unit_id;
            vc_price_fixation_status := 'Fixed';
          
          elsif cur_called_off_rows.price_basis in ('Index', 'Formula') then
          
            for cc1 in (select ppfh.ppfh_id,
                               ppfh.price_unit_id ppu_price_unit_id,
                               ppu.price_unit_id,
                               ppu.price_unit_name,
                               pocd.qp_period_type,
                               pofh.qp_start_date,
                               pofh.qp_end_date,
                               pfqpp.event_name,
                               pfqpp.no_of_event_months,
                               pfqpp.is_qp_any_day_basis,
                               (case
                                 when pocd.qp_period_type = 'Event' then
                                  cur_pcdi_rows.item_qty
                                 else
                                  pofh.qty_to_be_fixed
                               end) qty_to_be_fixed,
                               pofh.priced_qty,
                               pofh.pofh_id
                          from poch_price_opt_call_off_header poch,
                               pocd_price_option_calloff_dtls pocd,
                               pcbpd_pc_base_price_detail pcbpd,
                               ppfh_phy_price_formula_header ppfh,
                               pfqpp_phy_formula_qp_pricing pfqpp,
                               (select *
                                  from pofh_price_opt_fixation_header pfh
                                 where pfh.internal_gmr_ref_no is null
                                   and pfh.is_active = 'Y'
                                   and pfh.qty_to_be_fixed <> 0) pofh,
                               v_ppu_pum ppu
                         where poch.poch_id = pocd.poch_id
                           and pocd.pcbpd_id = pcbpd.pcbpd_id
                           and pcbpd.pcbpd_id = ppfh.pcbpd_id
                           and ppfh.ppfh_id = pfqpp.ppfh_id
                           and pocd.pocd_id = pofh.pocd_id(+)
                           and pcbpd.pcbpd_id = cur_called_off_rows.pcbpd_id
                           and poch.poch_id = cur_called_off_rows.poch_id
                           and ppfh.price_unit_id =
                               ppu.product_price_unit_id
                           and poch.is_active = 'Y'
                           and pocd.is_active = 'Y'
                           and pcbpd.is_active = 'Y'
                           and ppfh.is_active = 'Y'
                           and pfqpp.is_active = 'Y'
                              -- and pofh.is_active(+) = 'Y'
                           and pcbpd.process_id = pc_process_id
                           and pfqpp.process_id = pc_process_id
                           and ppfh.process_id = pc_process_id)
            
            loop
            
              if cur_pcdi_rows.basis_type = 'Shipment' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_shipment_date := last_day('01-' ||
                                               cur_pcdi_rows.delivery_to_month || '-' ||
                                               cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_shipment_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_arrival_date := vd_shipment_date +
                                   cur_pcdi_rows.transit_days;
              
              elsif cur_pcdi_rows.basis_type = 'Arrival' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_arrival_date := last_day('01-' ||
                                              cur_pcdi_rows.delivery_to_month || '-' ||
                                              cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_arrival_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_shipment_date := vd_arrival_date -
                                    cur_pcdi_rows.transit_days;
              end if;
            
              if cc1.qp_period_type = 'Period' then
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              elsif cc1.qp_period_type = 'Month' then
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              elsif cc1.qp_period_type = 'Date' then
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              elsif cc1.qp_period_type = 'Event' then
                begin
                  select dieqp.expected_qp_start_date,
                         dieqp.expected_qp_end_date
                    into vd_qp_start_date,
                         vd_qp_end_date
                    from di_del_item_exp_qp_details dieqp
                   where dieqp.pcdi_id = cur_pcdi_rows.pcdi_id
                     and dieqp.pcbpd_id = cur_called_off_rows.pcbpd_id
                     and dieqp.is_active = 'Y';
                exception
                  when no_data_found then
                    vd_qp_start_date := cc1.qp_start_date;
                    vd_qp_end_date   := cc1.qp_end_date;
                  when others then
                    vd_qp_start_date := cc1.qp_start_date;
                    vd_qp_end_date   := cc1.qp_end_date;
                end;
              else
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              end if;
              if cur_pcdi_rows.eod_trade_date >= vd_qp_start_date and
                 cur_pcdi_rows.eod_trade_date <= vd_qp_end_date then
                vc_period := 'During QP';
              elsif cur_pcdi_rows.eod_trade_date < vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date < vd_qp_end_date then
                vc_period := 'Before QP';
              elsif cur_pcdi_rows.eod_trade_date > vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date > vd_qp_end_date then
                vc_period := 'After QP';
              end if;
              -- 7th June 2012 By Janna
              -- If Event Based then the price is always 3rd Wednesday of QP 
              -- If QP is passed then Spot Price as on EOD Date
              --  
              if cc1.qp_period_type = 'Event' then
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'After QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  
                  end if;
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
                --get the price              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := cur_pcdi_rows.item_qty;
                vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              
              elsif vc_period = 'Before QP' then
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                      vd_qp_end_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
                --get the price              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := cur_pcdi_rows.item_qty;
                vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              elsif (vc_period = 'During QP' or vc_period = 'After QP') then
                vd_dur_qp_start_date         := vd_qp_start_date;
                vd_dur_qp_end_date           := vd_qp_end_date;
                vn_during_total_set_price    := 0;
                vn_count_set_qp              := 0;
                vn_any_day_price_fix_qty_amt := 0;
                vn_any_day_fixed_qty         := 0;
                for cc in (select pfd.user_price,
                                  pfd.as_of_date,
                                  pfd.qty_fixed,
                                  pofh.final_price,
                                  pfd.price_unit_id,
                                  vppu.price_unit_id pum_fixed_price_unit_id
                             from poch_price_opt_call_off_header poch,
                                  pocd_price_option_calloff_dtls pocd,
                                  pofh_price_opt_fixation_header pofh,
                                  pfd_price_fixation_details     pfd,
                                  v_ppu_pum                      vppu
                            where poch.poch_id = pocd.poch_id
                              and pocd.pocd_id = pofh.pocd_id
                              and pofh.pofh_id = cc1.pofh_id
                              and pofh.pofh_id = pfd.pofh_id
                              and pfd.as_of_date >= vd_dur_qp_start_date
                              and pfd.as_of_date <= pd_trade_date
                              and pfd.price_unit_id =
                                  vppu.product_price_unit_id
                              and poch.is_active = 'Y'
                              and pocd.is_active = 'Y'
                              and pofh.is_active = 'Y'
                              and pfd.is_active = 'Y')
                loop
                  vn_during_total_set_price    := vn_during_total_set_price +
                                                  cc.user_price;
                  vn_any_day_price_fix_qty_amt := vn_any_day_price_fix_qty_amt +
                                                  (cc.user_price *
                                                  cc.qty_fixed);
                  vn_any_day_fixed_qty         := vn_any_day_fixed_qty +
                                                  cc.qty_fixed;
                  vn_count_set_qp              := vn_count_set_qp + 1;
                  vc_fixed_price_unit_id       := cc.price_unit_id;
                  if cc.final_price is not null then
                    vc_price_fixation_status := 'Finalized';
                  end if;
                end loop;
              
                if vn_count_set_qp <> 0 then
                  if vc_price_fixation_status <> 'Finalized' then
                    vc_price_fixation_status := 'Partially Priced';
                  end if;
                else
                  vc_price_fixation_status := 'Un-priced';
                
                end if;
              
                if cc1.is_qp_any_day_basis = 'Y' then
                  vn_market_flag := 'N';
                else
                  vn_market_flag := 'Y';
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  -- get the third wednesday
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_dur_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if (vd_3rd_wed_of_qp <= pd_trade_date and
                     vc_period = 'During QP') or vc_period = 'After QP' then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  --Get the DR-id
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cc1.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'During QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  
                  end if;
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
                --Get the price for the dr-id
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_during_val_price,
                         vc_during_val_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_during_price_dr_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.dbd_id = dqd.dbd_id
                     and dq.dbd_id = pc_dbd_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                  
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
              
                vn_during_total_val_price := 0;
                vn_count_val_qp           := 0;
                vd_dur_qp_start_date      := pd_trade_date + 1;
              
                if vn_market_flag = 'N' then
                  vn_during_total_val_price := vn_during_total_val_price +
                                               vn_during_val_price;
                
                  vn_any_day_unfixed_qty         := cc1.qty_to_be_fixed -
                                                    vn_any_day_fixed_qty;
                  vn_count_val_qp                := vn_count_val_qp + 1;
                  vn_any_day_price_unfix_qty_amt := (vn_any_day_unfixed_qty *
                                                    vn_during_total_val_price);
                  if vn_any_day_unfixed_qty > 0 then
                    vc_price_fixation_status := 'Partially Priced';
                  else
                    vc_price_fixation_status := 'Priced';
                  end if;
                else
                
                  while vd_dur_qp_start_date <= vd_dur_qp_end_date
                  loop
                    ---- finding holidays       
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_dur_qp_start_date) then
                      vc_holiday := 'Y';
                    else
                      vc_holiday := 'N';
                    end if;
                  
                    if vc_holiday = 'N' then
                      vn_during_total_val_price := vn_during_total_val_price +
                                                   vn_during_val_price;
                      vn_count_val_qp           := vn_count_val_qp + 1;
                    end if;
                    vd_dur_qp_start_date := vd_dur_qp_start_date + 1;
                  end loop;
                end if;
              
                if (vn_count_val_qp + vn_count_set_qp) <> 0 then
                
                  if vn_market_flag = 'N' then
                    vn_during_qp_price := (vn_any_day_price_fix_qty_amt +
                                          vn_any_day_price_unfix_qty_amt) /
                                          cc1.qty_to_be_fixed;
                  
                  else
                    vn_during_qp_price := (vn_during_total_set_price +
                                          vn_during_total_val_price) /
                                          (vn_count_set_qp +
                                          vn_count_val_qp);
                  
                  end if;
                
                  vn_total_quantity       := cur_pcdi_rows.item_qty;
                  vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
                  vn_total_contract_value := vn_total_contract_value +
                                             vn_total_quantity *
                                             (vn_qty_to_be_priced / 100) *
                                             vn_during_qp_price;
                
                  --                  vc_price_unit_id        := cur_pcdi_rows.ppu_price_unit_id;
                
                else
                  vn_total_quantity       := cur_pcdi_rows.item_qty;
                  vn_total_contract_value := 0;
                
                  --                  vc_price_unit_id        := cur_pcdi_rows.ppu_price_unit_id;
                end if;
                vc_price_unit_id := cc1.ppu_price_unit_id;
              end if;
            
            end loop;
          
          end if;
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      
        vn_error_no := vn_error_no + 1;
      elsif cur_pcdi_rows.price_option_call_off_status = 'Not Called Off' then
        vn_error_no              := vn_error_no + 1;
        vc_price_fixation_status := null;
        for cur_not_called_off_rows in cur_not_called_off(cur_pcdi_rows.pcdi_id,
                                                          cur_pcdi_rows.internal_contract_item_ref_no)
        loop
          vc_price_basis       := cur_not_called_off_rows.price_basis;
          vc_price_description := cur_not_called_off_rows.price_description;
          -- vn_total_contract_value := 0;
          if cur_not_called_off_rows.price_basis = 'Fixed' then
            vn_contract_price        := cur_not_called_off_rows.price_value;
            vn_total_quantity        := cur_pcdi_rows.item_qty;
            vn_qty_to_be_priced      := cur_not_called_off_rows.qty_to_be_priced;
            vn_total_contract_value  := vn_total_contract_value +
                                        vn_total_quantity *
                                        (vn_qty_to_be_priced / 100) *
                                        vn_contract_price;
            vc_price_unit_id         := cur_not_called_off_rows.price_unit_id;
            vc_price_fixation_status := 'Fixed';
            vn_error_no              := 3;
          elsif cur_not_called_off_rows.price_basis in ('Index', 'Formula') then
            for cc1 in (select pfqpp.qp_pricing_period_type,
                               pfqpp.qp_period_from_date,
                               pfqpp.qp_period_to_date,
                               pfqpp.qp_month,
                               pfqpp.qp_year,
                               pfqpp.qp_date,
                               pfqpp.event_name,
                               pfqpp.no_of_event_months,
                               ppfh.price_unit_id ppu_price_unit_id,
                               ppu.price_unit_id, --pum price unit id, as quoted available in this unit only
                               ppu.price_unit_name
                          from ppfh_phy_price_formula_header ppfh,
                               pfqpp_phy_formula_qp_pricing  pfqpp,
                               v_ppu_pum                     ppu
                         where ppfh.ppfh_id = pfqpp.ppfh_id
                           and ppfh.pcbpd_id =
                               cur_not_called_off_rows.pcbpd_id
                           and ppfh.is_active = 'Y'
                           and pfqpp.is_active = 'Y'
                           and ppfh.price_unit_id =
                               ppu.product_price_unit_id
                           and ppfh.process_id = pc_process_id
                           and pfqpp.process_id = pc_process_id)
            loop
            
              if cur_pcdi_rows.basis_type = 'Shipment' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_shipment_date := last_day('01-' ||
                                               cur_pcdi_rows.delivery_to_month || '-' ||
                                               cur_pcdi_rows.delivery_to_year);
                
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_shipment_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_arrival_date := vd_shipment_date +
                                   cur_pcdi_rows.transit_days;
              
              elsif cur_pcdi_rows.basis_type = 'Arrival' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_arrival_date := last_day('01-' ||
                                              cur_pcdi_rows.delivery_to_month || '-' ||
                                              cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_arrival_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_shipment_date := vd_arrival_date -
                                    cur_pcdi_rows.transit_days;
              end if;
            
              if cc1.qp_pricing_period_type = 'Period' then
                vd_qp_start_date := cc1.qp_period_from_date;
                vd_qp_end_date   := cc1.qp_period_to_date;
              elsif cc1.qp_pricing_period_type = 'Month' then
                vd_qp_start_date := '01-' || cc1.qp_month || '-' ||
                                    cc1.qp_year;
                vd_qp_end_date   := last_day(vd_qp_start_date);
              elsif cc1.qp_pricing_period_type = 'Date' then
                vd_qp_start_date := cc1.qp_date;
                vd_qp_end_date   := cc1.qp_date;
              elsif cc1.qp_pricing_period_type = 'Event' then
                begin
                  select dieqp.expected_qp_start_date,
                         dieqp.expected_qp_end_date
                    into vd_qp_start_date,
                         vd_qp_end_date
                    from di_del_item_exp_qp_details dieqp
                   where dieqp.pcdi_id = cur_pcdi_rows.pcdi_id
                     and dieqp.pcbpd_id = cur_not_called_off_rows.pcbpd_id
                     and dieqp.is_active = 'Y';
                exception
                  when no_data_found then
                    vd_qp_start_date := cc1.qp_period_from_date;
                    vd_qp_end_date   := cc1.qp_period_to_date;
                  when others then
                    vd_qp_start_date := cc1.qp_period_from_date;
                    vd_qp_end_date   := cc1.qp_period_to_date;
                end;
              else
                vd_qp_start_date := cc1.qp_period_from_date;
                vd_qp_end_date   := cc1.qp_period_to_date;
              end if;
              if cur_pcdi_rows.eod_trade_date >= vd_qp_start_date and
                 cur_pcdi_rows.eod_trade_date <= vd_qp_end_date then
                vc_period := 'During QP';
              elsif cur_pcdi_rows.eod_trade_date < vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date < vd_qp_end_date then
                vc_period := 'Before QP';
              elsif cur_pcdi_rows.eod_trade_date > vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date > vd_qp_end_date then
                vc_period := 'After QP';
              end if;
              if cc1.qp_pricing_period_type = 'Event' then
                vc_price_fixation_status := 'Un-priced';
                vn_error_no              := 4;
                -- get third wednesday of QP period
                --  If 3rd Wednesday of QP End date is not a prompt date, get the next valid prompt date
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  --get the price dr_id   
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cc1.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                      vd_qp_end_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price
              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := cur_pcdi_rows.item_qty;
                vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              elsif vc_period = 'Before QP' then
              
                vc_price_fixation_status := 'Un-priced';
              
                vn_error_no := 4;
                ---- get third wednesday of QP period
                --  If 3rd Wednesday of QP End date is not a prompt date, get the next valid prompt date
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  --get the price dr_id   
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cc1.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                      vd_qp_end_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price
              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := cur_pcdi_rows.item_qty;
                vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              
              elsif (vc_period = 'During QP' or vc_period = 'After QP') then
                vc_price_fixation_status := 'Un-priced';
                vn_error_no              := 6;
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if (vd_3rd_wed_of_qp <= pd_trade_date and
                     vc_period = 'During QP') or vc_period = 'After QP' then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                
                  --get the price dr_id   
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cc1.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'During QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  
                  end if;
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                --get the price              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_during_qp_price,
                         vc_during_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_during_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := cur_pcdi_rows.item_qty;
                vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_during_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              
              end if;
            end loop;
          end if;
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      end if;
      vn_error_no := 7;
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vc_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      
        pkg_general.sp_get_base_cur_detail(vc_price_cur_id,
                                           vc_contract_main_cur_id,
                                           vc_contract_main_cur_code,
                                           vn_contract_main_cur_factor);
        vn_error_no := 8;
      
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vc_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
    
      -- Get the contract base price Unit id
      begin
      
        select ppu.product_price_unit_id
          into vc_contract_base_price_unit_id
          from v_ppu_pum ppu
         where ppu.weight_unit_id = cur_pcdi_rows.item_qty_unit_id
           and ppu.product_id = cur_pcdi_rows.product_id
           and ppu.cur_id = cur_pcdi_rows.base_cur_id;
      
      exception
        when no_data_found then
          vc_contract_base_price_unit_id := null;
      end;
      --
      -- Convert the final price into base price unit ID
      --
      --
      -- Get the Forward Exchange Rate from Price Unit ID to Base Price Unit ID
      --
      if vc_price_cur_id <> vc_base_main_cur_id then
        pkg_general.sp_forward_cur_exchange_new(pc_corporate_id,
                                                pd_trade_date,
                                                vd_payment_due_date,
                                                vc_price_cur_id,
                                                vc_base_main_cur_id,
                                                30,
                                                vn_fw_exch_rate_price_to_base,
                                                vn_forward_points);
      
        if vc_exch_rate_string is null then
          vc_exch_rate_string := '1 ' || vc_price_cur_code || '=' ||
                                 vn_fw_exch_rate_price_to_base || ' ' ||
                                 vc_base_main_cur_code;
        else
          vc_exch_rate_string := vc_exch_rate_string || ',' || '1 ' ||
                                 vc_price_cur_code || '=' ||
                                 vn_fw_exch_rate_price_to_base || ' ' ||
                                 vc_base_main_cur_code;
        end if;
      else
        vn_fw_exch_rate_price_to_base := 1.0;
      end if;
      vn_price_in_base_price_unit_id := vn_fw_exch_rate_price_to_base *
                                        vn_contract_main_cur_factor *
                                        pkg_general.f_get_converted_quantity(cur_pcdi_rows.product_id,
                                                                             vc_price_weight_unit_id,
                                                                             cur_pcdi_rows.item_qty_unit_id,
                                                                             1) *
                                        vn_average_price;
    
      vn_error_no := 9;
      insert into cipd_contract_item_price_daily
        (corporate_id,
         pcdi_id,
         internal_contract_item_ref_no,
         internal_contract_ref_no,
         contract_ref_no,
         delivery_item_no,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         price_basis,
         price_fixation_details,
         contract_equity_premium,
         market_equity_premium,
         mkt_equity_prem_price_unit_id,
         cont_equity_prem_price_unit_id,
         process_id,
         price_fixation_status,
         price_fixed_qty,
         total_qty,
         payment_due_date,
         contract_base_price_unit_id,
         -- contract_base_fx_rate,
         exch_rate_string,
         price_description,
         price_in_base_price_unit_id)
      values
        (pc_corporate_id,
         cur_pcdi_rows.pcdi_id,
         cur_pcdi_rows.internal_contract_item_ref_no,
         cur_pcdi_rows.internal_contract_ref_no,
         cur_pcdi_rows.contract_ref_no,
         cur_pcdi_rows.delivery_item_no,
         vn_average_price,
         vc_price_unit_id,
         vc_price_cur_id,
         vc_price_cur_code,
         vc_price_weight_unit,
         vc_price_weight_unit_id,
         vc_price_qty_unit,
         vc_price_basis,
         'Not Applicable',
         vn_contract_equity_premium,
         vn_market_equity_premium,
         vc_mar_equ_prem_price_unit_id,
         vc_con_equ_prem_price_unit_id,
         pc_process_id,
         vc_price_fixation_status,
         vn_price_fixed_qty,
         vn_total_qty,
         cur_pcdi_rows.payment_due_date,
         vc_contract_base_price_unit_id,
         -- vn_fw_exch_rate_price_to_base,
         vc_exch_rate_string,
         vc_price_description,
         vn_price_in_base_price_unit_id);
      update pci_physical_contract_item pci
         set pci.price_description = vc_price_description
       where pci.internal_contract_item_ref_no =
            
             cur_pcdi_rows.internal_contract_item_ref_no
         and pci.process_id = pc_process_id;
    
    end loop;
    commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process contract price',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace ||
                                                           'No ' ||
                                                           vn_error_no,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_calc_gmr_price(pc_corporate_id varchar2,
                              pd_trade_date   date,
                              pc_process_id   varchar2,
                              pc_user_id      varchar2,
                              pc_dbd_id       varchar2,
                              pc_process      varchar2) is
  
    cursor cur_gmr is
      select gmr.corporate_id,
             grd.product_id,
             gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             gmr.current_qty,
             pofh.qp_start_date,
             pofh.qp_end_date,
             pofh.pofh_id,
             pd_trade_date eod_trade_date,
             qat.instrument_id,
             dim.instrument_name,
             ps.price_source_id,
             ps.price_source_name,
             apm.available_price_id,
             apm.available_price_name,
             pum.price_unit_name,
             vdip.ppu_price_unit_id,
             div.price_unit_id,
             pocd.is_any_day_pricing,
             pofh.qty_to_be_fixed,
             round(pofh.priced_qty, 4) priced_qty,
             pofh.no_of_prompt_days,
             pocd.pcbpd_id,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable,
             grd.payment_due_date
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.quality_id,
                     grd.product_id,
                     (case
                       when nvl(grd.payment_due_date, pd_trade_date) <
                            pd_trade_date then
                        pd_trade_date
                       else
                        grd.payment_due_date
                     end) payment_due_date
              
                from grd_goods_record_detail grd
               where grd.process_id = pc_process_id
                 and grd.tolling_stock_type = 'None Tolling'
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id,
                        (case
                          when nvl(grd.payment_due_date, pd_trade_date) <
                               pd_trade_date then
                           pd_trade_date
                          else
                           grd.payment_due_date
                        end)) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             --mv_qat_quality_valuation qat,
             ged_gmr_exchange_detail      qat,
             dim_der_instrument_master    dim,
             div_der_instrument_valuation div,
             ps_price_source              ps,
             apm_available_price_master   apm,
             pum_price_unit_master        pum,
             v_der_instrument_price_unit  vdip,
             pdc_prompt_delivery_calendar pdc
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdtm.product_type_name = 'Standard'
         and gmr.internal_gmr_ref_no = pofh.internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
            --and grd.quality_id = qat.quality_id
         and gmr.process_id = pc_process_id
         and qat.corporate_id(+) = pc_corporate_id
         and gmr.internal_gmr_ref_no = qat.internal_gmr_ref_no(+)
            --   and gmr.process_id = qat.process_id(+)
         and qat.instrument_id = dim.instrument_id(+)
         and dim.instrument_id = div.instrument_id(+)
         and div.is_deleted(+) = 'N'
         and div.price_source_id = ps.price_source_id(+)
         and div.available_price_id = apm.available_price_id(+)
         and div.price_unit_id = pum.price_unit_id(+)
         and dim.instrument_id = vdip.instrument_id(+)
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+)
         and gmr.is_deleted = 'N'
         and pofh.is_active = 'Y'
      union all
      select gmr.corporate_id,
             grd.product_id,
             gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             gmr.current_qty,
             pofh.qp_start_date,
             pofh.qp_end_date,
             pofh.pofh_id,
             pd_trade_date eod_trade_date,
             qat.instrument_id,
             dim.instrument_name,
             ps.price_source_id,
             ps.price_source_name,
             apm.available_price_id,
             apm.available_price_name,
             pum.price_unit_name,
             vdip.ppu_price_unit_id,
             div.price_unit_id,
             pocd.is_any_day_pricing,
             pofh.qty_to_be_fixed,
             round(pofh.priced_qty, 4) priced_qty,
             pofh.no_of_prompt_days,
             pocd.pcbpd_id,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable,
             grd.payment_due_date
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.quality_id,
                     grd.product_id,
                     (case
                       when nvl(grd.payment_due_date, pd_trade_date) <
                            pd_trade_date then
                        pd_trade_date
                       else
                        grd.payment_due_date
                     end) payment_due_date
                from dgrd_delivered_grd grd
               where grd.process_id = pc_process_id
                 and grd.status = 'Active'
                 and grd.tolling_stock_type = 'None Tolling'
              --and grd.is_deleted = 'N'
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id,
                        (case
                          when nvl(grd.payment_due_date, pd_trade_date) <
                               pd_trade_date then
                           pd_trade_date
                          else
                           grd.payment_due_date
                        end)) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             --mv_qat_quality_valuation qat,
             (select *
                from ged_gmr_exchange_detail
               where corporate_id = pc_corporate_id) qat,
             dim_der_instrument_master dim,
             div_der_instrument_valuation div,
             ps_price_source ps,
             apm_available_price_master apm,
             pum_price_unit_master pum,
             v_der_instrument_price_unit vdip,
             pdc_prompt_delivery_calendar pdc
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdtm.product_type_name = 'Standard'
         and gmr.internal_gmr_ref_no = pofh.internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
            --and grd.quality_id = qat.quality_id
         and gmr.process_id = pc_process_id
            -- and qat.corporate_id = pc_corporate_id
         and gmr.internal_gmr_ref_no = qat.internal_gmr_ref_no(+)
            --and gmr.process_id = qat.process_id(+)
         and qat.instrument_id = dim.instrument_id(+)
         and dim.instrument_id = div.instrument_id(+)
         and div.is_deleted(+) = 'N'
         and div.price_source_id = ps.price_source_id(+)
         and div.available_price_id = apm.available_price_id(+)
         and div.price_unit_id = pum.price_unit_id(+)
         and dim.instrument_id = vdip.instrument_id(+)
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+)
         and gmr.is_deleted = 'N'
         and pofh.is_active = 'Y';
  
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vd_qp_start_date               date;
    vd_qp_end_date                 date;
    vc_period                      varchar2(50);
    vd_3rd_wed_of_qp               date;
    workings_days                  number;
    vd_quotes_date                 date;
    vc_before_price_dr_id          varchar2(15);
    vn_before_qp_price             number;
    vc_before_qp_price_unit_id     varchar2(15);
    vn_total_contract_value        number;
    vd_dur_qp_start_date           date;
    vd_dur_qp_end_date             date;
    vn_during_total_set_price      number;
    vn_count_set_qp                number;
    vc_during_price_dr_id          varchar2(15);
    vn_during_val_price            number;
    vc_during_val_price_unit_id    varchar2(15);
    vn_during_total_val_price      number;
    vn_count_val_qp                number;
    vc_holiday                     char(1);
    vn_during_qp_price             number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vc_price_weight_unit           number;
    vc_price_weight_unit_id        varchar2(15);
    vc_price_qty_unit              varchar2(15);
    vc_price_fixation_status       varchar2(50);
    vn_market_flag                 char(1);
    vn_any_day_price_fix_qty_amt   number;
    vn_any_day_price_ufix_qty_amt  number;
    vn_any_day_unfixed_qty         number;
    vn_any_day_fixed_qty           number;
    vc_price_unit_id               varchar2(15);
    vc_ppu_price_unit_id           varchar2(15);
    vc_price_name                  varchar2(100);
    vc_pcbpd_id                    varchar2(15);
    vc_prompt_month                varchar2(15);
    vc_prompt_year                 number;
    vc_prompt_date                 date;
    vc_contract_base_price_unit_id varchar2(15);
    vc_contract_main_cur_id        varchar2(15);
    vc_contract_main_cur_code      varchar2(15);
    vn_contract_main_cur_factor    number;
    vc_base_main_cur_id            varchar2(15);
    vc_base_main_cur_code          varchar2(15);
    vn_settlement_price            number;
    vn_forward_points              number;
    vc_exch_rate_string            varchar2(300);
    vn_price_in_base_price_unit_id number;
    vc_fixed_price_unit_id         varchar2(15);
    vd_valid_quote_date            date;
  begin
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          2001,
                          'Start of base gmr price');
    delete from ged_gmr_exchange_detail ged
     where ged.corporate_id = pc_corporate_id;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          2002,
                          'Delete GED');
    commit;
  
    insert into ged_gmr_exchange_detail
      (corporate_id,
       internal_gmr_ref_no,
       instrument_id,
       instrument_name,
       derivative_def_id,
       derivative_def_name,
       exchange_id,
       exchange_name,
       element_id)
      select pcbpd.process_id,
             pofh.internal_gmr_ref_no,
             ppfd.instrument_id,
             dim.instrument_name,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             emt.exchange_id,
             emt.exchange_name,
             pcbpd.element_id
        from pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             ppfh_phy_price_formula_header  ppfh,
             ppfd_phy_price_formula_details ppfd,
             dim_der_instrument_master      dim,
             pdd_product_derivative_def     pdd,
             emt_exchangemaster             emt
       where pofh.pocd_id = pocd.pocd_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbpd_id = ppfh.pcbpd_id
         and ppfh.ppfh_id = ppfd.ppfh_id
         and pcbpd.process_id = ppfh.process_id
         and ppfh.process_id = ppfd.process_id
         and ppfd.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.exchange_id = emt.exchange_id(+)
         and pofh.internal_gmr_ref_no is not null
         and pofh.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and ppfh.is_active = 'Y'
         and ppfd.is_active = 'Y'
         and ppfd.process_id = pc_process_id
       group by pcbpd.process_id,
                pofh.internal_gmr_ref_no,
                ppfd.instrument_id,
                dim.instrument_name,
                pdd.derivative_def_id,
                pdd.derivative_def_name,
                emt.exchange_id,
                emt.exchange_name,
                pcbpd.element_id;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          2003,
                          'Insert GED');
  
    for cur_gmr_rows in cur_gmr
    loop
      vc_price_fixation_status      := null;
      vn_total_contract_value       := 0;
      vn_market_flag                := null;
      vn_any_day_price_fix_qty_amt  := 0;
      vn_any_day_price_ufix_qty_amt := 0;
      vn_any_day_unfixed_qty        := 0;
      vn_any_day_fixed_qty          := 0;
      vc_pcbpd_id                   := cur_gmr_rows.pcbpd_id;
      vc_price_unit_id              := null;
      vc_ppu_price_unit_id          := null;
      vd_qp_start_date              := cur_gmr_rows.qp_start_date;
      vd_qp_end_date                := cur_gmr_rows.qp_end_date;
    
      begin
      
        select ppu.product_price_unit_id,
               akc.base_cur_id,
               cm.cur_code
          into vc_contract_base_price_unit_id,
               vc_base_main_cur_id,
               vc_base_main_cur_code
          from v_ppu_pum          ppu,
               pdm_productmaster  pdm,
               ak_corporate       akc,
               cm_currency_master cm
         where ppu.weight_unit_id = pdm.base_quantity_unit
           and ppu.product_id = pdm.product_id
           and ppu.product_id = cur_gmr_rows.product_id
           and ppu.cur_id = akc.base_cur_id
           and akc.corporate_id = pc_corporate_id
           and ppu.cur_id = cm.cur_id;
      
      exception
        when no_data_found then
          vc_contract_base_price_unit_id := null;
      end;
    
      if cur_gmr_rows.eod_trade_date >= vd_qp_start_date and
         cur_gmr_rows.eod_trade_date <= vd_qp_end_date then
        vc_period := 'During QP';
      elsif cur_gmr_rows.eod_trade_date < vd_qp_start_date and
            cur_gmr_rows.eod_trade_date < vd_qp_end_date then
        vc_period := 'Before QP';
      elsif cur_gmr_rows.eod_trade_date > vd_qp_start_date and
            cur_gmr_rows.eod_trade_date > vd_qp_end_date then
        vc_period := 'After QP';
      end if;
      begin
        select ppu.product_price_unit_id,
               ppu.price_unit_id,
               ppu.price_unit_name
          into vc_ppu_price_unit_id,
               vc_price_unit_id,
               vc_price_name
          from ppfh_phy_price_formula_header ppfh,
               v_ppu_pum                     ppu
         where ppfh.pcbpd_id = vc_pcbpd_id
           and ppfh.process_id = pc_process_id
           and ppfh.price_unit_id = ppu.product_price_unit_id
           and rownum <= 1;
      exception
        when no_data_found then
          vc_ppu_price_unit_id := cur_gmr_rows.ppu_price_unit_id;
          vc_price_unit_id     := cur_gmr_rows.price_unit_id;
          vc_price_name        := cur_gmr_rows.price_unit_name;
        when others then
          vc_ppu_price_unit_id := cur_gmr_rows.ppu_price_unit_id;
          vc_price_unit_id     := cur_gmr_rows.price_unit_id;
          vc_price_name        := cur_gmr_rows.price_unit_name;
      end;
      if vc_period = 'Before QP' then
        vc_price_fixation_status := 'Un-priced';
      
        if cur_gmr_rows.is_daily_cal_applicable = 'Y' then
          vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                'Wed',
                                                                3);
        
          while true
          loop
            if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                   vd_3rd_wed_of_qp) then
              vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
            else
              exit;
            end if;
          end loop;
        
          --- get 3rd wednesday  before QP period 
          -- Get the quotation date = Trade Date +2 working Days
          if vd_3rd_wed_of_qp <= pd_trade_date then
            workings_days  := 0;
            vd_quotes_date := pd_trade_date + 1;
            while workings_days <> 2
            loop
              if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                     vd_quotes_date) then
                vd_quotes_date := vd_quotes_date + 1;
              else
                workings_days := workings_days + 1;
                if workings_days <> 2 then
                  vd_quotes_date := vd_quotes_date + 1;
                end if;
              end if;
            end loop;
            vd_3rd_wed_of_qp := vd_quotes_date;
          end if;
          ---- get the dr_id             
          begin
            select drm.dr_id
              into vc_before_price_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.prompt_date = vd_3rd_wed_of_qp
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_calc_gmr_price',
                                                                   'PHY-002',
                                                                   'DR_ID missing for ' ||
                                                                   cur_gmr_rows.instrument_name ||
                                                                   ',Price Source:' ||
                                                                   cur_gmr_rows.price_source_name ||
                                                                   ' GMR No: ' ||
                                                                   cur_gmr_rows.gmr_ref_no ||
                                                                   ',Price Unit:' ||
                                                                   vc_price_name || ',' ||
                                                                   cur_gmr_rows.available_price_name ||
                                                                   ' Price,Prompt Date:' ||
                                                                   vd_3rd_wed_of_qp,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
            
          end;
        
        elsif cur_gmr_rows.is_daily_cal_applicable = 'N' and
              cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
        
          vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                              vd_qp_end_date);
          vc_prompt_month := to_char(vc_prompt_date, 'Mon');
          vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
        
          ---- get the dr_id             
          begin
            select drm.dr_id
              into vc_before_price_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.period_month = vc_prompt_month
               and drm.period_year = vc_prompt_year
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_calc_contract_price',
                                                                   'PHY-002',
                                                                   'DR_ID missing for ' ||
                                                                   cur_gmr_rows.instrument_name ||
                                                                   ',Price Source:' ||
                                                                   cur_gmr_rows.price_source_name ||
                                                                   ' Contract Ref No: ' ||
                                                                   cur_gmr_rows.gmr_ref_no ||
                                                                   ',Price Unit:' ||
                                                                   cur_gmr_rows.price_unit_name || ',' ||
                                                                   cur_gmr_rows.available_price_name ||
                                                                   ' Price,Prompt Date:' ||
                                                                   vc_prompt_month || ' ' ||
                                                                   vc_prompt_year,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
        end if;
        --get the price              
        begin
          select dqd.price,
                 dqd.price_unit_id
            into vn_before_qp_price,
                 vc_before_qp_price_unit_id
            from dq_derivative_quotes        dq,
                 dqd_derivative_quote_detail dqd,
                 cdim_corporate_dim          cdim
           where dq.dq_id = dqd.dq_id
             and dqd.dr_id = vc_before_price_dr_id
             and dq.process_id = pc_process_id
             and dq.instrument_id = cur_gmr_rows.instrument_id
             and dq.process_id = dqd.process_id
             and dqd.available_price_id = cur_gmr_rows.available_price_id
             and dq.price_source_id = cur_gmr_rows.price_source_id
             and dqd.price_unit_id = vc_price_unit_id
             and dq.trade_date = cdim.valid_quote_date
             and dq.is_deleted = 'N'
             and dqd.is_deleted = 'N'
             and cdim.corporate_id = pc_corporate_id
             and cdim.instrument_id = dq.instrument_id;
        exception
          when no_data_found then
          
            select cdim.valid_quote_date
              into vd_valid_quote_date
              from cdim_corporate_dim cdim
             where cdim.corporate_id = pc_corporate_id
               and cdim.instrument_id = cur_gmr_rows.instrument_id;
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_gmr_price','PHY-002','Price missing for ' || cur_gmr_rows.instrument_name ||',Price Source:' || cur_gmr_rows.price_source_name ||' GMR No: ' || cur_gmr_rows.gmr_ref_no ||',Price Unit:' || vc_price_name ||',' || cur_gmr_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_gmr_rows.is_daily_cal_applicable = 'N' and cur_gmr_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        vn_total_contract_value := vn_total_contract_value +
                                   vn_before_qp_price;
        --  vc_price_unit_id        := cur_gmr_rows.ppu_price_unit_id;
      elsif vc_period = 'During QP' or vc_period = 'After QP' then
        vd_dur_qp_start_date      := vd_qp_start_date;
        vd_dur_qp_end_date        := vd_qp_end_date;
        vn_during_total_set_price := 0;
        vn_count_set_qp           := 0;
        for cc in (select pfd.user_price,
                          pfd.as_of_date,
                          pfd.qty_fixed,
                          pofh.final_price,
                          pocd.is_any_day_pricing,
                          pfd.price_unit_id
                     from poch_price_opt_call_off_header poch,
                          pocd_price_option_calloff_dtls pocd,
                          pofh_price_opt_fixation_header pofh,
                          pfd_price_fixation_details     pfd
                    where poch.poch_id = pocd.poch_id
                      and pocd.pocd_id = pofh.pocd_id
                      and pofh.pofh_id = cur_gmr_rows.pofh_id
                      and pofh.pofh_id = pfd.pofh_id
                      and pfd.as_of_date >= vd_dur_qp_start_date
                      and pfd.as_of_date <= pd_trade_date
                      and poch.is_active = 'Y'
                      and pocd.is_active = 'Y'
                      and pofh.is_active = 'Y'
                      and pfd.is_active = 'Y')
        loop
          vn_during_total_set_price := vn_during_total_set_price +
                                       cc.user_price;
          vn_count_set_qp           := vn_count_set_qp + 1;
        
          vn_any_day_price_fix_qty_amt := vn_any_day_price_fix_qty_amt +
                                          (cc.user_price * cc.qty_fixed);
        
          if cc.final_price is not null then
            vc_price_fixation_status := 'Finalized';
          end if;
          vn_any_day_fixed_qty := vn_any_day_fixed_qty + cc.qty_fixed;
        
          vc_fixed_price_unit_id := cc.price_unit_id;
        end loop;
      
        if vn_count_set_qp <> 0 then
          if vc_price_fixation_status <> 'Finalized' then
            vc_price_fixation_status := 'Partially Priced';
          end if;
        else
          vc_price_fixation_status := 'Un-priced';
        
        end if;
        if cur_gmr_rows.is_any_day_pricing = 'Y' then
          vn_market_flag := 'N';
        else
          vn_market_flag := 'Y';
        end if;
      
        -- get the third wednesday
        if cur_gmr_rows.is_daily_cal_applicable = 'Y' then
          vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_dur_qp_end_date,
                                                                'Wed',
                                                                3);
          while true
          loop
            if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                   vd_3rd_wed_of_qp) then
              vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
            else
              exit;
            end if;
          end loop;
          --- get 3rd wednesday  before QP period 
          -- Get the quotation date = Trade Date +2 working Days
          if (vd_3rd_wed_of_qp <= pd_trade_date or vc_period = 'During QP') or
             vc_period = 'After QP' then
            workings_days  := 0;
            vd_quotes_date := pd_trade_date + 1;
            while workings_days <> 2
            loop
              if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                     vd_quotes_date) then
                vd_quotes_date := vd_quotes_date + 1;
              else
                workings_days := workings_days + 1;
                if workings_days <> 2 then
                  vd_quotes_date := vd_quotes_date + 1;
                end if;
              end if;
            end loop;
            vd_3rd_wed_of_qp := vd_quotes_date;
          end if;
          --Get the DR-id
          begin
            select drm.dr_id
              into vc_during_price_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.prompt_date = vd_3rd_wed_of_qp
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_calc_gmr_price',
                                                                   'PHY-002',
                                                                   'DR-ID missing for ' ||
                                                                   cur_gmr_rows.instrument_name ||
                                                                   ',Price Source:' ||
                                                                   cur_gmr_rows.price_source_name ||
                                                                   ' GMR NO: ' ||
                                                                   cur_gmr_rows.gmr_ref_no ||
                                                                   ',Price Unit:' ||
                                                                   vc_price_name || ',' ||
                                                                   cur_gmr_rows.available_price_name ||
                                                                   ' Price,Prompt Date:' ||
                                                                   vd_3rd_wed_of_qp,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
        elsif cur_gmr_rows.is_daily_cal_applicable = 'N' and
              cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
          if vc_period = 'During QP' then
            vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                               vd_qp_end_date);
          else
            vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                               pd_trade_date);
          
          end if;
          vc_prompt_month := to_char(vc_prompt_date, 'Mon');
          vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
          ---- get the dr_id             
          begin
            select drm.dr_id
              into vc_during_price_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.period_month = vc_prompt_month
               and drm.period_year = vc_prompt_year
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_calc_contract_price',
                                                                   'PHY-002',
                                                                   'DR_ID missing for ' ||
                                                                   cur_gmr_rows.instrument_name ||
                                                                   ',Price Source:' ||
                                                                   cur_gmr_rows.price_source_name ||
                                                                   ' Contract Ref No: ' ||
                                                                   cur_gmr_rows.gmr_ref_no ||
                                                                   ',Price Unit:' ||
                                                                   cur_gmr_rows.price_unit_name || ',' ||
                                                                   cur_gmr_rows.available_price_name ||
                                                                   ' Price,Prompt Date:' ||
                                                                   vc_prompt_month || ' ' ||
                                                                   vc_prompt_year,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
        end if;
        --Get the price for the dr-id
        begin
          select dqd.price,
                 dqd.price_unit_id
            into vn_during_val_price,
                 vc_during_val_price_unit_id
            from dq_derivative_quotes        dq,
                 dqd_derivative_quote_detail dqd,
                 cdim_corporate_dim          cdim
           where dq.dq_id = dqd.dq_id
             and dqd.dr_id = vc_during_price_dr_id
             and dq.instrument_id = cur_gmr_rows.instrument_id
             and dq.dbd_id = dqd.dbd_id
             and dq.dbd_id = pc_dbd_id
             and dqd.available_price_id = cur_gmr_rows.available_price_id
             and dq.price_source_id = cur_gmr_rows.price_source_id
             and dq.trade_date = cdim.valid_quote_date
             and dqd.price_unit_id = vc_price_unit_id
             and dq.is_deleted = 'N'
             and dqd.is_deleted = 'N'
             and cdim.corporate_id = pc_corporate_id
             and cdim.instrument_id = dq.instrument_id;
        exception
          when no_data_found then
            select cdim.valid_quote_date
              into vd_valid_quote_date
              from cdim_corporate_dim cdim
             where cdim.corporate_id = pc_corporate_id
               and cdim.instrument_id = cur_gmr_rows.instrument_id;
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_gmr_price','PHY-002','Price missing for ' || cur_gmr_rows.instrument_name ||',Price Source:' || cur_gmr_rows.price_source_name ||' GMR No: ' || cur_gmr_rows.gmr_ref_no ||',Price Unit:' || vc_price_name ||',' || cur_gmr_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_gmr_rows.is_daily_cal_applicable = 'N' and cur_gmr_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        vn_during_total_val_price := 0;
        vn_count_val_qp           := 0;
        vd_dur_qp_start_date      := pd_trade_date + 1;
        if vn_market_flag = 'N' then
          vn_during_total_val_price := vn_during_total_val_price +
                                       vn_during_val_price;
        
          vn_any_day_unfixed_qty        := cur_gmr_rows.qty_to_be_fixed -
                                           vn_any_day_fixed_qty;
          vn_count_val_qp               := vn_count_val_qp + 1;
          vn_any_day_price_ufix_qty_amt := (vn_any_day_unfixed_qty *
                                           vn_during_total_val_price);
        
        else
          while vd_dur_qp_start_date <= vd_dur_qp_end_date
          loop
            if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                   vd_dur_qp_start_date) then
              vc_holiday := 'Y';
            else
              vc_holiday := 'N';
            end if;
            if vc_holiday = 'N' then
              vn_during_total_val_price := vn_during_total_val_price +
                                           vn_during_val_price;
              vn_count_val_qp           := vn_count_val_qp + 1;
            end if;
            vd_dur_qp_start_date := vd_dur_qp_start_date + 1;
          end loop;
        end if;
        if (vn_count_val_qp + vn_count_set_qp) <> 0 then
        
          if vn_market_flag = 'N' then
            vn_during_qp_price := (vn_any_day_price_fix_qty_amt +
                                  vn_any_day_price_ufix_qty_amt) /
                                  cur_gmr_rows.qty_to_be_fixed;
          else
            vn_during_qp_price := (vn_during_total_set_price +
                                  vn_during_total_val_price) /
                                  (vn_count_set_qp + vn_count_val_qp);
          end if;
          vn_total_contract_value := vn_total_contract_value +
                                     vn_during_qp_price;
        else
          vn_total_contract_value := 0;
        end if;
      
      end if;
      --
      -- Convert the final price into Base Price Unit 
      --
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vc_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_ppu_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vc_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
    
      pkg_general.sp_get_base_cur_detail(vc_price_cur_id,
                                         vc_contract_main_cur_id,
                                         vc_contract_main_cur_code,
                                         vn_contract_main_cur_factor);
    
      --
      -- Get the Forward Exchange Rate from Price Unit ID to Base Price Unit ID
      --
      if vc_contract_main_cur_id <> vc_base_main_cur_id then
        pkg_general.sp_forward_cur_exchange_new(pc_corporate_id,
                                                pd_trade_date,
                                                cur_gmr_rows.payment_due_date,
                                                vc_contract_main_cur_id,
                                                vc_base_main_cur_id,
                                                30,
                                                vn_settlement_price,
                                                vn_forward_points);
        vc_exch_rate_string := vc_contract_main_cur_id || '=' ||
                               vn_settlement_price || ' ' ||
                               vc_base_main_cur_id;
        if vn_settlement_price is null or vn_settlement_price = 0 then
        
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure pkg_phy_physical_process Bae GMR Price',
                                                               'PHY-005',
                                                               vc_base_main_cur_code ||
                                                               ' to ' ||
                                                               vc_contract_main_cur_id || ' (' ||
                                                               to_char(cur_gmr_rows.payment_due_date,
                                                                       'dd-Mon-yyyy') || ') ',
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
        end if;
      else
        vn_settlement_price := 1.0;
      end if;
      vn_price_in_base_price_unit_id := vn_settlement_price *
                                        vn_total_contract_value;
    
      insert into gpd_gmr_price_daily
        (corporate_id,
         internal_gmr_ref_no,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         process_id,
         price_fixation_status,
         contract_base_price_unit_id,
         exch_rate_string,
         price_in_base_price_unit_id)
      values
        (cur_gmr_rows.corporate_id,
         cur_gmr_rows.internal_gmr_ref_no,
         vn_total_contract_value,
         vc_ppu_price_unit_id,
         vc_price_cur_id,
         vc_price_cur_code,
         vc_price_weight_unit,
         vc_price_weight_unit_id,
         vc_price_qty_unit,
         pc_process_id,
         vc_price_fixation_status,
         null,
         null,
         null);
    
    end loop;
    commit;
  end;

  procedure sp_calc_stock_price(pc_process_id varchar2) is
    cursor cur_price is
      select *
        from (select scm.internal_grd_ref_no          internal_grd_ref_no,
                     cigc.int_contract_item_ref_no    int_contract_item_ref_no,
                     scm.transformation_ratio         transformation_ratio,
                     cipd.price_in_base_price_unit_id contract_price,
                     cipd.contract_base_price_unit_id price_unit_id,
                     grd.qty                          stock_qty
                from scm_stock_cost_mapping         scm,
                     cigc_contract_item_gmr_cost    cigc,
                     cipd_contract_item_price_daily cipd,
                     grd_goods_record_detail        grd,
                     cs_cost_store                  cs,
                     scm_service_charge_master      scm_master
               where scm.cog_ref_no = cigc.cog_ref_no
                 and cigc.process_id = pc_process_id
                 and scm.is_deleted = 'N'
                 and cigc.is_deleted = 'N'
                 and cigc.int_contract_item_ref_no is not null
                 and scm.internal_grd_ref_no is not null
                 and cipd.internal_contract_item_ref_no =
                     cigc.int_contract_item_ref_no
                 and cipd.process_id = pc_process_id
                 and grd.internal_grd_ref_no = scm.internal_grd_ref_no
                 and grd.process_id = cigc.process_id
                 and cs.cog_ref_no = cigc.cog_ref_no
                 and cs.cost_component_id = scm_master.cost_id
                 and scm_master.cost_component_name = 'Material Cost'
                 and scm_master.cost_type = 'DIRECT_COST'
                 and cs.process_id = pc_process_id
                 and nvl(grd.inventory_status, 'NA') = 'In'
              union all
              select grd.internal_grd_ref_no           internal_grd_ref_no,
                     grd.internal_contract_item_ref_no int_contract_item_ref_no,
                     1                                 transformation_ratio,
                     cipd.price_in_base_price_unit_id  contract_price,
                     cipd.contract_base_price_unit_id  price_unit_id,
                     grd.qty                           stock_qty
                from grd_goods_record_detail        grd,
                     cipd_contract_item_price_daily cipd
               where grd.internal_contract_item_ref_no =
                     cipd.internal_contract_item_ref_no
                 and grd.process_id = pc_process_id
                 and cipd.process_id = grd.process_id
                 and nvl(grd.inventory_status, 'NA') = 'NA'
                 and grd.is_deleted = 'N'
                 and grd.status = 'Active'
              union all
              select scm.internal_dgrd_ref_no,
                     cigc.int_contract_item_ref_no,
                     scm.transformation_ratio,
                     cipd.price_in_base_price_unit_id contract_price,
                     cipd.contract_base_price_unit_id price_unit_id,
                     dgrd.net_weight stock_qty
                from scm_stock_cost_mapping         scm,
                     cigc_contract_item_gmr_cost    cigc,
                     cipd_contract_item_price_daily cipd,
                     dgrd_delivered_grd             dgrd,
                     cs_cost_store                  cs,
                     scm_service_charge_master      scm_master
               where scm.cog_ref_no = cigc.cog_ref_no
                 and cigc.process_id = pc_process_id
                 and scm.is_deleted = 'N'
                 and cigc.is_deleted = 'N'
                 and cipd.internal_contract_item_ref_no =
                     cigc.int_contract_item_ref_no
                 and cipd.process_id = pc_process_id
                 and dgrd.internal_dgrd_ref_no = scm.internal_dgrd_ref_no
                 and dgrd.process_id = pc_process_id
                 and cs.cog_ref_no = cigc.cog_ref_no
                 and cs.cost_component_id = scm_master.cost_id
                 and scm_master.cost_component_name = 'Material Cost'
                 and scm_master.cost_type = 'DIRECT_COST'
                 and cs.process_id = pc_process_id
                 and nvl(dgrd.inventory_status, 'NA') = 'Out'
              union all
              select dgrd.internal_dgrd_ref_no          internal_grd_ref_no,
                     cipd.internal_contract_item_ref_no int_contract_item_ref_no,
                     1                                  transformation_ratio,
                     cipd.price_in_base_price_unit_id   contract_price,
                     cipd.contract_base_price_unit_id   price_unit_id,
                     dgrd.net_weight                    stock_qty
                from dgrd_delivered_grd             dgrd,
                     cipd_contract_item_price_daily cipd
               where dgrd.internal_contract_item_ref_no =
                     cipd.internal_contract_item_ref_no
                 and dgrd.process_id = pc_process_id
                 and cipd.process_id = dgrd.process_id
                 and nvl(dgrd.inventory_status, 'NA') in ('NA', 'None')
                 and dgrd.status = 'Active'
              
              )
       order by internal_grd_ref_no;
  
    vc_is_data_to_populate       varchar2(1) := 'N'; -- Represents that there was arleast one record which needed price calculation, Only required when there are zero stocks in the system
    vc_current_grd_dgrd_ref_no   varchar2(15);
    vc_previous_grd_dgrd_ref_no  varchar2(15);
    vn_item_mc                   number := 0;
    vn_total_mc                  number;
    vn_avg_mc                    number := 0;
    vn_item_qty                  number;
    vn_total_item_qty            number := 0;
    vc_price_unit_id             varchar2(15);
    vc_price_unit_cur_id         varchar2(15);
    vc_price_unit_cur_code       varchar2(15);
    vc_price_unit_weight_unit_id varchar2(15);
    vc_price_unit_weight_unit    varchar2(15);
    vn_price_unit_weight         number;
  begin
    for cur_price_rows in cur_price
    loop
      vc_is_data_to_populate := 'Y';
      if cur_price_rows.internal_grd_ref_no <> vc_current_grd_dgrd_ref_no or
         vc_current_grd_dgrd_ref_no is null then
        vc_current_grd_dgrd_ref_no := cur_price_rows.internal_grd_ref_no;
        vc_price_unit_id           := cur_price_rows.price_unit_id;
      
        select cm.cur_id,
               cm.cur_code,
               qum.qty_unit_id,
               qum.qty_unit,
               pum.weight
          into vc_price_unit_cur_id,
               vc_price_unit_cur_code,
               vc_price_unit_weight_unit_id,
               vc_price_unit_weight_unit,
               vn_price_unit_weight
          from ppu_product_price_units  ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum,
               pum_price_unit_master    pum
         where ppu.internal_price_unit_id = vc_price_unit_id
           and ppu.price_unit_id = pum.price_unit_id
           and pum.is_active = 'Y'
           and pum.is_deleted = 'N'
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id;
      
      end if;
      vn_item_qty := cur_price_rows.stock_qty;
      vn_item_mc  := cur_price_rows.contract_price * vn_item_qty *
                     cur_price_rows.transformation_ratio;
      --
      -- Calculate the Price for the Previous GRD Since the GRD has changed
      --
      if vc_current_grd_dgrd_ref_no <> vc_previous_grd_dgrd_ref_no then
        --
        -- Calculate the Average Materail Cost
        --
        vn_avg_mc := vn_total_mc / vn_total_item_qty;
        insert into spd_stock_price_daily
          (process_id,
           internal_drg_dgrd_ref_no,
           stock_price,
           price_unit_id,
           price_unit_cur_id,
           price_unit_cur_code,
           price_unit_weight_unit_id,
           price_unit_weight_unit,
           price_unit_weight)
        values
          (pc_process_id,
           vc_previous_grd_dgrd_ref_no,
           vn_avg_mc,
           vc_price_unit_id,
           vc_price_unit_cur_id,
           vc_price_unit_cur_code,
           vc_price_unit_weight_unit_id,
           vc_price_unit_weight_unit,
           vn_price_unit_weight);
        --
        -- New Stock came, Renitialize the Price and Qty
        --
        vn_total_mc       := vn_item_mc;
        vn_total_item_qty := vn_item_qty;
      else
        --
        -- Old Stock with Different Item Or First Stock in the query
        --
        if vn_total_mc is null then
          -- First Stock in the query
          vn_total_mc       := vn_item_mc;
          vn_total_item_qty := vn_item_qty;
        else
          -- Old Stock with Different Item
          vn_total_mc       := vn_total_mc + vn_item_mc;
          vn_total_item_qty := vn_total_item_qty + vn_item_qty;
        end if;
      end if;
      vc_previous_grd_dgrd_ref_no := cur_price_rows.internal_grd_ref_no;
    end loop;
    --
    -- Need to insert data for the last record outside of the loop
    -- 
    if vc_is_data_to_populate = 'Y' then
      vn_avg_mc := vn_total_mc / vn_total_item_qty;
      insert into spd_stock_price_daily
        (process_id,
         internal_drg_dgrd_ref_no,
         stock_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         price_unit_weight)
      values
        (pc_process_id,
         vc_previous_grd_dgrd_ref_no,
         vn_avg_mc,
         vc_price_unit_id,
         vc_price_unit_cur_id,
         vc_price_unit_cur_code,
         vc_price_unit_weight_unit_id,
         vc_price_unit_weight_unit,
         vn_price_unit_weight);
    end if;
    commit;
  end;
  procedure sp_calc_conc_gmr_price(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pc_dbd_id       varchar2,
                                   pc_process      varchar2) is
  
    cursor cur_gmr is
      select gmr.corporate_id,
             gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             gmr.current_qty,
             gmr.qty_unit_id,
             grd.product_id,
             pd_trade_date eod_trade_date,
             tt.instrument_id,
             tt.instrument_name,
             tt.price_source_id,
             tt.price_source_name,
             tt.available_price_id,
             tt.available_price_name,
             tt.price_unit_name,
             tt.ppu_price_unit_id,
             tt.price_unit_id,
             tt.delivery_calender_id,
             tt.is_daily_cal_applicable,
             tt.is_monthly_cal_applicable,
             spq.element_id,
             spq.payable_qty,
             spq.qty_unit_id payable_qty_unit_id
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.quality_id,
                     grd.product_id
                from grd_goods_record_detail grd
               where grd.process_id = pc_process_id
                 and grd.status = 'Active'
                 and grd.tolling_stock_type in
                     ('None Tolling', 'Clone Stock')
                 and grd.is_deleted = 'N'
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             v_gmr_stockpayable_qty spq,
             (select qat.process_id,
                     qat.internal_gmr_ref_no,
                     qat.instrument_id,
                     qat.element_id,
                     dim.instrument_name,
                     ps.price_source_id,
                     ps.price_source_name,
                     apm.available_price_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     vdip.ppu_price_unit_id,
                     div.price_unit_id,
                     dim.delivery_calender_id,
                     pdc.is_daily_cal_applicable,
                     pdc.is_monthly_cal_applicable
                from v_gmr_exchange_detail        qat,
                     dim_der_instrument_master    dim,
                     div_der_instrument_valuation div,
                     ps_price_source              ps,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     v_der_instrument_price_unit  vdip,
                     pdc_prompt_delivery_calendar pdc
               where qat.instrument_id = dim.instrument_id
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.price_source_id = ps.price_source_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id
                 and dim.instrument_id = vdip.instrument_id
                 and dim.delivery_calender_id =
                     pdc.prompt_delivery_calendar_id) tt
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdtm.product_type_name = 'Composite'
         and spq.process_id = pc_process_id
         and tt.element_id = spq.element_id
         and tt.internal_gmr_ref_no = spq.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = tt.internal_gmr_ref_no(+)
         and gmr.process_id = tt.process_id(+)
         and gmr.is_deleted = 'N'
         and spq.payable_qty > 0
      union all
      select gmr.corporate_id,
             gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             gmr.current_qty,
             gmr.qty_unit_id,
             grd.product_id,
             pd_trade_date eod_trade_date,
             tt.instrument_id,
             tt.instrument_name,
             tt.price_source_id,
             tt.price_source_name,
             tt.available_price_id,
             tt.available_price_name,
             tt.price_unit_name,
             tt.ppu_price_unit_id,
             tt.price_unit_id,
             tt.delivery_calender_id,
             tt.is_daily_cal_applicable,
             tt.is_monthly_cal_applicable,
             spq.element_id,
             spq.payable_qty,
             spq.qty_unit_id payable_qty_unit_id
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.quality_id,
                     grd.product_id
                from dgrd_delivered_grd grd
               where grd.process_id = pc_process_id
                 and grd.status = 'Active'
                 and grd.tolling_stock_type in
                     ('None Tolling', 'Clone Stock')
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             v_gmr_stockpayable_qty spq,
             (select qat.process_id,
                     qat.internal_gmr_ref_no,
                     qat.instrument_id,
                     qat.element_id,
                     dim.instrument_name,
                     ps.price_source_id,
                     ps.price_source_name,
                     apm.available_price_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     vdip.ppu_price_unit_id,
                     div.price_unit_id,
                     dim.delivery_calender_id,
                     pdc.is_daily_cal_applicable,
                     pdc.is_monthly_cal_applicable
                from v_gmr_exchange_detail        qat,
                     dim_der_instrument_master    dim,
                     div_der_instrument_valuation div,
                     ps_price_source              ps,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     v_der_instrument_price_unit  vdip,
                     pdc_prompt_delivery_calendar pdc
               where qat.instrument_id = dim.instrument_id
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.price_source_id = ps.price_source_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id
                 and dim.instrument_id = vdip.instrument_id
                 and dim.delivery_calender_id =
                     pdc.prompt_delivery_calendar_id) tt
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdm.product_type_id = 'Composite'
         and spq.process_id = pc_process_id
         and tt.element_id = spq.element_id
         and tt.internal_gmr_ref_no = spq.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = tt.internal_gmr_ref_no(+)
         and gmr.process_id = tt.process_id(+)
         and gmr.is_deleted = 'N'
         and spq.payable_qty > 0;
  
    cursor cur_gmr_ele(pc_internal_gmr_ref_no varchar2, pc_element_id varchar2) is
      select pofh.internal_gmr_ref_no,
             pofh.pofh_id,
             pofh.qp_start_date,
             pofh.qp_end_date,
             pofh.qty_to_be_fixed,
             pcbpd.element_id,
             pcbpd.pcbpd_id,
             pcbpd.qty_to_be_priced,
             pocd.is_any_day_pricing,
             pcbpd.price_basis,
             pcbph.price_description,
             pofh.no_of_prompt_days,
             pofh.final_price,
             pofh.avg_price_in_price_in_cur,
             pocd.pay_in_price_unit_id,
             pdm.product_id,
             pdm.base_quantity_unit base_qty_unit_id
        from pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph,
             aml_attribute_master_list      aml,
             pdm_productmaster              pdm
       where pofh.internal_gmr_ref_no = pc_internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.element_id = pc_element_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pofh.qty_to_be_fixed <> 0
         and pofh.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y'
         and pcbpd.element_id = aml.attribute_id
         and aml.underlying_product_id = pdm.product_id;
  
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vd_qp_start_date               date;
    vd_qp_end_date                 date;
    vc_period                      varchar2(50);
    vd_3rd_wed_of_qp               date;
    workings_days                  number;
    vd_quotes_date                 date;
    vc_before_price_dr_id          varchar2(15);
    vn_before_qp_price             number;
    vc_before_qp_price_unit_id     varchar2(15);
    vn_total_contract_value        number;
    vd_dur_qp_start_date           date;
    vd_dur_qp_end_date             date;
    vn_during_total_set_price      number;
    vn_count_set_qp                number;
    vc_during_price_dr_id          varchar2(15);
    vn_during_val_price            number;
    vc_during_val_price_unit_id    varchar2(15);
    vn_during_total_val_price      number;
    vn_count_val_qp                number;
    vc_holiday                     char(1);
    vn_during_qp_price             number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vc_price_weight_unit           number;
    vc_price_weight_unit_id        varchar2(15);
    vc_price_qty_unit              varchar2(15);
    vc_price_fixation_status       varchar2(50);
    vn_market_flag                 char(1);
    vn_any_day_price_fix_qty_amt   number;
    vn_any_day_price_ufix_qty_amt  number;
    vn_any_day_unfixed_qty         number;
    vn_any_day_fixed_qty           number;
    vc_price_unit_id               varchar2(15);
    vc_ppu_price_unit_id           varchar2(15);
    vc_price_name                  varchar2(100);
    vc_pcbpd_id                    varchar2(15);
    vc_prompt_month                varchar2(15);
    vc_prompt_year                 number;
    vc_prompt_date                 date;
    vn_qty_to_be_priced            number;
    vn_total_quantity              number;
    vn_average_price               number;
    vc_price_basis                 varchar2(15);
    vc_price_description           varchar2(4000);
    vc_price_main_cur_id           varchar2(15);
    vc_price_main_cur_code         varchar2(15);
    vn_price_main_cur_factor       number;
    vc_contract_base_price_unit_id varchar2(15);
    vn_fw_exch_rate_price_to_base  number;
    vc_exch_rate_string            varchar2(100);
    vn_price_in_base_price_unit_id number;
    vc_base_main_cur_id            varchar2(15);
    vc_base_main_cur_code          varchar2(15);
    vn_forward_points              number;
    vc_gmr_ele_product_id          varchar2(15);
    vc_gmr_ele_base_qty_unit_id    varchar2(15);
    vd_valid_quote_date            date;
  begin
    select cm.cur_id,
           cm.cur_code
      into vc_base_main_cur_id,
           vc_base_main_cur_code
      from ak_corporate       akc,
           cm_currency_master cm
     where akc.corporate_id = pc_corporate_id
       and akc.base_cur_id = cm.cur_id;
  
    for cur_gmr_rows in cur_gmr
    loop
      vn_total_contract_value := 0;
      for cur_gmr_ele_rows in cur_gmr_ele(cur_gmr_rows.internal_gmr_ref_no,
                                          cur_gmr_rows.element_id)
      loop
      
        vc_gmr_ele_product_id       := cur_gmr_ele_rows.product_id;
        vc_gmr_ele_base_qty_unit_id := cur_gmr_ele_rows.base_qty_unit_id;
      
        vc_price_basis                := cur_gmr_ele_rows.price_basis;
        vc_price_description          := cur_gmr_ele_rows.price_description;
        vc_price_fixation_status      := null;
        vn_market_flag                := null;
        vn_any_day_price_fix_qty_amt  := 0;
        vn_any_day_price_ufix_qty_amt := 0;
        vn_any_day_unfixed_qty        := 0;
        vn_any_day_fixed_qty          := 0;
        vc_pcbpd_id                   := cur_gmr_ele_rows.pcbpd_id;
        vc_price_unit_id              := null;
        vc_ppu_price_unit_id          := null;
        vd_qp_start_date              := cur_gmr_ele_rows.qp_start_date;
        vd_qp_end_date                := cur_gmr_ele_rows.qp_end_date;
      
        if cur_gmr_rows.eod_trade_date >= vd_qp_start_date and
           cur_gmr_rows.eod_trade_date <= vd_qp_end_date then
          vc_period := 'During QP';
        elsif cur_gmr_rows.eod_trade_date < vd_qp_start_date and
              cur_gmr_rows.eod_trade_date < vd_qp_end_date then
          vc_period := 'Before QP';
        elsif cur_gmr_rows.eod_trade_date > vd_qp_start_date and
              cur_gmr_rows.eod_trade_date > vd_qp_end_date then
          vc_period := 'After QP';
        end if;
      
        begin
          select ppu.product_price_unit_id,
                 ppu.price_unit_id,
                 ppu.price_unit_name
            into vc_ppu_price_unit_id,
                 vc_price_unit_id,
                 vc_price_name
            from ppfh_phy_price_formula_header ppfh,
                 v_ppu_pum                     ppu
           where ppfh.pcbpd_id = vc_pcbpd_id
             and ppfh.process_id = pc_process_id
             and ppfh.price_unit_id = ppu.product_price_unit_id
             and rownum <= 1;
        exception
          when no_data_found then
            vc_ppu_price_unit_id := cur_gmr_rows.ppu_price_unit_id;
            vc_price_unit_id     := cur_gmr_rows.price_unit_id;
            vc_price_name        := cur_gmr_rows.price_unit_name;
          when others then
            vc_ppu_price_unit_id := cur_gmr_rows.ppu_price_unit_id;
            vc_price_unit_id     := cur_gmr_rows.price_unit_id;
            vc_price_name        := cur_gmr_rows.price_unit_name;
        end;
      
        if vc_period = 'Before QP' then
          vc_price_fixation_status := 'Un-priced';
        
          if cur_gmr_rows.is_daily_cal_applicable = 'Y' then
          
            vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                  'Wed',
                                                                  3);
          
            while true
            loop
              if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                     vd_3rd_wed_of_qp) then
                vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
              else
                exit;
              end if;
            end loop;
          
            --- get 3rd wednesday  before QP period 
            -- Get the quotation date = Trade Date +2 working Days
            if vd_3rd_wed_of_qp <= pd_trade_date then
              workings_days  := 0;
              vd_quotes_date := pd_trade_date + 1;
              while workings_days <> 2
              loop
                if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                       vd_quotes_date) then
                  vd_quotes_date := vd_quotes_date + 1;
                else
                  workings_days := workings_days + 1;
                  if workings_days <> 2 then
                    vd_quotes_date := vd_quotes_date + 1;
                  end if;
                end if;
              end loop;
              vd_3rd_wed_of_qp := vd_quotes_date;
            end if;
            ---- get the dr_id             
            begin
              select drm.dr_id
                into vc_before_price_dr_id
                from drm_derivative_master drm
               where drm.instrument_id = cur_gmr_rows.instrument_id
                 and drm.prompt_date = vd_3rd_wed_of_qp
                 and rownum <= 1
                 and drm.price_point_id is null
                 and drm.is_deleted = 'N';
            exception
              when no_data_found then
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_conc_gmr_price',
                                                                     'PHY-002',
                                                                     'DR_ID missing for ' ||
                                                                     cur_gmr_rows.instrument_name ||
                                                                     ',Price Source:' ||
                                                                     cur_gmr_rows.price_source_name ||
                                                                     ' GMR No: ' ||
                                                                     cur_gmr_rows.gmr_ref_no ||
                                                                     ',Price Unit:' ||
                                                                     vc_price_name || ',' ||
                                                                     cur_gmr_rows.available_price_name ||
                                                                     ' Price,Prompt Date:' ||
                                                                     vd_3rd_wed_of_qp,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
              
            end;
          
          elsif cur_gmr_rows.is_daily_cal_applicable = 'N' and
                cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
          
            vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                                vd_qp_end_date);
            vc_prompt_month := to_char(vc_prompt_date, 'Mon');
            vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
          
            ---- get the dr_id             
            begin
              select drm.dr_id
                into vc_before_price_dr_id
                from drm_derivative_master drm
               where drm.instrument_id = cur_gmr_rows.instrument_id
                 and drm.period_month = vc_prompt_month
                 and drm.period_year = vc_prompt_year
                 and rownum <= 1
                 and drm.price_point_id is null
                 and drm.is_deleted = 'N';
            exception
              when no_data_found then
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_conc_gmr_price',
                                                                     'PHY-002',
                                                                     'DR_ID missing for ' ||
                                                                     cur_gmr_rows.instrument_name ||
                                                                     ',Price Source:' ||
                                                                     cur_gmr_rows.price_source_name ||
                                                                     ' Contract Ref No: ' ||
                                                                     cur_gmr_rows.gmr_ref_no ||
                                                                     ',Price Unit:' ||
                                                                     vc_price_name || ',' ||
                                                                     cur_gmr_rows.available_price_name ||
                                                                     ' Price,Prompt Date:' ||
                                                                     vc_prompt_month || ' ' ||
                                                                     vc_prompt_year,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
              
            end;
          
          end if;
          --get the price              
          begin
            select dqd.price,
                   dqd.price_unit_id
              into vn_before_qp_price,
                   vc_before_qp_price_unit_id
              from dq_derivative_quotes        dq,
                   dqd_derivative_quote_detail dqd,
                   cdim_corporate_dim          cdim
             where dq.dq_id = dqd.dq_id
               and dqd.dr_id = vc_before_price_dr_id
               and dq.process_id = pc_process_id
               and dq.instrument_id = cur_gmr_rows.instrument_id
               and dq.process_id = dqd.process_id
               and dqd.available_price_id = cur_gmr_rows.available_price_id
               and dq.price_source_id = cur_gmr_rows.price_source_id
               and dqd.price_unit_id = vc_price_unit_id
               and dq.trade_date = cdim.valid_quote_date
               and dq.is_deleted = 'N'
               and dqd.is_deleted = 'N'
               and cdim.corporate_id = pc_corporate_id
               and cdim.instrument_id = dq.instrument_id;
          exception
            when no_data_found then
              select cdim.valid_quote_date
                into vd_valid_quote_date
                from cdim_corporate_dim cdim
               where cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = cur_gmr_rows.instrument_id;
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_conc_gmr_price','PHY-002','Price missing for ' || cur_gmr_rows.instrument_name ||',Price Source:' || cur_gmr_rows.price_source_name ||' GMR No: ' || cur_gmr_rows.gmr_ref_no ||',Price Unit:' || vc_price_name ||',' || cur_gmr_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_gmr_rows.is_daily_cal_applicable = 'N' and cur_gmr_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
          vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_gmr_rows.product_id,
                                                                          cur_gmr_rows.payable_qty_unit_id,
                                                                          cur_gmr_rows.qty_unit_id,
                                                                          cur_gmr_rows.payable_qty);
          vn_qty_to_be_priced     := cur_gmr_ele_rows.qty_to_be_priced;
          vn_total_contract_value := vn_total_contract_value +
                                     vn_total_quantity *
                                     (vn_qty_to_be_priced / 100) *
                                     vn_before_qp_price;
        
          --- vn_total_contract_value := vn_total_contract_value +vn_before_qp_price;                                   
          --  vc_price_unit_id        := cur_gmr_rows.ppu_price_unit_id;
        elsif vc_period = 'During QP' or vc_period = 'After QP' then
          vd_dur_qp_start_date      := vd_qp_start_date;
          vd_dur_qp_end_date        := vd_qp_end_date;
          vn_during_total_set_price := 0;
          vn_count_set_qp           := 0;
          for cc in (select pfd.user_price,
                            pfd.as_of_date,
                            pfd.qty_fixed,
                            pofh.final_price,
                            pocd.is_any_day_pricing
                       from poch_price_opt_call_off_header poch,
                            pocd_price_option_calloff_dtls pocd,
                            pofh_price_opt_fixation_header pofh,
                            pfd_price_fixation_details     pfd
                      where poch.poch_id = pocd.poch_id
                        and pocd.pocd_id = pofh.pocd_id
                        and pofh.pofh_id = cur_gmr_ele_rows.pofh_id
                        and pofh.pofh_id = pfd.pofh_id
                        and pfd.as_of_date >= vd_dur_qp_start_date
                        and pfd.as_of_date <= pd_trade_date
                        and pofh.qty_to_be_fixed <> 0
                        and poch.is_active = 'Y'
                        and pocd.is_active = 'Y'
                        and pofh.is_active = 'Y'
                        and pfd.is_active = 'Y')
          loop
            vn_during_total_set_price    := vn_during_total_set_price +
                                            cc.user_price;
            vn_count_set_qp              := vn_count_set_qp + 1;
            vn_any_day_price_fix_qty_amt := vn_any_day_price_fix_qty_amt +
                                            (cc.user_price * cc.qty_fixed);
            if cc.final_price is not null then
              vc_price_fixation_status := 'Finalized';
            end if;
            vn_any_day_fixed_qty := vn_any_day_fixed_qty + cc.qty_fixed;
          end loop;
          if vn_count_set_qp <> 0 then
            if vc_price_fixation_status <> 'Finalized' then
              vc_price_fixation_status := 'Partially Priced';
            end if;
          else
            vc_price_fixation_status := 'Un-priced';
          
          end if;
          if cur_gmr_ele_rows.is_any_day_pricing = 'Y' then
            vn_market_flag := 'N';
          else
            vn_market_flag := 'Y';
          end if;
        
          if cur_gmr_rows.is_daily_cal_applicable = 'Y' then
            -- get the third wednes day
            vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_dur_qp_end_date,
                                                                  'Wed',
                                                                  3);
            while true
            loop
              if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                     vd_3rd_wed_of_qp) then
                vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
              else
                exit;
              end if;
            end loop;
          
            --- get 3rd wednesday  before QP period 
            -- Get the quotation date = Trade Date +2 working Days
            if (vd_3rd_wed_of_qp <= pd_trade_date and
               vc_period = 'During QP') or vc_period = 'After QP' then
              workings_days  := 0;
              vd_quotes_date := pd_trade_date + 1;
              while workings_days <> 2
              loop
                if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                       vd_quotes_date) then
                  vd_quotes_date := vd_quotes_date + 1;
                else
                  workings_days := workings_days + 1;
                  if workings_days <> 2 then
                    vd_quotes_date := vd_quotes_date + 1;
                  end if;
                end if;
              end loop;
              vd_3rd_wed_of_qp := vd_quotes_date;
            end if;
            --Get the DR-id
            begin
              select drm.dr_id
                into vc_during_price_dr_id
                from drm_derivative_master drm
               where drm.instrument_id = cur_gmr_rows.instrument_id
                 and drm.prompt_date = vd_3rd_wed_of_qp
                 and rownum <= 1
                 and drm.price_point_id is null
                 and drm.is_deleted = 'N';
            exception
              when no_data_found then
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_conc_gmr_price',
                                                                     'PHY-002',
                                                                     'DR-ID missing for ' ||
                                                                     cur_gmr_rows.instrument_name ||
                                                                     ',Price Source:' ||
                                                                     cur_gmr_rows.price_source_name ||
                                                                     ' GMR NO: ' ||
                                                                     cur_gmr_rows.gmr_ref_no ||
                                                                     ',Price Unit:' ||
                                                                     vc_price_name || ',' ||
                                                                     cur_gmr_rows.available_price_name ||
                                                                     ' Price,Prompt Date:' ||
                                                                     vd_3rd_wed_of_qp,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
            end;
          elsif cur_gmr_rows.is_daily_cal_applicable = 'N' and
                cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
            if vc_period = 'During QP' then
              vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                                 vd_qp_end_date);
            else
              vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                                 pd_trade_date);
            
            end if;
            vc_prompt_month := to_char(vc_prompt_date, 'Mon');
            vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
          
            ---- get the dr_id             
            begin
              select drm.dr_id
                into vc_during_price_dr_id
                from drm_derivative_master drm
               where drm.instrument_id = cur_gmr_rows.instrument_id
                 and drm.period_month = vc_prompt_month
                 and drm.period_year = vc_prompt_year
                 and rownum <= 1
                 and drm.price_point_id is null
                 and drm.is_deleted = 'N';
            exception
              when no_data_found then
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_conc_gmr_price',
                                                                     'PHY-002',
                                                                     'DR_ID missing for ' ||
                                                                     cur_gmr_rows.instrument_name ||
                                                                     ',Price Source:' ||
                                                                     cur_gmr_rows.price_source_name ||
                                                                     ' Contract Ref No: ' ||
                                                                     cur_gmr_rows.gmr_ref_no ||
                                                                     ',Price Unit:' ||
                                                                     vc_price_name || ',' ||
                                                                     cur_gmr_rows.available_price_name ||
                                                                     ' Price,Prompt Date:' ||
                                                                     vc_prompt_month || ' ' ||
                                                                     vc_prompt_year,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
              
            end;
          
          end if;
          --Get the price for the price
          begin
            select dqd.price,
                   dqd.price_unit_id
              into vn_during_val_price,
                   vc_during_val_price_unit_id
              from dq_derivative_quotes        dq,
                   dqd_derivative_quote_detail dqd,
                   cdim_corporate_dim          cdim
             where dq.dq_id = dqd.dq_id
               and dqd.dr_id = vc_during_price_dr_id
               and dq.instrument_id = cur_gmr_rows.instrument_id
               and dq.dbd_id = dqd.dbd_id
               and dq.dbd_id = pc_dbd_id
               and dqd.available_price_id = cur_gmr_rows.available_price_id
               and dq.price_source_id = cur_gmr_rows.price_source_id
               and dq.trade_date = cdim.valid_quote_date
               and dqd.price_unit_id = vc_price_unit_id
               and dq.is_deleted = 'N'
               and dqd.is_deleted = 'N'
               and cdim.corporate_id = pc_corporate_id
               and cdim.instrument_id = dq.instrument_id;
          exception
            when no_data_found then
              select cdim.valid_quote_date
                into vd_valid_quote_date
                from cdim_corporate_dim cdim
               where cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = cur_gmr_rows.instrument_id;
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_conc_gmr_price','PHY-002','Price missing for ' || cur_gmr_rows.instrument_name ||',Price Source:' || cur_gmr_rows.price_source_name ||' GMR No: ' || cur_gmr_rows.gmr_ref_no ||',Price Unit:' || vc_price_name ||',' || cur_gmr_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_gmr_rows.is_daily_cal_applicable = 'N' and cur_gmr_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
        
          vn_during_total_val_price := 0;
          vn_count_val_qp           := 0;
          vd_dur_qp_start_date      := pd_trade_date + 1;
          if vn_market_flag = 'N' then
            vn_during_total_val_price := vn_during_total_val_price +
                                         vn_during_val_price;
          
            vn_any_day_unfixed_qty        := cur_gmr_ele_rows.qty_to_be_fixed -
                                             vn_any_day_fixed_qty;
            vn_count_val_qp               := vn_count_val_qp + 1;
            vn_any_day_price_ufix_qty_amt := (vn_any_day_unfixed_qty *
                                             vn_during_total_val_price);
          
          else
            while vd_dur_qp_start_date <= vd_dur_qp_end_date
            loop
              ---- finding holidays       
              if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                     vd_dur_qp_start_date) then
                vc_holiday := 'Y';
              else
                vc_holiday := 'N';
              end if;
            
              if vc_holiday = 'N' then
                vn_during_total_val_price := vn_during_total_val_price +
                                             vn_during_val_price;
                vn_count_val_qp           := vn_count_val_qp + 1;
              end if;
              vd_dur_qp_start_date := vd_dur_qp_start_date + 1;
            end loop;
          end if;
          if (vn_count_val_qp + vn_count_set_qp) <> 0 then
          
            if vn_market_flag = 'N' then
              vn_during_qp_price := (vn_any_day_price_fix_qty_amt +
                                    vn_any_day_price_ufix_qty_amt) /
                                    cur_gmr_ele_rows.qty_to_be_fixed;
            else
              vn_during_qp_price := (vn_during_total_set_price +
                                    vn_during_total_val_price) /
                                    (vn_count_set_qp + vn_count_val_qp);
            end if;
            vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_gmr_rows.product_id,
                                                                            cur_gmr_rows.payable_qty_unit_id,
                                                                            cur_gmr_rows.qty_unit_id,
                                                                            cur_gmr_rows.payable_qty);
            vn_qty_to_be_priced     := cur_gmr_ele_rows.qty_to_be_priced;
            vn_total_contract_value := vn_total_contract_value +
                                       vn_total_quantity *
                                       (vn_qty_to_be_priced / 100) *
                                       vn_during_qp_price;
          
            -- vn_total_contract_value := vn_total_contract_value +vn_during_qp_price;
          else
            vn_total_contract_value := 0;
          end if;
        
        end if;
      end loop;
      vn_average_price := round(vn_total_contract_value / vn_total_quantity,
                                3);
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vc_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_ppu_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      
        pkg_general.sp_get_base_cur_detail(vc_price_cur_id,
                                           vc_price_main_cur_id,
                                           vc_price_main_cur_code,
                                           vn_price_main_cur_factor);
      
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vc_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
    
      -- Get the contract base price Unit id
      begin
        select ppu.product_price_unit_id
          into vc_contract_base_price_unit_id
          from v_ppu_pum ppu
         where ppu.weight_unit_id = vc_gmr_ele_base_qty_unit_id
           and ppu.product_id = vc_gmr_ele_product_id
           and ppu.cur_id = vc_base_main_cur_id;
      exception
        when no_data_found then
          vc_contract_base_price_unit_id := null;
      end;
      --
      -- Convert the final price into base price unit ID
      --
      --
      -- Get the Forward Exchange Rate from Price Unit ID to Base Price Unit ID
      --
      if vc_price_cur_id <> vc_base_main_cur_id then
        pkg_general.sp_forward_cur_exchange_new(pc_corporate_id,
                                                pd_trade_date,
                                                pd_trade_date,
                                                vc_price_cur_id,
                                                vc_base_main_cur_id,
                                                30,
                                                vn_fw_exch_rate_price_to_base,
                                                vn_forward_points);
      
        if vc_exch_rate_string is null then
          vc_exch_rate_string := '1 ' || vc_price_cur_code || '=' ||
                                 vn_fw_exch_rate_price_to_base || ' ' ||
                                 vc_base_main_cur_code;
        else
          vc_exch_rate_string := vc_exch_rate_string || ',' || '1 ' ||
                                 vc_price_cur_code || '=' ||
                                 vn_fw_exch_rate_price_to_base || ' ' ||
                                 vc_base_main_cur_code;
        end if;
      else
        vn_fw_exch_rate_price_to_base := 1.0;
      end if;
      vn_price_in_base_price_unit_id := vn_fw_exch_rate_price_to_base *
                                        vn_price_main_cur_factor *
                                        pkg_general.f_get_converted_quantity(vc_gmr_ele_product_id,
                                                                             vc_price_weight_unit_id,
                                                                             vc_gmr_ele_base_qty_unit_id,
                                                                             1) *
                                        vn_average_price;
    
      insert into gpd_gmr_conc_price_daily
        (corporate_id,
         internal_gmr_ref_no,
         element_id,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         process_id,
         price_fixation_status,
         price_basis,
         price_fixation_details,
         price_description,
         exch_rate_string,
         price_in_base_price_unit_id)
      values
        (cur_gmr_rows.corporate_id,
         cur_gmr_rows.internal_gmr_ref_no,
         cur_gmr_rows.element_id,
         vn_average_price,
         vc_ppu_price_unit_id,
         vc_price_cur_id,
         vc_price_cur_code,
         vc_price_weight_unit,
         vc_price_weight_unit_id,
         vc_price_qty_unit,
         pc_process_id,
         vc_price_fixation_status,
         vc_price_basis,
         'Not Applicable',
         vc_price_description,
         vc_exch_rate_string,
         vn_price_in_base_price_unit_id);
      vc_exch_rate_string := null;
    end loop;
    commit;
  end;
  procedure sp_calc_contract_conc_price(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_dbd_id       varchar2,
                                        pc_process      varchar2) is
  
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_pcdi is
      select pcdi.pcdi_id,
             pcdi.internal_contract_ref_no,
             ceqs.element_id,
             ceqs.payable_qty,
             ceqs.payable_qty_unit_id,
             null assay_qty,
             null assay_qty_unit_id,
             pcdi.delivery_item_no,
             pcdi.delivery_period_type,
             pcdi.delivery_from_month,
             pcdi.delivery_from_year,
             pcdi.delivery_to_month,
             pcdi.delivery_to_year,
             pcdi.delivery_from_date,
             pcdi.delivery_to_date,
             pd_trade_date eod_trade_date,
             pcdi.basis_type,
             nvl(pcdi.transit_days, 0) transit_days,
             pcdi.qp_declaration_date,
             pcdi.is_price_optionality_present,
             pcdi.is_phy_optionality_present,
             pci.internal_contract_item_ref_no,
             pcm.contract_ref_no,
             (case
               when nvl(pcdi.payment_due_date, pd_trade_date) <
                    pd_trade_date then
                pd_trade_date
               else
                nvl(pcdi.payment_due_date, pd_trade_date)
             end) payment_due_date,
             pci.item_qty,
             pci.item_qty_unit_id,
             pcm.invoice_currency_id,
             pcpd.qty_unit_id,
             pcpd.product_id,
             aml.underlying_product_id,
             tt.instrument_id,
             akc.base_cur_id,
             akc.base_currency_name,
             tt.instrument_name,
             tt.price_source_id,
             tt.price_source_name,
             tt.available_price_id,
             tt.available_price_name,
             tt.price_unit_name,
             tt.ppu_price_unit_id,
             tt.price_unit_id,
             tt.delivery_calender_id,
             tt.is_daily_cal_applicable,
             tt.is_monthly_cal_applicable
      
        from pcdi_pc_delivery_item pcdi,
             --ceqs_contract_ele_qty_status ceqs,
             cpq_contract_payable_qty ceqs,
             pci_physical_contract_item pci,
             pcm_physical_contract_main pcm,
             ak_corporate akc,
             pcpd_pc_product_definition pcpd,
             pcpq_pc_product_quality pcpq,
             aml_attribute_master_list aml,
             dipch_di_payablecontent_header dipch,
             pcpch_pc_payble_content_header pcpch,
             (select qat.internal_contract_item_ref_no,
                     qat.element_id,
                     qat.instrument_id,
                     dim.instrument_name,
                     ps.price_source_id,
                     ps.price_source_name,
                     apm.available_price_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     vdip.ppu_price_unit_id,
                     div.price_unit_id,
                     dim.delivery_calender_id,
                     pdc.is_daily_cal_applicable,
                     pdc.is_monthly_cal_applicable
                from ced_contract_exchange_detail qat,
                     dim_der_instrument_master    dim,
                     div_der_instrument_valuation div,
                     ps_price_source              ps,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     v_der_instrument_price_unit  vdip,
                     pdc_prompt_delivery_calendar pdc
               where qat.instrument_id = dim.instrument_id
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.price_source_id = ps.price_source_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id
                 and dim.instrument_id = vdip.instrument_id
                 and dim.delivery_calender_id =
                     pdc.prompt_delivery_calendar_id
                 and qat.corporate_id = pc_corporate_id) tt
       where pcdi.pcdi_id = pci.pcdi_id
         and pci.internal_contract_item_ref_no =
             ceqs.internal_contract_item_ref_no
         and pcdi.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcdi.pcdi_id = dipch.pcdi_id
         and dipch.pcpch_id = pcpch.pcpch_id
         and pcpch.element_id = aml.attribute_id
         and nvl(pcpch.payable_type, 'Payable') = 'Payable'
         and pci.pcpq_id = pcpq.pcpq_id
         and pcm.corporate_id = akc.corporate_id
         and pcm.contract_status = 'In Position'
         and pcm.contract_type = 'CONCENTRATES'
         and pcpd.input_output = 'Input'
            --and pcpd.product_id = qat.conc_product_id
            --and pcpq.quality_template_id = qat.conc_quality_id
         and ceqs.element_id = aml.attribute_id
            --and ceqs.element_id = qat.attribute_id
            --and qat.corporate_id = pc_corporate_id
         and ceqs.internal_contract_item_ref_no =
             tt.internal_contract_item_ref_no(+)
         and ceqs.element_id = tt.element_id(+)
         and pci.item_qty > 0
         and ceqs.payable_qty > 0
         and pcdi.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcm.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and pcpq.process_id = pc_process_id
            -- and ceqs.process_id = pc_process_id
         and dipch.process_id = pc_process_id
         and pcpch.process_id = pc_process_id
         and pcpd.is_active = 'Y'
         and pcpq.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcm.is_active = 'Y'
         and dipch.is_active = 'Y'
         and pcpch.is_active = 'Y';
  
    cursor cur_called_off(pc_pcdi_id varchar2, pc_element_id varchar2) is
      select poch.poch_id,
             poch.internal_action_ref_no,
             pocd.pricing_formula_id,
             pcbpd.pcbpd_id,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from poch_price_opt_call_off_header poch,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph
       where poch.pcdi_id = pc_pcdi_id
         and pcbpd.element_id = pc_element_id
         and poch.poch_id = pocd.poch_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and poch.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    cursor cur_not_called_off(pc_pcdi_id varchar2, pc_element_id varchar2, pc_int_cont_item_ref_no varchar2) is
      select pcbpd.pcbpd_id,
             pcbph.internal_contract_ref_no,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from pci_physical_contract_item pci,
             pcipf_pci_pricing_formula  pcipf,
             pcbph_pc_base_price_header pcbph,
             pcbpd_pc_base_price_detail pcbpd
       where pci.internal_contract_item_ref_no =
             pcipf.internal_contract_item_ref_no
         and pcipf.pcbph_id = pcbph.pcbph_id
         and pcbph.pcbph_id = pcbpd.pcbph_id
         and pci.pcdi_id = pc_pcdi_id
         and pcbpd.element_id = pc_element_id
         and pci.internal_contract_item_ref_no = pc_int_cont_item_ref_no
         and pci.process_id = pc_process_id
         and pcipf.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbpd.process_id = pc_process_id
         and pci.is_active = 'Y'
         and pcipf.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    vn_contract_price              number;
    vc_price_unit_id               varchar2(15);
    vn_total_quantity              number;
    vn_total_contract_value        number;
    vd_shipment_date               date;
    vd_arrival_date                date;
    vd_qp_start_date               date;
    vd_qp_end_date                 date;
    vc_period                      varchar2(20);
    vd_3rd_wed_of_qp               date;
    workings_days                  number;
    vd_quotes_date                 date;
    vc_before_price_dr_id          varchar2(15);
    vn_before_qp_price             number;
    vc_before_qp_price_unit_id     varchar2(15);
    vn_qty_to_be_priced            number;
    vd_dur_qp_start_date           date;
    vd_dur_qp_end_date             date;
    vn_during_total_set_price      number;
    vn_count_set_qp                number;
    vn_any_day_cont_price_fix_qty  number;
    vn_any_day_fixed_qty           number;
    vn_market_flag                 char(1);
    vc_during_price_dr_id          varchar2(15);
    vn_during_val_price            number;
    vc_during_val_price_unit_id    varchar2(15);
    vn_during_total_val_price      number;
    vn_count_val_qp                number;
    vn_any_day_unfixed_qty         number;
    vn_any_day_cont_price_ufix_qty number;
    vc_holiday                     char(10);
    vn_during_qp_price             number;
    vn_average_price               number;
    vc_price_fixation_status       varchar2(50);
    vc_price_basis                 varchar2(15);
    vc_price_description           varchar2(500);
    vc_during_qp_price_unit_id     varchar2(15);
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vc_price_weight_unit           number;
    vc_price_weight_unit_id        varchar2(15);
    vc_price_qty_unit              varchar2(15);
    vc_contract_main_cur_id        varchar2(15);
    vc_contract_main_cur_code      varchar2(15);
    vn_contract_main_cur_factor    number;
    vc_base_main_cur_id            varchar2(15);
    vc_base_main_cur_code          varchar2(15);
    vd_payment_due_date            date;
    vn_fw_exch_rate_price_to_base  number;
    vn_forward_points              number;
    vn_contract_base_price_unit_id varchar2(15);
    vc_price_option_call_off_sts   varchar2(50);
    vc_pcdi_id                     varchar2(15);
    vc_element_id                  varchar2(15);
    vc_prompt_month                varchar2(15);
    vc_prompt_year                 number;
    vc_prompt_date                 date;
    vc_exch_rate_string            varchar2(300);
    vn_price_in_base_price_unit_id number;
    vd_valid_quote_date            date;
  begin
    delete from cpq_contract_payable_qty cpq
     where cpq.corporate_id = pc_corporate_id;
    commit;
    insert into cpq_contract_payable_qty
      (corporate_id,
       internal_contract_item_ref_no,
       element_id,
       payable_qty,
       payable_qty_unit_id)
      select pc_corporate_id,
             t.internal_contract_item_ref_no,
             t.element_id,
             sum(t.payable_qty) payable_qty,
             t.qty_unit_id payable_qty_unit_id
        from (select pci.internal_contract_item_ref_no,
                     cipq.element_id,
                     cipq.payable_qty,
                     cipq.qty_unit_id,
                     pci.process_id
                from pci_physical_contract_item     pci,
                     pcdi_pc_delivery_item          pcdi,
                     cipq_contract_item_payable_qty cipq
               where pci.pcdi_id = pcdi.pcdi_id
                 and pci.internal_contract_item_ref_no =
                     cipq.internal_contract_item_ref_no
                 and pci.process_id = pcdi.process_id
                 and pcdi.process_id = cipq.process_id
                 and pci.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and cipq.is_active = 'Y'
                 and cipq.process_id = pc_process_id
              union all
              select /*+ ordered */
               pci.internal_contract_item_ref_no,
               spq.element_id,
               spq.payable_qty,
               spq.qty_unit_id,
               pci.process_id
                from pci_physical_contract_item pci,
                     pcdi_pc_delivery_item      pcdi,
                     grd_goods_record_detail    grd,
                     spq_stock_payable_qty      spq
               where pci.pcdi_id = pcdi.pcdi_id
                 and pci.internal_contract_item_ref_no =
                     grd.internal_contract_item_ref_no
                    --and spq.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and spq.internal_grd_ref_no = grd.internal_grd_ref_no
                 and pci.process_id = pcdi.process_id
                 and pcdi.process_id = spq.process_id
                 and spq.process_id = grd.process_id
                 and pci.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and spq.is_active = 'Y'
                 and grd.process_id = pc_process_id) t
       group by t.internal_contract_item_ref_no,
                t.element_id,
                t.qty_unit_id;
    commit;
    for cur_pcdi_rows in cur_pcdi
    loop
      vc_pcdi_id    := cur_pcdi_rows.pcdi_id;
      vc_element_id := cur_pcdi_rows.element_id;
      begin
        select dipq.price_option_call_off_status
          into vc_price_option_call_off_sts
          from dipq_delivery_item_payable_qty dipq
         where dipq.pcdi_id = vc_pcdi_id
           and dipq.element_id = vc_element_id
           and dipq.is_active = 'Y'
           and dipq.dbd_id = pc_dbd_id;
      exception
        when no_data_found then
          vc_price_option_call_off_sts := null;
      end;
    
      vc_price_fixation_status := null;
      vn_total_contract_value  := 0;
      vd_qp_start_date         := null;
      vd_qp_end_date           := null;
    
      if vc_price_option_call_off_sts in ('Called Off', 'Not Applicable') then
        for cur_called_off_rows in cur_called_off(cur_pcdi_rows.pcdi_id,
                                                  cur_pcdi_rows.element_id)
        loop
          vc_price_basis       := cur_called_off_rows.price_basis;
          vc_price_description := cur_called_off_rows.price_description;
          if cur_called_off_rows.price_basis = 'Fixed' then
          
            vn_contract_price        := cur_called_off_rows.price_value;
            vn_total_quantity        := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                             cur_pcdi_rows.payable_qty_unit_id,
                                                                             cur_pcdi_rows.item_qty_unit_id,
                                                                             cur_pcdi_rows.payable_qty);
            vn_qty_to_be_priced      := cur_called_off_rows.qty_to_be_priced;
            vn_total_contract_value  := vn_total_contract_value +
                                        vn_total_quantity *
                                        (vn_qty_to_be_priced / 100) *
                                        vn_contract_price;
            vc_price_unit_id         := cur_called_off_rows.price_unit_id;
            vc_price_fixation_status := 'Fixed';
          
          elsif cur_called_off_rows.price_basis in ('Index', 'Formula') then
            for cc1 in (select ppfh.ppfh_id,
                               ppfh.price_unit_id ppu_price_unit_id,
                               ppu.price_unit_id,
                               ppu.price_unit_name,
                               pocd.qp_period_type,
                               pofh.qp_start_date,
                               pofh.qp_end_date,
                               pfqpp.event_name,
                               pfqpp.no_of_event_months,
                               pfqpp.is_qp_any_day_basis,
                               pofh.qty_to_be_fixed,
                               pofh.priced_qty,
                               pofh.pofh_id,
                               pofh.no_of_prompt_days,
                               pofh.avg_price_in_price_in_cur,
                               pofh.final_price,
                               pocd.pay_in_price_unit_id
                          from poch_price_opt_call_off_header poch,
                               pocd_price_option_calloff_dtls pocd,
                               pcbpd_pc_base_price_detail pcbpd,
                               ppfh_phy_price_formula_header ppfh,
                               pfqpp_phy_formula_qp_pricing pfqpp,
                               (select *
                                  from pofh_price_opt_fixation_header pfh
                                 where pfh.internal_gmr_ref_no is null
                                   and pfh.is_active = 'Y'
                                   and pfh.qty_to_be_fixed <> 0) pofh,
                               v_ppu_pum ppu
                         where poch.poch_id = pocd.poch_id
                           and pocd.pcbpd_id = pcbpd.pcbpd_id
                           and pcbpd.pcbpd_id = ppfh.pcbpd_id
                           and ppfh.ppfh_id = pfqpp.ppfh_id
                           and pocd.pocd_id = pofh.pocd_id(+)
                           and pcbpd.pcbpd_id = cur_called_off_rows.pcbpd_id
                           and poch.poch_id = cur_called_off_rows.poch_id
                           and ppfh.price_unit_id =
                               ppu.product_price_unit_id
                           and poch.is_active = 'Y'
                           and pocd.is_active = 'Y'
                           and pcbpd.is_active = 'Y'
                           and ppfh.is_active = 'Y'
                           and pfqpp.is_active = 'Y'
                              -- and pofh.is_active(+) = 'Y'
                           and pcbpd.process_id = pc_process_id
                           and pfqpp.process_id = pc_process_id
                           and ppfh.process_id = pc_process_id)
            
            loop
              if cur_pcdi_rows.basis_type = 'Shipment' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_shipment_date := last_day('01-' ||
                                               cur_pcdi_rows.delivery_to_month || '-' ||
                                               cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_shipment_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_arrival_date := vd_shipment_date +
                                   cur_pcdi_rows.transit_days;
              
              elsif cur_pcdi_rows.basis_type = 'Arrival' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_arrival_date := last_day('01-' ||
                                              cur_pcdi_rows.delivery_to_month || '-' ||
                                              cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_arrival_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_shipment_date := vd_arrival_date -
                                    cur_pcdi_rows.transit_days;
              end if;
            
              if cc1.qp_period_type = 'Period' then
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              elsif cc1.qp_period_type = 'Month' then
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              elsif cc1.qp_period_type = 'Date' then
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              elsif cc1.qp_period_type = 'Event' then
                begin
                  select dieqp.expected_qp_start_date,
                         dieqp.expected_qp_end_date
                    into vd_qp_start_date,
                         vd_qp_end_date
                    from di_del_item_exp_qp_details dieqp
                   where dieqp.pcdi_id = cur_pcdi_rows.pcdi_id
                     and dieqp.pcbpd_id = cur_called_off_rows.pcbpd_id
                     and dieqp.is_active = 'Y';
                exception
                  when no_data_found then
                    vd_qp_start_date := cc1.qp_start_date;
                    vd_qp_end_date   := cc1.qp_end_date;
                  when others then
                    vd_qp_start_date := cc1.qp_start_date;
                    vd_qp_end_date   := cc1.qp_end_date;
                end;
              else
                vd_qp_start_date := cc1.qp_start_date;
                vd_qp_end_date   := cc1.qp_end_date;
              end if;
              if cur_pcdi_rows.eod_trade_date >= vd_qp_start_date and
                 cur_pcdi_rows.eod_trade_date <= vd_qp_end_date then
                vc_period := 'During QP';
              elsif cur_pcdi_rows.eod_trade_date < vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date < vd_qp_end_date then
                vc_period := 'Before QP';
              elsif cur_pcdi_rows.eod_trade_date > vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date > vd_qp_end_date then
                vc_period := 'After QP';
              end if;
              if cc1.qp_period_type = 'Event' then
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'After QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  end if;
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_conc_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                cur_pcdi_rows.payable_qty_unit_id,
                                                                                cur_pcdi_rows.item_qty_unit_id,
                                                                                cur_pcdi_rows.payable_qty);
                vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              elsif vc_period = 'Before QP' then
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                      vd_qp_end_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_conc_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                cur_pcdi_rows.payable_qty_unit_id,
                                                                                cur_pcdi_rows.item_qty_unit_id,
                                                                                cur_pcdi_rows.payable_qty);
                vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              elsif vc_period = 'During QP' or vc_period = 'After QP' then
              
                vd_dur_qp_start_date          := vd_qp_start_date;
                vd_dur_qp_end_date            := vd_qp_end_date;
                vn_during_total_set_price     := 0;
                vn_count_set_qp               := 0;
                vn_any_day_cont_price_fix_qty := 0;
                vn_any_day_fixed_qty          := 0;
              
                for cc in (select pfd.user_price,
                                  pfd.as_of_date,
                                  pfd.qty_fixed,
                                  pofh.final_price
                             from poch_price_opt_call_off_header poch,
                                  pocd_price_option_calloff_dtls pocd,
                                  pofh_price_opt_fixation_header pofh,
                                  pfd_price_fixation_details     pfd
                            where poch.poch_id = pocd.poch_id
                              and pocd.pocd_id = pofh.pocd_id
                              and pofh.pofh_id = cc1.pofh_id
                              and pofh.pofh_id = pfd.pofh_id
                              and pfd.as_of_date >= vd_dur_qp_start_date
                              and pfd.as_of_date <= pd_trade_date
                              and poch.is_active = 'Y'
                              and pocd.is_active = 'Y'
                              and pofh.is_active = 'Y'
                              and pfd.is_active = 'Y'
                              and pofh.qty_to_be_fixed <> 0)
                loop
                  vn_during_total_set_price     := vn_during_total_set_price +
                                                   cc.user_price;
                  vn_any_day_cont_price_fix_qty := vn_any_day_cont_price_fix_qty +
                                                   (cc.user_price *
                                                   cc.qty_fixed);
                  vn_any_day_fixed_qty          := vn_any_day_fixed_qty +
                                                   cc.qty_fixed;
                  vn_count_set_qp               := vn_count_set_qp + 1;
                
                  if cc.final_price is not null then
                    vc_price_fixation_status := 'Finalized';
                  end if;
                end loop;
              
                if vn_count_set_qp <> 0 then
                  if vc_price_fixation_status <> 'Finalized' then
                    vc_price_fixation_status := 'Partially Priced';
                  else
                    vc_price_fixation_status := 'Partially Priced';
                  end if;
                else
                  vc_price_fixation_status := 'Un-priced';
                
                end if;
              
                if cc1.is_qp_any_day_basis = 'Y' then
                  vn_market_flag := 'N';
                else
                  vn_market_flag := 'Y';
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  -- get the third wednes day
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_dur_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if (vd_3rd_wed_of_qp <= pd_trade_date and
                     vc_period = 'During QP') or vc_period = 'After QP' then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  --Get the DR-id
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'During QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  
                  end if;
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and rownum <= 1
                       and drm.price_point_id is null
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --Get the price for the dr-id
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_during_val_price,
                         vc_during_val_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_during_price_dr_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.dbd_id = dqd.dbd_id
                     and dq.dbd_id = pc_dbd_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                  
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_conc_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
              
                vn_during_total_val_price := 0;
                vn_count_val_qp           := 0;
                vd_dur_qp_start_date      := pd_trade_date + 1;
              
                if vn_market_flag = 'N' then
                  vn_during_total_val_price := vn_during_total_val_price +
                                               vn_during_val_price;
                
                  vn_any_day_unfixed_qty         := cc1.qty_to_be_fixed -
                                                    vn_any_day_fixed_qty;
                  vn_count_val_qp                := vn_count_val_qp + 1;
                  vn_any_day_cont_price_ufix_qty := (vn_any_day_unfixed_qty *
                                                    vn_during_total_val_price);
                  if vn_any_day_unfixed_qty > 0 then
                    vc_price_fixation_status := 'Partially Priced';
                  else
                    vc_price_fixation_status := 'Priced';
                  end if;
                
                else
                
                  while vd_dur_qp_start_date <= vd_dur_qp_end_date
                  loop
                    ---- finding holidays       
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_dur_qp_start_date) then
                      vc_holiday := 'Y';
                    else
                      vc_holiday := 'N';
                    end if;
                  
                    if vc_holiday = 'N' then
                      vn_during_total_val_price := vn_during_total_val_price +
                                                   vn_during_val_price;
                      vn_count_val_qp           := vn_count_val_qp + 1;
                    end if;
                    vd_dur_qp_start_date := vd_dur_qp_start_date + 1;
                  end loop;
                end if;
              
                if (vn_count_val_qp + vn_count_set_qp) <> 0 then
                
                  if vn_market_flag = 'N' then
                    vn_during_qp_price := (vn_any_day_cont_price_fix_qty +
                                          vn_any_day_cont_price_ufix_qty) /
                                          cc1.qty_to_be_fixed;
                  else
                    vn_during_qp_price := (vn_during_total_set_price +
                                          vn_during_total_val_price) /
                                          (vn_count_set_qp +
                                          vn_count_val_qp);
                  end if;
                  vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                  cur_pcdi_rows.payable_qty_unit_id,
                                                                                  cur_pcdi_rows.item_qty_unit_id,
                                                                                  cur_pcdi_rows.payable_qty);
                  vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
                  vn_total_contract_value := vn_total_contract_value +
                                             vn_total_quantity *
                                             (vn_qty_to_be_priced / 100) *
                                             vn_during_qp_price;
                  vc_price_unit_id        := cc1.ppu_price_unit_id;
                
                else
                  vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                  cur_pcdi_rows.payable_qty_unit_id,
                                                                                  cur_pcdi_rows.item_qty_unit_id,
                                                                                  cur_pcdi_rows.payable_qty);
                  vn_total_contract_value := 0;
                  vc_price_unit_id        := cc1.ppu_price_unit_id;
                end if;
              
              end if;
            end loop;
          end if;
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      
      elsif vc_price_option_call_off_sts = 'Not Called Off' then
      
        vc_price_fixation_status := null;
        for cur_not_called_off_rows in cur_not_called_off(cur_pcdi_rows.pcdi_id,
                                                          cur_pcdi_rows.element_id,
                                                          cur_pcdi_rows.internal_contract_item_ref_no)
        loop
          vc_price_basis       := cur_not_called_off_rows.price_basis;
          vc_price_description := cur_not_called_off_rows.price_description;
          if cur_not_called_off_rows.price_basis = 'Fixed' then
            vn_contract_price        := cur_not_called_off_rows.price_value;
            vn_total_quantity        := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                             cur_pcdi_rows.payable_qty_unit_id,
                                                                             cur_pcdi_rows.item_qty_unit_id,
                                                                             cur_pcdi_rows.payable_qty);
            vn_qty_to_be_priced      := cur_not_called_off_rows.qty_to_be_priced;
            vn_total_contract_value  := vn_total_contract_value +
                                        vn_total_quantity *
                                        (vn_qty_to_be_priced / 100) *
                                        vn_contract_price;
            vc_price_unit_id         := cur_not_called_off_rows.price_unit_id;
            vc_price_fixation_status := 'Fixed';
          
          elsif cur_not_called_off_rows.price_basis in ('Index', 'Formula') then
            for cc1 in (select pfqpp.qp_pricing_period_type,
                               pfqpp.qp_period_from_date,
                               pfqpp.qp_period_to_date,
                               pfqpp.qp_month,
                               pfqpp.qp_year,
                               pfqpp.qp_date,
                               pfqpp.event_name,
                               pfqpp.no_of_event_months,
                               ppfh.price_unit_id ppu_price_unit_id,
                               ppu.price_unit_id, --pum price unit id, as quoted available in this unit only
                               ppu.price_unit_name
                          from ppfh_phy_price_formula_header ppfh,
                               pfqpp_phy_formula_qp_pricing  pfqpp,
                               v_ppu_pum                     ppu
                         where ppfh.ppfh_id = pfqpp.ppfh_id
                           and ppfh.pcbpd_id =
                               cur_not_called_off_rows.pcbpd_id
                           and ppfh.is_active = 'Y'
                           and pfqpp.is_active = 'Y'
                           and ppfh.price_unit_id =
                               ppu.product_price_unit_id
                           and ppfh.process_id = pc_process_id
                           and pfqpp.process_id = pc_process_id)
            loop
            
              if cur_pcdi_rows.basis_type = 'Shipment' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_shipment_date := last_day('01-' ||
                                               cur_pcdi_rows.delivery_to_month || '-' ||
                                               cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_shipment_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_arrival_date := vd_shipment_date +
                                   cur_pcdi_rows.transit_days;
              
              elsif cur_pcdi_rows.basis_type = 'Arrival' then
                if cur_pcdi_rows.delivery_period_type = 'Month' then
                  vd_arrival_date := last_day('01-' ||
                                              cur_pcdi_rows.delivery_to_month || '-' ||
                                              cur_pcdi_rows.delivery_to_year);
                elsif cur_pcdi_rows.delivery_period_type = 'Date' then
                  vd_arrival_date := cur_pcdi_rows.delivery_to_date;
                end if;
                vd_shipment_date := vd_arrival_date -
                                    cur_pcdi_rows.transit_days;
              end if;
            
              if cc1.qp_pricing_period_type = 'Period' then
                vd_qp_start_date := cc1.qp_period_from_date;
                vd_qp_end_date   := cc1.qp_period_to_date;
              elsif cc1.qp_pricing_period_type = 'Month' then
                vd_qp_start_date := '01-' || cc1.qp_month || '-' ||
                                    cc1.qp_year;
                vd_qp_end_date   := last_day(vd_qp_start_date);
              elsif cc1.qp_pricing_period_type = 'Date' then
                vd_qp_start_date := cc1.qp_date;
                vd_qp_end_date   := cc1.qp_date;
              elsif cc1.qp_pricing_period_type = 'Event' then
                begin
                  select dieqp.expected_qp_start_date,
                         dieqp.expected_qp_end_date
                    into vd_qp_start_date,
                         vd_qp_end_date
                    from di_del_item_exp_qp_details dieqp
                   where dieqp.pcdi_id = cur_pcdi_rows.pcdi_id
                     and dieqp.pcbpd_id = cur_not_called_off_rows.pcbpd_id
                     and dieqp.is_active = 'Y';
                exception
                  when no_data_found then
                    vd_qp_start_date := cc1.qp_period_from_date;
                    vd_qp_end_date   := cc1.qp_period_to_date;
                  when others then
                    vd_qp_start_date := cc1.qp_period_from_date;
                    vd_qp_end_date   := cc1.qp_period_to_date;
                end;
              
              else
                vd_qp_start_date := cc1.qp_period_from_date;
                vd_qp_end_date   := cc1.qp_period_to_date;
              end if;
              if cur_pcdi_rows.eod_trade_date >= vd_qp_start_date and
                 cur_pcdi_rows.eod_trade_date <= vd_qp_end_date then
                vc_period := 'During QP';
              elsif cur_pcdi_rows.eod_trade_date < vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date < vd_qp_end_date then
                vc_period := 'Before QP';
              elsif cur_pcdi_rows.eod_trade_date > vd_qp_start_date and
                    cur_pcdi_rows.eod_trade_date > vd_qp_end_date then
                vc_period := 'After QP';
              end if;
              if cc1.qp_pricing_period_type = 'Event' then
              
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  ---- get third wednesday of QP period
                  --  If 3rd Wednesday of QP End date is not a prompt date, get the next valid prompt date
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  --get the price dr_id   
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'After QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  
                  end if;
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                  
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price
              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                  
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_conc_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                cur_pcdi_rows.payable_qty_unit_id,
                                                                                cur_pcdi_rows.item_qty_unit_id,
                                                                                cur_pcdi_rows.payable_qty);
                vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              elsif vc_period = 'Before QP' then
              
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  ---- get third wednesday of QP period
                  --  If 3rd Wednesday of QP End date is not a prompt date, get the next valid prompt date
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if vd_3rd_wed_of_qp <= pd_trade_date then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                  --get the price dr_id   
                  begin
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                      vd_qp_end_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                  
                    select drm.dr_id
                      into vc_before_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price
              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_before_qp_price,
                         vc_before_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_before_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                  
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_conc_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                cur_pcdi_rows.payable_qty_unit_id,
                                                                                cur_pcdi_rows.item_qty_unit_id,
                                                                                cur_pcdi_rows.payable_qty);
                vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_before_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              
              elsif vc_period = 'During QP' or vc_period = 'After QP' then
                vc_price_fixation_status := 'Un-priced';
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                  vd_3rd_wed_of_qp := pkg_metals_general.f_get_next_day(vd_qp_end_date,
                                                                        'Wed',
                                                                        3);
                  while true
                  loop
                    if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                           vd_3rd_wed_of_qp) then
                      vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
                    else
                      exit;
                    end if;
                  end loop;
                  --- get 3rd wednesday  before QP period 
                  -- Get the quotation date = Trade Date +2 working Days
                  if (vd_3rd_wed_of_qp <= pd_trade_date or
                     vc_period = 'During QP') or vc_period = 'After QP' then
                    workings_days  := 0;
                    vd_quotes_date := pd_trade_date + 1;
                    while workings_days <> 2
                    loop
                      if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                             vd_quotes_date) then
                        vd_quotes_date := vd_quotes_date + 1;
                      else
                        workings_days := workings_days + 1;
                        if workings_days <> 2 then
                          vd_quotes_date := vd_quotes_date + 1;
                        end if;
                      end if;
                    end loop;
                    vd_3rd_wed_of_qp := vd_quotes_date;
                  end if;
                
                  --get the price dr_id   
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.prompt_date = vd_3rd_wed_of_qp
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR-ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vd_3rd_wed_of_qp,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                  end;
                end if;
              
                if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                   cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                  if vc_period = 'During QP' then
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       vd_qp_end_date);
                  else
                    vc_prompt_date := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                       pd_trade_date);
                  end if;
                
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
                
                  ---- get the dr_id             
                  begin
                    select drm.dr_id
                      into vc_during_price_dr_id
                      from drm_derivative_master drm
                     where drm.instrument_id = cur_pcdi_rows.instrument_id
                       and drm.period_month = vc_prompt_month
                       and drm.period_year = vc_prompt_year
                       and drm.price_point_id is null
                       and rownum <= 1
                       and drm.is_deleted = 'N';
                  exception
                    when no_data_found then
                      vobj_error_log.extend;
                      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                           'procedure sp_calc_contract_conc_price',
                                                                           'PHY-002',
                                                                           'DR_ID missing for ' ||
                                                                           cur_pcdi_rows.instrument_name ||
                                                                           ',Price Source:' ||
                                                                           cur_pcdi_rows.price_source_name ||
                                                                           ' Contract Ref No: ' ||
                                                                           cur_pcdi_rows.contract_ref_no ||
                                                                           ',Price Unit:' ||
                                                                           cur_pcdi_rows.price_unit_name || ',' ||
                                                                           cur_pcdi_rows.available_price_name ||
                                                                           ' Price,Prompt Date:' ||
                                                                           vc_prompt_month || ' ' ||
                                                                           vc_prompt_year,
                                                                           '',
                                                                           pc_process,
                                                                           pc_user_id,
                                                                           sysdate,
                                                                           pd_trade_date);
                      sp_insert_error_log(vobj_error_log);
                    
                  end;
                
                end if;
              
                --get the price
              
                begin
                  select dqd.price,
                         dqd.price_unit_id
                    into vn_during_qp_price,
                         vc_during_qp_price_unit_id
                    from dq_derivative_quotes        dq,
                         dqd_derivative_quote_detail dqd,
                         cdim_corporate_dim          cdim
                   where dq.dq_id = dqd.dq_id
                     and dqd.dr_id = vc_during_price_dr_id
                     and dq.process_id = pc_process_id
                     and dq.instrument_id = cur_pcdi_rows.instrument_id
                     and dq.process_id = dqd.process_id
                     and dqd.available_price_id =
                         cur_pcdi_rows.available_price_id
                     and dq.price_source_id = cur_pcdi_rows.price_source_id
                     and dqd.price_unit_id = cc1.price_unit_id
                     and dq.trade_date = cdim.valid_quote_date
                     and dq.is_deleted = 'N'
                     and dqd.is_deleted = 'N'
                     and cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = dq.instrument_id;
                exception
                  when no_data_found then
                    select cdim.valid_quote_date
                      into vd_valid_quote_date
                      from cdim_corporate_dim cdim
                     where cdim.corporate_id = pc_corporate_id
                       and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                    vobj_error_log.extend;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,'procedure sp_calc_contract_conc_price','PHY-002','Price missing for ' || cur_pcdi_rows.instrument_name ||',Price Source:' || cur_pcdi_rows.price_source_name ||' Contract Ref No: ' || cur_pcdi_rows.contract_ref_no ||',Price Unit:' || cc1.price_unit_name ||',' || cur_pcdi_rows.available_price_name ||' Price,Prompt Date:' || (case when cur_pcdi_rows.is_daily_cal_applicable = 'N' and cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then to_char(vc_prompt_date, 'Mon-yyyy') else to_char(vd_3rd_wed_of_qp, 'dd-Mon-yyyy') end) || ' Trade Date(' || to_char(vd_valid_quote_date, 'dd-Mon-yyyy') || ')', '', pc_process, pc_user_id, sysdate, pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
                vn_total_quantity       := pkg_general.f_get_converted_quantity(cur_pcdi_rows.underlying_product_id,
                                                                                cur_pcdi_rows.payable_qty_unit_id,
                                                                                cur_pcdi_rows.item_qty_unit_id,
                                                                                cur_pcdi_rows.payable_qty);
                vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
                vn_total_contract_value := vn_total_contract_value +
                                           vn_total_quantity *
                                           (vn_qty_to_be_priced / 100) *
                                           vn_during_qp_price;
                vc_price_unit_id        := cc1.ppu_price_unit_id;
              
              end if;
            end loop;
          end if;
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      
      end if;
    
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vc_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      
        pkg_general.sp_get_base_cur_detail(vc_price_cur_id,
                                           vc_contract_main_cur_id,
                                           vc_contract_main_cur_code,
                                           vn_contract_main_cur_factor);
      
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vc_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
    
      vc_base_main_cur_id   := cur_pcdi_rows.base_cur_id;
      vc_base_main_cur_code := cur_pcdi_rows.base_currency_name;
    
      if cur_pcdi_rows.payment_due_date is null then
        vd_payment_due_date := pd_trade_date;
      else
        vd_payment_due_date := cur_pcdi_rows.payment_due_date;
      end if;
    
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  vd_payment_due_date,
                                  vc_contract_main_cur_id,
                                  vc_base_main_cur_id,
                                  30,
                                  'sp_calc_contract_conc_price Contract Price To Base',
                                  pc_process,
                                  vn_fw_exch_rate_price_to_base,
                                  vn_forward_points);
    
      if vc_contract_main_cur_id <> vc_base_main_cur_id then
        if vn_fw_exch_rate_price_to_base is null or
           vn_fw_exch_rate_price_to_base = 0 then
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure pkg_phy_physical_process contract price',
                                                               'PHY-005',
                                                               vc_base_main_cur_code ||
                                                               ' to ' ||
                                                               vc_contract_main_cur_code || ' (' ||
                                                               to_char(vd_payment_due_date,
                                                                       'dd-Mon-yyyy') || ') ',
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
        else
        
          if vc_exch_rate_string is null then
            vc_exch_rate_string := '1 ' || vc_contract_main_cur_code || '=' ||
                                   vn_fw_exch_rate_price_to_base || ' ' ||
                                   vc_base_main_cur_code;
          else
            vc_exch_rate_string := vc_exch_rate_string || ',' || '1 ' ||
                                   vc_contract_main_cur_code || '=' ||
                                   vn_fw_exch_rate_price_to_base || ' ' ||
                                   vc_base_main_cur_code;
          end if;
        
        end if;
      else
        vn_fw_exch_rate_price_to_base := 1;
      end if;
      vn_price_in_base_price_unit_id := vn_fw_exch_rate_price_to_base *
                                        vn_contract_main_cur_factor *
                                        pkg_general.f_get_converted_quantity(cur_pcdi_rows.product_id,
                                                                             vc_price_weight_unit_id,
                                                                             cur_pcdi_rows.item_qty_unit_id,
                                                                             1) *
                                        vn_average_price;
    
      insert into cipde_cipd_element_price
        (corporate_id,
         process_id,
         pcdi_id,
         internal_contract_item_ref_no,
         internal_contract_ref_no,
         contract_ref_no,
         delivery_item_no,
         element_id,
         assay_qty,
         assay_qty_unit_id,
         payable_qty,
         payable_qty_unit_id,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         fixed_qty,
         unfixed_qty,
         price_basis,
         price_fixation_status,
         price_fixation_details,
         payment_due_date,
         contract_base_price_unit_id,
         contract_to_base_fx_rate,
         price_description,
         cur_id,
         cur_code,
         instrument_id,
         exch_rate_string,
         price_in_base_price_unit_id)
      values
        (pc_corporate_id,
         pc_process_id,
         cur_pcdi_rows.pcdi_id,
         cur_pcdi_rows.internal_contract_item_ref_no,
         cur_pcdi_rows.internal_contract_ref_no,
         cur_pcdi_rows.contract_ref_no,
         cur_pcdi_rows.delivery_item_no,
         cur_pcdi_rows.element_id,
         cur_pcdi_rows.assay_qty,
         cur_pcdi_rows.assay_qty_unit_id,
         cur_pcdi_rows.payable_qty,
         cur_pcdi_rows.payable_qty_unit_id,
         vn_average_price,
         vc_price_unit_id,
         vc_price_cur_id,
         vc_price_cur_code,
         vc_price_weight_unit,
         vc_price_weight_unit_id,
         vc_price_qty_unit,
         null,
         null,
         vc_price_basis,
         vc_price_fixation_status,
         'Not Applicable',
         cur_pcdi_rows.payment_due_date,
         vn_contract_base_price_unit_id,
         vn_fw_exch_rate_price_to_base,
         vc_price_description,
         null,
         null,
         cur_pcdi_rows.instrument_id,
         vc_exch_rate_string,
         vn_price_in_base_price_unit_id);
      vc_exch_rate_string := null;
    end loop;
    commit;
  end;
end;
/

create or replace package "PKG_PHY_TOLLING_UNREALIZED_PNL" is

  procedure sp_phy_opencon_ext_unreal_pnl(pc_corporate_id        varchar2,
                                          pd_trade_date          date,
                                          pc_process_id          varchar2,
                                          pc_user_id             varchar2,
                                          pc_dbd_id              varchar2,
                                          pc_process             varchar2,
                                          pc_previous_process_id varchar2);

  procedure sp_phy_stok_con_ext_unreal_pnl(pc_corporate_id        varchar2,
                                           pd_trade_date          date,
                                           pc_process_id          varchar2,
                                           pc_user_id             varchar2,
                                           pc_process             varchar2,
                                           pc_previous_process_id varchar2);
end;
/
create or replace package body "PKG_PHY_TOLLING_UNREALIZED_PNL" is

  procedure sp_phy_opencon_ext_unreal_pnl(pc_corporate_id        varchar2,
                                          pd_trade_date          date,
                                          pc_process_id          varchar2,
                                          pc_user_id             varchar2,
                                          pc_dbd_id              varchar2,
                                          pc_process             varchar2,
                                          pc_previous_process_id varchar2) is
  
    cursor cur_unrealized is
      select pcm.corporate_id,
             akc.corporate_name,
             pc_process_id,
             pcdi.pcdi_id,
             pcdi.delivery_item_no,
             pcdi.prefix,
             pcdi.middle_no,
             pcdi.suffix,
             pcdi.internal_contract_ref_no,
             pcm.contract_ref_no,
             pcm.issue_date,
             pci.internal_contract_item_ref_no,
             pci.del_distribution_item_no,
             pcdi.basis_type,
             pcdi.delivery_period_type,
             pcdi.delivery_from_month,
             pcdi.delivery_from_year,
             pcdi.delivery_to_month,
             pcdi.delivery_to_year,
             pcdi.delivery_from_date,
             pcdi.delivery_to_date,
             pcdi.transit_days,
             pcm.purchase_sales,
             pcm.contract_status,
             'Unrealized' unrealized_type,
             pcpd.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             pcm.cp_id,
             phd_cp.companyname cp_name,
             pcm.trader_id,
             (case
               when pcm.trader_id is not null then
                (select gab.firstname || ' ' || gab.lastname
                   from gab_globaladdressbook       gab,
                        ak_corporate_user@eka_appdb aku
                  where gab.gabid = aku.gabid
                    and aku.user_id = pcm.trader_id)
               else
                ''
             end) trader_user_name,
             pcpd.product_id conc_product_id,
             pdm_conc.product_desc conc_product_name,
             aml.underlying_product_id product_id,
             pdm.product_desc product_name,
             ciqs.open_qty item_qty,
             ciqs.item_qty_unit_id qty_unit_id,
             qum.qty_unit,
             qum.decimals item_qty_decimal,
             pcpq.quality_template_id conc_quality_id,
             qat.quality_name conc_quality_name,
             qav.comp_quality_id quality_id,
             qat_und.quality_name,
             pcdb.inco_term_id,
             itm.incoterm,
             pcdb.city_id origination_city_id,
             cim1.city_name origination_city,
             pcdb.country_id origination_country_id,
             cym1.country_name origination_country,
             pcdb.city_id destination_city_id,
             cim2.city_name destination_city,
             pcdb.country_id destination_country_id,
             cym2.country_name destination_country,
             rem_cym1.region_id origination_region_id,
             rem_cym1.region_name origination_region,
             rem_cym2.region_id destination_region_id,
             rem_cym2.region_name destination_region,
             pcm.payment_term_id,
             pym.payment_term,
             cm.cur_id as base_cur_id,
             cm.cur_code as base_cur_code,
             cm.decimals as base_cur_decimal,
             gcd.groupid,
             gcd.groupname,
             cm_gcd.cur_id cur_id_gcd,
             cm_gcd.cur_code cur_code_gcd,
             qum_gcd.qty_unit_id qty_unit_id_gcd,
             qum_gcd.qty_unit qty_unit_gcd,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             qum_pdm.decimals as base_qty_decimal,
             qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
             qum_pdm_conc.qty_unit as conc_base_qty_unit,
             qum_pdm_conc.decimals as conc_base_qty_decimal,
             pcpd.strategy_id,
             css.strategy_name,
             cipde.element_id,
             aml.attribute_name,
             pcpq.assay_header_id,
             pcpq.unit_of_measure,
             ceqs.assay_qty,
             ceqs.assay_qty_unit_id,
             cipq.payable_qty,
             cipq.qty_unit_id payable_qty_unit_id,
             cipde.contract_price,
             cipde.price_unit_id,
             cipde.price_unit_cur_id,
             cipde.price_unit_cur_code,
             cipde.price_unit_weight_unit_id,
             cipde.price_unit_weight,
             cipde.price_unit_weight_unit,
             cipde.price_basis fixation_method,
             cipde.price_description,
             cipde.price_fixation_status,
             cipde.price_fixation_details,
             nvl(cipde.payment_due_date, pd_trade_date) payment_due_date,
             pci.expected_delivery_month || '-' ||
             pci.expected_delivery_year item_delivery_period_string,
             md.net_m2m_price net_m2m_price,
             md.m2m_price_unit_id,
             md.m2m_price_unit_cur_id,
             md.m2m_price_unit_cur_code,
             md.m2m_price_unit_weight,
             md.m2m_price_unit_weight_unit_id,
             md.m2m_price_unit_weight_unit,
             md.m2m_main_cur_id,
             md.m2m_main_cur_code,
             md.m2m_main_cur_decimals,
             md.main_currency_factor,
             md.md_id,
             0 m2m_amt,
             nvl(md.treatment_charge, 0) m2m_treatment_charge, -- will be in base price unit id
             nvl(md.refine_charge, 0) m2m_refining_charge, -- will be in base price unit id
             tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
             tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
             tc_ppu_pum.cur_id m2m_tc_cur_id,
             tc_ppu_pum.weight m2m_tc_weight,
             tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
             rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
             rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
             rc_ppu_pum.cur_id m2m_rc_cur_id,
             rc_ppu_pum.weight m2m_rc_weight,
             rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
             nvl((select sum(cisc.avg_cost)
                   from cisc_contract_item_sec_cost cisc
                  where cisc.internal_contract_item_ref_no =
                        pci.internal_contract_item_ref_no
                    and cisc.process_id = pc_process_id),
                 0) sc_in_base_cur,
             md.derivative_def_id,
             md.valuation_exchange_id,
             emt.exchange_name,
             md.valuation_dr_id,
             drm.dr_id_name,
             md.valuation_month,
             md.valuation_date,
             md.m2m_loc_incoterm_deviation,
             dense_rank() over(partition by cipde.internal_contract_item_ref_no order by cipde.element_id) ele_rank,
             md.base_price_unit_id_in_ppu,
             md.base_price_unit_id_in_pum,
             pum_base_price_id.price_unit_name base_price_unit_name,
             pum_loc_base.weight_unit_id loc_qty_unit_id,
             tmpc.mvp_id,
             tmpc.shipment_month,
             tmpc.shipment_year,
             nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying,
             pcm.approval_status,
             (case when nvl(pcm.approval_status,'Approved')='Approved' then
             'Y'
             else
             'N'
             end) approval_flag
        from pcm_physical_contract_main pcm,
             ak_corporate akc,
             pcdi_pc_delivery_item pcdi,
             pci_physical_contract_item pci,
             pcpd_pc_product_definition pcpd,
             cpc_corporate_profit_center cpc,
             phd_profileheaderdetails phd_cp,
             pdm_productmaster pdm,
             ciqs_contract_item_qty_status ciqs,
             qum_quantity_unit_master qum,
             pcpq_pc_product_quality pcpq,
             qat_quality_attributes qat,
             qat_quality_attributes qat_und,
             qav_quality_attribute_values qav,
             ppm_product_properties_mapping ppm,
             aml_attribute_master_list aml,
             pcdb_pc_delivery_basis pcdb,
             itm_incoterm_master itm,
             cim_citymaster cim1,
             cim_citymaster cim2,
             cym_countrymaster cym1,
             cym_countrymaster cym2,
             rem_region_master@eka_appdb rem_cym1,
             rem_region_master@eka_appdb rem_cym2,
             pym_payment_terms_master pym,
             cm_currency_master cm,
             gcd_groupcorporatedetails gcd,
             cm_currency_master cm_gcd,
             qum_quantity_unit_master qum_gcd,
             qum_quantity_unit_master qum_pdm,
             pdm_productmaster pdm_conc,
             qum_quantity_unit_master qum_pdm_conc,
             css_corporate_strategy_setup css,
             pum_price_unit_master pum_base_price_id,
             pum_price_unit_master pum_loc_base,
             cipde_cipd_element_price cipde,
             (select md1.*
                from md_m2m_daily md1
               where md1.rate_type = 'OPEN'
                 and md1.corporate_id = pc_corporate_id
                 and md1.product_type = 'CONCENTRATES'
                 and md1.process_id = pc_process_id) md,
             (select tmp.*
                from tmpc_temp_m2m_pre_check tmp
               where tmp.corporate_id = pc_corporate_id
                 and tmp.product_type = 'CONCENTRATES'
                 and tmp.section_name = 'OPEN') tmpc,
             drm_derivative_master drm,
             emt_exchangemaster emt,
             v_ppu_pum tc_ppu_pum,
             v_ppu_pum rc_ppu_pum,
             cipq_contract_item_payable_qty cipq,
             ceqs_contract_ele_qty_status ceqs
       where pcm.corporate_id = akc.corporate_id
         and pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
         and pcdi.pcdi_id = pci.pcdi_id
         and pcpd.profit_center_id = cpc.profit_center_id
         and pcm.cp_id = phd_cp.profileid
         and pci.internal_contract_item_ref_no =
             ciqs.internal_contract_item_ref_no
         and ciqs.item_qty_unit_id = qum.qty_unit_id
         and pci.pcpq_id = pcpq.pcpq_id
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpq.pcpd_id = pcpd.pcpd_id
         and pcpq.quality_template_id = qat.quality_id
         and qat.quality_id = qav.quality_id
         and qav.attribute_id = ppm.property_id
         and qav.comp_quality_id = qat_und.quality_id
         and ppm.attribute_id = aml.attribute_id
         and aml.underlying_product_id = pdm.product_id
         and aml.attribute_id = cipde.element_id
         and pci.pcdb_id = pcdb.pcdb_id
         and pcdb.inco_term_id = itm.incoterm_id
         and pcdb.city_id = cim1.city_id(+)
         and pcdb.city_id = cim2.city_id(+)
         and pcdb.country_id = cym1.country_id(+)
         and pcdb.country_id = cym2.country_id(+)
         and cym1.region_id = rem_cym1.region_id(+)
         and cym2.region_id = rem_cym2.region_id(+)
         and pcm.payment_term_id = pym.payment_term_id(+)
         and akc.base_cur_id = cm.cur_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
         and qum_pdm.qty_unit_id = pdm.base_quantity_unit
         and pcpd.product_id = pdm_conc.product_id
         and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
         and pcpd.strategy_id = css.strategy_id
         and pci.internal_contract_item_ref_no =
             cipde.internal_contract_item_ref_no
         and pci.internal_contract_item_ref_no =
             tmpc.internal_contract_item_ref_no(+)
         and tmpc.element_id = cipde.element_id
         and tmpc.internal_m2m_id = md.md_id(+)
         and md.element_id = cipde.element_id
         and md.valuation_dr_id = drm.dr_id(+)
         and md.valuation_exchange_id = emt.exchange_id(+)
         and pcm.corporate_id = pc_corporate_id
         and ciqs.open_qty > 0
         and pcm.contract_status = 'In Position'
         and pcm.contract_type = 'CONCENTRATES'
         and pcpd.input_output = 'Input'
         and pcm.is_tolling_contract = 'Y'
         and pcm.is_tolling_extn = 'Y'
         and pcm.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and pcdb.is_active = 'Y'
         and pcpd.is_active = 'Y'
         and pcpq.is_active = 'Y'
         and ciqs.is_active = 'Y'
         and ppm.is_active = 'Y'
         and ppm.is_deleted = 'N'
         and qav.is_deleted = 'N'
         and qav.is_comp_product_attribute = 'Y'
         and qat.is_active = 'Y'
         and qat.is_deleted = 'N'
         and aml.is_active = 'Y'
         and aml.is_deleted = 'N'
         and qat_und.is_active = 'Y'
         and qat_und.is_deleted = 'N'
         and md.base_price_unit_id_in_pum = pum_base_price_id.price_unit_id
         and md.base_price_unit_id_in_pum = pum_loc_base.price_unit_id
         and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
         and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
         and pci.internal_contract_item_ref_no =
             cipq.internal_contract_item_ref_no
         and aml.attribute_id = cipq.element_id
         and pci.internal_contract_item_ref_no =
             ceqs.internal_contract_item_ref_no
         and aml.attribute_id = ceqs.element_id
         and pcm.process_id = pc_process_id
         and pcdi.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and ciqs.process_id = pc_process_id
         and pcpq.process_id = pc_process_id
         and pcdb.process_id = pc_process_id
         and cipde.process_id = pc_process_id
         and cipq.process_id = pc_process_id
         and ceqs.process_id = pc_process_id;
    vn_ele_qty_in_base             number;
    vn_ele_m2m_amt                 number;
    vc_m2m_cur_id                  varchar2(15);
    vc_m2m_cur_code                varchar2(15);
    vn_m2m_base_fx_rate            number;
    vn_m2m_base_deviation          number;
    vn_m2m_sub_cur_id_factor       number;
    vn_m2m_cur_decimals            number;
    vn_ele_m2m_amount_in_base      number;
    vn_ele_m2m_total_amount        number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vn_cont_price_cur_id_factor    number;
    vn_cont_price_cur_decimals     number;
    vn_ele_cont_value_in_price_cur number;
    vn_fx_price_to_base            number;
    vn_forward_exch_rate           number;
    vn_ele_cont_premium            number;
    vn_ele_cont_total_premium      number;
    vn_ele_cont_value_in_base_cur  number;
    vn_ele_exp_cog_in_base_cur     number;
    vn_ele_unreal_pnl_in_base_cur  number;
    vn_unrealized_pnl_in_m2m_unit  number;
    vc_m2m_price_unit_id           varchar2(15);
    vc_m2m_price_unit_cur_id       varchar2(15);
    vc_m2m_price_unit_cur_code     varchar2(15);
    vc_m2m_price_unit_wgt_unit_id  varchar2(15);
    vc_m2m_price_unit_wgt_unit     varchar2(15);
    vn_m2m_price_unit_wgt_unit_wt  number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_dry_qty                     number;
    vn_wet_qty                     number;
    vn_sc_in_base_cur              number;
    vn_qty_in_base                 number;
    vn_con_treatment_charge        number;
    vc_con_treatment_cur_id        varchar2(15);
    vn_base_con_treatment_charge   number;
    vn_con_refine_charge           number;
    vc_con_refine_cur_id           varchar2(15);
    vn_base_con_refine_charge      number;
    vn_con_penality_charge         number;
    vn_base_con_penality_charge    number;
    vc_con_penality_cur_id         varchar2(15);
    vn_dry_qty_in_base             number;
    vn_ele_m2m_treatment_charge    number;
    vn_ele_m2m_refine_charge       number;
    vn_loc_amount                  number;
    vn_loc_total_amount            number;
    vn_penality                    number;
    vc_penality_price_unit_id      varchar2(20);
    vn_total_penality              number;
    vc_price_unit_id               varchar2(15);
  
  begin
    for cur_unrealized_rows in cur_unrealized
    loop
      -- convert wet qty to dry qty
      if cur_unrealized_rows.unit_of_measure = 'Wet' then
        vn_dry_qty := round(pkg_metals_general.fn_get_assay_dry_qty(cur_unrealized_rows.conc_product_id,
                                                                    cur_unrealized_rows.assay_header_id,
                                                                    cur_unrealized_rows.item_qty,
                                                                    cur_unrealized_rows.qty_unit_id),
                            cur_unrealized_rows.item_qty_decimal);
      else
        vn_dry_qty := cur_unrealized_rows.item_qty;
      end if;
    
      vn_wet_qty := cur_unrealized_rows.item_qty;
    
      -- convert into dry qty to base qty element level
    
      vn_dry_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                       cur_unrealized_rows.qty_unit_id,
                                                                       cur_unrealized_rows.base_qty_unit_id,
                                                                       1) *
                                  vn_dry_qty,
                                  cur_unrealized_rows.base_qty_decimal);
    
      -- contract treatment charges
      pkg_metals_general.sp_get_treatment_charge(cur_unrealized_rows.internal_contract_item_ref_no,
                                                 cur_unrealized_rows.element_id,
                                                 pc_dbd_id,
                                                 vn_dry_qty,
                                                 vn_wet_qty,
                                                 cur_unrealized_rows.qty_unit_id,
                                                 cur_unrealized_rows.contract_price,
                                                 cur_unrealized_rows.price_unit_id,
                                                 vn_con_treatment_charge,
                                                 vc_con_treatment_cur_id);
      -- converted treatment charges to base currency                                           
      vn_base_con_treatment_charge := round(pkg_general.f_get_converted_currency_amt(cur_unrealized_rows.corporate_id,
                                                                                     vc_con_treatment_cur_id,
                                                                                     cur_unrealized_rows.base_cur_id,
                                                                                     pd_trade_date,
                                                                                     vn_con_treatment_charge),
                                            cur_unrealized_rows.base_cur_decimal);
    
      --- contract refine chrges
      pkg_metals_general.sp_get_refine_charge(cur_unrealized_rows.internal_contract_item_ref_no,
                                              cur_unrealized_rows.element_id,
                                              pc_dbd_id,
                                              cur_unrealized_rows.payable_qty,
                                              cur_unrealized_rows.payable_qty_unit_id,
                                              cur_unrealized_rows.contract_price,
                                              cur_unrealized_rows.price_unit_id,
                                              vn_con_refine_charge,
                                              vc_con_refine_cur_id);
    
      --- converted refine charges to base currency                                              
    
      vn_base_con_refine_charge := round(pkg_general.f_get_converted_currency_amt(cur_unrealized_rows.corporate_id,
                                                                                  vc_con_refine_cur_id,
                                                                                  cur_unrealized_rows.base_cur_id,
                                                                                  pd_trade_date,
                                                                                  vn_con_refine_charge),
                                         cur_unrealized_rows.base_cur_decimal);
      --- contract penality chrges   
      if cur_unrealized_rows.ele_rank = 1 then
        pkg_metals_general.sp_get_penalty_charge(cur_unrealized_rows.internal_contract_item_ref_no,
                                                 pc_dbd_id,
                                                 vn_dry_qty,
                                                 cur_unrealized_rows.qty_unit_id,
                                                 vn_con_penality_charge,
                                                 vc_con_penality_cur_id);
      
        -- Convert Penalty to Base Using Bank FX Rate
      
        vn_base_con_penality_charge := round(pkg_general.f_get_converted_currency_amt(cur_unrealized_rows.corporate_id,
                                                                                      vc_con_penality_cur_id,
                                                                                      cur_unrealized_rows.base_cur_id,
                                                                                      pd_trade_date,
                                                                                      vn_con_penality_charge),
                                             cur_unrealized_rows.base_cur_decimal);
      end if;
    
      vn_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                   cur_unrealized_rows.qty_unit_id,
                                                                   cur_unrealized_rows.conc_base_qty_unit_id,
                                                                   1) *
                              vn_wet_qty,
                              cur_unrealized_rows.conc_base_qty_decimal);
    
      vn_ele_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                                       cur_unrealized_rows.payable_qty_unit_id,
                                                                       cur_unrealized_rows.base_qty_unit_id,
                                                                       1) *
                                  cur_unrealized_rows.payable_qty,
                                  cur_unrealized_rows.base_qty_decimal);
      if cur_unrealized_rows.valuation_against_underlying = 'Y' then
        vn_ele_m2m_amt := nvl(cur_unrealized_rows.net_m2m_price, 0) /
                          nvl(cur_unrealized_rows.m2m_price_unit_weight, 1) *
                          pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                               cur_unrealized_rows.payable_qty_unit_id,
                                                               cur_unrealized_rows.m2m_price_unit_weight_unit_id,
                                                               cur_unrealized_rows.payable_qty);
      
        pkg_general.sp_get_main_cur_detail(nvl(cur_unrealized_rows.m2m_price_unit_cur_id,
                                               cur_unrealized_rows.base_cur_id),
                                           vc_m2m_cur_id,
                                           vc_m2m_cur_code,
                                           vn_m2m_sub_cur_id_factor,
                                           vn_m2m_cur_decimals);
        vn_ele_m2m_amt := round(vn_ele_m2m_amt * vn_m2m_sub_cur_id_factor,
                                vn_m2m_cur_decimals);
      
        pkg_general.sp_forward_cur_exchange_new(cur_unrealized_rows.corporate_id,
                                                pd_trade_date,
                                                cur_unrealized_rows.payment_due_date,
                                                vc_m2m_cur_id,
                                                cur_unrealized_rows.base_cur_id,
                                                30,
                                                vn_m2m_base_fx_rate,
                                                vn_m2m_base_deviation);
        if vc_m2m_cur_id <> cur_unrealized_rows.base_cur_id then
          if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure pkg_phy_physical_process-sp_calc_phy_open_unrealized ',
                                                                 'PHY-005',
                                                                 cur_unrealized_rows.base_cur_code ||
                                                                 ' to ' ||
                                                                 vc_m2m_cur_code || ' (' ||
                                                                 to_char(cur_unrealized_rows.payment_due_date,
                                                                         'dd-Mon-yyyy') || ') ',
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
          end if;
        end if;
        vn_ele_m2m_amount_in_base := vn_ele_m2m_amt * vn_m2m_base_fx_rate;
      else
        vn_ele_m2m_amt := nvl(cur_unrealized_rows.net_m2m_price, 0) /
                          nvl(cur_unrealized_rows.m2m_price_unit_weight, 1) *
                          pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                               cur_unrealized_rows.conc_base_qty_unit_id,
                                                               cur_unrealized_rows.m2m_price_unit_weight_unit_id,
                                                               vn_dry_qty_in_base);
      
        pkg_general.sp_get_main_cur_detail(nvl(cur_unrealized_rows.m2m_price_unit_cur_id,
                                               cur_unrealized_rows.base_cur_id),
                                           vc_m2m_cur_id,
                                           vc_m2m_cur_code,
                                           vn_m2m_sub_cur_id_factor,
                                           vn_m2m_cur_decimals);
        vn_ele_m2m_amt := round(vn_ele_m2m_amt * vn_m2m_sub_cur_id_factor,
                                vn_m2m_cur_decimals);
      
        pkg_general.sp_forward_cur_exchange_new(cur_unrealized_rows.corporate_id,
                                                pd_trade_date,
                                                cur_unrealized_rows.payment_due_date,
                                                vc_m2m_cur_id,
                                                cur_unrealized_rows.base_cur_id,
                                                30,
                                                vn_m2m_base_fx_rate,
                                                vn_m2m_base_deviation);
        if vc_m2m_cur_id <> cur_unrealized_rows.base_cur_id then
          if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure pkg_phy_physical_process-sp_calc_phy_open_unrealized ',
                                                                 'PHY-005',
                                                                 cur_unrealized_rows.base_cur_code ||
                                                                 ' to ' ||
                                                                 vc_m2m_cur_code || ' (' ||
                                                                 to_char(cur_unrealized_rows.payment_due_date,
                                                                         'dd-Mon-yyyy') || ') ',
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
          end if;
        end if;
        if cur_unrealized_rows.ele_rank = 1 then
          vn_ele_m2m_amount_in_base := vn_ele_m2m_amt * vn_m2m_base_fx_rate;
        else
          vn_ele_m2m_amount_in_base := 0;
          vn_ele_m2m_amt            := 0;
        end if;
      end if;
    
      vn_ele_m2m_treatment_charge := round((cur_unrealized_rows.m2m_treatment_charge /
                                           nvl(cur_unrealized_rows.m2m_tc_weight,
                                                1)) *
                                           pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    cur_unrealized_rows.m2m_tc_cur_id,
                                                                                    cur_unrealized_rows.base_cur_id,
                                                                                    pd_trade_date,
                                                                                    1) *
                                           (pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                                 cur_unrealized_rows.qty_unit_id,
                                                                                 cur_unrealized_rows.m2m_tc_weight_unit_id,
                                                                                 vn_dry_qty)),
                                           cur_unrealized_rows.base_cur_decimal);
    
      vn_ele_m2m_refine_charge := round((cur_unrealized_rows.m2m_refining_charge /
                                        nvl(cur_unrealized_rows.m2m_rc_weight,
                                             1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                 cur_unrealized_rows.m2m_rc_cur_id,
                                                                                 cur_unrealized_rows.base_cur_id,
                                                                                 pd_trade_date,
                                                                                 1) *
                                        (pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                                              cur_unrealized_rows.payable_qty_unit_id,
                                                                              cur_unrealized_rows.m2m_rc_weight_unit_id,
                                                                              cur_unrealized_rows.payable_qty)),
                                        cur_unrealized_rows.base_cur_decimal);
    
      vn_loc_amount := round(pkg_general.f_get_converted_quantity(cur_unrealized_rows.conc_product_id,
                                                                  cur_unrealized_rows.loc_qty_unit_id,
                                                                  cur_unrealized_rows.conc_base_qty_unit_id,
                                                                  1) *
                             cur_unrealized_rows.m2m_loc_incoterm_deviation,
                             cur_unrealized_rows.base_cur_decimal);
    
      vn_loc_total_amount := round(vn_loc_amount * vn_qty_in_base,
                                   cur_unrealized_rows.base_cur_decimal);
      vn_total_penality   := 0;
      if cur_unrealized_rows.ele_rank = 1 then
        begin
          select ppu.product_price_unit_id
            into vc_price_unit_id
            from v_ppu_pum         ppu,
                 pdm_productmaster pdm,
                 ak_corporate      akc
           where ppu.product_id = cur_unrealized_rows.conc_product_id
             and ppu.product_id = pdm.product_id
             and pdm.base_quantity_unit = ppu.weight_unit_id
             and ppu.cur_id = akc.base_cur_id
             and nvl(ppu.weight, 1) = 1
             and akc.corporate_id = pc_corporate_id;
        
        exception
          when no_data_found then
            vc_price_unit_id := null;
        end;
        vn_total_penality := 0;
        for cc in (select pci.internal_contract_item_ref_no,
                          pqca.element_id,
                          pcpq.quality_template_id
                     from pci_physical_contract_item  pci,
                          pcpq_pc_product_quality     pcpq,
                          ash_assay_header            ash,
                          asm_assay_sublot_mapping    asm,
                          pqca_pq_chemical_attributes pqca
                    where pci.pcpq_id = pcpq.pcpq_id
                      and pcpq.assay_header_id = ash.ash_id
                      and ash.ash_id = asm.ash_id
                      and asm.asm_id = pqca.asm_id
                      and pci.process_id = pc_process_id
                      and pcpq.process_id = pc_process_id
                      and pci.is_active = 'Y'
                      and pcpq.is_active = 'Y'
                      and ash.is_active = 'Y'
                      and asm.is_active = 'Y'
                      and pqca.is_active = 'Y'
                      and pqca.is_elem_for_pricing = 'N'
                      and pqca.is_deductible = 'N'
                      and pci.internal_contract_item_ref_no =
                          cur_unrealized_rows.internal_contract_item_ref_no)
        loop
        
          pkg_phy_pre_check_process.sp_calc_m2m_tc_pc_rc_charge(cur_unrealized_rows.corporate_id,
                                                                pd_trade_date,
                                                                cur_unrealized_rows.conc_product_id,
                                                                cur_unrealized_rows.conc_quality_id,
                                                                cur_unrealized_rows.mvp_id,
                                                                'Penalties',
                                                                cc.element_id,
                                                                cur_unrealized_rows.shipment_month,
                                                                cur_unrealized_rows.shipment_year,
                                                                vc_price_unit_id,
                                                                vn_penality,
                                                                vc_penality_price_unit_id);
          if nvl(vn_penality, 0) <> 0 then
            vn_total_penality := round(vn_total_penality +
                                       (vn_penality * vn_dry_qty_in_base),
                                       cur_unrealized_rows.base_cur_decimal);
          end if;
        
        end loop;
      
      end if;
    
      vn_ele_m2m_total_amount := vn_ele_m2m_amount_in_base -
                                 vn_ele_m2m_treatment_charge -
                                 vn_ele_m2m_refine_charge;
    
      pkg_general.sp_get_main_cur_detail(cur_unrealized_rows.price_unit_cur_id,
                                         vc_price_cur_id,
                                         vc_price_cur_code,
                                         vn_cont_price_cur_id_factor,
                                         vn_cont_price_cur_decimals);
    
      vn_ele_cont_value_in_price_cur := (cur_unrealized_rows.contract_price /
                                        nvl(cur_unrealized_rows.price_unit_weight,
                                             1)) *
                                        (pkg_general.f_get_converted_quantity(cur_unrealized_rows.product_id,
                                                                              cur_unrealized_rows.payable_qty_unit_id,
                                                                              cur_unrealized_rows.price_unit_weight_unit_id,
                                                                              cur_unrealized_rows.payable_qty)) *
                                        vn_cont_price_cur_id_factor;
    
      pkg_general.sp_forward_cur_exchange_new(cur_unrealized_rows.corporate_id,
                                              pd_trade_date,
                                              cur_unrealized_rows.payment_due_date,
                                              vc_price_cur_id,
                                              cur_unrealized_rows.base_cur_id,
                                              30,
                                              vn_fx_price_to_base,
                                              vn_forward_exch_rate);
      if vc_price_cur_id <> cur_unrealized_rows.base_cur_id then
        if vn_fx_price_to_base is null or vn_fx_price_to_base = 0 then
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_phy_opencon_ext_unreal_pnl',
                                                               'PHY-005',
                                                               cur_unrealized_rows.base_cur_code ||
                                                               ' to ' ||
                                                               vc_price_cur_code || ', ' ||
                                                               to_char(cur_unrealized_rows.payment_due_date,
                                                                       'dd-Mon-yyyy'),
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
        
        end if;
      end if;
    
      -- contract value in value currency will store the data in base currency
      vn_ele_cont_value_in_price_cur := round(vn_ele_cont_value_in_price_cur *
                                              nvl(vn_fx_price_to_base, 1),
                                              cur_unrealized_rows.base_cur_decimal);
    
      vn_ele_cont_premium := vn_base_con_treatment_charge +
                             vn_base_con_refine_charge;
    
      vn_ele_cont_total_premium := round((nvl(vn_ele_cont_premium, 0) *
                                         vn_ele_qty_in_base),
                                         cur_unrealized_rows.base_cur_decimal);
    
      vn_ele_cont_value_in_base_cur := vn_ele_cont_value_in_price_cur -
                                       vn_ele_cont_total_premium;
      -- secondray cost                                 
      if cur_unrealized_rows.ele_rank = 1 then
        vn_sc_in_base_cur := round(cur_unrealized_rows.sc_in_base_cur *
                                   vn_qty_in_base,
                                   cur_unrealized_rows.base_cur_decimal);
      end if;
    
      -- below variable set as zero as it's not used in any calculation.
      vn_unrealized_pnl_in_m2m_unit := 0;
      vc_m2m_price_unit_id          := cur_unrealized_rows.m2m_price_unit_id;
      vc_m2m_price_unit_cur_id      := cur_unrealized_rows.m2m_price_unit_cur_id;
      vc_m2m_price_unit_cur_code    := cur_unrealized_rows.m2m_price_unit_cur_code;
      vc_m2m_price_unit_wgt_unit_id := cur_unrealized_rows.m2m_price_unit_weight_unit_id;
      vc_m2m_price_unit_wgt_unit    := cur_unrealized_rows.m2m_price_unit_weight_unit;
      vn_m2m_price_unit_wgt_unit_wt := cur_unrealized_rows.m2m_price_unit_weight;
    
      insert into poued_element_details
        (corporate_id,
         corporate_name,
         process_id,
         md_id,
         internal_contract_item_ref_no,
         element_id,
         element_name,
         assay_header_id,
         assay_qty,
         assay_qty_unit_id,
         payable_qty,
         payable_qty_unit_id,
         refining_charge,
         treatment_charge,
         pricing_details,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight_unit_id,
         price_unit_weight,
         price_unit_weight_unit,
         m2m_price,
         m2m_price_unit_id,
         m2m_price_cur_id,
         m2m_price_cur_code,
         m2m_price_weight,
         m2m_price_weght_unit_id,
         m2m_price_weight_unit,
         contract_value,
         contract_value_cur_id,
         contract_value_cur_code,
         contract_value_in_base,
         contract_premium_value_in_base,
         m2m_value,
         m2m_value_cur_id,
         m2m_value_cur_code,
         m2m_refining_charge,
         m2m_treatment_charge,
         m2m_loc_diff,
         m2m_amt_in_base,
         valuation_dr_id,
         valuation_dr_id_name,
         valuation_month,
         valuation_date,
         expected_cog_net_sale_value,
         unrealized_pnl_in_base_cur,
         base_cur_id,
         base_cur_code,
         price_cur_to_base_cur_fx_rate,
         m2m_cur_to_base_cur_fx_rate,
         derivative_def_id,
         valuation_exchange_id,
         valuation_exchange,
         element_qty_in_base_unit,
         base_price_unit_id_ppu,
         base_price_unit_name,
         valuation_against_underlying,
         is_tolling_contract,
         is_tolling_extn)
      values
        (cur_unrealized_rows.corporate_id,
         cur_unrealized_rows.corporate_name,
         pc_process_id,
         cur_unrealized_rows.md_id,
         cur_unrealized_rows.internal_contract_item_ref_no,
         cur_unrealized_rows.element_id,
         cur_unrealized_rows.attribute_name,
         cur_unrealized_rows.assay_header_id,
         cur_unrealized_rows.assay_qty,
         cur_unrealized_rows.assay_qty_unit_id,
         cur_unrealized_rows.payable_qty,
         cur_unrealized_rows.payable_qty_unit_id,
         vn_base_con_refine_charge,
         vn_base_con_treatment_charge,
         cur_unrealized_rows.attribute_name ||
         cur_unrealized_rows.price_description, --pricing_details,
         cur_unrealized_rows.contract_price,
         cur_unrealized_rows.price_unit_id,
         cur_unrealized_rows.price_unit_cur_id,
         cur_unrealized_rows.price_unit_cur_code,
         cur_unrealized_rows.price_unit_weight_unit_id,
         cur_unrealized_rows.price_unit_weight,
         cur_unrealized_rows.price_unit_weight_unit,
         cur_unrealized_rows.net_m2m_price,
         cur_unrealized_rows.m2m_price_unit_id,
         cur_unrealized_rows.m2m_price_unit_cur_id,
         cur_unrealized_rows.m2m_price_unit_cur_code,
         decode(cur_unrealized_rows.m2m_price_unit_weight,
                1,
                null,
                cur_unrealized_rows.m2m_price_unit_weight),
         cur_unrealized_rows.m2m_price_unit_weight_unit_id,
         cur_unrealized_rows.m2m_price_unit_weight_unit,
         vn_ele_cont_value_in_price_cur, --contract_value,
         vc_price_cur_id, --contract_value_cur_id,
         vc_price_cur_code, --contract_value_cur_code,
         vn_ele_cont_value_in_price_cur, --contract_value_in_base, 
         vn_ele_cont_total_premium, --contract_premium_value_in_base , 
         vn_ele_m2m_amount_in_base, --m2m_value,
         vc_m2m_cur_id, --m2m_value_cur_id,
         vc_m2m_cur_code, --m2m_value_cur_code,
         vn_ele_m2m_refine_charge,
         vn_ele_m2m_treatment_charge,
         cur_unrealized_rows.m2m_loc_incoterm_deviation,
         vn_ele_m2m_amount_in_base, -- updated by siva on 14sep2011 vn_ele_m2m_total_amount, --m2m_amt_in_base, ---used to sum at main table
         cur_unrealized_rows.valuation_dr_id,
         cur_unrealized_rows.dr_id_name,
         cur_unrealized_rows.valuation_month,
         cur_unrealized_rows.valuation_date,
         vn_ele_exp_cog_in_base_cur, --expected_cog_net_sale_value,
         vn_ele_unreal_pnl_in_base_cur, --unrealized_pnl_in_base_cur,
         cur_unrealized_rows.base_cur_id,
         cur_unrealized_rows.base_cur_code,
         vn_fx_price_to_base, --price_cur_to_base_cur_fx_rate,
         vn_m2m_base_fx_rate, --m2m_cur_to_base_cur_fx_rate,
         cur_unrealized_rows.derivative_def_id,
         cur_unrealized_rows.valuation_exchange_id,
         cur_unrealized_rows.exchange_name,
         vn_ele_qty_in_base,
         cur_unrealized_rows.base_price_unit_id_in_ppu,
         cur_unrealized_rows.base_price_unit_name,
         cur_unrealized_rows.valuation_against_underlying,
         'Y',
         'Y');
    
      if cur_unrealized_rows.ele_rank = 1 then
        insert into poue_phy_open_unreal_element
          (corporate_id,
           corporate_name,
           process_id,
           pcdi_id,
           delivery_item_no,
           prefix,
           middle_no,
           suffix,
           internal_contract_ref_no,
           contract_ref_no,
           contract_issue_date,
           internal_contract_item_ref_no,
           basis_type,
           delivery_period_type,
           delivery_from_month,
           delivery_from_year,
           delivery_to_month,
           delivery_to_year,
           delivery_from_date,
           delivery_to_date,
           transit_days,
           contract_type,
           approval_status,
           unrealized_type,
           profit_center_id,
           profit_center_name,
           profit_center_short_name,
           cp_profile_id,
           cp_name,
           trade_user_id,
           trade_user_name,
           product_id,
           product_name,
           item_dry_qty,
           item_wet_qty,
           qty_unit_id,
           qty_unit,
           quality_id,
           quality_name,
           fixation_method,
           price_string,
           price_fixation_status,
           price_fixation_details,
           item_delivery_period_string,
           incoterm_id,
           incoterm,
           origination_city_id,
           origination_city,
           origination_country_id,
           origination_country,
           destination_city_id,
           destination_city,
           destination_country_id,
           destination_country,
           origination_region_id,
           origination_region,
           destination_region_id,
           destination_region,
           payment_term_id,
           payment_term,
           contract_price_string,
           contract_rc_tc_pen_string,
           m2m_price_string,
           m2m_rc_tc_pen_string,
           net_contract_value_in_base_cur,
           net_contract_prem_in_base_cur,
           net_m2m_amt_in_base_cur,
           net_sc_in_base_cur,
           expected_cog_net_sale_value,
           unrealized_pnl_in_base_cur,
           unreal_pnl_in_base_per_unit,
           prev_day_unr_pnl_in_base_cur,
           trade_day_pnl_in_base_cur,
           base_cur_id,
           base_cur_code,
           group_id,
           group_name,
           group_cur_id,
           group_cur_code,
           group_qty_unit_id,
           group_qty_unit,
           base_qty_unit_id,
           base_qty_unit,
           cont_unr_status,
           qty_in_base_unit,
           process_trade_date,
           strategy_id,
           strategy_name,
           del_distribution_item_no,
           penalty_charge,
           m2m_penalty_charge,
           m2m_loc_diff_premium,
           valuation_against_underlying,
           is_tolling_contract,
           is_tolling_extn,
           contract_status,
           is_approved)
        values
          (cur_unrealized_rows.corporate_id,
           cur_unrealized_rows.corporate_name,
           pc_process_id,
           cur_unrealized_rows.pcdi_id,
           cur_unrealized_rows.delivery_item_no,
           cur_unrealized_rows.prefix,
           cur_unrealized_rows.middle_no,
           cur_unrealized_rows.suffix,
           cur_unrealized_rows.internal_contract_ref_no,
           cur_unrealized_rows.contract_ref_no,
           cur_unrealized_rows.issue_date,
           cur_unrealized_rows.internal_contract_item_ref_no,
           cur_unrealized_rows.basis_type,
           cur_unrealized_rows.delivery_period_type,
           cur_unrealized_rows.delivery_from_month,
           cur_unrealized_rows.delivery_from_year,
           cur_unrealized_rows.delivery_to_month,
           cur_unrealized_rows.delivery_to_year,
           cur_unrealized_rows.delivery_from_date,
           cur_unrealized_rows.delivery_to_date,
           cur_unrealized_rows.transit_days,
           cur_unrealized_rows.purchase_sales,
           cur_unrealized_rows.approval_status,---
           cur_unrealized_rows.unrealized_type,
           cur_unrealized_rows.profit_center_id,
           cur_unrealized_rows.profit_center_name,
           cur_unrealized_rows.profit_center_short_name,
           cur_unrealized_rows.cp_id,
           cur_unrealized_rows.cp_name,
           cur_unrealized_rows.trader_id,
           cur_unrealized_rows.trader_user_name,
           cur_unrealized_rows.conc_product_id,
           cur_unrealized_rows.conc_product_name,
           vn_dry_qty,
           vn_wet_qty,
           cur_unrealized_rows.qty_unit_id,
           cur_unrealized_rows.qty_unit,
           cur_unrealized_rows.conc_quality_id,
           cur_unrealized_rows.conc_quality_name,
           cur_unrealized_rows.fixation_method,
           cur_unrealized_rows.price_description,
           cur_unrealized_rows.price_fixation_status,
           cur_unrealized_rows.price_fixation_details,
           cur_unrealized_rows.item_delivery_period_string,
           cur_unrealized_rows.inco_term_id,
           cur_unrealized_rows.incoterm,
           cur_unrealized_rows.origination_city_id,
           cur_unrealized_rows.origination_city,
           cur_unrealized_rows.origination_country_id,
           cur_unrealized_rows.origination_country,
           cur_unrealized_rows.destination_city_id,
           cur_unrealized_rows.destination_city,
           cur_unrealized_rows.destination_country_id,
           cur_unrealized_rows.destination_country,
           cur_unrealized_rows.origination_region_id,
           cur_unrealized_rows.origination_region,
           cur_unrealized_rows.destination_region_id,
           cur_unrealized_rows.destination_region,
           cur_unrealized_rows.payment_term_id,
           cur_unrealized_rows.payment_term,
           null, -- contract_price_string,
           null, --contract_rc_tc_pen_string,
           null, -- m2m_price_string,
           null, -- m2m_rc_tc_pen_string,
           null, -- net_contract_value_in_base_cur,
           null, -- net_contract_prem_in_base_cur,
           null, -- net_m2m_amt_in_base_cur, 
           vn_sc_in_base_cur, -- net_sc_in_base_cur,
           null, -- expected_cog_net_sale_value,
           null, -- unrealized_pnl_in_base_cur,
           null, -- unreal_pnl_in_base_per_unit,
           null, -- prev_day_unr_pnl_in_base_cur,
           null, -- trade_day_pnl_in_base_cur,
           cur_unrealized_rows.base_cur_id,
           cur_unrealized_rows.base_cur_code,
           cur_unrealized_rows.groupid,
           cur_unrealized_rows.groupname,
           cur_unrealized_rows.cur_id_gcd,
           cur_unrealized_rows.cur_code_gcd,
           cur_unrealized_rows.qty_unit_id_gcd,
           cur_unrealized_rows.qty_unit_gcd,
           cur_unrealized_rows.base_qty_unit_id,
           cur_unrealized_rows.base_qty_unit,
           null, -- cont_unr_status,
           vn_qty_in_base,
           pd_trade_date,
           cur_unrealized_rows.strategy_id,
           cur_unrealized_rows.strategy_name,
           cur_unrealized_rows.del_distribution_item_no,
           vn_base_con_penality_charge,
           vn_total_penality,
           vn_loc_total_amount,
           cur_unrealized_rows.valuation_against_underlying,
           'Y',
           'Y',
           cur_unrealized_rows.contract_status,
           cur_unrealized_rows.approval_flag);
      end if;
    end loop;
    commit;
  
    for cur_update_pnl in (select poude.internal_contract_item_ref_no,
                                  sum(poude.contract_value_in_base) net_contract_value_in_base_cur,
                                  sum(poude.contract_premium_value_in_base) net_contract_prem_in_base_cur,
                                  sum(poude.m2m_amt_in_base) net_m2m_amt_in_base_cur,
                                  sum(poude.treatment_charge) net_contract_treatment_charge,
                                  sum(poude.refining_charge) net_contract_refining_charge,
                                  sum(poude.m2m_treatment_charge) net_m2m_treatment_charge,
                                  sum(poude.m2m_refining_charge) net_m2m_refining_charge,
                                  stragg(poude.element_name || '-' ||
                                         poude.contract_price || ' ' ||
                                         poude.price_unit_cur_code || '/' ||
                                         poude.price_unit_weight ||
                                         poude.price_unit_weight_unit) contract_price_string,
                                  (case
                                     when poude.valuation_against_underlying = 'N' then
                                      max((case
                                     when nvl(poude.m2m_price, 0) <> 0 then
                                      (poude.m2m_price || ' ' ||
                                      poude.m2m_price_cur_code || '/' ||
                                      poude.m2m_price_weight ||
                                      poude.m2m_price_weight_unit)
                                     else
                                      null
                                   end)) else stragg((case
                                    when nvl(poude.m2m_price,
                                             0) <> 0 then
                                     (poude.element_name || '-' ||
                                     poude.m2m_price || ' ' ||
                                     poude.m2m_price_cur_code || '/' ||
                                     poude.m2m_price_weight ||
                                     poude.m2m_price_weight_unit)
                                    else
                                     null
                                  end)) end) m2m_price_string, -- TODO if underly valuation = n, show the concentrate price
                                  stragg('TC:' || poude.element_name || '-' ||
                                         poude.treatment_charge || ' ' ||
                                         poude.base_cur_code || '  ' ||
                                         'RC:' || poude.element_name || '-' ||
                                         poude.refining_charge || ' ' ||
                                         poude.base_cur_code) contract_rc_tc_pen_string,
                                  stragg('TC:' || poude.element_name || '-' ||
                                         poude.m2m_treatment_charge || ' ' ||
                                         poude.base_cur_code || ' ' || 'RC:' ||
                                         poude.element_name || '-' ||
                                         poude.m2m_refining_charge || ' ' ||
                                         poude.base_cur_code) m2m_rc_tc_pen_string
                             from poued_element_details poude
                            where poude.corporate_id = pc_corporate_id
                              and poude.process_id = pc_process_id
                              and poude.is_tolling_contract = 'Y'
                              and poude.is_tolling_extn = 'Y'
                           
                            group by poude.internal_contract_item_ref_no,
                                     poude.valuation_against_underlying)
    loop
      update poue_phy_open_unreal_element poue
         set poue.net_contract_value_in_base_cur = round(cur_update_pnl.net_contract_value_in_base_cur,
                                                         2),
             poue.net_contract_prem_in_base_cur  = round(cur_update_pnl.net_contract_prem_in_base_cur,
                                                         2),
             poue.net_m2m_amt_in_base_cur        = round(cur_update_pnl.net_m2m_amt_in_base_cur,
                                                         2),
             poue.net_contract_treatment_charge  = cur_update_pnl.net_contract_treatment_charge,
             poue.net_contract_refining_charge   = cur_update_pnl.net_contract_refining_charge,
             poue.net_m2m_treatment_charge       = cur_update_pnl.net_m2m_treatment_charge,
             poue.net_m2m_refining_charge        = cur_update_pnl.net_m2m_refining_charge,
             poue.contract_price_string          = cur_update_pnl.contract_price_string,
             poue.m2m_price_string               = cur_update_pnl.m2m_price_string,
             poue.contract_rc_tc_pen_string      = cur_update_pnl.contract_rc_tc_pen_string,
             poue.m2m_rc_tc_pen_string           = cur_update_pnl.m2m_rc_tc_pen_string
       where poue.internal_contract_item_ref_no =
             cur_update_pnl.internal_contract_item_ref_no
         and poue.process_id = pc_process_id
         and poue.corporate_id = pc_corporate_id
         and poue.is_tolling_contract = 'Y'
         and poue.is_tolling_extn = 'Y';
    end loop;
    commit;
  
    update poue_phy_open_unreal_element poue
       set poue.expected_cog_net_sale_value = poue.net_contract_value_in_base_cur -
                                              poue.net_contract_treatment_charge -
                                              poue.net_contract_refining_charge +
                                              poue.net_sc_in_base_cur
     where poue.corporate_id = pc_corporate_id
       and poue.process_id = pc_process_id
       and poue.is_tolling_contract = 'Y'
       and poue.is_tolling_extn = 'Y';
    commit;
    --- update unrealized pnl
  
    update poue_phy_open_unreal_element poue
       set poue.unrealized_pnl_in_base_cur = (case when poue.contract_type = 'P' then(poue.net_m2m_amt_in_base_cur - poue.net_m2m_treatment_charge - poue.net_m2m_refining_charge - nvl(poue.m2m_penalty_charge, 0) + poue.m2m_loc_diff_premium) - (poue.expected_cog_net_sale_value - nvl(poue.penalty_charge, 0)) else(poue.expected_cog_net_sale_value - nvl(poue.penalty_charge, 0)) - (poue.net_m2m_amt_in_base_cur - poue.net_m2m_treatment_charge - poue.net_m2m_refining_charge - nvl(poue.m2m_penalty_charge, 0) + poue.m2m_loc_diff_premium) end)
     where poue.corporate_id = pc_corporate_id
       and poue.process_id = pc_process_id
       and poue.is_tolling_contract = 'Y'
       and poue.is_tolling_extn = 'Y';
    commit;
    -- update pnl base per unit
    update poue_phy_open_unreal_element poue
       set poue.unreal_pnl_in_base_per_unit = round(poue.unrealized_pnl_in_base_cur /
                                                    poue.qty_in_base_unit,
                                                    2)
     where poue.corporate_id = pc_corporate_id
       and poue.process_id = pc_process_id
       and poue.qty_in_base_unit <> 0
       and poue.is_tolling_contract = 'Y'
       and poue.is_tolling_extn = 'Y';
  
    -- update previous eod data  
    begin
      for cur_update in (select poue_prev_day.internal_contract_item_ref_no,
                                poue_prev_day.unreal_pnl_in_base_per_unit,
                                poue_prev_day.unrealized_type
                           from poue_phy_open_unreal_element poue_prev_day
                          where poue_prev_day.process_id =
                                pc_previous_process_id
                            and corporate_id = pc_corporate_id
                            and poue_prev_day.is_tolling_contract = 'Y'
                            and poue_prev_day.is_tolling_extn = 'Y')
      loop
        update poue_phy_open_unreal_element poue_today
           set poue_today.prev_day_unr_pnl_in_base_cur = round(cur_update.unreal_pnl_in_base_per_unit *
                                                               poue_today.qty_in_base_unit,
                                                               2),
               poue_today.cont_unr_status              = 'EXISTING_TRADE'
         where poue_today.internal_contract_item_ref_no =
               cur_update.internal_contract_item_ref_no
           and poue_today.process_id = pc_process_id
           and poue_today.unrealized_type = cur_update.unrealized_type
           and poue_today.corporate_id = pc_corporate_id
           and poue_today.is_tolling_contract = 'Y'
           and poue_today.is_tolling_extn = 'Y';
      end loop;
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  
    -- mark the trades came as new in this eod/eom
  
    begin
      update poue_phy_open_unreal_element poue
         set poue.cont_unr_status = 'NEW_TRADE'
       where poue.cont_unr_status is null
         and poue.process_id = pc_process_id
         and poue.corporate_id = pc_corporate_id
         and poue.is_tolling_contract = 'Y'
         and poue.is_tolling_extn = 'Y';
    exception
      when others then
        dbms_output.put_line('SQLERRM-2' || sqlerrm);
    end;
  
    update poue_phy_open_unreal_element poue
       set poue.trade_day_pnl_in_base_cur = round(nvl(poue.unrealized_pnl_in_base_cur,
                                                      0) - nvl(poue.prev_day_unr_pnl_in_base_cur,
                                                               0),
                                                  2)
     where poue.process_id = pc_process_id
       and poue.corporate_id = pc_corporate_id
       and poue.unrealized_type = 'Unrealized'
       and poue.is_tolling_contract = 'Y'
       and poue.is_tolling_extn = 'Y';
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_phy_opencon_ext_unreal_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_phy_stok_con_ext_unreal_pnl(pc_corporate_id        varchar2,
                                           pd_trade_date          date,
                                           pc_process_id          varchar2,
                                           pc_user_id             varchar2,
                                           pc_process             varchar2,
                                           pc_previous_process_id varchar2) is
  
    cursor cur_grd is
      select tt.section_type,
             tt.profit_center,
             tt.profit_center_name,
             tt.profit_center_short_name,
             tt.process_id,
             tt.corporate_id,
             tt.corporate_name,
             tt.internal_gmr_ref_no,
             tt.internal_contract_item_ref_no,
             tt.del_distribution_item_no,
             tt.delivery_item_no,
             tt.contract_ref_no,
             tt.purchase_sales,
             tt.conc_product_id,
             tt.conc_product_name,
             tt.product_id,
             tt.product_name,
             tt.origin_id,
             tt.origin_name,
             tt.conc_quality_id,
             tt.conc_quality_name,
             tt.quality_id,
             tt.quality_name,
             tt.container_no,
             tt.stock_qty,
             tt.qty_unit_id,
             tt.gmr_qty_unit_id,
             tt.qty_unit,
             tt.stocky_qty_decimal,
             tt.no_of_units,
             tt.md_id,
             tt.m2m_price_unit_id,
             tt.net_m2m_price,
             tt.m2m_price_unit_cur_id,
             tt.m2m_price_unit_cur_code,
             tt.m2m_price_unit_weight_unit_id,
             tt.m2m_price_unit_weight_unit,
             tt.m2m_price_unit_weight,
             tt.m2m_price_unit_str,
             tt.m2m_main_cur_id,
             tt.m2m_main_cur_code,
             tt.m2m_main_cur_decimals,
             tt.main_currency_factor,
             tt.settlement_cur_id,
             tt.settlement_to_val_fx_rate,
             tt.element_id,
             tt.attribute_name,
             tt.assay_header_id,
             tt.assay_qty,
             tt.assay_qty_unit_id,
             tt.payable_qty,
             tt.payable_qty_unit_id,
             tt.payable_qty_unit,
             tt.contract_price,
             tt.price_unit_id,
             tt.price_unit_weight_unit_id,
             tt.price_unit_weight,
             tt.price_unit_cur_id,
             tt.price_unit_cur_code,
             tt.price_unit_weight_unit,
             tt.price_fixation_details,
             tt.price_description,
             tt.payment_due_date,
             tt.base_cur_id,
             tt.base_cur_code,
             tt.base_cur_decimal,
             tt.inventory_status,
             tt.shipment_status,
             tt.section_name,
             tt.price_basis,
             tt.shed_id,
             tt.destination_city_id,
             tt.price_fixation_status,
             tt.base_qty_unit_id,
             tt.conc_base_qty_unit_id,
             tt.base_qty_decimal,
             tt.strategy_id,
             tt.strategy_name,
             tt.valuation_exchange_id,
             tt.valuation_month,
             tt.derivative_def_id,
             tt.is_voyage_gmr,
             tt.gmr_contract_type,
             tt.int_alloc_group_id,
             tt.internal_grd_dgrd_ref_no,
             tt.stock_ref_no,
             tt.trader_id,
             tt.trader_user_name,
             tt.m2m_loc_incoterm_deviation,
             tt.m2m_treatment_charge,
             tt.m2m_refine_charge,
             tt.m2m_tc_price_unit_id,
             tt.m2m_tc_price_unit_name,
             tt.m2m_tc_cur_id,
             tt.m2m_tc_weight,
             tt.m2m_tc_weight_unit_id,
             tt.m2m_rc_price_unit_id,
             tt.m2m_rc_price_unit_name,
             tt.m2m_rc_cur_id,
             tt.m2m_rc_weight,
             tt.m2m_rc_weight_unit_id,
             tt.base_price_unit_id_in_ppu,
             tt.base_price_unit_id_in_pum,
             tt.eval_basis,
             dense_rank() over(partition by tt.internal_contract_item_ref_no order by tt.element_id) ele_rank,
             tt.unit_of_measure,
             tt.loc_qty_unit_id,
             tt.mvp_id,
             tt.shipment_month,
             tt.shipment_year,
             tt.base_price_unit_name,
             tt.valuation_against_underlying
        from (
              ----  Stock non event based GMR price using CIPDE
              select 'Purchase' section_type,
                      pcpd.profit_center_id profit_center,
                      cpc.profit_center_name,
                      cpc.profit_center_short_name,
                      pc_process_id process_id,
                      gmr.corporate_id,
                      akc.corporate_name,
                      gmr.internal_gmr_ref_no,
                      grd.internal_contract_item_ref_no,
                      pci.del_distribution_item_no,
                      pcdi.delivery_item_no,
                      pcm.contract_ref_no,
                      pcm.purchase_sales,
                      pcpd.product_id conc_product_id,
                      pdm_conc.product_desc conc_product_name,
                      aml.underlying_product_id product_id,
                      pdm.product_desc product_name,
                      grd.origin_id,
                      orm.origin_name,
                      pcpq.quality_template_id conc_quality_id,
                      qat.quality_name conc_quality_name,
                      qav.comp_quality_id quality_id,
                      qat_und.quality_name,
                      grd.container_no,
                      grd.current_qty stock_qty,
                      grd.qty_unit_id,
                      gmr.qty_unit_id gmr_qty_unit_id,
                      qum.qty_unit,
                      qum.decimals stocky_qty_decimal,
                      grd.no_of_units,
                      md.md_id,
                      md.m2m_price_unit_id,
                      md.net_m2m_price,
                      md.m2m_price_unit_cur_id,
                      md.m2m_price_unit_cur_code,
                      md.m2m_price_unit_weight_unit_id,
                      md.m2m_price_unit_weight_unit,
                      nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                      md.m2m_price_unit_cur_code || '/' ||
                      decode(md.m2m_price_unit_weight,
                             1,
                             null,
                             md.m2m_price_unit_weight) ||
                      md.m2m_price_unit_weight_unit m2m_price_unit_str,
                      md.m2m_main_cur_id,
                      md.m2m_main_cur_code,
                      md.m2m_main_cur_decimals,
                      md.main_currency_factor,
                      md.settlement_cur_id,
                      md.settlement_to_val_fx_rate,
                      cipde.element_id,
                      aml.attribute_name,
                      sam.ash_id assay_header_id,
                      ceqs.assay_qty,
                      ceqs.assay_qty_unit_id,
                      gmr_qty.payable_qty,
                      gmr_qty.qty_unit_id payable_qty_unit_id,
                      gmr_qum.qty_unit payable_qty_unit,
                      cipde.contract_price,
                      cipde.price_unit_id,
                      cipde.price_unit_weight_unit_id,
                      cipde.price_unit_weight,
                      cipde.price_unit_cur_id,
                      cipde.price_unit_cur_code,
                      cipde.price_unit_weight_unit,
                      cipde.price_fixation_details,
                      cipde.price_description,
                      nvl(cipde.payment_due_date, pd_trade_date) payment_due_date,
                      akc.base_cur_id as base_cur_id,
                      akc.base_currency_name base_cur_code,
                      cm.decimals as base_cur_decimal,
                      grd.inventory_status,
                      gsm.status shipment_status,
                      (case
                        when nvl(grd.is_afloat, 'N') = 'Y' and
                             nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                         'Shipped NTT'
                        when nvl(grd.is_afloat, 'N') = 'Y' and
                             nvl(grd.inventory_status, 'NA') = 'In' then
                         'Shipped IN'
                        when nvl(grd.is_afloat, 'N') = 'Y' and
                             nvl(grd.inventory_status, 'NA') = 'Out' then
                         'Shipped TT'
                        when nvl(grd.is_afloat, 'N') = 'N' and
                             nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                         'Stock NTT'
                        when nvl(grd.is_afloat, 'N') = 'N' and
                             nvl(grd.inventory_status, 'NA') = 'In' then
                         'Stock IN'
                        when nvl(grd.is_afloat, 'N') = 'N' and
                             nvl(grd.inventory_status, 'NA') = 'Out' then
                         'Stock TT'
                        else
                         'Others'
                      end) section_name,
                      cipde.price_basis,
                      gmr.shed_id,
                      gmr.destination_city_id,
                      cipde.price_fixation_status price_fixation_status,
                      pdm.base_quantity_unit base_qty_unit_id,
                      qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                      qum_pdm_conc.decimals as base_qty_decimal,
                      pcpd.strategy_id,
                      css.strategy_name,
                      md.valuation_exchange_id,
                      md.valuation_month,
                      md.derivative_def_id,
                      nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                      gmr.contract_type gmr_contract_type,
                      null int_alloc_group_id,
                      grd.internal_grd_ref_no internal_grd_dgrd_ref_no,
                      grd.internal_stock_ref_no stock_ref_no,
                      pcm.trader_id,
                      (case
                        when pcm.trader_id is not null then
                         (select gab.firstname || ' ' || gab.lastname
                            from gab_globaladdressbook gab,
                                 ak_corporate_user     aku
                           where gab.gabid = aku.gabid
                             and aku.user_id = pcm.trader_id)
                        else
                         ''
                      end) trader_user_name,
                      md.m2m_loc_incoterm_deviation,
                      md.treatment_charge m2m_treatment_charge,
                      md.refine_charge m2m_refine_charge,
                      tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                      tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                      tc_ppu_pum.cur_id m2m_tc_cur_id,
                      tc_ppu_pum.weight m2m_tc_weight,
                      tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                      rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                      rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                      rc_ppu_pum.cur_id m2m_rc_cur_id,
                      rc_ppu_pum.weight m2m_rc_weight,
                      rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                      md.base_price_unit_id_in_ppu,
                      md.base_price_unit_id_in_pum,
                      qat.eval_basis,
                      pcpq.unit_of_measure,
                      pum_loc_base.weight_unit_id loc_qty_unit_id,
                      tmpc.mvp_id,
                      tmpc.shipment_month,
                      tmpc.shipment_year,
                      pum_base_price_id.price_unit_name base_price_unit_name,
                      nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying
                from gmr_goods_movement_record gmr,
                      grd_goods_record_detail grd,
                      pcm_physical_contract_main pcm,
                      pcpd_pc_product_definition pcpd,
                      cpc_corporate_profit_center cpc,
                      pdm_productmaster pdm,
                      orm_origin_master orm,
                      (select tmp.*
                         from tmpc_temp_m2m_pre_check tmp
                        where tmp.corporate_id = pc_corporate_id
                          and tmp.product_type = 'CONCENTRATES'
                          and tmp.section_name <> 'OPEN') tmpc,
                      qum_quantity_unit_master qum,
                      qat_quality_attributes qat,
                      (select md1.*
                         from md_m2m_daily md1
                        where md1.rate_type <> 'OPEN'
                          and md1.corporate_id = pc_corporate_id
                          and md1.product_type = 'CONCENTRATES'
                          and md1.process_id = pc_process_id) md,
                      cipde_cipd_element_price cipde,
                      ciqs_contract_item_qty_status ciqs,
                      pci_physical_contract_item pci,
                      pcpq_pc_product_quality pcpq,
                      pcdi_pc_delivery_item pcdi,
                      qav_quality_attribute_values qav,
                      ppm_product_properties_mapping ppm,
                      qat_quality_attributes qat_und,
                      aml_attribute_master_list aml,
                      pcdb_pc_delivery_basis pcdb,
                      ak_corporate akc,
                      cm_currency_master cm,
                      gsm_gmr_stauts_master gsm,
                      css_corporate_strategy_setup css,
                      pdm_productmaster pdm_conc,
                      qum_quantity_unit_master qum_pdm_conc,
                      pum_price_unit_master pum_loc_base,
                      pum_price_unit_master pum_base_price_id,
                      v_gmr_stockpayable_qty gmr_qty,
                      qum_quantity_unit_master gmr_qum,
                      v_ppu_pum tc_ppu_pum,
                      v_ppu_pum rc_ppu_pum,
                      ceqs_contract_ele_qty_status ceqs,
                      sam_stock_assay_mapping sam
               where grd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and gmr.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and grd.origin_id = orm.origin_id(+)
                 and grd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and grd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and grd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = cipde.element_id
                 and md.element_id = cipde.element_id
                 and grd.internal_contract_item_ref_no =
                     cipde.internal_contract_item_ref_no
                 and grd.process_id = cipde.process_id
                 and cipde.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and grd.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and ppm.attribute_id = aml.attribute_id
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = cipde.element_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = gmr_qty.internal_grd_ref_no
                 and cipde.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and cipde.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and pcm.purchase_sales = 'P'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'Y'
                 and pcm.is_tolling_extn = 'Y'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
                 and gmr.is_deleted = 'N'
                 and nvl(grd.inventory_status, 'NA') <> 'Out'
                 and pcm.purchase_sales = 'P'
                 and nvl(grd.current_qty, 0) > 0
                 and gmr.is_internal_movement = 'N'
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and not exists
               (select gpd.process_id
                        from gpd_gmr_conc_price_daily gpd
                       where gpd.process_id = gmr.process_id
                         and gpd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                         and gpd.corporate_id = gmr.corporate_id
                         and gpd.element_id = tmpc.element_id)
              union all
              ------  Stock event based GMR price using GPD
              select 'Purchase' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     grd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     grd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     grd.container_no,
                     grd.current_qty stock_qty,
                     grd.qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     grd.no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     ceqs.element_id, --cipde.element_id,
                     aml.attribute_name,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     gpd.contract_price,
                     gpd.price_unit_id,
                     gpd.price_unit_weight_unit_id,
                     gpd.price_unit_weight,
                     gpd.price_unit_cur_id,
                     gpd.price_unit_cur_code,
                     gpd.price_unit_weight_unit,
                     gpd.price_fixation_details, --cipde.price_fixation_details,
                     gpd.price_description price_description, --- cipde.price_description,
                     (case
                       when nvl(pcdi.payment_due_date, pd_trade_date) <
                            pd_trade_date then
                        pd_trade_date
                       else
                        nvl(pcdi.payment_due_date, pd_trade_date)
                     end) payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     grd.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                        'Shipped NTT'
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') = 'In' then
                        'Shipped IN'
                       when nvl(grd.is_afloat, 'N') = 'Y' and
                            nvl(grd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') in ('None', 'NA') then
                        'Stock NTT'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') = 'In' then
                        'Stock IN'
                       when nvl(grd.is_afloat, 'N') = 'N' and
                            nvl(grd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     gpd.price_basis, -- cipde.price_basis,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     gpd.price_fixation_status, ---cipde.price_fixation_status price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     null int_alloc_group_id,
                     grd.internal_grd_ref_no internal_grd_dgrd_ref_no,
                     grd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying
                from gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     gpd_gmr_conc_price_daily gpd,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qum_quantity_unit_master qum,
                     qat_quality_attributes qat,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     ciqs_contract_item_qty_status ciqs,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     pcdi_pc_delivery_item pcdi,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     pcdb_pc_delivery_basis pcdb,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam
               where grd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and gmr.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and grd.origin_id = orm.origin_id(+)
                 and gmr.internal_gmr_ref_no = gpd.internal_gmr_ref_no(+)
                 and gmr.process_id = gpd.process_id(+)
                 and gpd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no
                 and gpd.element_id = tmpc.element_id
                 and grd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and grd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and grd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = gpd.element_id
                 and md.element_id = gpd.element_id
                 and grd.process_id = gpd.process_id
                 and grd.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and ppm.attribute_id = aml.attribute_id
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = gpd.element_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = gmr_qty.internal_grd_ref_no
                 and gpd.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and gpd.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                 and pcm.purchase_sales = 'P'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'Y'
                 and pcm.is_tolling_extn = 'Y'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
                 and gmr.is_deleted = 'N'
                 and nvl(grd.inventory_status, 'NA') <> 'Out'
                 and pcm.purchase_sales = 'P'
                 and nvl(grd.current_qty, 0) > 0
                 and gmr.is_internal_movement = 'N'
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_position_assay = 'Y'
              union all
              ------  Sales non event based GMR price using CIPDE
              select 'Sales' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     dgrd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     dgrd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     '' container_no,
                     dgrd.net_weight stock_qty,
                     dgrd.net_weight_unit_id qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     gmr.current_no_of_units no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     cipde.element_id,
                     aml.attribute_name,
                     --pcpq.assay_header_id,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     cipde.contract_price,
                     cipde.price_unit_id,
                     cipde.price_unit_weight_unit_id,
                     cipde.price_unit_weight,
                     cipde.price_unit_cur_id,
                     cipde.price_unit_cur_code,
                     cipde.price_unit_weight_unit,
                     cipde.price_fixation_details,
                     cipde.price_description,
                     nvl(cipde.payment_due_date, pd_trade_date) payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     gmr.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(dgrd.inventory_status, 'NA') = 'Under CMA' then
                        'UnderCMA NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') in
                            ('In', 'None', 'NA') then
                        'Shipped NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') in
                            ('In', 'None', 'NA') then
                        'Stock NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     cipde.price_basis,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     cipde.price_fixation_status price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     agh.int_alloc_group_id,
                     dgrd.internal_dgrd_ref_no internal_grd_dgrd_ref_no,
                     dgrd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying
                from gmr_goods_movement_record gmr,
                     dgrd_delivered_grd dgrd,
                     agh_alloc_group_header agh,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qat_quality_attributes qat,
                     qum_quantity_unit_master qum,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     cipde_cipd_element_price cipde,
                     pcdi_pc_delivery_item pcdi,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     ciqs_contract_item_qty_status ciqs,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pcdb_pc_delivery_basis pcdb,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam
               where dgrd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and dgrd.int_alloc_group_id = agh.int_alloc_group_id
                 and gmr.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and dgrd.origin_id = orm.origin_id(+)
                 and dgrd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and dgrd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and dgrd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and dgrd.net_weight_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = cipde.element_id
                 and md.element_id = cipde.element_id
                 and dgrd.internal_contract_item_ref_no =
                     cipde.internal_contract_item_ref_no
                 and cipde.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pci.internal_contract_item_ref_no =
                     cipde.internal_contract_item_ref_no
                 and pci.pcpq_id = pcpq.pcpq_id
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and pcpq.quality_template_id = qat.quality_id
                 and ppm.attribute_id = aml.attribute_id(+)
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = cipde.element_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and pci.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and cm.cur_code = akc.base_currency_name
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and dgrd.internal_dgrd_ref_no = gmr_qty.internal_dgrd_ref_no
                 and cipde.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and pcm.purchase_sales = 'S'
                 and gsm.is_required_for_m2m = 'Y'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'Y'
                 and pcm.is_tolling_extn = 'Y'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcdb.is_active = 'Y'
                 and gmr.is_deleted = 'N'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and dgrd.process_id = pc_process_id
                 and agh.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and cipde.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                    -- and upper(dgrd.realized_status) in('UNREALIZED', 'REALIZED', 'REVERSEREALIZED')
                 and dgrd.status = 'Active'
                 and nvl(dgrd.net_weight, 0) > 0
                 and agh.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.is_internal_movement = 'N'
                 and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                 and sam.is_latest_position_assay = 'Y'
                 and not exists
               (select gpd.process_id
                        from gpd_gmr_conc_price_daily gpd
                       where gpd.process_id = gmr.process_id
                         and gpd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                         and gpd.corporate_id = gmr.corporate_id
                         and gpd.element_id = tmpc.element_id)
              union all
              ------  Sales  event based GMR price using GPE
              select 'Sales' section_type,
                     pcpd.profit_center_id profit_center,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     pc_process_id process_id,
                     gmr.corporate_id,
                     akc.corporate_name,
                     gmr.internal_gmr_ref_no,
                     dgrd.internal_contract_item_ref_no,
                     pci.del_distribution_item_no,
                     pcdi.delivery_item_no,
                     pcm.contract_ref_no,
                     pcm.purchase_sales,
                     pcpd.product_id conc_product_id,
                     pdm_conc.product_desc conc_product_name,
                     aml.underlying_product_id product_id,
                     pdm.product_desc product_name,
                     dgrd.origin_id,
                     orm.origin_name,
                     pcpq.quality_template_id conc_quality_id,
                     qat.quality_name conc_quality_name,
                     qav.comp_quality_id quality_id,
                     qat_und.quality_name,
                     '' container_no,
                     dgrd.net_weight stock_qty,
                     dgrd.net_weight_unit_id qty_unit_id,
                     gmr.qty_unit_id gmr_qty_unit_id,
                     qum.qty_unit,
                     qum.decimals stocky_qty_decimal,
                     gmr.current_no_of_units no_of_units,
                     md.md_id,
                     md.m2m_price_unit_id,
                     md.net_m2m_price,
                     md.m2m_price_unit_cur_id,
                     md.m2m_price_unit_cur_code,
                     md.m2m_price_unit_weight_unit_id,
                     md.m2m_price_unit_weight_unit,
                     nvl(md.m2m_price_unit_weight, 1) m2m_price_unit_weight,
                     md.m2m_price_unit_cur_code || '/' ||
                     decode(md.m2m_price_unit_weight,
                            1,
                            null,
                            md.m2m_price_unit_weight) ||
                     md.m2m_price_unit_weight_unit m2m_price_unit_str,
                     md.m2m_main_cur_id,
                     md.m2m_main_cur_code,
                     md.m2m_main_cur_decimals,
                     md.main_currency_factor,
                     md.settlement_cur_id,
                     md.settlement_to_val_fx_rate,
                     ceqs.element_id,
                     aml.attribute_name,
                     sam.ash_id assay_header_id,
                     ceqs.assay_qty,
                     ceqs.assay_qty_unit_id,
                     gmr_qty.payable_qty,
                     gmr_qty.qty_unit_id payable_qty_unit_id,
                     gmr_qum.qty_unit payable_qty_unit,
                     gpd.contract_price,
                     gpd.price_unit_id,
                     gpd.price_unit_weight_unit_id,
                     gpd.price_unit_weight,
                     gpd.price_unit_cur_id,
                     gpd.price_unit_cur_code,
                     gpd.price_unit_weight_unit,
                     gpd.price_fixation_details, -- cipde.price_fixation_details,
                     gpd.price_description, --cipde.price_description,
                     (case
                       when nvl(pcdi.payment_due_date, pd_trade_date) <
                            pd_trade_date then
                        pd_trade_date
                       else
                        nvl(pcdi.payment_due_date, pd_trade_date)
                     end) payment_due_date,
                     akc.base_cur_id as base_cur_id,
                     akc.base_currency_name base_cur_code,
                     cm.decimals as base_cur_decimal,
                     gmr.inventory_status,
                     gsm.status shipment_status,
                     (case
                       when nvl(dgrd.inventory_status, 'NA') = 'Under CMA' then
                        'UnderCMA NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') in
                            ('In', 'None', 'NA') then
                        'Shipped NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'Y' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Shipped TT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') in
                            ('In', 'None', 'NA') then
                        'Stock NTT'
                       when nvl(dgrd.is_afloat, 'N') = 'N' and
                            nvl(dgrd.inventory_status, 'NA') = 'Out' then
                        'Stock TT'
                       else
                        'Others'
                     end) section_name,
                     gpd.price_basis, --cipde.price_basis,
                     gmr.shed_id,
                     gmr.destination_city_id,
                     gpd.price_fixation_status, ---cipde.price_fixation_status price_fixation_status,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm_conc.qty_unit_id as conc_base_qty_unit_id,
                     qum_pdm_conc.decimals as base_qty_decimal,
                     pcpd.strategy_id,
                     css.strategy_name,
                     md.valuation_exchange_id,
                     md.valuation_month,
                     md.derivative_def_id,
                     nvl(gmr.is_voyage_gmr, 'N') is_voyage_gmr,
                     gmr.contract_type gmr_contract_type,
                     agh.int_alloc_group_id,
                     dgrd.internal_dgrd_ref_no internal_grd_dgrd_ref_no,
                     dgrd.internal_stock_ref_no stock_ref_no,
                     pcm.trader_id,
                     (case
                       when pcm.trader_id is not null then
                        (select gab.firstname || ' ' || gab.lastname
                           from gab_globaladdressbook gab,
                                ak_corporate_user     aku
                          where gab.gabid = aku.gabid
                            and aku.user_id = pcm.trader_id)
                       else
                        ''
                     end) trader_user_name,
                     md.m2m_loc_incoterm_deviation,
                     md.treatment_charge m2m_treatment_charge,
                     md.refine_charge m2m_refine_charge,
                     tc_ppu_pum.price_unit_id m2m_tc_price_unit_id,
                     tc_ppu_pum.price_unit_name m2m_tc_price_unit_name,
                     tc_ppu_pum.cur_id m2m_tc_cur_id,
                     tc_ppu_pum.weight m2m_tc_weight,
                     tc_ppu_pum.weight_unit_id m2m_tc_weight_unit_id,
                     rc_ppu_pum.price_unit_id m2m_rc_price_unit_id,
                     rc_ppu_pum.price_unit_name m2m_rc_price_unit_name,
                     rc_ppu_pum.cur_id m2m_rc_cur_id,
                     rc_ppu_pum.weight m2m_rc_weight,
                     rc_ppu_pum.weight_unit_id m2m_rc_weight_unit_id,
                     md.base_price_unit_id_in_ppu,
                     md.base_price_unit_id_in_pum,
                     qat.eval_basis,
                     pcpq.unit_of_measure,
                     pum_loc_base.weight_unit_id loc_qty_unit_id,
                     tmpc.mvp_id,
                     tmpc.shipment_month,
                     tmpc.shipment_year,
                     pum_base_price_id.price_unit_name base_price_unit_name,
                     nvl(pdm_conc.valuation_against_underlying, 'Y') valuation_against_underlying
                from gmr_goods_movement_record gmr,
                     gpd_gmr_conc_price_daily gpd,
                     dgrd_delivered_grd dgrd,
                     agh_alloc_group_header agh,
                     pcm_physical_contract_main pcm,
                     pcpd_pc_product_definition pcpd,
                     cpc_corporate_profit_center cpc,
                     pdm_productmaster pdm,
                     orm_origin_master orm,
                     (select tmp.*
                        from tmpc_temp_m2m_pre_check tmp
                       where tmp.corporate_id = pc_corporate_id
                         and tmp.product_type = 'CONCENTRATES'
                         and tmp.section_name <> 'OPEN') tmpc,
                     qat_quality_attributes qat,
                     qum_quantity_unit_master qum,
                     (select md1.*
                        from md_m2m_daily md1
                       where md1.rate_type <> 'OPEN'
                         and md1.corporate_id = pc_corporate_id
                         and md1.product_type = 'CONCENTRATES'
                         and md1.process_id = pc_process_id) md,
                     pcdi_pc_delivery_item pcdi,
                     pci_physical_contract_item pci,
                     pcpq_pc_product_quality pcpq,
                     qav_quality_attribute_values qav,
                     ppm_product_properties_mapping ppm,
                     qat_quality_attributes qat_und,
                     aml_attribute_master_list aml,
                     ciqs_contract_item_qty_status ciqs,
                     ak_corporate akc,
                     cm_currency_master cm,
                     gsm_gmr_stauts_master gsm,
                     css_corporate_strategy_setup css,
                     pcdb_pc_delivery_basis pcdb,
                     pdm_productmaster pdm_conc,
                     qum_quantity_unit_master qum_pdm_conc,
                     pum_price_unit_master pum_loc_base,
                     pum_price_unit_master pum_base_price_id,
                     v_gmr_stockpayable_qty gmr_qty,
                     qum_quantity_unit_master gmr_qum,
                     v_ppu_pum tc_ppu_pum,
                     v_ppu_pum rc_ppu_pum,
                     ceqs_contract_ele_qty_status ceqs,
                     sam_stock_assay_mapping sam
               where dgrd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and dgrd.int_alloc_group_id = agh.int_alloc_group_id
                 and gmr.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpq.pcpd_id = pcpd.pcpd_id
                 and pcpd.profit_center_id = cpc.profit_center_id
                 and dgrd.origin_id = orm.origin_id(+)
                 and dgrd.internal_gmr_ref_no = tmpc.internal_gmr_ref_no(+)
                 and dgrd.internal_grd_ref_no = tmpc.internal_grd_ref_no(+)
                 and dgrd.internal_contract_item_ref_no =
                     tmpc.internal_contract_item_ref_no(+)
                 and tmpc.conc_quality_id = qat.quality_id
                 and dgrd.net_weight_unit_id = qum.qty_unit_id(+)
                 and tmpc.internal_m2m_id = md.md_id(+)
                 and tmpc.element_id = gpd.element_id
                 and md.element_id = gpd.element_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pci.pcpq_id = pcpq.pcpq_id
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id
                 and qav.comp_quality_id = qat_und.quality_id
                 and pcpq.quality_template_id = qat.quality_id
                 and ppm.attribute_id = aml.attribute_id(+)
                 and aml.underlying_product_id = pdm.product_id(+)
                 and aml.attribute_id = gpd.element_id
                 and pcpq.quality_template_id = qat.quality_id(+)
                 and pci.internal_contract_item_ref_no =
                     ciqs.internal_contract_item_ref_no
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and cm.cur_code = akc.base_currency_name
                 and gmr.status_id = gsm.status_id(+)
                 and pcpd.strategy_id = css.strategy_id
                 and pci.pcdb_id = pcdb.pcdb_id
                 and pcpd.product_id = pdm_conc.product_id
                 and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
                 and md.base_price_unit_id_in_pum =
                     pum_loc_base.price_unit_id
                 and md.base_price_unit_id_in_pum =
                     pum_base_price_id.price_unit_id
                 and md.tc_price_unit_id = tc_ppu_pum.product_price_unit_id
                 and md.rc_price_unit_id = rc_ppu_pum.product_price_unit_id
                 and gmr.internal_gmr_ref_no = gmr_qty.internal_gmr_ref_no
                 and dgrd.internal_dgrd_ref_no = gmr_qty.internal_dgrd_ref_no
                 and gpd.element_id = gmr_qty.element_id
                 and gmr_qty.qty_unit_id = gmr_qum.qty_unit_id
                 and pci.internal_contract_item_ref_no =
                     ceqs.internal_contract_item_ref_no
                 and aml.attribute_id = ceqs.element_id
                 and pcm.purchase_sales = 'S'
                 and gsm.is_required_for_m2m = 'Y'
                 and pcm.contract_status = 'In Position'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.is_tolling_contract = 'Y'
                 and pcm.is_tolling_extn = 'Y'
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcdb.is_active = 'Y'
                 and gmr.is_deleted = 'N'
                 and ppm.is_active = 'Y'
                 and ppm.is_deleted = 'N'
                 and qav.is_deleted = 'N'
                 and qav.is_comp_product_attribute = 'Y'
                 and qat.is_active = 'Y'
                 and qat.is_deleted = 'N'
                 and aml.is_active = 'Y'
                 and aml.is_deleted = 'N'
                 and qat_und.is_active = 'Y'
                 and qat_und.is_deleted = 'N'
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and dgrd.process_id = pc_process_id
                 and agh.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and gpd.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and ciqs.process_id = pc_process_id
                 and pcdb.process_id = pc_process_id
                 and gmr_qty.process_id = pc_process_id
                 and ceqs.process_id = pc_process_id
                    --and upper(dgrd.realized_status) in ('UNREALIZED', 'REALIZED', 'REVERSEREALIZED')
                 and dgrd.status = 'Active'
                 and nvl(dgrd.net_weight, 0) > 0
                 and agh.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.is_internal_movement = 'N'
                 and dgrd.internal_dgrd_ref_no = sam.internal_dgrd_ref_no
                 and sam.is_latest_position_assay = 'Y') tt;
  
    vn_cont_price                  number;
    vc_cont_price_unit_id          varchar2(15);
    vc_cont_price_unit_cur_id      varchar2(15);
    vc_cont_price_unit_cur_code    varchar2(15);
    vn_cont_price_wt               number;
    vc_cont_price_wt_unit_id       varchar2(15);
    vc_cont_price_wt_unit          varchar2(15);
    vc_price_fixation_status       varchar2(50);
    vc_psu_id                      varchar2(500);
    vn_qty_in_base                 number;
    vn_ele_qty_in_base             number;
    vn_m2m_amt                     number;
    vc_m2m_price_unit_cur_id       varchar2(15);
    vc_m2m_cur_id                  varchar2(15);
    vc_m2m_cur_code                varchar2(15);
    vn_m2m_sub_cur_id_factor       number;
    vn_m2m_cur_decimals            number;
    vn_m2m_base_fx_rate            number;
    vn_m2m_base_deviation          number;
    vn_ele_m2m_amount_in_base      number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_ele_m2m_total_amount        number;
    vn_ele_m2m_amt_per_unit        number;
    vc_price_cur_id                varchar2(15);
    vc_price_cur_code              varchar2(15);
    vn_cont_price_cur_id_factor    number;
    vn_contract_value_in_price_cur number;
    vn_cont_price_cur_decimals     number;
    vn_fx_price_to_base            number;
    vn_fx_price_deviation          number;
    vn_contract_value_in_val_cur   number;
    vn_contract_value_in_base_cur  number;
    vn_ele_m2m_treatment_charge    number;
    vn_dry_qty                     number;
    vn_wet_qty                     number;
    vn_dry_qty_in_base             number;
    vn_ele_m2m_refine_charge       number;
    vn_loc_amount                  number;
    vn_loc_total_amount            number;
    vn_total_penality              number;
    vn_penality                    number;
    vc_penality_price_unit_id      varchar2(15);
    vc_price_unit_id               varchar2(15);
  begin
  
    for cur_grd_rows in cur_grd
    loop
      vn_cont_price               := 0;
      vc_cont_price_unit_id       := null;
      vc_cont_price_unit_cur_id   := null;
      vc_cont_price_unit_cur_code := null;
      vn_cont_price_wt            := 1;
      vc_cont_price_wt_unit_id    := null;
      vc_cont_price_wt_unit       := null;
      vc_price_fixation_status    := null;
      vn_cont_price               := cur_grd_rows.contract_price;
      vc_cont_price_unit_id       := cur_grd_rows.price_unit_id;
      vc_cont_price_unit_cur_id   := cur_grd_rows.price_unit_cur_id;
      vc_cont_price_unit_cur_code := cur_grd_rows.price_unit_cur_code;
      vn_cont_price_wt            := cur_grd_rows.price_unit_weight;
      vc_cont_price_wt_unit_id    := cur_grd_rows.price_unit_weight_unit_id;
      vc_cont_price_wt_unit       := cur_grd_rows.price_unit_weight_unit;
      vc_price_fixation_status    := cur_grd_rows.price_fixation_status;
    
      if cur_grd_rows.stock_qty <> 0 then
        vc_psu_id := cur_grd_rows.internal_gmr_ref_no || '-' ||
                     cur_grd_rows.internal_grd_dgrd_ref_no || '-' ||
                     cur_grd_rows.internal_contract_item_ref_no || '-' ||
                     cur_grd_rows.container_no;
      
        if cur_grd_rows.unit_of_measure = 'Wet' then
          vn_dry_qty := round(pkg_metals_general.fn_get_assay_dry_qty(cur_grd_rows.conc_product_id,
                                                                      cur_grd_rows.assay_header_id,
                                                                      cur_grd_rows.stock_qty,
                                                                      cur_grd_rows.qty_unit_id),
                              cur_grd_rows.stocky_qty_decimal);
        else
          vn_dry_qty := cur_grd_rows.stock_qty;
        end if;
      
        vn_wet_qty := cur_grd_rows.stock_qty;
      
        -- convert into dry qty to base qty element level
      
        vn_dry_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                         cur_grd_rows.qty_unit_id,
                                                                         cur_grd_rows.base_qty_unit_id,
                                                                         1) *
                                    vn_dry_qty,
                                    cur_grd_rows.base_qty_decimal);
      
        vn_qty_in_base := round(cur_grd_rows.stock_qty *
                                pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                     cur_grd_rows.qty_unit_id,
                                                                     cur_grd_rows.conc_base_qty_unit_id,
                                                                     1),
                                cur_grd_rows.base_qty_decimal);
      
        vn_ele_qty_in_base := round(pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                         cur_grd_rows.payable_qty_unit_id,
                                                                         cur_grd_rows.base_qty_unit_id,
                                                                         1) *
                                    cur_grd_rows.payable_qty,
                                    cur_grd_rows.base_qty_decimal);
        if cur_grd_rows.valuation_against_underlying = 'Y' then
          if cur_grd_rows.eval_basis = 'FIXED' then
            vn_m2m_amt               := 0;
            vc_m2m_price_unit_cur_id := cur_grd_rows.base_cur_id;
          else
            vc_m2m_price_unit_cur_id := nvl(cur_grd_rows.m2m_price_unit_cur_id,
                                            cur_grd_rows.base_cur_id);
            vn_m2m_amt               := nvl(cur_grd_rows.net_m2m_price, 0) /
                                        nvl(cur_grd_rows.m2m_price_unit_weight,
                                            1) *
                                        pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                             cur_grd_rows.payable_qty_unit_id,
                                                                             cur_grd_rows.m2m_price_unit_weight_unit_id,
                                                                             cur_grd_rows.payable_qty);
          end if;
        
          pkg_general.sp_get_main_cur_detail(nvl(vc_m2m_price_unit_cur_id,
                                                 cur_grd_rows.base_cur_id),
                                             vc_m2m_cur_id,
                                             vc_m2m_cur_code,
                                             vn_m2m_sub_cur_id_factor,
                                             vn_m2m_cur_decimals);
        
          vn_m2m_amt := round(vn_m2m_amt * vn_m2m_sub_cur_id_factor,
                              cur_grd_rows.base_cur_decimal);
        
          pkg_general.sp_forward_cur_exchange_new(cur_grd_rows.corporate_id,
                                                  pd_trade_date,
                                                  cur_grd_rows.payment_due_date,
                                                  nvl(vc_m2m_cur_id,
                                                      cur_grd_rows.base_cur_id),
                                                  cur_grd_rows.base_cur_id,
                                                  30,
                                                  vn_m2m_base_fx_rate,
                                                  vn_m2m_base_deviation);
        
          if vc_m2m_cur_id <> cur_grd_rows.base_cur_id then
            if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure pkg_phy_physical_process-sp_calc_phy_open_unrealized ',
                                                                   'PHY-005',
                                                                   cur_grd_rows.base_cur_code ||
                                                                   ' to ' ||
                                                                   vc_m2m_cur_code || ' (' ||
                                                                   to_char(cur_grd_rows.payment_due_date,
                                                                           'dd-Mon-yyyy') || ') ',
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
            
            end if;
          end if;
        
          vn_ele_m2m_amount_in_base := vn_m2m_amt * vn_m2m_base_fx_rate;
        else
          --if valuation against underly is no, then use total concentrate qty and market price to calculate the
          --market value for the gmr level.
          if cur_grd_rows.eval_basis = 'FIXED' then
            vn_m2m_amt               := 0;
            vc_m2m_price_unit_cur_id := cur_grd_rows.base_cur_id;
          else
            vc_m2m_price_unit_cur_id := nvl(cur_grd_rows.m2m_price_unit_cur_id,
                                            cur_grd_rows.base_cur_id);
            vn_m2m_amt               := nvl(cur_grd_rows.net_m2m_price, 0) /
                                        nvl(cur_grd_rows.m2m_price_unit_weight,
                                            1) *
                                        pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                             cur_grd_rows.conc_base_qty_unit_id,
                                                                             cur_grd_rows.m2m_price_unit_weight_unit_id,
                                                                             vn_dry_qty_in_base);
          end if;
        
          pkg_general.sp_get_main_cur_detail(nvl(vc_m2m_price_unit_cur_id,
                                                 cur_grd_rows.base_cur_id),
                                             vc_m2m_cur_id,
                                             vc_m2m_cur_code,
                                             vn_m2m_sub_cur_id_factor,
                                             vn_m2m_cur_decimals);
        
          vn_m2m_amt := round(vn_m2m_amt * vn_m2m_sub_cur_id_factor,
                              cur_grd_rows.base_cur_decimal);
        
          pkg_general.sp_forward_cur_exchange_new(cur_grd_rows.corporate_id,
                                                  pd_trade_date,
                                                  cur_grd_rows.payment_due_date,
                                                  nvl(vc_m2m_cur_id,
                                                      cur_grd_rows.base_cur_id),
                                                  cur_grd_rows.base_cur_id,
                                                  30,
                                                  vn_m2m_base_fx_rate,
                                                  vn_m2m_base_deviation);
        
          if vc_m2m_cur_id <> cur_grd_rows.base_cur_id then
            if vn_m2m_base_fx_rate is null or vn_m2m_base_fx_rate = 0 then
              vobj_error_log.extend;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure pkg_phy_physical_process-sp_calc_phy_open_unrealized ',
                                                                   'PHY-005',
                                                                   cur_grd_rows.base_cur_code ||
                                                                   ' to ' ||
                                                                   vc_m2m_cur_code || ' (' ||
                                                                   to_char(cur_grd_rows.payment_due_date,
                                                                           'dd-Mon-yyyy') || ') ',
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
            
            end if;
          end if;
          if cur_grd_rows.ele_rank = 1 then
            vn_ele_m2m_amount_in_base := vn_m2m_amt * vn_m2m_base_fx_rate;
          else
            vn_ele_m2m_amount_in_base := 0;
            vn_m2m_amt                := 0;
          end if;
        
        end if;
      
        vn_ele_m2m_treatment_charge := round((cur_grd_rows.m2m_treatment_charge /
                                             nvl(cur_grd_rows.m2m_tc_weight,
                                                  1)) *
                                             pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                      cur_grd_rows.m2m_tc_cur_id,
                                                                                      cur_grd_rows.base_cur_id,
                                                                                      pd_trade_date,
                                                                                      1) *
                                             (pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                                   cur_grd_rows.qty_unit_id,
                                                                                   cur_grd_rows.m2m_tc_weight_unit_id,
                                                                                   vn_dry_qty)),
                                             cur_grd_rows.base_cur_decimal);
      
        vn_ele_m2m_refine_charge := round((cur_grd_rows.m2m_refine_charge /
                                          nvl(cur_grd_rows.m2m_rc_weight,
                                               1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                   cur_grd_rows.m2m_rc_cur_id,
                                                                                   cur_grd_rows.base_cur_id,
                                                                                   pd_trade_date,
                                                                                   1) *
                                          (pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                                cur_grd_rows.payable_qty_unit_id,
                                                                                cur_grd_rows.m2m_rc_weight_unit_id,
                                                                                cur_grd_rows.payable_qty)),
                                          cur_grd_rows.base_cur_decimal);
      
        if cur_grd_rows.ele_rank = 1 then
          vn_loc_amount := round(pkg_general.f_get_converted_quantity(cur_grd_rows.conc_product_id,
                                                                      cur_grd_rows.loc_qty_unit_id,
                                                                      cur_grd_rows.conc_base_qty_unit_id,
                                                                      1) *
                                 cur_grd_rows.m2m_loc_incoterm_deviation,
                                 cur_grd_rows.base_cur_decimal);
        
          vn_loc_total_amount := round(vn_loc_amount * vn_qty_in_base,
                                       cur_grd_rows.base_cur_decimal);
        end if;
        vn_total_penality := 0;
        if cur_grd_rows.ele_rank = 1 then
          begin
            select ppu.product_price_unit_id
              into vc_price_unit_id
              from v_ppu_pum         ppu,
                   pdm_productmaster pdm,
                   ak_corporate      akc
             where ppu.product_id = cur_grd_rows.conc_product_id
               and ppu.product_id = pdm.product_id
               and pdm.base_quantity_unit = ppu.weight_unit_id
               and ppu.cur_id = akc.base_cur_id
               and nvl(ppu.weight, 1) = 1
               and akc.corporate_id = pc_corporate_id;
          
          exception
            when no_data_found then
              vc_price_unit_id := null;
          end;
        
          vn_total_penality := 0;
          for cc in (select pci.internal_contract_item_ref_no,
                            pqca.element_id,
                            pcpq.quality_template_id
                       from pci_physical_contract_item  pci,
                            pcpq_pc_product_quality     pcpq,
                            ash_assay_header            ash,
                            asm_assay_sublot_mapping    asm,
                            pqca_pq_chemical_attributes pqca
                      where pci.pcpq_id = pcpq.pcpq_id
                        and pcpq.assay_header_id = ash.ash_id
                        and ash.ash_id = asm.ash_id
                        and asm.asm_id = pqca.asm_id
                        and pci.process_id = pc_process_id
                        and pcpq.process_id = pc_process_id
                        and pci.is_active = 'Y'
                        and pcpq.is_active = 'Y'
                        and ash.is_active = 'Y'
                        and asm.is_active = 'Y'
                        and pqca.is_active = 'Y'
                        and pqca.is_elem_for_pricing = 'N'
                        and pqca.is_deductible = 'N'
                        and pci.internal_contract_item_ref_no =
                            cur_grd_rows.internal_contract_item_ref_no)
          loop
          
            pkg_phy_pre_check_process.sp_calc_m2m_tc_pc_rc_charge(cur_grd_rows.corporate_id,
                                                                  pd_trade_date,
                                                                  cur_grd_rows.conc_product_id,
                                                                  cur_grd_rows.conc_quality_id,
                                                                  cur_grd_rows.mvp_id,
                                                                  'Penalties',
                                                                  cc.element_id,
                                                                  cur_grd_rows.shipment_month,
                                                                  cur_grd_rows.shipment_year,
                                                                  vc_price_unit_id,
                                                                  vn_penality,
                                                                  vc_penality_price_unit_id);
            if nvl(vn_penality, 0) <> 0 then
              vn_total_penality := round(vn_total_penality +
                                         (vn_penality * vn_dry_qty_in_base),
                                         cur_grd_rows.base_cur_decimal);
            end if;
          
          end loop;
        
        end if;
      
        vn_ele_m2m_total_amount := vn_ele_m2m_amount_in_base -
                                   vn_ele_m2m_treatment_charge -
                                   vn_ele_m2m_refine_charge;
      
        vn_ele_m2m_amt_per_unit := round(vn_ele_m2m_total_amount /
                                         vn_ele_qty_in_base,
                                         cur_grd_rows.base_cur_decimal);
      
        pkg_general.sp_get_main_cur_detail(nvl(vc_cont_price_unit_cur_id,
                                               cur_grd_rows.base_cur_id),
                                           vc_price_cur_id,
                                           vc_price_cur_code,
                                           vn_cont_price_cur_id_factor,
                                           vn_cont_price_cur_decimals);
      
        if nvl(vn_cont_price, 0) <> 0 and
           vc_cont_price_wt_unit_id is not null then
        
          vn_contract_value_in_price_cur := (vn_cont_price /
                                            nvl(vn_cont_price_wt, 1)) *
                                            (pkg_general.f_get_converted_quantity(cur_grd_rows.product_id,
                                                                                  cur_grd_rows.qty_unit_id,
                                                                                  vc_cont_price_wt_unit_id,
                                                                                  cur_grd_rows.stock_qty)) *
                                            vn_cont_price_cur_id_factor;
        else
          vn_contract_value_in_price_cur := 0;
        end if;
      
        pkg_general.sp_forward_cur_exchange_new(cur_grd_rows.corporate_id,
                                                pd_trade_date,
                                                cur_grd_rows.payment_due_date,
                                                vc_price_cur_id,
                                                cur_grd_rows.base_cur_id,
                                                30,
                                                vn_fx_price_to_base,
                                                vn_fx_price_deviation);
      
        vn_contract_value_in_price_cur := round(vn_contract_value_in_price_cur,
                                                vn_cont_price_cur_decimals);
      
        vn_contract_value_in_val_cur  := round((vn_contract_value_in_price_cur *
                                               nvl(vn_fx_price_to_base, 1)),
                                               cur_grd_rows.base_cur_decimal);
        vn_contract_value_in_base_cur := vn_contract_value_in_val_cur;
      end if;
    
      insert into psue_element_details
        (corporate_id,
         process_id,
         internal_contract_item_ref_no,
         psu_id,
         internal_gmr_ref_no,
         element_id,
         element_name,
         assay_header_id,
         assay_qty,
         assay_qty_unit_id,
         payable_qty,
         payable_qty_unit_id,
         payable_qty_unit,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight_unit_id,
         price_unit_weight,
         price_unit_weight_unit,
         md_id,
         m2m_price,
         m2m_price_cur_id,
         m2m_price_cur_code,
         m2m_price_weight_unit_id,
         m2m_price_weight_unit,
         m2m_price_weight_unit_weight,
         m2m_refining_charge,
         m2m_treatment_charge,
         pricing_details,
         m2m_price_unit_id,
         m2m_price_unit_str,
         m2m_amt,
         m2m_amt_cur_id,
         m2m_amt_cur_code,
         contract_value_in_price_cur,
         contract_price_cur_id,
         contract_price_cur_code,
         material_cost_in_base_cur,
         element_qty_in_base_unit,
         total_m2m_amount,
         m2m_amt_per_unit,
         price_cur_to_base_cur_fx_rate,
         m2m_cur_to_base_cur_fx_rate,
         base_price_unit_id_in_ppu,
         base_price_unit_id_in_pum,
         valuation_against_underlying,
         internal_grd_dgrd_ref_no,
         is_tolling_contract,
         is_tolling_extn)
      values
        (cur_grd_rows.corporate_id,
         pc_process_id,
         cur_grd_rows.internal_contract_item_ref_no,
         vc_psu_id,
         cur_grd_rows.internal_gmr_ref_no,
         cur_grd_rows.element_id,
         cur_grd_rows.attribute_name,
         cur_grd_rows.assay_header_id,
         cur_grd_rows.assay_qty,
         cur_grd_rows.assay_qty_unit_id,
         cur_grd_rows.payable_qty,
         cur_grd_rows.payable_qty_unit_id,
         cur_grd_rows.payable_qty_unit,
         vn_cont_price,
         vc_cont_price_unit_id,
         vc_cont_price_unit_cur_id,
         vc_cont_price_unit_cur_code,
         vc_cont_price_wt_unit_id,
         vn_cont_price_wt,
         vc_cont_price_wt_unit,
         cur_grd_rows.md_id,
         cur_grd_rows.net_m2m_price,
         cur_grd_rows.m2m_price_unit_cur_id,
         cur_grd_rows.m2m_price_unit_cur_code,
         cur_grd_rows.m2m_price_unit_weight_unit_id,
         cur_grd_rows.m2m_price_unit_weight_unit,
         decode(cur_grd_rows.m2m_price_unit_weight,
                1,
                null,
                cur_grd_rows.m2m_price_unit_weight),
         vn_ele_m2m_refine_charge,
         vn_ele_m2m_treatment_charge,
         cur_grd_rows.price_description,
         cur_grd_rows.m2m_price_unit_id,
         cur_grd_rows.m2m_price_unit_str,
         vn_m2m_amt, --m2m_amt
         cur_grd_rows.base_cur_id,
         cur_grd_rows.base_cur_code,
         vn_contract_value_in_price_cur,
         vc_price_cur_id,
         vc_price_cur_code,
         vn_contract_value_in_base_cur,
         vn_ele_qty_in_base,
         vn_ele_m2m_total_amount, --total_m2m_amount,
         vn_ele_m2m_amt_per_unit, --m2m_amt_per_unit,
         vn_fx_price_to_base, --price_cur_to_base_cur_fx_rate,   
         vn_m2m_base_fx_rate, --m2m_cur_to_base_cur_fx_rate,
         cur_grd_rows.base_price_unit_id_in_ppu, --base_price_unit_id_in_ppu,
         cur_grd_rows.base_price_unit_id_in_pum, --base_price_unit_id_in_pum)*/
         cur_grd_rows.valuation_against_underlying,
         cur_grd_rows.internal_grd_dgrd_ref_no,
         'Y',
         'Y');
    
      if cur_grd_rows.ele_rank = 1 then
        insert into psue_phy_stock_unrealized_ele
          (process_id,
           psu_id,
           corporate_id,
           corporate_name,
           internal_gmr_ref_no,
           internal_contract_item_ref_no,
           contract_ref_no,
           delivery_item_no,
           del_distribution_item_no,
           product_id,
           product_name,
           origin_id,
           origin_name,
           quality_id,
           quality_name,
           container_no,
           stock_wet_qty,
           stock_dry_qty,
           qty_unit_id,
           qty_unit,
           qty_in_base_unit,
           no_of_units,
           prod_base_qty_unit_id,
           prod_base_qty_unit,
           inventory_status,
           shipment_status,
           section_name,
           strategy_id,
           strategy_name,
           valuation_month,
           contract_type,
           profit_center_id,
           profit_center_name,
           profit_center_short_name,
           valuation_exchange_id,
           derivative_def_id,
           gmr_contract_type,
           is_voyage_gmr,
           gmr_ref_no,
           warehouse_id,
           warehouse_name,
           shed_id,
           shed_name,
           int_alloc_group_id,
           internal_grd_dgrd_ref_no,
           price_type_id,
           fixation_method,
           price_fixation_details,
           stock_ref_no,
           trader_name,
           trader_id,
           contract_qty_string,
           contract_price_string,
           m2m_price_string,
           m2m_rc_tc_string,
           m2m_penalty_charge,
           m2m_treatment_charge,
           m2m_refining_charge,
           m2m_loc_diff_premium,
           net_contract_value_in_base_cur,
           net_m2m_amount_in_base_cur,
           prev_net_m2m_amt_in_base_cur,
           pnl_type,
           pnl_in_base_cur,
           pnl_in_per_base_unit,
           prev_day_pnl_in_base_cur,
           prev_day_pnl_per_base_unit,
           trade_day_pnl_in_base_cur,
           trade_day_pnl_per_base_unit,
           cont_unr_status,
           prev_m2m_price_string,
           prev_m2m_rc_tc_string,
           prev_m2m_penalty_charge,
           prev_m2m_treatment_charge,
           prev_m2m_refining_charge,
           prev_m2m_loc_diff_premium,
           base_price_unit_id,
           base_price_unit_name,
           base_cur_id,
           base_cur_code,
           valuation_against_underlying,
           is_tolling_contract,
           is_tolling_extn)
        values
          (pc_process_id,
           vc_psu_id,
           cur_grd_rows.corporate_id,
           cur_grd_rows.corporate_name,
           cur_grd_rows.internal_gmr_ref_no,
           cur_grd_rows.internal_contract_item_ref_no,
           cur_grd_rows.contract_ref_no,
           cur_grd_rows.delivery_item_no,
           cur_grd_rows.del_distribution_item_no,
           cur_grd_rows.conc_product_id,
           cur_grd_rows.conc_product_name,
           cur_grd_rows.origin_id,
           cur_grd_rows.origin_name,
           cur_grd_rows.conc_quality_id,
           cur_grd_rows.conc_quality_name,
           cur_grd_rows.container_no,
           vn_wet_qty,
           vn_dry_qty,
           cur_grd_rows.qty_unit_id,
           cur_grd_rows.qty_unit,
           vn_qty_in_base,
           cur_grd_rows.no_of_units,
           null, --prod_base_qty_unit_id
           null, --prod_base_qty_unit
           cur_grd_rows.inventory_status,
           cur_grd_rows.shipment_status,
           cur_grd_rows.section_name,
           cur_grd_rows.strategy_id,
           cur_grd_rows.strategy_name,
           cur_grd_rows.valuation_month,
           cur_grd_rows.purchase_sales,
           cur_grd_rows.profit_center,
           cur_grd_rows.profit_center_name,
           cur_grd_rows.profit_center_short_name,
           cur_grd_rows.valuation_exchange_id,
           cur_grd_rows.derivative_def_id,
           cur_grd_rows.gmr_contract_type,
           cur_grd_rows.is_voyage_gmr,
           null, --gmr_ref_no
           null, --warehouse_id,
           null, --warehouse_name,
           null, --shed_id,
           null, --shed_name
           cur_grd_rows.int_alloc_group_id,
           cur_grd_rows.internal_grd_dgrd_ref_no,
           cur_grd_rows.price_basis,
           vc_price_fixation_status,
           cur_grd_rows.price_fixation_details,
           cur_grd_rows.stock_ref_no,
           cur_grd_rows.trader_user_name,
           cur_grd_rows.trader_id,
           null, --contract_qty_string,
           null, --contract_price_string,  
           null, --m2m_price_string,   
           null, --m2m_rc_tc_string,
           vn_total_penality, --m2m_penalty_charge,
           null, --m2m_treatment_charge,
           null, --m2m_refining_charge,
           vn_loc_total_amount, --m2m_loc_diff_premium,
           null, --net_contract_value_in_base_cur, 
           null, --net_m2m_amount_in_base_cur,
           null, --prev_net_m2m_amt_in_base_cur,
           'Unrealized',
           null, --pnl_in_base_cur,
           null, --pnl_in_per_base_unit,
           null, --prev_day_pnl_in_base_cur,
           null, --prev_day_pnl_per_base_unit,
           null, --trade_day_pnl_in_base_cur,
           null, --trade_day_pnl_per_base_unit,
           null, --cont_unr_status,
           null, --prev_m2m_price_string,    
           null, --prev_m2m_rc_tc_string,
           null, --prev_m2m_penalty_charge, 
           null, --prev_m2m_treatment_charge, 
           null, --prev_m2m_refining_charge, 
           null, --prev_m2m_loc_diff_premium,
           cur_grd_rows.base_price_unit_id_in_ppu,
           cur_grd_rows.base_price_unit_name,
           cur_grd_rows.base_cur_id,
           cur_grd_rows.base_cur_code,
           cur_grd_rows.valuation_against_underlying,
           'Y',
           'Y');
      end if;
    end loop;
  
    for cur_update_pnl in (select psue.psu_id,
                                  sum(psue.material_cost_in_base_cur) net_contract_value_in_base_cur,
                                  sum(psue.m2m_amt) net_m2m_amt,
                                  sum(psue.m2m_treatment_charge) net_m2m_treatment_charge,
                                  sum(psue.m2m_refining_charge) net_m2m_refining_charge,
                                  stragg(psue.element_name || '-' ||
                                         psue.payable_qty || ' ' ||
                                         psue.payable_qty_unit) contract_qty_string,
                                  stragg(psue.element_name || '-' ||
                                         psue.contract_price || ' ' ||
                                         psue.price_unit_cur_code || '/' ||
                                         psue.price_unit_weight ||
                                         psue.price_unit_weight_unit) contract_price_string,
                                  (case
                                     when psue.valuation_against_underlying = 'N' then
                                      max((case
                                     when nvl(psue.m2m_price, 0) <> 0 then
                                      (psue.m2m_price || ' ' ||
                                      psue.m2m_price_cur_code || '/' ||
                                      psue.m2m_price_weight_unit_weight ||
                                      psue.m2m_price_weight_unit)
                                     else
                                      null
                                   end)) else stragg((case
                                    when nvl(psue.m2m_price,
                                             0) <> 0 then
                                     (psue.element_name || '-' ||
                                     psue.m2m_price || ' ' ||
                                     psue.m2m_price_cur_code || '/' ||
                                     psue.m2m_price_weight_unit_weight ||
                                     psue.m2m_price_weight_unit)
                                    else
                                     null
                                  end)) end) m2m_price_string, -- TODO if underly valuation = n, show the concentrate price
                                  stragg('TC:' || psue.element_name || '-' ||
                                         psue.m2m_treatment_charge || ' ' ||
                                         psue.price_unit_cur_code || ' ' ||
                                         'RC:' || psue.element_name || '-' ||
                                         psue.m2m_refining_charge || ' ' ||
                                         psue.price_unit_cur_code) m2m_rc_tc_pen_string
                             from psue_element_details psue
                            where psue.corporate_id = pc_corporate_id
                              and psue.process_id = pc_process_id
                              and psue.is_tolling_contract = 'Y'
                              and psue.is_tolling_extn = 'Y'
                            group by psue.psu_id,
                                     psue.valuation_against_underlying)
    loop
    
      update psue_phy_stock_unrealized_ele psuee
         set psuee.net_contract_value_in_base_cur = cur_update_pnl.
                                                    net_contract_value_in_base_cur,
             psuee.net_m2m_amount                 = cur_update_pnl.net_m2m_amt,
             psuee.m2m_treatment_charge           = cur_update_pnl.net_m2m_treatment_charge,
             psuee.m2m_refining_charge            = cur_update_pnl.net_m2m_refining_charge,
             psuee.contract_price_string          = cur_update_pnl.contract_price_string,
             psuee.m2m_price_string               = cur_update_pnl.m2m_price_string,
             psuee.m2m_rc_tc_string               = cur_update_pnl.m2m_rc_tc_pen_string,
             psuee.contract_qty_string            = cur_update_pnl.contract_qty_string
       where psuee.psu_id = cur_update_pnl.psu_id
         and psuee.process_id = pc_process_id
         and psuee.corporate_id = pc_corporate_id
         and psuee.is_tolling_contract = 'Y'
         and psuee.is_tolling_extn = 'Y';
    end loop;
  
    update psue_phy_stock_unrealized_ele psuee
       set psuee.net_m2m_amount_in_base_cur = (psuee.net_m2m_amount -
                                              psuee.m2m_treatment_charge -
                                              psuee.m2m_refining_charge -
                                              psuee.m2m_penalty_charge +
                                              psuee.m2m_loc_diff_premium)
     where psuee.corporate_id = pc_corporate_id
       and psuee.process_id = pc_process_id
       and psuee.is_tolling_contract = 'Y'
       and psuee.is_tolling_extn = 'Y';
  
    --- previous EOD Data
    for cur_update in (select psue_prev_day.net_m2m_amount_in_base_cur,
                              psue_prev_day.net_m2m_amount,
                              psue_prev_day.pnl_in_per_base_unit,
                              psue_prev_day.m2m_price_string,
                              psue_prev_day.m2m_rc_tc_string,
                              psue_prev_day.m2m_penalty_charge,
                              psue_prev_day.m2m_treatment_charge,
                              psue_prev_day.m2m_refining_charge,
                              psue_prev_day.m2m_loc_diff_premium,
                              psue_prev_day.qty_in_base_unit,
                              psue_prev_day.psu_id
                         from psue_phy_stock_unrealized_ele psue_prev_day
                        where process_id = pc_previous_process_id
                          and corporate_id = pc_corporate_id
                          and psue_prev_day.is_tolling_contract = 'Y'
                          and psue_prev_day.is_tolling_extn = 'Y'
                       
                       )
    loop
      update psue_phy_stock_unrealized_ele psue_today
         set psue_today.prev_net_m2m_amt_in_base_cur = cur_update.net_m2m_amount_in_base_cur,
             psue_today.prev_day_pnl_in_base_cur     = cur_update.pnl_in_per_base_unit *
                                                       psue_today.qty_in_base_unit,
             psue_today.prev_net_m2m_amount          = cur_update.net_m2m_amount,
             psue_today.prev_day_pnl_per_base_unit   = cur_update.pnl_in_per_base_unit,
             psue_today.prev_m2m_price_string        = cur_update.m2m_price_string,
             psue_today.prev_m2m_rc_tc_string        = cur_update.m2m_rc_tc_string,
             psue_today.prev_m2m_penalty_charge      = cur_update.m2m_penalty_charge,
             psue_today.prev_m2m_treatment_charge    = cur_update.m2m_treatment_charge,
             psue_today.prev_m2m_refining_charge     = cur_update.m2m_refining_charge,
             psue_today.prev_m2m_loc_diff_premium    = cur_update.m2m_loc_diff_premium,
             psue_today.cont_unr_status              = 'EXISTING_TRADE'
       where psue_today.process_id = pc_process_id
         and psue_today.corporate_id = pc_corporate_id
         and psue_today.psu_id = cur_update.psu_id
         and psue_today.is_tolling_contract = 'Y'
         and psue_today.is_tolling_extn = 'Y';
    end loop;
  
    begin
      update psue_phy_stock_unrealized_ele psue
         set psue.prev_net_m2m_amt_in_base_cur = psue.net_m2m_amount_in_base_cur,
             psue.prev_day_pnl_in_base_cur     = 0,
             psue.prev_day_pnl_per_base_unit   = 0,
             psue.prev_net_m2m_amount          = psue.net_m2m_amount,
             psue.prev_m2m_price_string        = psue.m2m_price_string,
             psue.prev_m2m_rc_tc_string        = psue.m2m_rc_tc_string,
             psue.prev_m2m_penalty_charge      = psue.m2m_penalty_charge,
             psue.prev_m2m_treatment_charge    = psue.m2m_treatment_charge,
             psue.prev_m2m_refining_charge     = psue.m2m_refining_charge,
             psue.prev_m2m_loc_diff_premium    = psue.m2m_loc_diff_premium,
             psue.cont_unr_status              = 'NEW_TRADE'
       where psue.cont_unr_status is null
         and psue.process_id = pc_process_id
         and psue.corporate_id = pc_corporate_id
         and psue.is_tolling_contract = 'Y'
         and psue.is_tolling_extn = 'Y';
    end;
  
    update psue_phy_stock_unrealized_ele psue
       set psue.pnl_in_base_cur      = psue.net_m2m_amount_in_base_cur -
                                       psue.prev_net_m2m_amt_in_base_cur,
           psue.pnl_in_per_base_unit = (psue.net_m2m_amount_in_base_cur -
                                       psue.prev_net_m2m_amt_in_base_cur) /
                                       psue.qty_in_base_unit
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.is_tolling_contract = 'Y'
       and psue.is_tolling_extn = 'Y';
  
    update psue_phy_stock_unrealized_ele psue
       set trade_day_pnl_in_base_cur   = nvl(psue.pnl_in_base_cur, 0) -
                                         nvl(psue.prev_day_pnl_in_base_cur,
                                             0),
           trade_day_pnl_per_base_unit = nvl(psue.pnl_in_base_cur, 0) -
                                         nvl(psue.prev_day_pnl_in_base_cur,
                                             0) / psue.qty_in_base_unit
     where psue.process_id = pc_process_id
       and psue.corporate_id = pc_corporate_id
       and psue.is_tolling_contract = 'Y'
       and psue.is_tolling_extn = 'Y';
  
    update psue_phy_stock_unrealized_ele psue
       set (gmr_ref_no, warehouse_id, warehouse_name, shed_id, shed_name, prod_base_qty_unit_id, prod_base_qty_unit) = --
            (select gmr.gmr_ref_no,
                    gmr.warehouse_profile_id,
                    phd_gmr.companyname as warehouse_profile_name,
                    gmr.shed_id,
                    sld.storage_location_name,
                    pdm.base_quantity_unit,
                    qum.qty_unit
               from gmr_goods_movement_record   gmr,
                    pdm_productmaster           pdm,
                    phd_profileheaderdetails    phd_gmr,
                    sld_storage_location_detail sld,
                    qum_quantity_unit_master    qum
              where gmr.internal_gmr_ref_no = psue.internal_gmr_ref_no
                and psue.product_id = pdm.product_id
                and pdm.base_quantity_unit = qum.qty_unit_id
                and gmr.warehouse_profile_id = phd_gmr.profileid(+)
                and gmr.shed_id = sld.storage_loc_id(+)
                and psue.process_id = gmr.process_id
                and psue.process_id = pc_process_id)
     where psue.process_id = pc_process_id
       and psue.is_tolling_contract = 'Y'
       and psue.is_tolling_extn = 'Y';
  
  exception
    when others then
      dbms_output.put_line('SQLERRM-1' || sqlerrm);
    
  end;
end;
/

create or replace package pkg_phy_cog_price is
  procedure sp_base_contract_cog_price(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2,
                                       pc_process      varchar2);
  procedure sp_base_gmr_cog_price(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_dbd_id       varchar2,
                                  pc_process      varchar2);
  procedure sp_conc_contract_cog_price(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2,
                                       pc_process      varchar2);
  procedure sp_conc_gmr_cog_price(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_dbd_id       varchar2,
                                  pc_process      varchar2);
end;
/
create or replace package body pkg_phy_cog_price is
  procedure sp_base_contract_cog_price(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2,
                                       pc_process      varchar2) is
    ------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_base_contract_cog_price
    --        Author                                    : Janna
    --        Created Date                              : 29th Mar 2012
    --        Purpose                                   : Calcualte COG Price for BM Contract
    --
    --        Parameters
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------                                       
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
    vc_price_unit_cur_id         varchar2(15);
    vc_price_unit_cur_code       varchar2(15);
    vc_price_unit_weight_unit_id varchar2(15);
    vc_price_unit_weight_unit    varchar2(15);
    vn_price_unit_weight         number;
    vn_forward_days              number;
    vd_valid_quote_date          date;
    vc_prompt_date_text          varchar2(100);
    vn_unfixed_value             number;
    vn_unfixed_qty               number;
    vc_unfixed_val_price_unit_id varchar2(100);
    vn_unfixed_val_price         number;
    vc_market_quote_dr_id        varchar2(15);
    vn_fixed_value               number;
    vn_fixed_qty                 number;
    vd_prompt_date               date;
    vc_data_missing_for          varchar2(1000);
    cursor cur_pcdi is
      select pcdi.pcdi_id,
             pcdi.internal_contract_ref_no,
             pcdi.delivery_item_no,
             pcdi.delivery_period_type,
             pcdi.delivery_from_month,
             pcdi.delivery_from_year,
             pcdi.delivery_to_month,
             pcdi.delivery_to_year,
             pcdi.delivery_from_date,
             pcdi.delivery_to_date,
             pd_trade_date eod_trade_date,
             pcdi.basis_type,
             pcdi.price_option_call_off_status,
             pcm.contract_ref_no,
             diqs.total_qty item_qty,
             diqs.item_qty_unit_id item_qty_unit_id,
             pcm.invoice_currency_id,
             pcpd.qty_unit_id,
             pcpd.product_id,
             qat.instrument_id,
             akc.base_cur_id,
             akc.base_currency_name,
             dim.instrument_name,
             ps.price_source_id,
             ps.price_source_name,
             apm.available_price_id,
             apm.available_price_name,
             pum.price_unit_name,
             vdip.ppu_price_unit_id,
             div.price_unit_id,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable
        from pcdi_pc_delivery_item pcdi,
             diqs_delivery_item_qty_status diqs,
             pcm_physical_contract_main pcm,
             ak_corporate akc,
             pcpd_pc_product_definition pcpd,
             (select *
                from v_pcdi_exchange_detail t
               where t.corporate_id = pc_corporate_id) qat,
             dim_der_instrument_master dim,
             div_der_instrument_valuation div,
             ps_price_source ps,
             apm_available_price_master apm,
             pum_price_unit_master pum,
             v_der_instrument_price_unit vdip,
             pdc_prompt_delivery_calendar pdc
       where pcdi.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcm.corporate_id = akc.corporate_id
         and pcm.contract_status = 'In Position'
         and pcm.contract_type = 'BASEMETAL'
         and pcpd.input_output = 'Input'
         and pcdi.pcdi_id = qat.pcdi_id(+)
         and qat.instrument_id = dim.instrument_id(+)
         and dim.instrument_id = div.instrument_id(+)
         and div.is_deleted(+) = 'N'
         and div.price_source_id = ps.price_source_id(+)
         and div.available_price_id = apm.available_price_id(+)
         and div.price_unit_id = pum.price_unit_id(+)
         and dim.instrument_id = vdip.instrument_id(+)
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+)
         and pcdi.process_id = pc_process_id
         and pcm.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and pcpd.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and pcm.is_active = 'Y'
         and diqs.pcdi_id = pcdi.pcdi_id
         and diqs.process_id = pc_process_id
         and diqs.is_active = 'Y';
  
    cursor cur_called_off(pc_pcdi_id varchar2) is
      select poch.poch_id,
             poch.internal_action_ref_no,
             pocd.pricing_formula_id,
             pcbpd.pcbpd_id,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from poch_price_opt_call_off_header poch,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph
       where poch.pcdi_id = pc_pcdi_id
         and poch.poch_id = pocd.poch_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and poch.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    cursor cur_not_called_off(pc_pcdi_id varchar2) is
      select pcbpd.pcbpd_id,
             pcbph.internal_contract_ref_no,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from pci_physical_contract_item pci,
             pcipf_pci_pricing_formula  pcipf,
             pcbph_pc_base_price_header pcbph,
             pcbpd_pc_base_price_detail pcbpd
       where pci.internal_contract_item_ref_no =
             pcipf.internal_contract_item_ref_no
         and pcipf.pcbph_id = pcbph.pcbph_id
         and pcbph.pcbph_id = pcbpd.pcbph_id
         and pci.pcdi_id = pc_pcdi_id
         and pci.pcdi_id = pc_pcdi_id
         and pci.process_id = pc_process_id
         and pcipf.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbpd.process_id = pc_process_id
         and pci.is_active = 'Y'
         and pcipf.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    vn_contract_price        number;
    vc_price_unit_id         varchar2(15);
    vc_price_basis           varchar2(15);
    vc_price_cur_id          varchar2(15);
    vc_price_cur_code        varchar2(15);
    vn_price_weight_unit     number;
    vc_price_weight_unit_id  varchar2(15);
    vc_price_qty_unit        varchar2(15);
    vc_price_fixation_status varchar2(50);
    vn_total_quantity        number;
    vn_qty_to_be_priced      number;
    vn_total_contract_value  number;
    vn_average_price         number;
    vd_quotes_date           date;
    vn_error_no              number := 0;
    vc_prompt_month          varchar2(15);
    vc_prompt_year           number;
    vc_fixed_price_unit_id   varchar2(15);
  begin
    for cur_pcdi_rows in cur_pcdi
    loop
      vn_total_contract_value := 0;
      vn_fixed_qty            := 0;
      vn_unfixed_qty          := 0;
      vn_fixed_value          := 0;
      vn_unfixed_value        := 0;
      if cur_pcdi_rows.price_option_call_off_status in
         ('Called Off', 'Not Applicable') then
        vc_price_fixation_status := null;
        for cur_called_off_rows in cur_called_off(cur_pcdi_rows.pcdi_id)
        loop
          vn_total_quantity   := cur_pcdi_rows.item_qty;
          vn_qty_to_be_priced := cur_called_off_rows.qty_to_be_priced;
          vc_price_basis      := cur_called_off_rows.price_basis;
          if cur_called_off_rows.price_basis = 'Fixed' then
            vn_fixed_qty            := vn_total_quantity;
            vn_unfixed_qty          := 0;
            vn_contract_price       := cur_called_off_rows.price_value;
            vn_total_contract_value := vn_total_contract_value +
                                       vn_total_quantity *
                                       (vn_qty_to_be_priced / 100) *
                                       vn_contract_price;
            vc_price_unit_id        := cur_called_off_rows.price_unit_id;
          elsif cur_called_off_rows.price_basis in ('Index', 'Formula') then
            for cc1 in (select ppfh.ppfh_id,
                               ppfh.price_unit_id ppu_price_unit_id,
                               ppu.price_unit_id,
                               ppu.price_unit_name,
                               pocd.qp_period_type,
                               pofh.qp_start_date,
                               pofh.qp_end_date,
                               pfqpp.event_name,
                               pfqpp.no_of_event_months,
                               pfqpp.is_qp_any_day_basis,
                               (case
                                 when pocd.qp_period_type = 'Event' then
                                  cur_pcdi_rows.item_qty
                                 else
                                  pofh.qty_to_be_fixed
                               end) qty_to_be_fixed,
                               pofh.priced_qty,
                               pofh.pofh_id
                          from poch_price_opt_call_off_header poch,
                               pocd_price_option_calloff_dtls pocd,
                               pcbpd_pc_base_price_detail pcbpd,
                               ppfh_phy_price_formula_header ppfh,
                               pfqpp_phy_formula_qp_pricing pfqpp,
                               (select *
                                  from pofh_price_opt_fixation_header pfh
                                 where pfh.internal_gmr_ref_no is null
                                   and pfh.is_active = 'Y') pofh,
                               v_ppu_pum ppu
                         where poch.poch_id = pocd.poch_id
                           and pocd.pcbpd_id = pcbpd.pcbpd_id
                           and pcbpd.pcbpd_id = ppfh.pcbpd_id
                           and ppfh.ppfh_id = pfqpp.ppfh_id
                           and pocd.pocd_id = pofh.pocd_id(+)
                           and pcbpd.pcbpd_id = cur_called_off_rows.pcbpd_id
                           and poch.poch_id = cur_called_off_rows.poch_id
                           and ppfh.price_unit_id =
                               ppu.product_price_unit_id
                           and poch.is_active = 'Y'
                           and pocd.is_active = 'Y'
                           and pcbpd.is_active = 'Y'
                           and ppfh.is_active = 'Y'
                           and pfqpp.is_active = 'Y'
                           and pcbpd.process_id = pc_process_id
                           and pfqpp.process_id = pc_process_id
                           and ppfh.process_id = pc_process_id)
            
            loop
              begin
                select nvl(sum(pfd.user_price * pfd.qty_fixed), 0),
                       nvl(sum(pfd.qty_fixed), 0),
                       vppu.price_unit_id
                  into vn_fixed_value,
                       vn_fixed_qty,
                       vc_fixed_price_unit_id
                  from poch_price_opt_call_off_header poch,
                       pocd_price_option_calloff_dtls pocd,
                       pofh_price_opt_fixation_header pofh,
                       pfd_price_fixation_details     pfd,
                       v_ppu_pum                      vppu
                 where poch.poch_id = pocd.poch_id
                   and pocd.pocd_id = pofh.pocd_id
                   and pofh.pofh_id = cc1.pofh_id
                   and pofh.pofh_id = pfd.pofh_id
                   and pfd.as_of_date <= pd_trade_date
                   and pfd.price_unit_id = vppu.product_price_unit_id
                   and poch.is_active = 'Y'
                   and pocd.is_active = 'Y'
                   and pofh.is_active = 'Y'
                   and pfd.is_active = 'Y'
                 group by vppu.price_unit_id;
              exception
                when others then
                  vn_fixed_value := 0;
                  vn_fixed_qty   := 0;
              end;
              vn_unfixed_qty := vn_total_quantity - vn_fixed_qty;
              if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
                vn_forward_days := 0;
                vd_quotes_date  := pd_trade_date + 1;
                while vn_forward_days <> 2
                loop
                  if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                         vd_quotes_date) then
                    vd_quotes_date := vd_quotes_date + 1;
                  else
                    vn_forward_days := vn_forward_days + 1;
                    if vn_forward_days <> 2 then
                      vd_quotes_date := vd_quotes_date + 1;
                    end if;
                  end if;
                end loop;
                begin
                  select drm.dr_id
                    into vc_market_quote_dr_id
                    from drm_derivative_master drm
                   where drm.instrument_id = cur_pcdi_rows.instrument_id
                     and drm.prompt_date = vd_quotes_date
                     and rownum <= 1
                     and drm.price_point_id is null
                     and drm.is_deleted = 'N';
                exception
                  when no_data_found then
                    vobj_error_log.extend;
                    vc_data_missing_for := 'DR_ID missing for ' ||
                                           cur_pcdi_rows.instrument_name ||
                                           ',Price Source:' ||
                                           cur_pcdi_rows.price_source_name ||
                                           ' Contract Ref No: ' ||
                                           cur_pcdi_rows.contract_ref_no ||
                                           ',Price Unit:' ||
                                           cur_pcdi_rows.price_unit_name || ',' ||
                                           cur_pcdi_rows.available_price_name ||
                                           ' Price,Prompt Date:' ||
                                           to_char(vd_quotes_date,
                                                   'dd-Mon-RRRR');
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                         'procedure sp_concentrate_cog_price',
                                                                         'PHY-002',
                                                                         vc_data_missing_for,
                                                                         '',
                                                                         pc_process,
                                                                         pc_user_id,
                                                                         sysdate,
                                                                         pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                  
                end;
              end if;
            
              if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                 cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                vd_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                    pd_trade_date);
                vc_prompt_month := to_char(vd_prompt_date, 'Mon');
                vc_prompt_year  := to_char(vd_prompt_date, 'RRRR');
                begin
                  select drm.dr_id
                    into vc_market_quote_dr_id
                    from drm_derivative_master drm
                   where drm.instrument_id = cur_pcdi_rows.instrument_id
                     and drm.period_month = vc_prompt_month
                     and drm.period_year = vc_prompt_year
                     and rownum <= 1
                     and drm.price_point_id is null
                     and drm.is_deleted = 'N';
                exception
                  when no_data_found then
                    vobj_error_log.extend;
                    vc_data_missing_for := 'DR_ID missing for ' ||
                                           cur_pcdi_rows.instrument_name ||
                                           ',Price Source:' ||
                                           cur_pcdi_rows.price_source_name ||
                                           ' Contract Ref No: ' ||
                                           cur_pcdi_rows.contract_ref_no ||
                                           ',Price Unit:' ||
                                           cur_pcdi_rows.price_unit_name || ',' ||
                                           cur_pcdi_rows.available_price_name ||
                                           ' Price,Prompt Date:' ||
                                           vc_prompt_month || ' ' ||
                                           vc_prompt_year;
                    vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                         'procedure sp_concentrate_cog_price',
                                                                         'PHY-002',
                                                                         vc_data_missing_for,
                                                                         '',
                                                                         pc_process,
                                                                         pc_user_id,
                                                                         sysdate,
                                                                         pd_trade_date);
                    sp_insert_error_log(vobj_error_log);
                end;
              end if;
              begin
                select dqd.price,
                       dqd.price_unit_id
                  into vn_unfixed_val_price,
                       vc_unfixed_val_price_unit_id
                  from dq_derivative_quotes        dq,
                       dqd_derivative_quote_detail dqd,
                       cdim_corporate_dim          cdim
                 where dq.dq_id = dqd.dq_id
                   and dqd.dr_id = vc_market_quote_dr_id
                   and dq.instrument_id = cur_pcdi_rows.instrument_id
                   and dq.dbd_id = dqd.dbd_id
                   and dq.dbd_id = pc_dbd_id
                   and dqd.available_price_id =
                       cur_pcdi_rows.available_price_id
                   and dq.price_source_id = cur_pcdi_rows.price_source_id
                   and dqd.price_unit_id = cur_pcdi_rows.price_unit_id
                   and dq.trade_date = cdim.valid_quote_date
                   and dq.is_deleted = 'N'
                   and dqd.is_deleted = 'N'
                   and cdim.corporate_id = pc_corporate_id
                   and cdim.instrument_id = dq.instrument_id;
              exception
                when no_data_found then
                  select cdim.valid_quote_date
                    into vd_valid_quote_date
                    from cdim_corporate_dim cdim
                   where cdim.corporate_id = pc_corporate_id
                     and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                  vobj_error_log.extend;
                  select (case
                           when cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                                cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                            to_char(vd_prompt_date, 'Mon-RRRR')
                           else
                            to_char(vd_quotes_date, 'dd-Mon-RRRR')
                         end)
                    into vc_prompt_date_text
                    from dual;
                  vc_data_missing_for := 'Price missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         vc_prompt_date_text ||
                                         ' Trade Date(' ||
                                         to_char(vd_valid_quote_date,
                                                 'dd-Mon-RRRR') || ')';
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_concentrate_congprice',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                
                  sp_insert_error_log(vobj_error_log);
              end;
              --
              -- If Both Fixed and Unfixed Quantities are there then we have two prices
              -- Fixed and Unfixed. Unfixed Convert into Fixed Price Using Corporate FX Rate
              --
              if vn_fixed_value > 0 and vn_unfixed_val_price > 0 then
                if vc_fixed_price_unit_id <> vc_unfixed_val_price_unit_id then
                  select pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                             vn_unfixed_val_price,
                                                                             vc_unfixed_val_price_unit_id,
                                                                             vc_fixed_price_unit_id,
                                                                             pd_trade_date,
                                                                             cur_pcdi_rows.product_id)
                    into vn_unfixed_val_price
                    from dual;
                end if;
              
              end if;
              if vn_unfixed_qty > 0 then
                vn_unfixed_value := vn_unfixed_qty * vn_unfixed_val_price;
              else
                vn_unfixed_value := 0;
              end if;
              if vc_fixed_price_unit_id is not null then
                vc_price_unit_id := vc_fixed_price_unit_id;
              else
                vc_price_unit_id := vc_unfixed_val_price_unit_id;
              end if;
              begin
                select ppu.product_price_unit_id
                  into vc_price_unit_id
                  from v_ppu_pum ppu
                 where ppu.price_unit_id = vc_price_unit_id
                   and ppu.product_id = cur_pcdi_rows.product_id;
              exception
                when others then
                  vc_price_unit_id := null;
              end;
              vn_total_contract_value := vn_total_contract_value +
                                         ((vn_qty_to_be_priced / 100) *
                                         (vn_fixed_value +
                                         vn_unfixed_value));
            
            end loop;
          end if;
        
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      
        vn_error_no := vn_error_no + 1;
      elsif cur_pcdi_rows.price_option_call_off_status = 'Not Called Off' then
        vn_error_no := vn_error_no + 1;
        for cur_not_called_off_rows in cur_not_called_off(cur_pcdi_rows.pcdi_id)
        loop
          vc_price_basis      := cur_not_called_off_rows.price_basis;
          vn_total_quantity   := cur_pcdi_rows.item_qty;
          vn_qty_to_be_priced := cur_not_called_off_rows.qty_to_be_priced;
        
          if cur_not_called_off_rows.price_basis = 'Fixed' then
            vn_contract_price        := cur_not_called_off_rows.price_value;
            vn_total_contract_value  := vn_total_contract_value +
                                        vn_total_quantity *
                                        (vn_qty_to_be_priced / 100) *
                                        vn_contract_price;
            vc_price_unit_id         := cur_not_called_off_rows.price_unit_id;
            vc_price_fixation_status := 'Fixed';
            vn_fixed_qty             := vn_total_quantity;
            vn_unfixed_qty           := 0;
            vn_error_no              := 3;
          elsif cur_not_called_off_rows.price_basis in ('Index', 'Formula') then
            if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
              vn_forward_days := 0;
              vd_quotes_date  := pd_trade_date + 1;
              while vn_forward_days <> 2
              loop
                if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                       vd_quotes_date) then
                  vd_quotes_date := vd_quotes_date + 1;
                else
                  vn_forward_days := vn_forward_days + 1;
                  if vn_forward_days <> 2 then
                    vd_quotes_date := vd_quotes_date + 1;
                  end if;
                end if;
              end loop;
              begin
                select drm.dr_id
                  into vc_market_quote_dr_id
                  from drm_derivative_master drm
                 where drm.instrument_id = cur_pcdi_rows.instrument_id
                   and drm.prompt_date = vd_quotes_date
                   and rownum <= 1
                   and drm.price_point_id is null
                   and drm.is_deleted = 'N';
              exception
                when no_data_found then
                  vobj_error_log.extend;
                  vc_data_missing_for := 'DR_ID missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         to_char(vd_quotes_date,
                                                 'dd-Mon-RRRR');
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_concentrate_cog_price',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
                
              end;
            end if;
          
            if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
               cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
              vd_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                  pd_trade_date);
              vc_prompt_month := to_char(vd_prompt_date, 'Mon');
              vc_prompt_year  := to_char(vd_prompt_date, 'RRRR');
              begin
                select drm.dr_id
                  into vc_market_quote_dr_id
                  from drm_derivative_master drm
                 where drm.instrument_id = cur_pcdi_rows.instrument_id
                   and drm.period_month = vc_prompt_month
                   and drm.period_year = vc_prompt_year
                   and rownum <= 1
                   and drm.price_point_id is null
                   and drm.is_deleted = 'N';
              exception
                when no_data_found then
                  vobj_error_log.extend;
                  vc_data_missing_for := 'DR_ID missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         vc_prompt_month || ' ' ||
                                         vc_prompt_year;
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_concentrate_cog_price',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
              end;
            end if;
            begin
              select dqd.price,
                     dqd.price_unit_id
                into vn_unfixed_val_price,
                     vc_unfixed_val_price_unit_id
                from dq_derivative_quotes        dq,
                     dqd_derivative_quote_detail dqd,
                     cdim_corporate_dim          cdim
               where dq.dq_id = dqd.dq_id
                 and dqd.dr_id = vc_market_quote_dr_id
                 and dq.instrument_id = cur_pcdi_rows.instrument_id
                 and dq.dbd_id = dqd.dbd_id
                 and dq.dbd_id = pc_dbd_id
                 and dqd.available_price_id =
                     cur_pcdi_rows.available_price_id
                 and dq.price_source_id = cur_pcdi_rows.price_source_id
                 and dqd.price_unit_id = cur_pcdi_rows.price_unit_id
                 and dq.trade_date = cdim.valid_quote_date
                 and dq.is_deleted = 'N'
                 and dqd.is_deleted = 'N'
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = dq.instrument_id;
            exception
              when no_data_found then
                select cdim.valid_quote_date
                  into vd_valid_quote_date
                  from cdim_corporate_dim cdim
                 where cdim.corporate_id = pc_corporate_id
                   and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                vobj_error_log.extend;
                select (case
                         when cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                              cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                          to_char(vd_prompt_date, 'Mon-RRRR')
                         else
                          to_char(vd_quotes_date, 'dd-Mon-RRRR')
                       end)
                  into vc_prompt_date_text
                  from dual;
                vc_data_missing_for := 'Price missing for ' ||
                                       cur_pcdi_rows.instrument_name ||
                                       ',Price Source:' ||
                                       cur_pcdi_rows.price_source_name ||
                                       ' Contract Ref No: ' ||
                                       cur_pcdi_rows.contract_ref_no ||
                                       ',Price Unit:' ||
                                       cur_pcdi_rows.price_unit_name || ',' ||
                                       cur_pcdi_rows.available_price_name ||
                                       ' Price,Prompt Date:' ||
                                       vc_prompt_date_text ||
                                       ' Trade Date(' ||
                                       to_char(vd_valid_quote_date,
                                               'dd-Mon-RRRR') || ')';
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_concentrate_congprice',
                                                                     'PHY-002',
                                                                     vc_data_missing_for,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
              
                sp_insert_error_log(vobj_error_log);
            end;
            vn_fixed_qty            := 0;
            vn_unfixed_qty          := vn_total_quantity;
            vn_total_contract_value := vn_total_contract_value +
                                       ((vn_qty_to_be_priced / 100) *
                                       (vn_total_quantity *
                                       vn_unfixed_val_price));
            begin
              select ppu.product_price_unit_id
                into vc_price_unit_id
                from v_ppu_pum ppu
               where ppu.price_unit_id = vc_unfixed_val_price_unit_id
                 and ppu.product_id = cur_pcdi_rows.product_id;
            exception
              when others then
                vc_price_unit_id := null;
            end;
          end if;
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      end if;
      vn_error_no := 7;
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vn_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      
        vn_error_no := 8;
      
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vn_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
    
      vn_error_no := 9;
      begin
        select cm.cur_id,
               cm.cur_code,
               qum.qty_unit_id,
               qum.qty_unit,
               ppu.weight
          into vc_price_unit_cur_id,
               vc_price_unit_cur_code,
               vc_price_unit_weight_unit_id,
               vc_price_unit_weight_unit,
               vn_price_unit_weight
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and ppu.weight_unit_id = qum.qty_unit_id;
      exception
        when others then
          null;
      end;
      insert into bccp_base_contract_cog_price
        (process_id,
         corporate_id,
         pcdi_id,
         internal_contract_ref_no,
         contract_ref_no,
         delivery_qty,
         qty_unit_id,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         fixed_qty,
         unfixed_qty,
         price_basis)
      values
        (pc_process_id,
         pc_corporate_id,
         cur_pcdi_rows.pcdi_id,
         cur_pcdi_rows.internal_contract_ref_no,
         cur_pcdi_rows.contract_ref_no,
         cur_pcdi_rows.item_qty,
         cur_pcdi_rows.qty_unit_id,
         vn_average_price,
         vc_price_unit_id,
         vc_price_unit_cur_id,
         vc_price_unit_cur_code,
         vn_price_unit_weight,
         vc_price_unit_weight_unit_id,
         vc_price_unit_weight_unit,
         vn_fixed_qty,
         vn_unfixed_qty,
         vc_price_basis);
    
    end loop;
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_base_contract_cog_price',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace ||
                                                           'No ' ||
                                                           vn_error_no,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_base_gmr_cog_price(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_dbd_id       varchar2,
                                  pc_process      varchar2) is
    cursor cur_gmr is
      select gmr.corporate_id,
             grd.product_id,
             grd.internal_grd_ref_no internal_grd_ref_no,
             gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             gmr.qty,
             gmr.qty_unit_id,
             pofh.pofh_id,
             qat.instrument_id,
             dim.instrument_name,
             ps.price_source_id,
             ps.price_source_name,
             apm.available_price_id,
             apm.available_price_name,
             pum.price_unit_name,
             vdip.ppu_price_unit_id,
             div.price_unit_id,
             pocd.is_any_day_pricing,
             pofh.qty_to_be_fixed,
             pocd.pcbpd_id,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     grd.quality_id,
                     grd.product_id
                from grd_goods_record_detail grd
               where grd.process_id = pc_process_id
                 and grd.tolling_stock_type = 'None Tolling'
                 and grd.status = 'Active'
                 and grd.is_deleted = 'N'
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id,
                        grd.internal_grd_ref_no) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             v_gmr_exchange_detail qat,
             dim_der_instrument_master dim,
             div_der_instrument_valuation div,
             ps_price_source ps,
             apm_available_price_master apm,
             pum_price_unit_master pum,
             v_der_instrument_price_unit vdip,
             pdc_prompt_delivery_calendar pdc
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdtm.product_type_name = 'Standard'
         and gmr.internal_gmr_ref_no = pofh.internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = qat.internal_gmr_ref_no(+)
         and gmr.process_id = qat.process_id(+)
         and qat.instrument_id = dim.instrument_id(+)
         and dim.instrument_id = div.instrument_id(+)
         and div.is_deleted(+) = 'N'
         and div.price_source_id = ps.price_source_id(+)
         and div.available_price_id = apm.available_price_id(+)
         and div.price_unit_id = pum.price_unit_id(+)
         and dim.instrument_id = vdip.instrument_id(+)
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+)
         and gmr.is_deleted = 'N'
         and pofh.is_active = 'Y'
      union all
      select gmr.corporate_id,
             grd.product_id,
             grd.internal_dgrd_ref_no internal_grd_ref_no,
             gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             gmr.qty,
             gmr.qty_unit_id,
             pofh.pofh_id,
             qat.instrument_id,
             dim.instrument_name,
             ps.price_source_id,
             ps.price_source_name,
             apm.available_price_id,
             apm.available_price_name,
             pum.price_unit_name,
             vdip.ppu_price_unit_id,
             div.price_unit_id,
             pocd.is_any_day_pricing,
             pofh.qty_to_be_fixed,
             pocd.pcbpd_id,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.internal_dgrd_ref_no,
                     grd.quality_id,
                     grd.product_id
                from dgrd_delivered_grd grd
               where grd.process_id = pc_process_id
                 and grd.status = 'Active'
                 and grd.tolling_stock_type = 'None Tolling'
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id,
                        grd.internal_dgrd_ref_no) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             v_gmr_exchange_detail qat,
             dim_der_instrument_master dim,
             div_der_instrument_valuation div,
             ps_price_source ps,
             apm_available_price_master apm,
             pum_price_unit_master pum,
             v_der_instrument_price_unit vdip,
             pdc_prompt_delivery_calendar pdc
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdtm.product_type_name = 'Standard'
         and gmr.internal_gmr_ref_no = pofh.internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = qat.internal_gmr_ref_no(+)
         and gmr.process_id = qat.process_id(+)
         and qat.instrument_id = dim.instrument_id(+)
         and dim.instrument_id = div.instrument_id(+)
         and div.is_deleted(+) = 'N'
         and div.price_source_id = ps.price_source_id(+)
         and div.available_price_id = apm.available_price_id(+)
         and div.price_unit_id = pum.price_unit_id(+)
         and dim.instrument_id = vdip.instrument_id(+)
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+)
         and gmr.is_deleted = 'N'
         and pofh.is_active = 'Y';
  
    cursor cur_gmr_ele(pc_internal_gmr_ref_no varchar2) is
      select pofh.internal_gmr_ref_no,
             pofh.pofh_id,
             pofh.qty_to_be_fixed,
             pcbpd.pcbpd_id,
             pcbpd.qty_to_be_priced,
             pcbpd.price_basis
        from pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph
       where pofh.internal_gmr_ref_no = pc_internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pofh.qty_to_be_fixed <> 0
         and pofh.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
  
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
    vn_total_contract_value      number;
    vc_price_cur_id              varchar2(15);
    vc_price_cur_code            varchar2(15);
    vn_price_weight_unit         number;
    vc_price_weight_unit_id      varchar2(15);
    vc_price_qty_unit            varchar2(15);
    vc_pcbpd_id                  varchar2(15);
    vc_fixed_price_unit_id       varchar2(15);
    vn_fixed_value               number;
    vn_fixed_qty                 number;
    vn_unfixed_qty               number;
    vn_total_quantity            number;
    vn_forward_days              number;
    vd_quotes_date               date;
    vd_prompt_date               date;
    vc_prompt_month              varchar2(15);
    vc_prompt_year               varchar2(15);
    vc_market_quote_dr_id        varchar2(15);
    vd_valid_quote_date          date;
    vn_unfixed_val_price         number;
    vc_unfixed_val_price_unit_id varchar2(15);
    vc_prompt_date_text          varchar2(100);
    vn_qty_to_be_priced          number;
    vc_price_unit_id             varchar2(15);
    vc_price_basis               varchar2(15);
    vn_average_price             number;
    vn_unfixed_value             number;
    vc_data_missing_for          varchar2(1000);
  begin
    for cur_gmr_rows in cur_gmr
    loop
      vn_total_contract_value := 0;
      vn_fixed_qty            := 0;
      vn_unfixed_qty          := 0;
      vn_fixed_value          := 0;
      vn_unfixed_value        := 0;
      vc_pcbpd_id             := cur_gmr_rows.pcbpd_id;
      vn_total_quantity       := cur_gmr_rows.qty;
    
      for cur_gmr_ele_rows in cur_gmr_ele(cur_gmr_rows.internal_gmr_ref_no)
      loop
        vn_qty_to_be_priced := cur_gmr_ele_rows.qty_to_be_priced;
        vc_price_basis      := cur_gmr_ele_rows.price_basis;
        begin
          select nvl(sum(pfd.user_price * pfd.qty_fixed), 0),
                 nvl(sum(pfd.qty_fixed), 0),
                 ppu.price_unit_id
            into vn_fixed_value,
                 vn_fixed_qty,
                 vc_fixed_price_unit_id
            from poch_price_opt_call_off_header poch,
                 pocd_price_option_calloff_dtls pocd,
                 pofh_price_opt_fixation_header pofh,
                 pfd_price_fixation_details     pfd,
                 v_ppu_pum                      ppu
           where poch.poch_id = pocd.poch_id
             and pocd.pocd_id = pofh.pocd_id
             and pofh.pofh_id = cur_gmr_rows.pofh_id
             and pofh.pofh_id = pfd.pofh_id
             and pfd.as_of_date <= pd_trade_date
             and poch.is_active = 'Y'
             and pocd.is_active = 'Y'
             and pofh.is_active = 'Y'
             and pfd.is_active = 'Y'
             and ppu.product_price_unit_id = pfd.price_unit_id
           group by ppu.price_unit_id;
        exception
          when others then
            vn_fixed_value := 0;
            vn_fixed_qty   := 0;
        end;
        vn_unfixed_qty := vn_total_quantity - vn_fixed_qty;
      
        if cur_gmr_rows.is_daily_cal_applicable = 'Y' then
          vn_forward_days := 0;
          vd_quotes_date  := pd_trade_date + 1;
          while vn_forward_days <> 2
          loop
            if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                   vd_quotes_date) then
              vd_quotes_date := vd_quotes_date + 1;
            else
              vn_forward_days := vn_forward_days + 1;
              if vn_forward_days <> 2 then
                vd_quotes_date := vd_quotes_date + 1;
              end if;
            end if;
          end loop;
          begin
            select drm.dr_id
              into vc_market_quote_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.prompt_date = vd_quotes_date
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vc_data_missing_for := 'DR_ID missing for ' ||
                                     cur_gmr_rows.instrument_name ||
                                     ',Price Source:' ||
                                     cur_gmr_rows.price_source_name ||
                                     ' Contract Ref No: ' ||
                                     cur_gmr_rows.gmr_ref_no ||
                                     ',Price Unit:' ||
                                     cur_gmr_rows.price_unit_name || ',' ||
                                     cur_gmr_rows.available_price_name ||
                                     ' Price,Prompt Date:' ||
                                     to_char(vd_quotes_date, 'dd-Mon-RRRR');
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_concentrate_cog_price',
                                                                   'PHY-002',
                                                                   vc_data_missing_for,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
            
          end;
        end if;
      
        if cur_gmr_rows.is_daily_cal_applicable = 'N' and
           cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
          vd_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                              pd_trade_date);
          vc_prompt_month := to_char(vd_prompt_date, 'Mon');
          vc_prompt_year  := to_char(vd_prompt_date, 'RRRR');
          begin
            select drm.dr_id
              into vc_market_quote_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.period_month = vc_prompt_month
               and drm.period_year = vc_prompt_year
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vc_data_missing_for := 'DR_ID missing for ' ||
                                     cur_gmr_rows.instrument_name ||
                                     ',Price Source:' ||
                                     cur_gmr_rows.price_source_name ||
                                     ' Contract Ref No: ' ||
                                     cur_gmr_rows.gmr_ref_no ||
                                     ',Price Unit:' ||
                                     cur_gmr_rows.price_unit_name || ',' ||
                                     cur_gmr_rows.available_price_name ||
                                     ' Price,Prompt Date:' ||
                                     vc_prompt_month || ' ' ||
                                     vc_prompt_year;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_concentrate_cog_price',
                                                                   'PHY-002',
                                                                   vc_data_missing_for,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
        end if;
      
        begin
          select dqd.price,
                 dqd.price_unit_id
            into vn_unfixed_val_price,
                 vc_unfixed_val_price_unit_id
            from dq_derivative_quotes        dq,
                 dqd_derivative_quote_detail dqd,
                 cdim_corporate_dim          cdim
           where dq.dq_id = dqd.dq_id
             and dqd.dr_id = vc_market_quote_dr_id
             and dq.instrument_id = cur_gmr_rows.instrument_id
             and dq.dbd_id = dqd.dbd_id
             and dq.dbd_id = pc_dbd_id
             and dqd.available_price_id = cur_gmr_rows.available_price_id
             and dq.price_source_id = cur_gmr_rows.price_source_id
             and dqd.price_unit_id = cur_gmr_rows.price_unit_id
             and dq.trade_date = cdim.valid_quote_date
             and dq.is_deleted = 'N'
             and dqd.is_deleted = 'N'
             and cdim.corporate_id = pc_corporate_id
             and cdim.instrument_id = dq.instrument_id;
        exception
          when no_data_found then
            select cdim.valid_quote_date
              into vd_valid_quote_date
              from cdim_corporate_dim cdim
             where cdim.corporate_id = pc_corporate_id
               and cdim.instrument_id = cur_gmr_rows.instrument_id;
            vobj_error_log.extend;
            select (case
                     when cur_gmr_rows.is_daily_cal_applicable = 'N' and
                          cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
                      to_char(vd_prompt_date, 'Mon-RRRR')
                     else
                      to_char(vd_quotes_date, 'dd-Mon-RRRR')
                   end)
              into vc_prompt_date_text
              from dual;
            vc_data_missing_for := 'Price missing for ' ||
                                   cur_gmr_rows.instrument_name ||
                                   ',Price Source:' ||
                                   cur_gmr_rows.price_source_name ||
                                   ' Contract Ref No: ' ||
                                   cur_gmr_rows.gmr_ref_no ||
                                   ',Price Unit:' ||
                                   cur_gmr_rows.price_unit_name || ',' ||
                                   cur_gmr_rows.available_price_name ||
                                   ' Price,Prompt Date:' ||
                                   vc_prompt_date_text || ' Trade Date(' ||
                                   to_char(vd_valid_quote_date,
                                           'dd-Mon-RRRR') || ')';
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_concentrate_congprice',
                                                                 'PHY-002',
                                                                 vc_data_missing_for,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
          
            sp_insert_error_log(vobj_error_log);
        end;
        --
        -- If Both Fixed and Unfixed Quantities are there then we have two prices
        -- Fixed and Unfixed. Unfixed Convert into Fixed Price Using Corporate FX Rate
        --
        if vn_fixed_value > 0 and vn_unfixed_val_price > 0 then
          if vc_fixed_price_unit_id <> vc_unfixed_val_price_unit_id then
            select pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                       vn_unfixed_val_price,
                                                                       vc_unfixed_val_price_unit_id,
                                                                       vc_fixed_price_unit_id,
                                                                       pd_trade_date,
                                                                       cur_gmr_rows.product_id)
              into vn_unfixed_val_price
              from dual;
          end if;
        
        end if;
        if vn_unfixed_qty > 0 then
          vn_unfixed_value := vn_unfixed_qty * vn_unfixed_val_price;
        else
          vn_unfixed_value := 0;
        end if;
        if vc_fixed_price_unit_id is not null then
          vc_price_unit_id := vc_fixed_price_unit_id;
        else
          vc_price_unit_id := vc_unfixed_val_price_unit_id;
        end if;
        begin
          select ppu.product_price_unit_id
            into vc_price_unit_id
            from v_ppu_pum ppu
           where ppu.price_unit_id = vc_price_unit_id
             and ppu.product_id = cur_gmr_rows.product_id;
        exception
          when others then
            vc_price_unit_id := null;
        end;
        vn_total_contract_value := vn_total_contract_value +
                                   ((vn_qty_to_be_priced / 100) *
                                   (vn_fixed_value + vn_unfixed_value));
      end loop;
    
      vn_average_price := round(vn_total_contract_value / vn_total_quantity,
                                3);
      --
      -- Convert the final price into Base Price Unit 
      --
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vn_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vn_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
      insert into bgcp_base_gmr_cog_price
        (process_id,
         corporate_id,
         internal_gmr_ref_no,
         gmr_ref_no,
         qty,
         qty_unit_id,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         fixed_qty,
         unfixed_qty,
         price_basis,
         internal_grd_ref_no)
      values
        (pc_process_id,
         pc_corporate_id,
         cur_gmr_rows.internal_gmr_ref_no,
         cur_gmr_rows.gmr_ref_no,
         cur_gmr_rows.qty,
         cur_gmr_rows.qty_unit_id,
         vn_average_price,
         vc_price_unit_id,
         vc_price_cur_id,
         vc_price_cur_code,
         vn_price_weight_unit,
         vc_price_weight_unit_id,
         vn_price_weight_unit,
         vn_fixed_qty,
         vn_unfixed_qty,
         vc_price_basis,
         cur_gmr_rows.internal_grd_ref_no);
    
    end loop;
  end;
  procedure sp_conc_contract_cog_price(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2,
                                       pc_process      varchar2) is
    ------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_conc_contract_cog_price
    --        Author                                    : Janna
    --        Created Date                              : 29th Mar 2012
    --        Purpose                                   : Calcualte COG Price for Concentrate Contract
    --
    --        Parameters
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------                                       
    cursor cur_pcdi is
      select pcdi.pcdi_id,
             pcdi.internal_contract_ref_no,
             dipq.element_id,
             dipq.payable_qty,
             dipq.qty_unit_id payable_qty_unit_id,
             pcdi.delivery_item_no,
             pcdi.basis_type,
             pcm.contract_ref_no,
             pcpd.product_id,
             aml.underlying_product_id,
             tt.instrument_id,
             tt.instrument_name,
             tt.price_source_id,
             tt.price_source_name,
             tt.available_price_id,
             tt.available_price_name,
             tt.price_unit_name,
             tt.price_unit_id,
             tt.delivery_calender_id,
             tt.is_daily_cal_applicable,
             tt.is_monthly_cal_applicable,
             dipq.price_option_call_off_status
        from pcdi_pc_delivery_item pcdi,
             dipq_delivery_item_payable_qty dipq,
             pcm_physical_contract_main pcm,
             ak_corporate akc,
             pcpd_pc_product_definition pcpd,
             aml_attribute_master_list aml,
             dipch_di_payablecontent_header dipch,
             pcpch_pc_payble_content_header pcpch,
             (select qat.pcdi_id,
                     qat.element_id,
                     qat.instrument_id,
                     dim.instrument_name,
                     ps.price_source_id,
                     ps.price_source_name,
                     apm.available_price_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     vdip.ppu_price_unit_id,
                     div.price_unit_id,
                     dim.delivery_calender_id,
                     pdc.is_daily_cal_applicable,
                     pdc.is_monthly_cal_applicable
                from v_pcdi_exchange_detail       qat,
                     dim_der_instrument_master    dim,
                     div_der_instrument_valuation div,
                     ps_price_source              ps,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     v_der_instrument_price_unit  vdip,
                     pdc_prompt_delivery_calendar pdc
               where qat.instrument_id = dim.instrument_id
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.price_source_id = ps.price_source_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id
                 and dim.instrument_id = vdip.instrument_id
                 and dim.delivery_calender_id =
                     pdc.prompt_delivery_calendar_id
                 and qat.corporate_id = pc_corporate_id) tt
       where pcdi.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcdi.pcdi_id = dipch.pcdi_id
         and dipch.pcpch_id = pcpch.pcpch_id
         and pcpch.element_id = aml.attribute_id
         and nvl(pcpch.payable_type, 'Payable') = 'Payable'
         and pcm.corporate_id = akc.corporate_id
         and pcm.contract_status = 'In Position'
         and pcm.contract_type = 'CONCENTRATES'
         and pcpd.input_output = 'Input'
         and dipq.element_id = aml.attribute_id
         and dipq.pcdi_id = tt.pcdi_id(+)
         and dipq.element_id = tt.element_id(+)
            --and dipq.process_id = tt.process_id(+)
         and pcdi.process_id = pc_process_id
         and pcm.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and dipq.process_id = pc_process_id
         and dipch.process_id = pc_process_id
         and pcpch.process_id = pc_process_id
         and pcdi.pcdi_id = dipq.pcdi_id
         and dipq.payable_qty > 0
         and pcpd.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and pcm.is_active = 'Y'
         and dipch.is_active = 'Y'
         and pcpch.is_active = 'Y'
         and dipq.is_active = 'Y';
    cursor cur_called_off(pc_pcdi_id varchar2, pc_element_id varchar2) is
      select poch.poch_id,
             poch.internal_action_ref_no,
             pocd.pricing_formula_id,
             pcbpd.pcbpd_id,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from poch_price_opt_call_off_header poch,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph
       where poch.pcdi_id = pc_pcdi_id
         and pcbpd.element_id = pc_element_id
         and poch.poch_id = pocd.poch_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and poch.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
    cursor cur_not_called_off(pc_pcdi_id varchar2, pc_element_id varchar2) is
      select pcbpd.pcbpd_id,
             pcbph.internal_contract_ref_no,
             pcbpd.price_basis,
             pcbpd.price_value,
             pcbpd.price_unit_id,
             pcbpd.tonnage_basis,
             pcbpd.fx_to_base,
             pcbpd.qty_to_be_priced,
             pcbph.price_description
        from pci_physical_contract_item pci,
             pcipf_pci_pricing_formula  pcipf,
             pcbph_pc_base_price_header pcbph,
             pcbpd_pc_base_price_detail pcbpd
       where pci.internal_contract_item_ref_no =
             pcipf.internal_contract_item_ref_no
         and pcipf.pcbph_id = pcbph.pcbph_id
         and pcbph.pcbph_id = pcbpd.pcbph_id
         and pci.pcdi_id = pc_pcdi_id
         and pcbpd.element_id = pc_element_id
         and pci.process_id = pc_process_id
         and pcipf.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbpd.process_id = pc_process_id
         and pci.is_active = 'Y'
         and pcipf.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y';
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
    vc_prompt_date_text          varchar2(100); -- Setting the decode to this variable to make the Beautifier work
    vn_contract_price            number;
    vc_price_unit_id             varchar2(15);
    vn_total_quantity            number;
    vn_total_contract_value      number;
    vn_qty_to_be_priced          number;
    vn_average_price             number;
    vc_price_basis               varchar2(15);
    vc_price_option_call_off_sts varchar2(50);
    vd_prompt_date               date;
    vd_valid_quote_date          date;
    vn_fixed_value               number;
    vn_fixed_qty                 number;
    vc_fixed_price_unit_id       varchar2(15);
    vn_unfixed_qty               number;
    vn_unfixed_val_price         number;
    vc_unfixed_val_price_unit_id varchar2(15);
    vn_forward_days              number;
    vd_quotes_date               date;
    vc_market_quote_dr_id        varchar2(15);
    vc_prompt_month              varchar2(15);
    vc_prompt_year               varchar2(15);
    vn_unfixed_value             number;
    vc_price_unit_cur_id         varchar2(15);
    vc_price_unit_cur_code       varchar2(15);
    vc_price_unit_weight_unit_id varchar2(15);
    vc_price_unit_weight_unit    varchar2(15);
    vn_price_unit_weight         number;
    vc_error_message             varchar2(100);
    vc_data_missing_for          varchar2(1000);
  begin
    vc_error_message := 'Start';
    for cur_pcdi_rows in cur_pcdi
    loop
      vn_total_contract_value      := 0;
      vn_fixed_qty                 := 0;
      vn_unfixed_qty               := 0;
      vn_fixed_value               := 0;
      vn_unfixed_value             := 0;
      vc_price_option_call_off_sts := cur_pcdi_rows.price_option_call_off_status;
      vn_total_contract_value      := 0;
      if vc_price_option_call_off_sts in ('Called Off', 'Not Applicable') then
        for cur_called_off_rows in cur_called_off(cur_pcdi_rows.pcdi_id,
                                                  cur_pcdi_rows.element_id)
        loop
          vc_price_basis := cur_called_off_rows.price_basis;
          if cur_called_off_rows.price_basis = 'Fixed' then
          
            vn_contract_price       := cur_called_off_rows.price_value;
            vn_total_quantity       := cur_pcdi_rows.payable_qty;
            vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
            vn_total_contract_value := vn_total_contract_value +
                                       vn_total_quantity *
                                       (vn_qty_to_be_priced / 100) *
                                       vn_contract_price;
            vc_price_unit_id        := cur_called_off_rows.price_unit_id;
          
          elsif cur_called_off_rows.price_basis in ('Index', 'Formula') then
            vn_qty_to_be_priced := cur_called_off_rows.qty_to_be_priced;
            vn_total_quantity   := cur_pcdi_rows.payable_qty;
            for cc1 in (select pofh.pofh_id
                          from poch_price_opt_call_off_header poch,
                               pocd_price_option_calloff_dtls pocd,
                               pcbpd_pc_base_price_detail pcbpd,
                               ppfh_phy_price_formula_header ppfh,
                               pfqpp_phy_formula_qp_pricing pfqpp,
                               (select *
                                  from pofh_price_opt_fixation_header pfh
                                 where pfh.internal_gmr_ref_no is null
                                   and pfh.is_active = 'Y'
                                   and pfh.qty_to_be_fixed <> 0) pofh,
                               v_ppu_pum ppu
                         where poch.poch_id = pocd.poch_id
                           and pocd.pcbpd_id = pcbpd.pcbpd_id
                           and pcbpd.pcbpd_id = ppfh.pcbpd_id
                           and ppfh.ppfh_id = pfqpp.ppfh_id
                           and pocd.pocd_id = pofh.pocd_id(+)
                           and pcbpd.pcbpd_id = cur_called_off_rows.pcbpd_id
                           and poch.poch_id = cur_called_off_rows.poch_id
                           and ppfh.price_unit_id =
                               ppu.product_price_unit_id
                           and poch.is_active = 'Y'
                           and pocd.is_active = 'Y'
                           and pcbpd.is_active = 'Y'
                           and ppfh.is_active = 'Y'
                           and pfqpp.is_active = 'Y'
                           and pcbpd.process_id = pc_process_id
                           and pfqpp.process_id = pc_process_id
                           and ppfh.process_id = pc_process_id
                           and pofh.qty_to_be_fixed <> 0)
            loop
              vc_error_message := ' Line 240 ';
              begin
                select nvl(sum(pfd.user_price * pfd.qty_fixed), 0),
                       nvl(sum(pfd.qty_fixed), 0),
                       ppu.price_unit_id
                  into vn_fixed_value,
                       vn_fixed_qty,
                       vc_fixed_price_unit_id
                  from poch_price_opt_call_off_header poch,
                       pocd_price_option_calloff_dtls pocd,
                       pofh_price_opt_fixation_header pofh,
                       pfd_price_fixation_details     pfd,
                       v_ppu_pum                      ppu
                 where poch.poch_id = pocd.poch_id
                   and pocd.pocd_id = pofh.pocd_id
                   and pofh.pofh_id = cc1.pofh_id
                   and pofh.pofh_id = pfd.pofh_id
                   and pfd.as_of_date <= pd_trade_date
                   and poch.is_active = 'Y'
                   and pocd.is_active = 'Y'
                   and pofh.is_active = 'Y'
                   and pfd.is_active = 'Y'
                   and pofh.qty_to_be_fixed <> 0
                   and ppu.product_price_unit_id = pfd.price_unit_id
                 group by ppu.price_unit_id;
              exception
                when others then
                  vn_fixed_value := 0;
                  vn_fixed_qty   := 0;
              end;
            end loop;
            vn_unfixed_qty := vn_total_quantity - vn_fixed_qty;
          
            if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
              vn_forward_days := 0;
              vd_quotes_date  := pd_trade_date + 1;
              while vn_forward_days <> 2
              loop
                if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                       vd_quotes_date) then
                  vd_quotes_date := vd_quotes_date + 1;
                else
                  vn_forward_days := vn_forward_days + 1;
                  if vn_forward_days <> 2 then
                    vd_quotes_date := vd_quotes_date + 1;
                  end if;
                end if;
              end loop;
              begin
                select drm.dr_id
                  into vc_market_quote_dr_id
                  from drm_derivative_master drm
                 where drm.instrument_id = cur_pcdi_rows.instrument_id
                   and drm.prompt_date = vd_quotes_date
                   and rownum <= 1
                   and drm.price_point_id is null
                   and drm.is_deleted = 'N';
              exception
                when no_data_found then
                  vobj_error_log.extend;
                  vc_data_missing_for := 'DR_ID missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         to_char(vd_quotes_date,
                                                 'dd-Mon-RRRR');
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_concentrate_cog_price',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
                
              end;
            end if;
            if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
               cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
              vd_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                  pd_trade_date);
              vc_prompt_month := to_char(vd_prompt_date, 'Mon');
              vc_prompt_year  := to_char(vd_prompt_date, 'RRRR');
              begin
                select drm.dr_id
                  into vc_market_quote_dr_id
                  from drm_derivative_master drm
                 where drm.instrument_id = cur_pcdi_rows.instrument_id
                   and drm.period_month = vc_prompt_month
                   and drm.period_year = vc_prompt_year
                   and rownum <= 1
                   and drm.price_point_id is null
                   and drm.is_deleted = 'N';
              exception
                when no_data_found then
                  vobj_error_log.extend;
                  vc_data_missing_for := 'DR_ID missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         vc_prompt_month || ' ' ||
                                         vc_prompt_year;
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_concentrate_cog_price',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
              end;
            end if;
          
            begin
              select dqd.price,
                     dqd.price_unit_id
                into vn_unfixed_val_price,
                     vc_unfixed_val_price_unit_id
                from dq_derivative_quotes        dq,
                     dqd_derivative_quote_detail dqd,
                     cdim_corporate_dim          cdim
               where dq.dq_id = dqd.dq_id
                 and dqd.dr_id = vc_market_quote_dr_id
                 and dq.instrument_id = cur_pcdi_rows.instrument_id
                 and dq.dbd_id = dqd.dbd_id
                 and dq.dbd_id = pc_dbd_id
                 and dqd.available_price_id =
                     cur_pcdi_rows.available_price_id
                 and dq.price_source_id = cur_pcdi_rows.price_source_id
                 and dqd.price_unit_id = cur_pcdi_rows.price_unit_id
                 and dq.trade_date = cdim.valid_quote_date
                 and dq.is_deleted = 'N'
                 and dqd.is_deleted = 'N'
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = dq.instrument_id;
            exception
              when no_data_found then
                select cdim.valid_quote_date
                  into vd_valid_quote_date
                  from cdim_corporate_dim cdim
                 where cdim.corporate_id = pc_corporate_id
                   and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                vobj_error_log.extend;
                vc_error_message := ' Line 391 ';
                select (case
                         when cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                              cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                          to_char(vd_prompt_date, 'Mon-RRRR')
                         else
                          to_char(vd_quotes_date, 'dd-Mon-RRRR')
                       end)
                  into vc_prompt_date_text
                  from dual;
                vc_data_missing_for := 'Price missing for ' ||
                                       cur_pcdi_rows.instrument_name ||
                                       ',Price Source:' ||
                                       cur_pcdi_rows.price_source_name ||
                                       ' Contract Ref No: ' ||
                                       cur_pcdi_rows.contract_ref_no ||
                                       ',Price Unit:' ||
                                       cur_pcdi_rows.price_unit_name || ',' ||
                                       cur_pcdi_rows.available_price_name ||
                                       ' Price,Prompt Date:' ||
                                       vc_prompt_date_text ||
                                       ' Trade Date(' ||
                                       to_char(vd_valid_quote_date,
                                               'dd-Mon-RRRR') || ')';
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_concentrate_congprice',
                                                                     'PHY-002',
                                                                     vc_data_missing_for,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
              
                sp_insert_error_log(vobj_error_log);
            end;
            --
            -- If Both Fixed and Unfixed Quantities are there then we have two prices
            -- Fixed and Unfixed. Unfixed Convert into Fixed Price Using Corporate FX Rate
            --
            vc_error_message := ' Line 431 ';
            if vn_fixed_value > 0 and vn_unfixed_val_price > 0 then
              if vc_fixed_price_unit_id <> vc_unfixed_val_price_unit_id then
                select pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                           vn_unfixed_val_price,
                                                                           vc_unfixed_val_price_unit_id,
                                                                           vc_fixed_price_unit_id,
                                                                           pd_trade_date,
                                                                           cur_pcdi_rows.product_id)
                  into vn_unfixed_val_price
                  from dual;
              end if;
            
            end if;
            vc_error_message := ' Line 444';
            if vn_unfixed_qty > 0 then
              vn_unfixed_value := vn_unfixed_qty * vn_unfixed_val_price;
            else
              vn_unfixed_value := 0;
            end if;
            vn_total_quantity       := cur_pcdi_rows.payable_qty;
            vn_qty_to_be_priced     := cur_called_off_rows.qty_to_be_priced;
            vn_total_contract_value := vn_total_contract_value +
                                       ((vn_qty_to_be_priced / 100) *
                                       (vn_fixed_value + vn_unfixed_value));
            if vc_fixed_price_unit_id is not null then
              vc_price_unit_id := vc_fixed_price_unit_id;
            else
              vc_price_unit_id := vc_unfixed_val_price_unit_id;
            end if;
            begin
              select ppu.product_price_unit_id
                into vc_price_unit_id
                from v_ppu_pum ppu
               where ppu.price_unit_id = vc_price_unit_id
                 and ppu.product_id = cur_pcdi_rows.product_id;
            exception
              when others then
                vc_price_unit_id := null;
              
            end;
          end if;
        end loop;
      
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      
      elsif vc_price_option_call_off_sts = 'Not Called Off' then
        for cur_not_called_off_rows in cur_not_called_off(cur_pcdi_rows.pcdi_id,
                                                          cur_pcdi_rows.element_id)
        loop
          vc_price_basis := cur_not_called_off_rows.price_basis;
          if cur_not_called_off_rows.price_basis = 'Fixed' then
            vn_contract_price       := cur_not_called_off_rows.price_value;
            vn_total_quantity       := cur_pcdi_rows.payable_qty;
            vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
            vn_total_contract_value := vn_total_contract_value +
                                       vn_total_quantity *
                                       (vn_qty_to_be_priced / 100) *
                                       vn_contract_price;
            vc_price_unit_id        := cur_not_called_off_rows.price_unit_id;
          elsif cur_not_called_off_rows.price_basis in ('Index', 'Formula') then
            if cur_pcdi_rows.is_daily_cal_applicable = 'Y' then
              vn_forward_days := 0;
              vd_quotes_date  := pd_trade_date + 1;
              while vn_forward_days <> 2
              loop
                if pkg_metals_general.f_is_day_holiday(cur_pcdi_rows.instrument_id,
                                                       vd_quotes_date) then
                  vd_quotes_date := vd_quotes_date + 1;
                else
                  vn_forward_days := vn_forward_days + 1;
                  if vn_forward_days <> 2 then
                    vd_quotes_date := vd_quotes_date + 1;
                  end if;
                end if;
              end loop;
              begin
                select drm.dr_id
                  into vc_market_quote_dr_id
                  from drm_derivative_master drm
                 where drm.instrument_id = cur_pcdi_rows.instrument_id
                   and drm.prompt_date = vd_quotes_date
                   and drm.price_point_id is null
                   and rownum <= 1
                   and drm.is_deleted = 'N';
              exception
                when no_data_found then
                  vobj_error_log.extend;
                  vc_data_missing_for := 'DR-ID missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         to_char(vd_quotes_date,
                                                 'dd-Mon-RRRR');
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_calc_contract_conc_price',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
              end;
            end if;
            if cur_pcdi_rows.is_daily_cal_applicable = 'N' and
               cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
            
              vd_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_pcdi_rows.delivery_calender_id,
                                                                                  pd_trade_date);
              vc_prompt_month := to_char(vd_prompt_date, 'Mon');
              vc_prompt_year  := to_char(vd_prompt_date, 'RRRR');
              begin
                select drm.dr_id
                  into vc_market_quote_dr_id
                  from drm_derivative_master drm
                 where drm.instrument_id = cur_pcdi_rows.instrument_id
                   and drm.period_month = vc_prompt_month
                   and drm.period_year = vc_prompt_year
                   and drm.price_point_id is null
                   and rownum <= 1
                   and drm.is_deleted = 'N';
              exception
                when no_data_found then
                  vobj_error_log.extend;
                  vc_data_missing_for := 'DR_ID missing for ' ||
                                         cur_pcdi_rows.instrument_name ||
                                         ',Price Source:' ||
                                         cur_pcdi_rows.price_source_name ||
                                         ' Contract Ref No: ' ||
                                         cur_pcdi_rows.contract_ref_no ||
                                         ',Price Unit:' ||
                                         cur_pcdi_rows.price_unit_name || ',' ||
                                         cur_pcdi_rows.available_price_name ||
                                         ' Price,Prompt Date:' ||
                                         vc_prompt_month || ' ' ||
                                         vc_prompt_year;
                  vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                       'procedure sp_calc_contract_conc_price',
                                                                       'PHY-002',
                                                                       vc_data_missing_for,
                                                                       '',
                                                                       pc_process,
                                                                       pc_user_id,
                                                                       sysdate,
                                                                       pd_trade_date);
                  sp_insert_error_log(vobj_error_log);
              end;
            end if;
            begin
              select dqd.price,
                     dqd.price_unit_id
                into vn_unfixed_val_price,
                     vc_unfixed_val_price_unit_id
                from dq_derivative_quotes        dq,
                     dqd_derivative_quote_detail dqd,
                     cdim_corporate_dim          cdim
               where dq.dq_id = dqd.dq_id
                 and dqd.dr_id = vc_market_quote_dr_id
                 and dq.process_id = pc_process_id
                 and dq.instrument_id = cur_pcdi_rows.instrument_id
                 and dq.process_id = dqd.process_id
                 and dqd.available_price_id =
                     cur_pcdi_rows.available_price_id
                 and dq.price_source_id = cur_pcdi_rows.price_source_id
                 and dqd.price_unit_id = cur_pcdi_rows.price_unit_id
                 and dq.trade_date = cdim.valid_quote_date
                 and dq.is_deleted = 'N'
                 and dqd.is_deleted = 'N'
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = dq.instrument_id;
            exception
              when no_data_found then
                select cdim.valid_quote_date
                  into vd_valid_quote_date
                  from cdim_corporate_dim cdim
                 where cdim.corporate_id = pc_corporate_id
                   and cdim.instrument_id = cur_pcdi_rows.instrument_id;
                vobj_error_log.extend;
                select (case
                         when cur_pcdi_rows.is_daily_cal_applicable = 'N' and
                              cur_pcdi_rows.is_monthly_cal_applicable = 'Y' then
                          to_char(vd_prompt_date, 'Mon-RRRR')
                         else
                          to_char(vd_quotes_date, 'dd-Mon-RRRR')
                       end)
                  into vc_prompt_date_text
                  from dual;
                vc_data_missing_for := 'Price missing for ' ||
                                       cur_pcdi_rows.instrument_name ||
                                       ',Price Source:' ||
                                       cur_pcdi_rows.price_source_name ||
                                       ' Contract Ref No: ' ||
                                       cur_pcdi_rows.contract_ref_no ||
                                       ',Price Unit:' ||
                                       cur_pcdi_rows.price_unit_name || ',' ||
                                       cur_pcdi_rows.available_price_name ||
                                       ' Price,Prompt Date:' ||
                                       vc_prompt_date_text ||
                                       ' Trade Date(' ||
                                       to_char(vd_valid_quote_date,
                                               'dd-Mon-RRRR') || ')';
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_contract_conc_price',
                                                                     'PHY-002',
                                                                     vc_data_missing_for,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
            end;
            vn_total_quantity       := cur_pcdi_rows.payable_qty;
            vn_qty_to_be_priced     := cur_not_called_off_rows.qty_to_be_priced;
            vn_total_contract_value := vn_total_contract_value +
                                       (vn_total_quantity *
                                       ((vn_qty_to_be_priced / 100) *
                                       vn_unfixed_val_price));
            vc_error_message        := ' Line 641 ';
            select ppu.product_price_unit_id
              into vc_price_unit_id
              from v_ppu_pum ppu
             where ppu.price_unit_id = vc_unfixed_val_price_unit_id
               and ppu.product_id = cur_pcdi_rows.product_id;
            vc_error_message := ' Line 647 ';
          end if;
        end loop;
        vn_average_price := round(vn_total_contract_value /
                                  vn_total_quantity,
                                  3);
      
      end if;
      -- Get Price Unit Currency, Quantity Details
      begin
        select cm.cur_id,
               cm.cur_code,
               qum.qty_unit_id,
               qum.qty_unit,
               ppu.weight
          into vc_price_unit_cur_id,
               vc_price_unit_cur_code,
               vc_price_unit_weight_unit_id,
               vc_price_unit_weight_unit,
               vn_price_unit_weight
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and ppu.weight_unit_id = qum.qty_unit_id;
      exception
        when others then
          null;
      end;
      vc_error_message := ' Line 676 ';
      insert into cccp_conc_contract_cog_price
        (process_id,
         corporate_id,
         pcdi_id,
         internal_contract_ref_no,
         contract_ref_no,
         element_id,
         payable_qty,
         payable_qty_unit_id,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         fixed_qty,
         unfixed_qty,
         price_basis)
      values
        (pc_process_id,
         pc_corporate_id,
         cur_pcdi_rows.pcdi_id,
         cur_pcdi_rows.internal_contract_ref_no,
         cur_pcdi_rows.contract_ref_no,
         cur_pcdi_rows.element_id,
         cur_pcdi_rows.payable_qty,
         cur_pcdi_rows.payable_qty_unit_id,
         vn_average_price,
         vc_price_unit_id,
         vc_price_unit_cur_id,
         vc_price_unit_cur_code,
         vn_price_unit_weight,
         vc_price_unit_weight_unit_id,
         vc_price_unit_weight_unit,
         vn_fixed_qty,
         vn_unfixed_qty,
         vc_price_basis);
    
    end loop;
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_conc_contract_cog_price contract price',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace ||
                                                           vc_error_message,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_conc_gmr_cog_price(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_dbd_id       varchar2,
                                  pc_process      varchar2) is
    ------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_conc_gmr_cog_price
    --        Author                                    : Janna
    --        Created Date                              : 29th Mar 2012
    --        Purpose                                   : Calcualte COG Price for Concentrate GMRS
    --
    --        parameters
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------                                       
  
    cursor cur_gmr is
      select gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             grd.product_id,
             grd.internal_grd_ref_no internal_grd_ref_no,
             tt.instrument_id,
             tt.instrument_name,
             tt.price_source_id,
             tt.price_source_name,
             tt.available_price_id,
             tt.available_price_name,
             tt.price_unit_name,
             tt.ppu_price_unit_id,
             tt.price_unit_id,
             tt.delivery_calender_id,
             tt.is_daily_cal_applicable,
             tt.is_monthly_cal_applicable,
             spq.element_id,
             spq.payable_qty,
             spq.qty_unit_id payable_qty_unit_id
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     grd.quality_id,
                     grd.product_id
                from grd_goods_record_detail grd
               where grd.process_id = pc_process_id
                 and grd.status = 'Active'
                 and grd.tolling_stock_type in
                     ('None Tolling', 'Clone Stock')
                 and grd.is_deleted = 'N'
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id,
                        grd.internal_grd_ref_no) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             v_gmr_stockpayable_qty spq,
             (select qat.process_id,
                     qat.internal_gmr_ref_no,
                     qat.instrument_id,
                     qat.element_id,
                     dim.instrument_name,
                     ps.price_source_id,
                     ps.price_source_name,
                     apm.available_price_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     vdip.ppu_price_unit_id,
                     div.price_unit_id,
                     dim.delivery_calender_id,
                     pdc.is_daily_cal_applicable,
                     pdc.is_monthly_cal_applicable
                from v_gmr_exchange_detail        qat,
                     dim_der_instrument_master    dim,
                     div_der_instrument_valuation div,
                     ps_price_source              ps,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     v_der_instrument_price_unit  vdip,
                     pdc_prompt_delivery_calendar pdc
               where qat.instrument_id = dim.instrument_id
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.price_source_id = ps.price_source_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id
                 and dim.instrument_id = vdip.instrument_id
                 and dim.delivery_calender_id =
                     pdc.prompt_delivery_calendar_id) tt
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdtm.product_type_name = 'Composite'
         and spq.process_id = pc_process_id
         and tt.element_id = spq.element_id
         and tt.internal_gmr_ref_no = spq.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = tt.internal_gmr_ref_no(+)
         and spq.internal_grd_ref_no=grd.internal_grd_ref_no --added
         and gmr.process_id = tt.process_id(+)
         and gmr.is_deleted = 'N'
         and spq.payable_qty>0
      union all
      select gmr.internal_gmr_ref_no,
             gmr.gmr_ref_no,
             grd.product_id,
             grd.internal_dgrd_ref_no internal_grd_ref_no,
             tt.instrument_id,
             tt.instrument_name,
             tt.price_source_id,
             tt.price_source_name,
             tt.available_price_id,
             tt.available_price_name,
             tt.price_unit_name,
             tt.ppu_price_unit_id,
             tt.price_unit_id,
             tt.delivery_calender_id,
             tt.is_daily_cal_applicable,
             tt.is_monthly_cal_applicable,
             spq.element_id,
             spq.payable_qty,
             spq.qty_unit_id payable_qty_unit_id
        from gmr_goods_movement_record gmr,
             (select grd.internal_gmr_ref_no,
                     grd.internal_dgrd_ref_no,
                     grd.quality_id,
                     grd.product_id
                from dgrd_delivered_grd grd
               where grd.process_id = pc_process_id
                 and grd.status = 'Active'
                 and grd.tolling_stock_type in
                     ('None Tolling', 'Clone Stock')
               group by grd.internal_gmr_ref_no,
                        grd.quality_id,
                        grd.product_id,
                        grd.internal_dgrd_ref_no) grd,
             pdm_productmaster pdm,
             pdtm_product_type_master pdtm,
             v_gmr_stockpayable_qty spq,
             (select qat.process_id,
                     qat.internal_gmr_ref_no,
                     qat.instrument_id,
                     qat.element_id,
                     dim.instrument_name,
                     ps.price_source_id,
                     ps.price_source_name,
                     apm.available_price_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     vdip.ppu_price_unit_id,
                     div.price_unit_id,
                     dim.delivery_calender_id,
                     pdc.is_daily_cal_applicable,
                     pdc.is_monthly_cal_applicable
                from v_gmr_exchange_detail        qat,
                     dim_der_instrument_master    dim,
                     div_der_instrument_valuation div,
                     ps_price_source              ps,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     v_der_instrument_price_unit  vdip,
                     pdc_prompt_delivery_calendar pdc
               where qat.instrument_id = dim.instrument_id
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.price_source_id = ps.price_source_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id
                 and dim.instrument_id = vdip.instrument_id
                 and dim.delivery_calender_id =
                     pdc.prompt_delivery_calendar_id) tt
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.product_id = pdm.product_id
         and pdm.product_type_id = pdtm.product_type_id
         and pdm.product_type_id = 'Composite'
         and spq.process_id = pc_process_id
         and tt.element_id = spq.element_id
         and tt.internal_gmr_ref_no = spq.internal_gmr_ref_no
         and grd.internal_dgrd_ref_no=spq.internal_dgrd_ref_no-- added
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = tt.internal_gmr_ref_no(+)
         and gmr.process_id = tt.process_id(+)
         and gmr.is_deleted = 'N'
         and spq.payable_qty > 0;
  
    cursor cur_gmr_ele(pc_internal_gmr_ref_no varchar2, pc_element_id varchar2) is
      select pofh.internal_gmr_ref_no,
             pofh.pofh_id,
             pofh.qty_to_be_fixed,
             pcbpd.element_id,
             pcbpd.pcbpd_id,
             pcbpd.qty_to_be_priced,
             pcbpd.price_basis,
             pdm.product_id,
             pdm.base_quantity_unit base_qty_unit_id
        from pofh_price_opt_fixation_header pofh,
             pocd_price_option_calloff_dtls pocd,
             pcbpd_pc_base_price_detail     pcbpd,
             pcbph_pc_base_price_header     pcbph,
             aml_attribute_master_list      aml,
             pdm_productmaster              pdm
       where pofh.internal_gmr_ref_no = pc_internal_gmr_ref_no
         and pofh.pocd_id = pocd.pocd_id
         and pocd.pcbpd_id = pcbpd.pcbpd_id
         and pcbpd.pcbph_id = pcbph.pcbph_id
         and pcbpd.element_id = pc_element_id
         and pcbpd.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pcbph.process_id = pc_process_id
         and pofh.qty_to_be_fixed <> 0
         and pofh.is_active = 'Y'
         and pocd.is_active = 'Y'
         and pcbpd.is_active = 'Y'
         and pcbph.is_active = 'Y'
         and pcbpd.element_id = aml.attribute_id
         and aml.underlying_product_id = pdm.product_id;
  
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
    vd_quotes_date               date;
    vn_total_contract_value      number;
    vc_price_cur_id              varchar2(15);
    vc_price_cur_code            varchar2(15);
    vn_price_weight_unit         number;
    vc_price_weight_unit_id      varchar2(15);
    vc_price_qty_unit            varchar2(15);
    vc_price_unit_id             varchar2(15);
    vc_pcbpd_id                  varchar2(15);
    vc_prompt_month              varchar2(15);
    vc_prompt_year               number;
    vn_qty_to_be_priced          number;
    vn_total_quantity            number;
    vn_average_price             number;
    vc_price_basis               varchar2(15);
    vd_valid_quote_date          date;
    vn_fixed_value               number;
    vn_unfixed_value             number;
    vn_fixed_qty                 number;
    vn_unfixed_qty               number;
    vn_forward_days              number;
    vc_market_quote_dr_id        varchar2(15);
    vd_prompt_date               date;
    vn_unfixed_val_price         number;
    vc_unfixed_val_price_unit_id varchar2(15);
    vc_prompt_date_text          varchar2(100); -- Setting the decode to this variable to make the Beautifier work
    vc_fixed_price_unit_id       varchar2(15);
    vc_data_missing_for          varchar2(1000);
  begin
  
    for cur_gmr_rows in cur_gmr
    loop
      vn_total_contract_value := 0;
      vn_fixed_qty            := 0;
      vn_unfixed_qty          := 0;
      vn_fixed_value          := 0;
      vn_unfixed_value        := 0;
      for cur_gmr_ele_rows in cur_gmr_ele(cur_gmr_rows.internal_gmr_ref_no,
                                          cur_gmr_rows.element_id)
      loop
      
        vc_price_basis := cur_gmr_ele_rows.price_basis;
        vc_pcbpd_id    := cur_gmr_ele_rows.pcbpd_id;
      
        begin
          select nvl(sum((pfd.user_price * pfd.qty_fixed)), 0),
                 nvl(sum(pfd.qty_fixed), 0),
                 ppu.price_unit_id
            into vn_fixed_value,
                 vn_fixed_qty,
                 vc_fixed_price_unit_id
            from poch_price_opt_call_off_header poch,
                 pocd_price_option_calloff_dtls pocd,
                 pofh_price_opt_fixation_header pofh,
                 pfd_price_fixation_details     pfd,
                 v_ppu_pum                      ppu
           where poch.poch_id = pocd.poch_id
             and pocd.pocd_id = pofh.pocd_id
             and pofh.pofh_id = cur_gmr_ele_rows.pofh_id
             and pofh.pofh_id = pfd.pofh_id
             and pfd.as_of_date <= pd_trade_date
             and pofh.qty_to_be_fixed <> 0
             and poch.is_active = 'Y'
             and pocd.is_active = 'Y'
             and pofh.is_active = 'Y'
             and pfd.is_active = 'Y'
             and ppu.product_price_unit_id = pfd.price_unit_id
           group by ppu.price_unit_id;
        exception
          when others then
            vn_fixed_value := 0;
            vn_fixed_qty   := 0;
        end;
      
        vn_qty_to_be_priced := cur_gmr_ele_rows.qty_to_be_priced;
        vn_unfixed_qty      := cur_gmr_rows.payable_qty - vn_fixed_qty;
        if cur_gmr_rows.is_daily_cal_applicable = 'Y' then
          vn_forward_days := 0;
          vd_quotes_date  := pd_trade_date + 1;
          while vn_forward_days <> 2
          loop
            if pkg_metals_general.f_is_day_holiday(cur_gmr_rows.instrument_id,
                                                   vd_quotes_date) then
              vd_quotes_date := vd_quotes_date + 1;
            else
              vn_forward_days := vn_forward_days + 1;
              if vn_forward_days <> 2 then
                vd_quotes_date := vd_quotes_date + 1;
              end if;
            end if;
          end loop;
          begin
            select drm.dr_id
              into vc_market_quote_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.prompt_date = vd_quotes_date
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vc_data_missing_for := 'DR_ID missing for ' ||
                                     cur_gmr_rows.instrument_name ||
                                     ',Price Source:' ||
                                     cur_gmr_rows.price_source_name ||
                                     ' GMR Ref No: ' ||
                                     cur_gmr_rows.gmr_ref_no ||
                                     ',Price Unit:' ||
                                     cur_gmr_rows.price_unit_name || ',' ||
                                     cur_gmr_rows.available_price_name ||
                                     ' Price,Prompt Date:' ||
                                     to_char(vd_quotes_date, 'dd-Mon-RRRR');
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_conc_contract_cog_price',
                                                                   'PHY-002',
                                                                   vc_data_missing_for,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
            
          end;
        end if;
        if cur_gmr_rows.is_daily_cal_applicable = 'N' and
           cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
          vd_prompt_date  := pkg_metals_general.fn_get_next_month_prompt_date(cur_gmr_rows.delivery_calender_id,
                                                                              pd_trade_date);
          vc_prompt_month := to_char(vd_prompt_date, 'Mon');
          vc_prompt_year  := to_char(vd_prompt_date, 'RRRR');
          begin
            select drm.dr_id
              into vc_market_quote_dr_id
              from drm_derivative_master drm
             where drm.instrument_id = cur_gmr_rows.instrument_id
               and drm.period_month = vc_prompt_month
               and drm.period_year = vc_prompt_year
               and rownum <= 1
               and drm.price_point_id is null
               and drm.is_deleted = 'N';
          exception
            when no_data_found then
              vobj_error_log.extend;
              vc_data_missing_for := 'DR_ID missing for ' ||
                                     cur_gmr_rows.instrument_name ||
                                     ',Price Source:' ||
                                     cur_gmr_rows.price_source_name ||
                                     ' GMR Ref No: ' ||
                                     cur_gmr_rows.gmr_ref_no ||
                                     ',Price Unit:' ||
                                     cur_gmr_rows.price_unit_name || ',' ||
                                     cur_gmr_rows.available_price_name ||
                                     ' Price,Prompt Date:' ||
                                     vc_prompt_month || ' ' ||
                                     vc_prompt_year;
              vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                   'procedure sp_concentrate_cog_price',
                                                                   'PHY-002',
                                                                   vc_data_missing_for,
                                                                   '',
                                                                   pc_process,
                                                                   pc_user_id,
                                                                   sysdate,
                                                                   pd_trade_date);
              sp_insert_error_log(vobj_error_log);
          end;
        end if;
      
        begin
          select dqd.price,
                 dqd.price_unit_id
            into vn_unfixed_val_price,
                 vc_unfixed_val_price_unit_id
            from dq_derivative_quotes        dq,
                 dqd_derivative_quote_detail dqd,
                 cdim_corporate_dim          cdim
           where dq.dq_id = dqd.dq_id
             and dqd.dr_id = vc_market_quote_dr_id
             and dq.instrument_id = cur_gmr_rows.instrument_id
             and dq.dbd_id = dqd.dbd_id
             and dq.dbd_id = pc_dbd_id
             and dqd.available_price_id = cur_gmr_rows.available_price_id
             and dq.price_source_id = cur_gmr_rows.price_source_id
             and dqd.price_unit_id = cur_gmr_rows.price_unit_id
             and dq.trade_date = cdim.valid_quote_date
             and dq.is_deleted = 'N'
             and dqd.is_deleted = 'N'
             and cdim.corporate_id = pc_corporate_id
             and cdim.instrument_id = dq.instrument_id;
        exception
          when no_data_found then
            select cdim.valid_quote_date
              into vd_valid_quote_date
              from cdim_corporate_dim cdim
             where cdim.corporate_id = pc_corporate_id
               and cdim.instrument_id = cur_gmr_rows.instrument_id;
            vobj_error_log.extend;
            select (case
                     when cur_gmr_rows.is_daily_cal_applicable = 'N' and
                          cur_gmr_rows.is_monthly_cal_applicable = 'Y' then
                      to_char(vd_prompt_date, 'Mon-RRRR')
                     else
                      to_char(vd_quotes_date, 'dd-Mon-RRRR')
                   end)
              into vc_prompt_date_text
              from dual;
            vc_data_missing_for := 'Price missing for ' ||
                                   cur_gmr_rows.instrument_name ||
                                   ',Price Source:' ||
                                   cur_gmr_rows.price_source_name ||
                                   ',Price Unit:' ||
                                   cur_gmr_rows.price_unit_name || ',' ||
                                   cur_gmr_rows.available_price_name ||
                                   ' Price,Prompt Date:' ||
                                   vc_prompt_date_text || ' Trade Date(' ||
                                   to_char(vd_valid_quote_date,
                                           'dd-Mon-RRRR') || ')';
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_concentrate_congprice',
                                                                 'PHY-002',
                                                                 vc_data_missing_for,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        --
        -- If Both Fixed and Unfixed Quantities are there then we have two prices
        -- Fixed and Unfixed. Unfixed Convert into Fixed Price Using Corporate FX Rate
        --
        if vn_fixed_value > 0 and vn_unfixed_val_price > 0 then
          if vc_fixed_price_unit_id <> vc_unfixed_val_price_unit_id then
            select pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                       vn_unfixed_val_price,
                                                                       vc_unfixed_val_price_unit_id,
                                                                       vc_fixed_price_unit_id,
                                                                       pd_trade_date,
                                                                       cur_gmr_rows.product_id)
              into vn_unfixed_val_price
              from dual;
          end if;
        
        end if;
        if vn_unfixed_qty > 0 then
          vn_unfixed_value := vn_unfixed_qty * vn_unfixed_val_price;
        else
          vn_unfixed_value := 0;
        end if;
        if vc_fixed_price_unit_id is not null then
          vc_price_unit_id := vc_fixed_price_unit_id;
        else
          vc_price_unit_id := vc_unfixed_val_price_unit_id;
        end if;
        begin
          select ppu.product_price_unit_id
            into vc_price_unit_id
            from v_ppu_pum ppu
           where ppu.price_unit_id = vc_price_unit_id
             and ppu.product_id = cur_gmr_rows.product_id;
        exception
          when others then
            vc_price_unit_id := null;
        end;
        vn_total_quantity       := cur_gmr_rows.payable_qty;
        vn_total_contract_value := vn_total_contract_value +
                                   ((vn_qty_to_be_priced / 100) *
                                   (vn_fixed_value + vn_unfixed_value));
      
      end loop;
      vn_average_price := round(vn_total_contract_value / vn_total_quantity,
                                3);
      begin
        select cm.cur_id,
               cm.cur_code,
               ppu.weight,
               ppu.weight_unit_id,
               qum.qty_unit
          into vc_price_cur_id,
               vc_price_cur_code,
               vn_price_weight_unit,
               vc_price_weight_unit_id,
               vc_price_qty_unit
          from v_ppu_pum                ppu,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where ppu.product_price_unit_id = vc_price_unit_id
           and ppu.cur_id = cm.cur_id
           and qum.qty_unit_id = ppu.weight_unit_id;
      exception
        when no_data_found then
          vc_price_cur_id         := null;
          vc_price_cur_code       := null;
          vn_price_weight_unit    := null;
          vc_price_weight_unit_id := null;
          vc_price_qty_unit       := null;
      end;
      insert into cgcp_conc_gmr_cog_price
        (process_id,
         corporate_id,
         internal_gmr_ref_no,
         gmr_ref_no,
         element_id,
         payable_qty,
         payable_qty_unit_id,
         contract_price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         price_unit_weight,
         price_unit_weight_unit_id,
         price_unit_weight_unit,
         fixed_qty,
         unfixed_qty,
         price_basis,
         internal_grd_ref_no)
      values
        (pc_process_id,
         pc_corporate_id,
         cur_gmr_rows.internal_gmr_ref_no,
         cur_gmr_rows.gmr_ref_no,
         cur_gmr_rows.element_id,
         cur_gmr_rows.payable_qty,
         cur_gmr_rows.payable_qty_unit_id,
         vn_average_price,
         vc_price_unit_id,
         vc_price_cur_id,
         vc_price_cur_code,
         vn_price_weight_unit,
         vc_price_weight_unit_id,
         vn_price_weight_unit,
         vn_fixed_qty,
         vn_unfixed_qty,
         vc_price_basis,
         cur_gmr_rows.internal_grd_ref_no);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process contract price',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
end;
/


CREATE INDEX IDX_CGCP1 ON CGCP_CONC_GMR_COG_PRICE(PROCESS_ID,INTERNAL_GMR_REF_NO,INTERNAL_GRD_REF_NO,ELEMENT_ID);

create or replace package pkg_phy_physical_process is

  gvc_previous_process_id varchar2(15);

  gvc_dbd_id varchar2(15);

  gvc_process varchar2(10);

  gvc_base_cur_decimals number;

  gvc_prev_eod_ref_no_mig varchar2(15);

  gvc_prev_eom_ref_no_mig varchar2(15);

  gvc_previous_process_date date;

  procedure sp_process_run(pc_corporate_id varchar2,
                           pd_trade_date   date,
                           pc_process_id   varchar2,
                           pc_user_id      varchar2,
                           pc_process      varchar2,
                           pc_dbd_id       varchar2);

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date);

  procedure sp_calc_secondary_cost(pc_corporate_id varchar2,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pd_trade_date   date);

  procedure sp_calc_m2m_cost(pc_corporate_id varchar2,
                             pd_trade_date   date,
                             pc_process_id   varchar2,
                             pc_user_id      varchar2);
  procedure sp_calc_m2m_conc_cost(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2);

  procedure sp_calc_m2m_tolling_extn_cost(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2);

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2);
  procedure sp_phy_rebuild_stats;

end;
/
create or replace package body pkg_phy_physical_process is

  procedure sp_process_run(pc_corporate_id varchar2,
                           pd_trade_date   date,
                           pc_process_id   varchar2,
                           pc_user_id      varchar2,
                           pc_process      varchar2, --eod or eom
                           pc_dbd_id       varchar2
                           ------------------------------------------------------------------------------------------
                           --        procedure name                            : sp_process_run
                           --        author                                    : Jana
                           --        created date                              : 10 th jan 2011
                           --        purpose                                   : calls all procedures for eod
                           --
                           --        parameters
                           --        pc_corporate_id                           : corporate id
                           --        pd_trade_date                             : trade date
                           --        pc_process_id                             : eod/eom reference no
                           --
                           --        modification history
                           --        modified date                             :
                           --        modified by                               :
                           --        modify description                        :
                           --------------------------------------------------------------------------------------------
                           ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 0;
    vc_err_msg         varchar2(1000);
    vc_prev_eod_id     varchar2(15);
    vc_prev_eod_date   date;
    vc_prev_eom_id     varchar2(15);
    vc_prev_eom_date   date;
  begin
    gvc_process := pc_process;
  
    vc_err_msg := 'Before gvc_previous_process_id ';
    if gvc_process = 'EOD' then
      begin
        select tdc.process_id,
               tdc.trade_date
          into vc_prev_eod_id,
               vc_prev_eod_date
          from tdc_trade_date_closure tdc
         where tdc.corporate_id = pc_corporate_id
           and process = pc_process
           and tdc.trade_date =
               (select max(trade_date)
                  from tdc_trade_date_closure
                 where corporate_id = pc_corporate_id
                   and trade_date < pd_trade_date
                   and process = pc_process);
      exception
        when no_data_found then
          select seq_eod.nextval into vc_prev_eod_id from dual;
          insert into tdc_trade_date_closure
            (corporate_id,
             trade_date,
             created_date,
             closed_by,
             process_id,
             process)
          values
            (pc_corporate_id,
             to_date('01-Jan-2000', 'dd-Mon-yyyy'),
             systimestamp,
             pc_user_id,
             gvc_previous_process_id,
             pc_process);
      end;
      vc_err_msg := 'Before vc_prev_eom_id/date ';
    else
      begin
        -- To get the Previous EOM Process ID
        select tdc.process_id,
               tdc.trade_date
          into vc_prev_eom_id,
               vc_prev_eom_date
          from tdc_trade_date_closure tdc
         where tdc.corporate_id = pc_corporate_id
           and process = 'EOM'
           and tdc.trade_date = (select max(trade_date)
                                   from tdc_trade_date_closure
                                  where corporate_id = pc_corporate_id
                                    and trade_date < pd_trade_date
                                    and process = 'EOM');
      exception
        when no_data_found then
          select seq_eod.nextval into vc_prev_eom_id from dual;
          insert into tdc_trade_date_closure
            (corporate_id,
             trade_date,
             created_date,
             closed_by,
             process_id,
             process)
          values
            (pc_corporate_id,
             to_date('01-Jan-2000', 'dd-Mon-yyyy'),
             systimestamp,
             pc_user_id,
             vc_prev_eom_id,
             'EOM');
          vc_prev_eom_date := to_date('01-Jan-2000', 'dd-Mon-yyyy');
      end;
    end if;
    if pc_process = 'EOD' then
      gvc_previous_process_id   := vc_prev_eod_id;
      gvc_previous_process_date := vc_prev_eod_date;
    else
      gvc_previous_process_id   := vc_prev_eom_id;
      gvc_previous_process_date := vc_prev_eom_date;
    end if;
    -- get the dump id
    gvc_dbd_id := pc_dbd_id;
    --
    -- get the base currency decinals
    --
    vc_err_msg := 'Before base currency decimals ';
    select cm.decimals
      into gvc_base_cur_decimals
      from ak_corporate       akc,
           cm_currency_master cm
     where akc.corporate_id = pc_corporate_id
       and akc.base_cur_id = cm.cur_id;
    -- mark eod
    vc_err_msg := 'Before mark process id ';
    vn_logno   := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'Start of EOD/EOM Process From Physical');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_process_id');
    sp_mark_process_id(pc_corporate_id,
                       pc_process_id,
                       pc_user_id,
                       pd_trade_date);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_phy_rebuild_stats');
    vc_err_msg := 'sp_calc_contract_price ';
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_contract_price');
    pkg_phy_eod_price.sp_calc_contract_price(pc_corporate_id,
                                             pd_trade_date,
                                             pc_process_id,
                                             pc_user_id,
                                             pc_dbd_id,
                                             pc_process);
    vc_err_msg := 'sp_calc_gmr_price ';
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_gmr_price');
    pkg_phy_eod_price.sp_calc_gmr_price(pc_corporate_id,
                                        pd_trade_date,
                                        pc_process_id,
                                        pc_user_id,
                                        pc_dbd_id,
                                        pc_process);
  
    vc_err_msg := 'sp_calc_contract_conc_price ';
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_contract_conc_price');
    pkg_phy_eod_price.sp_calc_contract_conc_price(pc_corporate_id,
                                                  pd_trade_date,
                                                  pc_process_id,
                                                  pc_user_id,
                                                  pc_dbd_id,
                                                  pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_conc_gmr_price');
    pkg_phy_eod_price.sp_calc_conc_gmr_price(pc_corporate_id,
                                             pd_trade_date,
                                             pc_process_id,
                                             pc_user_id,
                                             pc_dbd_id,
                                             pc_process);
    vc_err_msg := 'sp_calc_secondary_cost ';
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_secondary_cost');
    sp_calc_secondary_cost(pc_corporate_id,
                           pc_process_id,
                           pc_user_id,
                           pd_trade_date);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_invm_cog');
    vc_err_msg := 'sp_calc_invm_cog ';
  
    pkg_phy_calculate_cog.sp_calc_invm_cog(pc_corporate_id,
                                           pc_process_id,
                                           pc_user_id,
                                           pd_trade_date,
                                           pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_invm_cogs');
    vc_err_msg := 'sp_calc_invm_cogs ';
  
    pkg_phy_calculate_cog.sp_calc_invm_cogs(pc_corporate_id,
                                            pc_process_id,
                                            pc_user_id,
                                            pd_trade_date,
                                            pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_conc_contract_cog_price');
    vc_err_msg := 'sp_conc_contract_cog_price';
  
    pkg_phy_cog_price.sp_conc_contract_cog_price(pc_corporate_id,
                                                 pd_trade_date,
                                                 pc_process_id,
                                                 pc_user_id,
                                                 pc_dbd_id,
                                                 pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_base_contract_cog_price');
    vc_err_msg := 'sp_base_contract_cog_price';
  
    pkg_phy_cog_price.sp_base_contract_cog_price(pc_corporate_id,
                                                 pd_trade_date,
                                                 pc_process_id,
                                                 pc_user_id,
                                                 pc_dbd_id,
                                                 pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_conc_gmr_cog_price');
  
    vc_err_msg := 'sp_conc_gmr_cog_price ';
  
    pkg_phy_cog_price.sp_conc_gmr_cog_price(pc_corporate_id,
                                            pd_trade_date,
                                            pc_process_id,
                                            pc_user_id,
                                            pc_dbd_id,
                                            pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_base_gmr_cog_price');
    vc_err_msg := 'sp_base_gmr_cog_price';
  
    pkg_phy_cog_price.sp_base_gmr_cog_price(pc_corporate_id,
                                            pd_trade_date,
                                            pc_process_id,
                                            pc_user_id,
                                            pc_dbd_id,
                                            pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_customs_report');
    vc_err_msg := 'sp_calc_customs_report';
  
    pkg_phy_eod_reports.sp_calc_customs_report(pc_corporate_id,
                                               pd_trade_date,
                                               pc_process_id,
                                               pc_user_id,
                                               pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_m2m_cost');
    vc_err_msg := 'Before calc m2m cost ';
    sp_calc_m2m_cost(pc_corporate_id,
                     pd_trade_date,
                     pc_process_id,
                     pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_m2m_conc_cost');
    vc_err_msg := 'Before calc m2m conc  cost ';
    sp_calc_m2m_conc_cost(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          pc_user_id);
    ----
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_m2m_tolling_extn_cost');
    vc_err_msg := 'Before call of sp_calc_m2m_tolling_extn_cost';
  
    sp_calc_m2m_tolling_extn_cost(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id);
    ---
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_stock_price');
    vc_err_msg := 'Before call of sp_calc_stock_price';
  
    pkg_phy_eod_price.sp_calc_stock_price(pc_process_id);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_phy_open_unreal_pnl');
    vc_err_msg := 'Before open unreal pnl ';
    pkg_phy_bm_unrealized_pnl.sp_calc_phy_open_unreal_pnl(pc_corporate_id,
                                                          pd_trade_date,
                                                          pc_process_id,
                                                          pc_user_id,
                                                          pc_process,
                                                          gvc_previous_process_id);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_stock_unreal_sntt_bm');
  
    vc_err_msg := 'Before call of sp_stock_unreal_sntt_bm';
  
    pkg_phy_bm_unrealized_pnl.sp_stock_unreal_sntt_bm(pc_corporate_id,
                                                      pd_trade_date,
                                                      pc_process_id,
                                                      pc_user_id,
                                                      pc_process,
                                                      gvc_previous_process_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_stock_unreal_inv_in_bm');
  
    vc_err_msg := 'Before call of sp_stock_unreal_inv_in_bm';
    pkg_phy_bm_unrealized_pnl.sp_stock_unreal_inv_in_bm(pc_corporate_id,
                                                        pd_trade_date,
                                                        pc_process_id,
                                                        pc_user_id,
                                                        pc_process,
                                                        gvc_previous_process_id);
  
    --- tolling start                                                                
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_phy_opencon_ext_unreal_pnl');
    vc_err_msg := 'Before sp_phy_opencon_ext_unreal_pnl';
    pkg_phy_tolling_unrealized_pnl.sp_phy_opencon_ext_unreal_pnl(pc_corporate_id,
                                                                 pd_trade_date,
                                                                 pc_process_id,
                                                                 pc_user_id,
                                                                 pc_dbd_id,
                                                                 pc_process,
                                                                 gvc_previous_process_id);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_phy_stok_con_ext_unreal_pnl');
    vc_err_msg := 'Before sp_phy_stok_con_ext_unreal_pnl';
    pkg_phy_tolling_unrealized_pnl.sp_phy_stok_con_ext_unreal_pnl(pc_corporate_id,
                                                                  pd_trade_date,
                                                                  pc_process_id,
                                                                  pc_user_id,
                                                                  pc_process,
                                                                  gvc_previous_process_id);
    -- tolling end             
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_phy_realized_today');
  
    vc_err_msg := 'Before call of sp_calc_phy_realized_today';
  
    pkg_phy_bm_realized_pnl.sp_calc_phy_realized_today(pc_corporate_id,
                                                       pd_trade_date,
                                                       pc_process_id,
                                                       pc_user_id,
                                                       pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_reverse_realized');
    vc_err_msg := 'Before call of sp_calc_reverse_realized';
  
    pkg_phy_bm_realized_pnl.sp_calc_reverse_realized(pc_corporate_id,
                                                     pd_trade_date,
                                                     pc_process_id,
                                                     pc_user_id,
                                                     pc_process,
                                                     gvc_previous_process_id);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_phy_realize_pnl_change');
    vc_err_msg := 'Before call of sp_calc_phy_realize_pnl_change';
  
    pkg_phy_bm_realized_pnl.sp_calc_phy_realize_pnl_change(pc_corporate_id,
                                                           pd_trade_date,
                                                           pc_process,
                                                           pc_process_id,
                                                           pc_user_id);
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_realized_not_fixed');
    vc_err_msg := 'Before sp_calc_realized_not_fixed ';
    pkg_phy_bm_realized_pnl.sp_calc_realized_not_fixed(pc_corporate_id,
                                                       pd_trade_date,
                                                       pc_process,
                                                       pc_process_id,
                                                       pc_user_id,
                                                       gvc_previous_process_id);
    vn_logno := vn_logno + 1;
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_phy_purchase_accural');
    vc_err_msg := 'Before sp_phy_purchase_accural ';
    if pc_process = 'EOM' then
      pkg_phy_eod_reports.sp_phy_purchase_accural(pc_corporate_id,
                                                  pd_trade_date,
                                                  pc_process_id,
                                                  pc_dbd_id);
    end if;
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_washout_realized_today');
    vc_err_msg := 'Before sp_calc_washout_realized_today';
    pkg_phy_bm_washout_pnl.sp_calc_washout_realized_today(pc_corporate_id,
                                                          pd_trade_date,
                                                          pc_process_id,
                                                          pc_user_id,
                                                          pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          ' sp_washout_reverse_realized');
    vc_err_msg := 'Before  sp_washout_reverse_realized';
    pkg_phy_bm_washout_pnl.sp_washout_reverse_realized(pc_corporate_id,
                                                       pd_trade_date,
                                                       pc_process_id,
                                                       pc_user_id,
                                                       pc_dbd_id,
                                                       pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          ' sp_washout_realize_pnl_change');
    vc_err_msg := 'Before  sp_washout_realize_pnl_change';
    pkg_phy_bm_washout_pnl.sp_washout_realize_pnl_change(pc_corporate_id,
                                                         pd_trade_date,
                                                         pc_process,
                                                         pc_process_id,
                                                         pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_phy_intrstat');
    vc_err_msg := 'Before sp_phy_intrstat';
    if pc_process = 'EOM' then
      pkg_phy_eod_reports.sp_phy_intrstat(pc_corporate_id,
                                          pd_trade_date,
                                          pc_process,
                                          pc_process_id);
    end if;
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_phy_contract_status');
    vc_err_msg := 'Before sp_phy_contract_status';
    pkg_phy_eod_reports.sp_phy_contract_status(pc_corporate_id,
                                               pd_trade_date,
                                               pc_process_id);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_feed_consumption_report');
    vc_err_msg := 'Before sp_feed_consumption_report';
    if pc_process = 'EOM' then
      pkg_phy_eod_reports.sp_feed_consumption_report(pc_corporate_id,
                                                     pd_trade_date,
                                                     pc_process_id);
    end if;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_stock_monthly_yeild');
    vc_err_msg := 'Before sp_stock_monthly_yeild';
    if pc_process = 'EOM' then
      pkg_phy_eod_reports.sp_stock_monthly_yeild(pc_corporate_id,
                                                 pd_trade_date,
                                                 pc_process_id);
    end if;
    -- Concentrate PNL Call Start
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_phy_opencon_unreal_pnl');
    vc_err_msg := 'Before sp_calc_phy_opencon_unreal_pnl';
  
    pkg_phy_conc_unrealized_pnl.sp_calc_phy_opencon_unreal_pnl(pc_corporate_id,
                                                               pd_trade_date,
                                                               pc_process_id,
                                                               pc_dbd_id,
                                                               pc_user_id,
                                                               pc_process,
                                                               gvc_previous_process_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_stock_unreal_sntt_conc');
    vc_err_msg := 'Before sp_stock_unreal_sntt_conc';
    pkg_phy_conc_unrealized_pnl.sp_stock_unreal_sntt_conc(pc_corporate_id,
                                                          pd_trade_date,
                                                          pc_process_id,
                                                          pc_dbd_id,
                                                          pc_user_id,
                                                          pc_process,
                                                          gvc_previous_process_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_stock_unreal_inv_in_conc');
    vc_err_msg := 'Before sp_stock_unreal_inv_in_conc';
  
    pkg_phy_conc_unrealized_pnl.sp_stock_unreal_inv_in_conc(pc_corporate_id,
                                                            pd_trade_date,
                                                            pc_process_id,
                                                            pc_user_id,
                                                            pc_process,
                                                            gvc_previous_process_id,
                                                            pc_dbd_id);
  
    pkg_phy_conc_realized_pnl.sp_calc_phy_conc_realize_today(pc_corporate_id,
                                                             pd_trade_date,
                                                             pc_process_id,
                                                             pc_dbd_id,
                                                             pc_user_id,
                                                             pc_process);
  
    pkg_phy_conc_realized_pnl.sp_calc_phy_conc_pnl_change(pc_corporate_id,
                                                          pd_trade_date,
                                                          pc_process,
                                                          pc_process_id,
                                                          pc_dbd_id,
                                                          pc_user_id);
  
    pkg_phy_conc_realized_pnl.sp_calc_phy_conc_reverse_rlzed(pc_corporate_id,
                                                             pd_trade_date,
                                                             pc_process_id,
                                                             gvc_previous_process_id,
                                                             pc_user_id,
                                                             pc_process);
    pkg_phy_conc_realized_pnl.sp_calc_conc_rlzed_not_fixed(pc_corporate_id,
                                                           pd_trade_date,
                                                           pc_process_id,
                                                           gvc_previous_process_id,
                                                           pc_user_id,
                                                           pc_process);
  
    -- Concentrate PNL Call End
    -- Trade PNL 
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_pnl_summary');
    pkg_phy_eod_reports.sp_calc_pnl_summary(pc_corporate_id,
                                            pd_trade_date,
                                            pc_process_id,
                                            gvc_process,
                                            pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_daily_trade_pnl');
    vc_err_msg := 'Before trade pnl ';
    pkg_phy_eod_reports.sp_calc_daily_trade_pnl(pc_corporate_id,
                                                pd_trade_date,
                                                pc_process_id,
                                                gvc_process,
                                                pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_risk_limits');
    vc_err_msg := 'Before sp_calc_risk_limits';
    pkg_phy_eod_reports.sp_calc_risk_limits(pc_corporate_id,
                                            pd_trade_date,
                                            pc_process_id,
                                            pc_user_id,
                                            pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_overall_realized_pnl');
    vc_err_msg := 'Before sp_calc_overall_realized_pnl';
  
    pkg_phy_eod_reports.sp_calc_overall_realized_pnl(pc_corporate_id,
                                                     pd_trade_date,
                                                     pc_process_id,
                                                     pc_user_id,
                                                     pc_process);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_phy_unreal_pnl_attr');
    vc_err_msg := 'Before sp_calc_phy_unreal_pnl_attr';
    pkg_phy_eod_reports.sp_calc_phy_unreal_pnl_attr(pc_corporate_id,
                                                    pd_trade_date,
                                                    gvc_previous_process_date,
                                                    pc_process_id,
                                                    gvc_previous_process_id,
                                                    pc_user_id);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_metal_balance_qty_summary');
    vc_err_msg := 'Before sp_metal_balance_qty_summary';
    if pc_process = 'EOM' then
      pkg_phy_eod_reports.sp_metal_balance_qty_summary(pc_corporate_id,
                                                       pd_trade_date,
                                                       pc_process_id);
    end if;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_daily_position_record');
    vc_err_msg := 'Before sp_daily_position_record';
  
    pkg_phy_eod_reports.sp_daily_position_record(pc_corporate_id,
                                                 pd_trade_date,
                                                 pc_process_id);
  
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'End of EOD/EOM Process From Physical');
  
    vc_err_msg := 'end of physical sp process run ';
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while pnl calculation');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process sp_process_run ' ||
                                                           vc_err_msg,
                                                           'M2M-013',
                                                           'code:' ||
                                                           sqlcode ||
                                                           ' message:' ||
                                                           sqlerrm || ' ' ||
                                                           vc_err_msg,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date
                               --------------------------------------------------------------------------------------------------
                               --  procedure name                            : sp_mark_process_id
                               --  author                                    : siva
                               --  created date                              : 20th jan 2009
                               --  purpose                                   : to mark the eod refernce numbers
                               --
                               --  parameters
                               --  pc_corporate_id                           : corporate id
                               --  pd_trade_date                             : trade date
                               --  pc_process_id                             : eod reference no
                               --
                               --  modification history
                               --  modified date                             :
                               --  modified by                               :
                               --  modify description                        :
                               --------------------------------------------------------------------------------------------------
                               ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_dbd_id          varchar2(15);
    vc_prev_process_id varchar2(15);
    prev_trade_date    date;
    vc_err_msg         varchar2(100);
  begin
    -- get the dump id
  
    vc_err_msg := 'Before select vc_dbd_id';
    select max(dbd.dbd_id)
      into vc_dbd_id
      from dbd_database_dump dbd
     where dbd.corporate_id = pc_corporate_id
       and dbd.process = gvc_process
       and dbd.trade_date = pd_trade_date;
  
    vc_err_msg := 'Before select vc_prev_process_id';
    select max(tdc.process_id)
      into vc_prev_process_id
      from tdc_trade_date_closure tdc
     where tdc.corporate_id = pc_corporate_id
       and tdc.process = gvc_process
       and tdc.trade_date < pd_trade_date;
  
    vc_err_msg := 'Before select prev_trade_date';
    select tdc.trade_date
      into prev_trade_date
      from tdc_trade_date_closure tdc
     where tdc.corporate_id = pc_corporate_id
       and tdc.process_id = vc_prev_process_id;
  
    update agd_alloc_group_detail
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update agh_alloc_group_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update cigc_contract_item_gmr_cost
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update cs_cost_store
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update ecs_element_cost_store
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update dgrd_delivered_grd
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update gmr_goods_movement_record
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update mogrd_moved_out_grd
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcad_pc_agency_detail
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcbpd_pc_base_price_detail
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcbph_pc_base_price_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcdb_pc_delivery_basis
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcdd_document_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcdiob_di_optional_basis
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcdipe_di_pricing_elements
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcdiqd_di_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcdi_pc_delivery_item
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcipf_pci_pricing_formula
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pci_physical_contract_item
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcjv_pc_jv_detail
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcm_physical_contract_main
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcpdqd_pd_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcpd_pc_product_definition
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcpq_pc_product_quality
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcqpd_pc_qual_premium_discount
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pffxd_phy_formula_fx_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pfqpp_phy_formula_qp_pricing
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update ppfd_phy_price_formula_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update ppfh_phy_price_formula_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update ciqs_contract_item_qty_status
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update diqs_delivery_item_qty_status
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update cqs_contract_qty_status
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update grd_goods_record_detail
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update vd_voyage_detail
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update invm_inventory_master
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcpch_pc_payble_content_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pqd_payable_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcepc_pc_elem_payable_content
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcth_pc_treatment_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update ted_treatment_element_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update tqd_treatment_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
    update tqd_treatment_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcetc_pc_elem_treatment_charge
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcar_pc_assaying_rules
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcaesl_assay_elem_split_limits
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update arqd_assay_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcaph_pc_attr_penalty_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcap_pc_attribute_penalty
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pqd_penalty_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pad_penalty_attribute_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcrh_pc_refining_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update rqd_refining_quality_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update red_refining_element_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update pcerc_pc_elem_refining_charge
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update ceqs_contract_ele_qty_status
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update dith_di_treatment_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update dirh_di_refining_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update diph_di_penalty_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update cipq_contract_item_payable_qty
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update dipq_delivery_item_payable_qty
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update spq_stock_payable_qty
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update dipch_di_payablecontent_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    update is_invoice_summary
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = vc_dbd_id;
  
    --
    -- 1. AGH was not present in previous eod and became inventory out in this eod
    --
    update agh_alloc_group_header agh
       set agh.today_status = 'Realized Today'
     where trim(agh.realized_status) = 'Realized'
       and agh.process_id = pc_process_id
       and agh.is_deleted = 'N'
       and agh.int_alloc_group_id not in
           (select agh_prev.int_alloc_group_id
              from agh_alloc_group_header agh_prev
             where trim(agh_prev.realized_status) = 'Realized'
               and agh_prev.process_id = gvc_previous_process_id
               and agh_prev.is_deleted = 'N');
    --
    -- 2. AGH was present in previous eod and became inventory out in this eod
    --
    update agh_alloc_group_header agh
       set agh.today_status = 'Realized Today'
     where trim(agh.realized_status) = 'Realized'
       and agh.process_id = pc_process_id
       and agh.is_deleted = 'N'
       and agh.int_alloc_group_id in
           (select agh_prev.int_alloc_group_id
              from agh_alloc_group_header agh_prev
             where trim(agh_prev.realized_status) <> 'Realized'
               and agh_prev.process_id = gvc_previous_process_id
               and agh_prev.is_deleted = 'N');
    --
    -- For Realized PNL Change update below tables for PROCESS_ID 
    --               
    update grdl_goods_record_detail_log grdl
       set grdl.process_id = pc_process_id
     where grdl.process_id is null
       and (grdl.internal_action_ref_no) in
           (select axs.internal_action_ref_no
              from axs_action_summary axs
             where axs.internal_action_ref_no = grdl.internal_action_ref_no
               and axs.eff_date <= pd_trade_date
               and axs.corporate_id = pc_corporate_id)
       and grdl.dbd_id in
           (select dbd.dbd_id
              from dbd_database_dump dbd
             where dbd.corporate_id = pc_corporate_id
               and dbd.process = gvc_process
               and dbd.trade_date <= pd_trade_date);
  
    update dgrdul_delivered_grd_ul dgrdul
       set dgrdul.process_id = pc_process_id
     where dgrdul.process_id is null
       and (dgrdul.internal_action_ref_no) in
           (select axs.internal_action_ref_no
              from axs_action_summary axs
             where axs.internal_action_ref_no =
                   dgrdul.internal_action_ref_no
               and axs.eff_date <= pd_trade_date
               and axs.corporate_id = pc_corporate_id)
       and dgrdul.dbd_id in
           (select dbd.dbd_id
              from dbd_database_dump dbd
             where dbd.corporate_id = pc_corporate_id
               and dbd.process = gvc_process
               and dbd.trade_date <= pd_trade_date);
  
    update cdl_cost_delta_log cdl
       set cdl.process_id = pc_process_id
     where cdl.process_id is null
       and (cdl.internal_action_ref_no) in
           (select axs.internal_action_ref_no
              from axs_action_summary axs
             where axs.internal_action_ref_no = cdl.internal_action_ref_no
               and axs.eff_date <= pd_trade_date
               and axs.corporate_id = pc_corporate_id)
       and cdl.dbd_id in
           (select dbd.dbd_id
              from dbd_database_dump dbd
             where dbd.corporate_id = pc_corporate_id
               and dbd.process = gvc_process
               and dbd.trade_date <= pd_trade_date);
    -- Washout Tables
    update sswh_spe_settle_washout_header sswh
       set process_id = pc_process_id
     where process_id is null
       and (sswh.internal_action_ref_no) in
           (select axs.internal_action_ref_no
              from axs_action_summary axs
             where axs.internal_action_ref_no = sswh.internal_action_ref_no
               and axs.eff_date <= pd_trade_date
               and axs.corporate_id = pc_corporate_id);
  
    update sswd_spe_settle_washout_detail sswd
       set process_id = pc_process_id
     where process_id is null
       and sswd.sswh_id in
           (select sswh.sswh_id
              from sswh_spe_settle_washout_header sswh
             where sswh.process_id = pc_process_id);
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process sp_mark_process_id',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm || ' ' ||
                                                           vc_err_msg,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_secondary_cost(pc_corporate_id varchar2,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pd_trade_date   date) is
    -----------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_calc_secondary_cost
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : populate secondary costs for contracts and gmrs
    --
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pc_process_id                             : eod reference no
    --
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------
    vobj_error_log           tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count       number := 1;
    vn_trans_to_base_fw_rate number;
    vn_forward_points        number;
    vn_qty_factor            number;
  begin
    --
    -- Update PUM ID for Rate Type
    -- Not doing with PPU because I don't know the product at this point
    --
    update cs_cost_store cs
       set cs.transaction_price_unit_id = (select ppu.price_unit_id
                                             from v_ppu_pum             ppu,
                                                  pum_price_unit_master pum
                                            where ppu.product_price_unit_id =
                                                  cs.rate_price_unit_id
                                              and ppu.price_unit_id =
                                                  pum.price_unit_id)
     where cs.process_id = pc_process_id
       and cs.rate_type = 'Rate';
    --
    -- Update PUM ID for Absolute Type
    -- Currency from CS and Unit from CIGC
    -- 
    for cc1 in (select cs.internal_cost_id,
                       cog.cog_ref_no,
                       cog.qty,
                       cog.qty_unit_id,
                       cs.transaction_amt,
                       cs.transaction_amt_cur_id,
                       pum.price_unit_id,
                       cs.rate_type,
                       round(cs.transaction_amt / cog.qty, 10) transaction_cost,
                       round(cs.cost_value / cog.qty, 10) cost_value
                  from cigc_contract_item_gmr_cost cog,
                       cs_cost_store               cs,
                       pum_price_unit_master       pum
                 where cog.process_id = pc_process_id
                   and cs.process_id = cog.process_id
                   and cog.cog_ref_no = cs.cog_ref_no
                   and cog.qty_unit_id = pum.weight_unit_id
                   and cs.transaction_amt_cur_id = pum.cur_id
                   and cs.rate_type = 'Absolute'
                   and nvl(pum.weight, 1) = 1
                   and pum.is_active = 'Y'
                   and pum.is_deleted = 'N')
    loop
      update cs_cost_store css
         set css.cost_value                = cc1.cost_value,
             css.transaction_price_unit_id = cc1.price_unit_id
       where css.internal_cost_id = cc1.internal_cost_id;
    
    end loop;
  
    insert into cisc_contract_item_sec_cost
      (internal_contract_item_ref_no,
       cost_component_id,
       avg_cost,
       process_id,
       secondary_cost,
       avg_cost_in_trn_cur,
       avg_cost_price_unit_id,
       payment_due_date,
       product_id,
       corporate_id,
       transact_price_unit_id,
       transact_qty_unit_id,
       transact_cur_id,
       transact_main_cur_id,
       currency_factor,
       base_cur_id,
       base_qty_unit_id,
       base_price_unit_id,
       cost_value,
       price_qty_unit_id)
      select pci.internal_contract_item_ref_no,
             cs.cost_component_id,
             cs.cost_in_base_price_unit_id,
             pc_process_id,
             cs.cost_value secondary_cost,
             cs.cost_in_transact_price_unit_id,
             cs.transaction_price_unit_id,
             case
               when nvl(cs.est_payment_due_date, pd_trade_date) >
                    pd_trade_date then
                pd_trade_date
               else
                nvl(cs.est_payment_due_date, pd_trade_date)
             end,
             pcpd.product_id,
             pcm.corporate_id,
             cs.transaction_price_unit_id,
             cigc.qty_unit_id,
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             nvl(scd.factor, 1),
             akc.base_cur_id,
             pdm.base_quantity_unit,
             pum_base.price_unit_id,
             cs.cost_value,
             pum_trans.weight_unit_id
        from cs_cost_store               cs,
             cigc_contract_item_gmr_cost cigc,
             pcdi_pc_delivery_item       pcdi,
             pci_physical_contract_item  pci,
             pcm_physical_contract_main  pcm,
             scm_service_charge_master   scm,
             pcpq_pc_product_quality     pcpq,
             pcpd_pc_product_definition  pcpd,
             ak_corporate                akc,
             pdm_productmaster           pdm,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_base,
             pum_price_unit_master       pum_trans
       where pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
         and pcdi.pcdi_id = pci.pcdi_id
         and pci.internal_contract_item_ref_no =
             cigc.int_contract_item_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and pcm.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcdi.is_active = 'Y'
         and cigc.is_deleted = 'N'
         and cs.is_deleted = 'N'
         and pcm.contract_status = 'In Position'
         and pcm.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcdi.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cs.cost_component_id = scm.cost_id
         and scm.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Estimate'
         and pci.pcpq_id = pcpq.pcpq_id
         and pcpq.pcpd_id = pcpd.pcpd_id
         and pcpq.process_id = pcpd.process_id
         and pcm.corporate_id = akc.corporate_id
         and pcpd.product_id = pdm.product_id
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.cur_id = akc.base_cur_id
         and pum_trans.price_unit_id = cs.transaction_price_unit_id
         and pcpd.process_id = pc_process_id;
  
    --
    -- Check the exchange rate from Transaction Currency to Base Currency
    --
    for cur_cisc in (select cisc.transact_main_cur_id,
                            cisc.base_cur_id,
                            cisc.payment_due_date,
                            cm_tran.cur_code transact_main_cur_code,
                            cm_base.cur_code base_cur_code
                       from cisc_contract_item_sec_cost cisc,
                            cm_currency_master          cm_tran,
                            cm_currency_master          cm_base
                      where cisc.process_id = pc_process_id
                        and cisc.transact_main_cur_id <> cisc.base_cur_id
                        and cisc.transact_main_cur_id = cm_tran.cur_id
                        and cisc.base_cur_id = cm_base.cur_id
                      group by cisc.transact_main_cur_id,
                               cisc.base_cur_id,
                               cisc.payment_due_date,
                               cm_tran.cur_code,
                               cm_base.cur_code)
    loop
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  cur_cisc.payment_due_date,
                                  cur_cisc.transact_main_cur_id,
                                  cur_cisc.base_cur_id,
                                  30,
                                  'sp_calc_secondary_cost on Contract Accrual CISC',
                                  gvc_process,
                                  vn_trans_to_base_fw_rate,
                                  vn_forward_points);
    
      if vn_trans_to_base_fw_rate <> 0 then
        update cisc_contract_item_sec_cost cisc
           set cisc.fw_rate_trans_to_base_currency = vn_trans_to_base_fw_rate,
               cisc.fw_rate_string                 = '1 ' ||
                                                     cur_cisc.transact_main_cur_code || '=' ||
                                                     vn_trans_to_base_fw_rate || ' ' ||
                                                     cur_cisc.base_cur_code
         where cisc.process_id = pc_process_id
           and cisc.transact_main_cur_id = cur_cisc.transact_main_cur_id
           and cisc.base_cur_id = cur_cisc.base_cur_id
           and cisc.payment_due_date = cur_cisc.payment_due_date;
      end if;
    end loop;
  
    --
    -- Update the Quantity Conversion from Base to Transaction
    --
    for cur_cisc_qty in (select cisc.product_id,
                                cisc.price_qty_unit_id,
                                cisc.base_qty_unit_id
                           from cisc_contract_item_sec_cost cisc
                          where cisc.process_id = pc_process_id
                            and cisc.price_qty_unit_id <>
                                cisc.base_qty_unit_id
                          group by cisc.product_id,
                                   cisc.price_qty_unit_id,
                                   cisc.base_qty_unit_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_cisc_qty.product_id,
                                                  cur_cisc_qty.base_qty_unit_id,
                                                  cur_cisc_qty.price_qty_unit_id,
                                                  1)
        into vn_qty_factor
        from dual;
      update cisc_contract_item_sec_cost cisc
         set cisc.base_to_price_weight_factor = vn_qty_factor
       where cisc.price_qty_unit_id = cur_cisc_qty.price_qty_unit_id
         and cisc.base_qty_unit_id = cur_cisc_qty.base_qty_unit_id
         and cisc.process_id = pc_process_id;
    end loop;
  
    --
    -- Average Price in Base Price Unit ID
    --
    update cisc_contract_item_sec_cost cisc
       set cisc.avg_cost_fw_rate = cisc.cost_value *
                                   nvl(cisc.currency_factor, 1) *
                                   nvl(cisc.base_to_price_weight_factor, 1) *
                                   nvl(cisc.fw_rate_trans_to_base_currency,
                                       1)
     where cisc.process_id = pc_process_id;
  
    -- For GMR
    pkg_phy_calculate_cog.sp_calc_gmr_sec_cost(pc_corporate_id,
                                               pc_process_id,
                                               pc_user_id,
                                               pd_trade_date,
                                               gvc_process);
  
    --
    -- Calcualte Contract Item Sec Cost Summary for PNL
    --
  
    insert into ciscs_cisc_summary ciscs
      (internal_contract_item_ref_no,
       avg_cost,
       process_id,
       avg_cost_fw_rate,
       fw_rate_string)
      select cisc.internal_contract_item_ref_no,
             sum(cisc.avg_cost),
             pc_process_id,
             sum(cisc.avg_cost_fw_rate),
             f_string_aggregate(cisc.fw_rate_string)
        from cisc_contract_item_sec_cost cisc
       where cisc.process_id = pc_process_id
       group by cisc.internal_contract_item_ref_no;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_secondary_cost',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_m2m_cost(pc_corporate_id varchar2,
                             pd_trade_date   date,
                             pc_process_id   varchar2,
                             pc_user_id      varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_calc_m2m_cost
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : populate secondary costs for contracts and gmrs
    --
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pc_process_id                             : eod reference no
    --
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    vn_serial_no       number;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_err_msg         varchar2(100);
  begin
    --
    -- Generate unique m2m data with m2m id
    --
    vc_err_msg := 'before generate Unique M2M data with M2M ID';
    begin
      vn_serial_no := 1;
      for cc in (select t.corporate_id,
                        t.product_id,
                        t.product_type,
                        t.quality_id,
                        t.mvp_id,
                        t.mvpl_id,
                        t.value_type,
                        t.valuation_region,
                        t.valuation_point,
                        t.valuation_incoterm_id,
                        t.valuation_city_id,
                        t.valuation_basis,
                        t.reference_incoterm,
                        t.refernce_location,
                        t.instrument_id,
                        t.valuation_dr_id,
                        t.price_basis as valuation_method,
                        t.m2m_price_unit_id,
                        pum.cur_id m2m_price_unit_cur_id,
                        cm.cur_code,
                        pum.weight_unit_id,
                        qum.qty_unit,
                        nvl(pum.weight, 1) as weight,
                        t.derivative_def_id,
                        t.valuation_month || '-' || t.valuation_year valuation_period,
                        t.valuation_date,
                        t.shipment_month || '-' || t.shipment_year shipment_month_year,
                        t.shipment_date,
                        decode(t.section_name, 'OPEN', 'OPEN', 'STOCK') rate_type,
                        pum.cur_id valuation_cur_id,
                        t.base_price_unit_id_in_ppu,
                        t.base_price_unit_id_in_pum,
                        t.payment_due_date
                   from tmpc_temp_m2m_pre_check  t,
                        pum_price_unit_master    pum,
                        cm_currency_master       cm,
                        qum_quantity_unit_master qum
                  where t.corporate_id = pc_corporate_id
                    and t.m2m_price_unit_id = pum.price_unit_id(+)
                    and pum.cur_id = cm.cur_id(+)
                    and pum.weight_unit_id = qum.qty_unit_id(+)
                    and t.product_type = 'BASEMETAL'
                  group by t.corporate_id,
                           t.product_id,
                           t.product_type,
                           t.mvp_id,
                           t.mvpl_id,
                           t.value_type,
                           t.valuation_region,
                           t.valuation_point,
                           t.valuation_incoterm_id,
                           t.valuation_city_id,
                           t.valuation_basis,
                           t.reference_incoterm,
                           t.refernce_location,
                           t.instrument_id,
                           t.valuation_dr_id,
                           t.price_basis,
                           pum.cur_id,
                           t.m2m_price_unit_id,
                           t.m2m_price_unit_cur_id,
                           cm.cur_code,
                           pum.weight_unit_id,
                           qum.qty_unit,
                           nvl(pum.weight, 1),
                           t.quality_id,
                           t.derivative_def_id,
                           t.valuation_month || '-' || t.valuation_year,
                           t.valuation_date,
                           t.shipment_month || '-' || t.shipment_year,
                           t.shipment_date,
                           --this bit is important since for the same dr_id , open contract use forward rates and
                           --stock uses spot. tmef has been populated for both types
                           decode(t.section_name, 'OPEN', 'OPEN', 'STOCK'),
                           t.valuation_cur_id,
                           t.base_price_unit_id_in_ppu,
                           t.base_price_unit_id_in_pum,
                           t.payment_due_date)
      loop
        insert into md_m2m_daily
          (md_id,
           process_id,
           corporate_id,
           product_id,
           product_type,
           quality_id,
           mvp_id,
           mvpl_id,
           valuation_region,
           valuation_point,
           valuation_incoterm_id,
           valuation_city_id,
           valuation_basis,
           reference_incoterm,
           refernce_location_id,
           instrument_id,
           valuation_dr_id,
           m2m_price_unit_id,
           m2m_price_unit_cur_id,
           m2m_price_unit_cur_code,
           m2m_price_unit_weight_unit_id,
           m2m_price_unit_weight_unit,
           m2m_price_unit_weight,
           valuation_month,
           valuation_future_contract,
           derivative_def_id,
           valuation_date,
           shipment_month_year,
           shipment_date,
           rate_type,
           valuation_cur_id,
           base_price_unit_id_in_ppu,
           base_price_unit_id_in_pum,
           valuation_method,
           payment_due_date)
        values
          ('MDB-' || vn_serial_no,
           pc_process_id,
           cc.corporate_id,
           cc.product_id,
           cc.product_type,
           cc.quality_id,
           cc.mvp_id,
           cc.mvpl_id,
           cc.valuation_region,
           cc.valuation_point,
           cc.valuation_incoterm_id,
           cc.valuation_city_id,
           cc.valuation_basis,
           cc.reference_incoterm,
           cc.refernce_location,
           cc.instrument_id,
           cc.valuation_dr_id,
           cc.m2m_price_unit_id,
           cc.m2m_price_unit_cur_id,
           cc.cur_code,
           cc.weight_unit_id,
           cc.qty_unit,
           cc.weight,
           cc.valuation_period,
           cc.valuation_dr_id,
           cc.derivative_def_id,
           cc.valuation_date,
           cc.shipment_month_year,
           cc.shipment_date,
           cc.rate_type,
           cc.valuation_cur_id,
           cc.base_price_unit_id_in_ppu,
           cc.base_price_unit_id_in_pum,
           cc.value_type,
           cc.payment_due_date);
        vn_serial_no := vn_serial_no + 1;
      end loop;
      --
      -- Update the Quality premimum
      --
      for cc1 in (select tmpc.corporate_id,
                         tmpc.mvp_id,
                         tmpc.valuation_point,
                         tmpc.shipment_month,
                         tmpc.shipment_year,
                         tmpc.instrument_id,
                         tmpc.base_price_unit_id_in_ppu,
                         tmpc.quality_id,
                         tmpc.product_id,
                         tmpc.payment_due_date,
                         tmpc.m2m_quality_premium,
                         tmpc.m2m_qp_fw_exch_rate
                    from tmpc_temp_m2m_pre_check tmpc
                   where tmpc.corporate_id = pc_corporate_id
                     and tmpc.product_type = 'BASEMETAL'
                   group by tmpc.corporate_id,
                            tmpc.mvp_id,
                            tmpc.valuation_point,
                            tmpc.shipment_month,
                            tmpc.shipment_year,
                            tmpc.instrument_id,
                            tmpc.base_price_unit_id_in_ppu,
                            tmpc.quality_id,
                            tmpc.product_id,
                            tmpc.payment_due_date,
                            tmpc.m2m_quality_premium,
                            tmpc.m2m_qp_fw_exch_rate)
      loop
      
        update md_m2m_daily md
           set md.m2m_quality_premium = cc1.m2m_quality_premium,
               md.m2m_qp_fw_exch_rate = cc1.m2m_qp_fw_exch_rate
         where md.corporate_id = cc1.corporate_id
           and md.product_id = cc1.product_id
           and md.quality_id = cc1.quality_id
           and md.shipment_month_year =
               cc1.shipment_month || '-' || cc1.shipment_year
           and md.mvp_id = cc1.mvp_id
           and md.payment_due_date = cc1.payment_due_date
           and md.process_id = pc_process_id
           and md.product_type = 'BASEMETAL';
      
      end loop;
      --
      -- Update the product premimum
      --
      for cc2 in (select tmpc.corporate_id,
                         tmpc.product_id,
                         tmpc.base_price_unit_id_in_ppu,
                         tmpc.shipment_month,
                         tmpc.shipment_year,
                         tmpc.payment_due_date,
                         tmpc.m2m_product_premium,
                         tmpc.m2m_pp_fw_exch_rate
                    from tmpc_temp_m2m_pre_check tmpc
                   where tmpc.corporate_id = pc_corporate_id
                     and tmpc.product_type = 'BASEMETAL'
                   group by tmpc.corporate_id,
                            tmpc.product_id,
                            tmpc.base_price_unit_id_in_ppu,
                            tmpc.shipment_month,
                            tmpc.shipment_year,
                            tmpc.payment_due_date,
                            tmpc.m2m_product_premium,
                            tmpc.m2m_pp_fw_exch_rate)
      loop
        update md_m2m_daily md
           set md.m2m_product_premium = cc2.m2m_product_premium,
               md.m2m_pp_fw_exch_rate = cc2.m2m_pp_fw_exch_rate
         where md.corporate_id = cc2.corporate_id
           and md.product_id = cc2.product_id
           and md.shipment_month_year =
               cc2.shipment_month || '-' || cc2.shipment_year
           and md.payment_due_date = cc2.payment_due_date
           and md.process_id = pc_process_id
           and md.product_type = 'BASEMETAL';
      end loop;
      vc_err_msg := 'line 2819';
      update md_m2m_daily md
         set (md.valuation_exchange_id, md.m2m_settlement_price, md.m2m_sett_price_available_date) = --
              (select pdd.exchange_id,
                      edq.price,
                      edq.dq_trade_date
                 from eodeom_derivative_quote_detail edq,
                      pum_price_unit_master          pum,
                      dim_der_instrument_master      dim,
                      div_der_instrument_valuation   div,
                      pdd_product_derivative_def     pdd,
                      cdim_corporate_dim             cdim
                where edq.dr_id = md.valuation_dr_id
                  and edq.corporate_id = pc_corporate_id
                  and dim.instrument_id = md.instrument_id
                  and edq.instrument_id = div.instrument_id
                  and dim.product_derivative_id = pdd.derivative_def_id
                  and edq.price_source_id = div.price_source_id
                  and div.is_deleted = 'N'
                  and edq.available_price_id = div.available_price_id
                  and edq.price_unit_id = pum.price_unit_id
                  and edq.price_unit_id = div.price_unit_id
                  and edq.price is not null
                  and edq.process_id = pc_process_id
                  and edq.dq_trade_date = cdim.valid_quote_date
                  and cdim.corporate_id = pc_corporate_id
                  and cdim.instrument_id = edq.instrument_id)
      
       where md.corporate_id = pc_corporate_id
         and md.valuation_method <> 'FIXED'
         and md.process_id = pc_process_id;
      ----
      vc_err_msg := 'line 2887';
      --
      -- Update the M2M Location Incoterm Deviation
      --
      for cc3 in (select tmpc.product_id,
                         tmpc.valuation_city_id,
                         tmpc.mvp_id,
                         tmpc.valuation_incoterm_id,
                         tmpc.payment_due_date,
                         tmpc.m2m_loc_incoterm_deviation,
                         tmpc.m2m_ld_fw_exch_rate
                    from tmpc_temp_m2m_pre_check tmpc
                   where tmpc.product_type = 'BASEMETAL'
                     and tmpc.corporate_id = pc_corporate_id
                   group by tmpc.product_id,
                            tmpc.valuation_city_id,
                            tmpc.mvp_id,
                            tmpc.valuation_incoterm_id,
                            tmpc.payment_due_date,
                            tmpc.m2m_loc_incoterm_deviation,
                            tmpc.m2m_ld_fw_exch_rate)
      loop
      
        update md_m2m_daily md
           set md.m2m_loc_incoterm_deviation = cc3.m2m_loc_incoterm_deviation,
               md.m2m_ld_fw_exch_rate        = cc3.m2m_ld_fw_exch_rate
         where md.valuation_city_id = cc3.valuation_city_id
           and md.mvp_id = cc3.mvp_id
           and md.product_id = cc3.product_id
           and md.valuation_incoterm_id = cc3.valuation_incoterm_id
           and md.product_type = 'BASEMETAL'
           and md.corporate_id = pc_corporate_id
           and md.payment_due_date = cc3.payment_due_date
           and md.process_id = pc_process_id;
      
      end loop;
    
      vc_err_msg := 'line 3049';
    
      update md_m2m_daily md
         set md.net_m2m_price = nvl(md.m2m_settlement_price, 0)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'BASEMETAL'
         and md.process_id = pc_process_id;
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 5');
      vc_err_msg := 'line 3068';
      vc_err_msg := 'line 3090';
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 6');
      --
      -- update derivative def id/name
      --
      update md_m2m_daily md
         set (derivative_def_id, derivative_def_name) = (select pdd.derivative_def_id,
                                                                pdd.derivative_def_name
                                                           from dim_der_instrument_master  dim,
                                                                pdd_product_derivative_def pdd,
                                                                irm_instrument_type_master irm
                                                          where dim.instrument_id =
                                                                md.instrument_id
                                                            and dim.product_derivative_id =
                                                                pdd.derivative_def_id
                                                            and dim.instrument_type_id =
                                                                irm.instrument_type_id
                                                            and md.product_type =
                                                                'BASEMETAL'
                                                            and irm.instrument_type =
                                                                'Future'
                                                            and rownum <= 1)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'BASEMETAL'
         and md.process_id = pc_process_id;
      --
      -- update m2m main currency and decimals
      --
      -- tbd : update is not working : 25th   : this is not working as have commented the above update to
      --get the m2m_price_unit_cur_id
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 7');
      vc_err_msg := 'line 3121';
      update md_m2m_daily md
         set (md.m2m_main_cur_id, md.m2m_main_cur_code, md.m2m_main_cur_decimals, md.main_currency_factor) = --
              (select (case
                        when cm.is_sub_cur = 'Y' then
                         scd.cur_id
                        else
                         cm.cur_id
                      end) base_currency_id,
                      (case
                        when cm.is_sub_cur = 'Y' then
                         cm_1.cur_code
                        else
                         cm.cur_code
                      end) cur_code,
                      (case
                        when cm.is_sub_cur = 'Y' then
                         cm_1.decimals
                        else
                         cm.decimals
                      end),
                      (case
                        when cm.is_sub_cur = 'Y' then
                         nvl(scd.factor, 1)
                        else
                         1
                      end) factor
                 from cm_currency_master      cm,
                      scd_sub_currency_detail scd,
                      cm_currency_master      cm_1
                where cm.cur_id = md.m2m_price_unit_cur_id
                  and cm.cur_id = scd.sub_cur_id(+)
                  and scd.cur_id = cm_1.cur_id(+))
       where md.process_id = pc_process_id
         and md.product_type = 'BASEMETAL';
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 8');
      -- now update the m2m id in the tmpc_temp_m2m_pre_check
      -- table per contract item level,gmr level,grd level --
      vc_err_msg := 'line 3163';
      for c1 in (select md.md_id,
                        md.corporate_id,
                        md.product_id,
                        md.crop_year_id,
                        md.quality_id,
                        md.origin_id,
                        md.origin_group_id,
                        md.growth_code_id,
                        md.valuation_method,
                        md.mvp_id,
                        md.mvpl_id,
                        md.valuation_region,
                        md.valuation_point,
                        md.valuation_incoterm_id,
                        md.valuation_city_id,
                        md.valuation_basis,
                        md.reference_incoterm,
                        md.refernce_location_id refernce_location,
                        md.instrument_id,
                        md.valuation_dr_id,
                        md.valuation_month,
                        md.valuation_date,
                        md.shipment_month_year,
                        md.shipment_date,
                        md.rate_type,
                        md.payment_due_date
                   from md_m2m_daily md
                  where md.corporate_id = pc_corporate_id
                    and md.process_id = pc_process_id)
      loop
        if c1.valuation_method <> 'FIXED' then
          update tmpc_temp_m2m_pre_check tmpc
             set tmpc.internal_m2m_id = c1.md_id
           where tmpc.corporate_id = c1.corporate_id
             and tmpc.product_id = c1.product_id
             and tmpc.quality_id = c1.quality_id
             and tmpc.mvp_id = c1.mvp_id
             and tmpc.mvpl_id = c1.mvpl_id
             and tmpc.valuation_region = c1.valuation_region
             and tmpc.valuation_point = c1.valuation_point
             and tmpc.valuation_incoterm_id = c1.valuation_incoterm_id
             and tmpc.valuation_city_id = c1.valuation_city_id
             and tmpc.valuation_basis = c1.valuation_basis
             and tmpc.valuation_dr_id = c1.valuation_dr_id
             and tmpc.reference_incoterm = c1.reference_incoterm
             and tmpc.refernce_location = c1.refernce_location
             and tmpc.instrument_id = c1.instrument_id
             and tmpc.shipment_date = c1.shipment_date
             and tmpc.shipment_month || '-' || tmpc.shipment_year =
                 c1.shipment_month_year
             and decode(tmpc.section_name, 'OPEN', 'OPEN', 'STOCK') =
                 c1.rate_type
             and tmpc.product_type = 'BASEMETAL'
             and tmpc.payment_due_date = c1.payment_due_date;
        
        else
          update tmpc_temp_m2m_pre_check tmpc
             set tmpc.internal_m2m_id = c1.md_id
           where tmpc.corporate_id = c1.corporate_id
             and tmpc.product_id = c1.product_id
             and tmpc.quality_id = c1.quality_id
             and tmpc.mvp_id = c1.mvp_id
             and tmpc.mvpl_id = c1.mvpl_id
             and tmpc.valuation_region = c1.valuation_region
             and tmpc.valuation_point = c1.valuation_point
             and tmpc.valuation_incoterm_id = c1.valuation_incoterm_id
             and tmpc.valuation_city_id = c1.valuation_city_id
             and tmpc.valuation_basis = c1.valuation_basis
             and tmpc.reference_incoterm = c1.reference_incoterm
             and tmpc.refernce_location = c1.refernce_location
                --and tmpc.instrument_id = c1.instrument_id
             and tmpc.shipment_date = c1.shipment_date
             and tmpc.shipment_month || '-' || tmpc.shipment_year =
                 c1.shipment_month_year
             and decode(tmpc.section_name, 'OPEN', 'OPEN', 'STOCK') =
                 c1.rate_type
             and tmpc.product_type = 'BASEMETAL'
             and tmpc.payment_due_date = c1.payment_due_date;
        end if;
      end loop;
    
      -- Update valuation_location, reference_location and valuation_incoterm
    
      for cc in (select tmpc.internal_m2m_id,
                        tmpc.product_id,
                        cim_val_loc.city_name valuation_location,
                        cim_ref_loc.city_name reference_location,
                        itm.incoterm valuation_incoterm,
                        cim_val_loc_v.country_name valuation_location_country,
                        cim_ref_loc_r.country_name reference_location_country
                   from tmpc_temp_m2m_pre_check tmpc,
                        cim_citymaster          cim_val_loc,
                        cim_citymaster          cim_ref_loc,
                        cym_countrymaster       cim_val_loc_v,
                        cym_countrymaster       cim_ref_loc_r,
                        itm_incoterm_master     itm
                  where tmpc.valuation_city_id = cim_val_loc.city_id
                    and tmpc.refernce_location = cim_ref_loc.city_id
                    and cim_val_loc_v.country_id = cim_val_loc.country_id
                    and cim_ref_loc_r.country_id = cim_ref_loc.country_id
                    and tmpc.valuation_incoterm_id = itm.incoterm_id
                    and tmpc.corporate_id = pc_corporate_id
                    and tmpc.product_type = 'BASEMETAL'
                  group by cim_val_loc.city_name,
                           cim_ref_loc.city_name,
                           itm.incoterm,
                           cim_val_loc_v.country_name,
                           cim_ref_loc_r.country_name,
                           tmpc.product_id,
                           tmpc.internal_m2m_id)
      loop
        update md_m2m_daily md
           set md.valuation_location         = cc.valuation_location,
               md.reference_location         = cc.reference_location,
               md.valuation_incoterm         = cc.valuation_incoterm,
               md.valuation_location_country = cc.valuation_location_country,
               md.reference_location_country = cc.reference_location_country
         where md.md_id = cc.internal_m2m_id
           and md.product_id = cc.product_id
           and md.process_id = pc_process_id;
      end loop;
    
    end;
    sp_write_log(pc_corporate_id, pd_trade_date, 'sp_calc_m2m', 'Done');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process.sp_calc_m2m_cost',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           vc_err_msg,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_calc_m2m_conc_cost(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_calc_m2m_cost
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : populate secondary costs for contracts and gmrs
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pc_process_id                             : eod reference no
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    vn_serial_no       number;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_err_msg         varchar2(100);
  begin
    -- Generate unique m2m data with m2m id
    vc_err_msg := 'before generate Unique M2M data with M2M ID';
    begin
      vn_serial_no := 1;
      for cc in (select t.corporate_id,
                        t.conc_product_id,
                        t.conc_quality_id,
                        t.product_id,
                        t.quality_id,
                        t.element_id,
                        t.product_type,
                        t.mvp_id,
                        t.mvpl_id,
                        t.value_type,
                        t.valuation_region,
                        t.valuation_point,
                        t.valuation_incoterm_id,
                        t.valuation_city_id,
                        t.valuation_basis,
                        t.reference_incoterm,
                        t.refernce_location,
                        t.instrument_id,
                        t.valuation_dr_id,
                        t.price_basis as valuation_method,
                        t.m2m_price_unit_id,
                        pum.cur_id m2m_price_unit_cur_id,
                        cm.cur_code,
                        pum.weight_unit_id,
                        qum.qty_unit,
                        nvl(pum.weight, 1) as weight,
                        t.derivative_def_id,
                        t.valuation_month || '-' || t.valuation_year valuation_period,
                        t.valuation_date,
                        t.shipment_month || '-' || t.shipment_year shipment_month_year,
                        t.shipment_date,
                        decode(t.section_name, 'OPEN', 'OPEN', 'STOCK') rate_type,
                        pum.cur_id valuation_cur_id,
                        t.base_price_unit_id_in_ppu,
                        t.base_price_unit_id_in_pum,
                        t.is_tolling_contract,
                        t.is_tolling_extn,
                        t.payment_due_date
                   from tmpc_temp_m2m_pre_check  t,
                        pum_price_unit_master    pum,
                        cm_currency_master       cm,
                        qum_quantity_unit_master qum
                  where t.corporate_id = pc_corporate_id
                    and t.m2m_price_unit_id = pum.price_unit_id(+)
                    and pum.cur_id = cm.cur_id(+)
                    and pum.weight_unit_id = qum.qty_unit_id(+)
                    and t.product_type = 'CONCENTRATES'
                    and t.is_tolling_contract = 'N'
                    and t.is_tolling_extn = 'N'
                  group by t.corporate_id,
                           t.conc_product_id,
                           t.conc_quality_id,
                           t.product_id,
                           t.element_id,
                           t.product_type,
                           t.mvp_id,
                           t.mvpl_id,
                           t.value_type,
                           t.valuation_region,
                           t.valuation_point,
                           t.valuation_incoterm_id,
                           t.valuation_city_id,
                           t.valuation_basis,
                           t.reference_incoterm,
                           t.refernce_location,
                           t.instrument_id,
                           t.valuation_dr_id,
                           t.price_basis,
                           pum.cur_id,
                           t.m2m_price_unit_id,
                           t.m2m_price_unit_cur_id,
                           cm.cur_code,
                           pum.weight_unit_id,
                           qum.qty_unit,
                           nvl(pum.weight, 1),
                           t.quality_id,
                           t.derivative_def_id,
                           t.valuation_month || '-' || t.valuation_year,
                           t.valuation_date,
                           t.shipment_month || '-' || t.shipment_year,
                           t.shipment_date,
                           --this bit is important since for the same dr_id , open contract use forward rates and
                           --stock uses spot. tmef has been populated for both types
                           decode(t.section_name, 'OPEN', 'OPEN', 'STOCK'),
                           t.valuation_cur_id,
                           t.base_price_unit_id_in_ppu,
                           t.base_price_unit_id_in_pum,
                           t.is_tolling_contract,
                           t.is_tolling_extn,
                           t.payment_due_date)
      loop
        insert into md_m2m_daily
          (md_id,
           process_id,
           corporate_id,
           conc_product_id,
           conc_quality_id,
           product_id,
           quality_id,
           element_id,
           product_type,
           mvp_id,
           mvpl_id,
           valuation_region,
           valuation_point,
           valuation_incoterm_id,
           valuation_city_id,
           valuation_basis,
           reference_incoterm,
           refernce_location_id,
           instrument_id,
           valuation_dr_id,
           m2m_price_unit_id,
           m2m_price_unit_cur_id,
           m2m_price_unit_cur_code,
           m2m_price_unit_weight_unit_id,
           m2m_price_unit_weight_unit,
           m2m_price_unit_weight,
           valuation_month,
           valuation_future_contract,
           derivative_def_id,
           valuation_date,
           shipment_month_year,
           shipment_date,
           rate_type,
           valuation_cur_id,
           base_price_unit_id_in_ppu,
           base_price_unit_id_in_pum,
           valuation_method,
           is_tolling_contract,
           is_tolling_extn,
           payment_due_date)
        values
          ('MDC-' || vn_serial_no,
           pc_process_id,
           cc.corporate_id,
           cc.conc_product_id,
           cc.conc_quality_id,
           cc.product_id,
           cc.quality_id,
           cc.element_id,
           cc.product_type,
           cc.mvp_id,
           cc.mvpl_id,
           cc.valuation_region,
           cc.valuation_point,
           cc.valuation_incoterm_id,
           cc.valuation_city_id,
           cc.valuation_basis,
           cc.reference_incoterm,
           cc.refernce_location,
           cc.instrument_id,
           cc.valuation_dr_id,
           cc.m2m_price_unit_id,
           cc.m2m_price_unit_cur_id,
           cc.cur_code,
           cc.weight_unit_id,
           cc.qty_unit,
           cc.weight,
           cc.valuation_period,
           cc.valuation_dr_id,
           cc.derivative_def_id,
           cc.valuation_date,
           cc.shipment_month_year,
           cc.shipment_date,
           cc.rate_type,
           cc.valuation_cur_id,
           cc.base_price_unit_id_in_ppu,
           cc.base_price_unit_id_in_pum,
           cc.value_type,
           cc.is_tolling_contract,
           cc.is_tolling_extn,
           cc.payment_due_date);
        vn_serial_no := vn_serial_no + 1;
      end loop;
      -- 
      -- Updating TC and RC into MD table
      --
      vc_err_msg := 'Updating TC and RC into MD table';
      for cur_update in (select tmpc.conc_product_id,
                                tmpc.conc_quality_id,
                                tmpc.element_id,
                                tmpc.shipment_month || '-' ||
                                tmpc.shipment_year shipment_month_year,
                                tmpc.payment_due_date,
                                tmpc.mvp_id,
                                tmpc.m2m_treatment_charge,
                                tmpc.m2m_tc_fw_exch_rate,
                                tmpc.m2m_refining_charge,
                                tmpc.m2m_rc_fw_exch_rate,
                                tmpc.conc_base_price_unit_id_ppu
                           from tmpc_temp_m2m_pre_check tmpc
                          where tmpc.corporate_id = pc_corporate_id
                            and tmpc.product_type = 'CONCENTRATES'
                            and tmpc.is_tolling_contract = 'N'
                            and tmpc.is_tolling_extn = 'N'
                          group by tmpc.conc_product_id,
                                   tmpc.conc_quality_id,
                                   tmpc.element_id,
                                   tmpc.shipment_month || '-' ||
                                   tmpc.shipment_year,
                                   tmpc.payment_due_date,
                                   tmpc.mvp_id,
                                   tmpc.m2m_treatment_charge,
                                   tmpc.m2m_tc_fw_exch_rate,
                                   tmpc.m2m_refining_charge,
                                   tmpc.m2m_rc_fw_exch_rate,
                                   tmpc.conc_base_price_unit_id_ppu)
      loop
        update md_m2m_daily md
           set md.treatment_charge    = cur_update.m2m_treatment_charge,
               md.tc_price_unit_id    = cur_update.conc_base_price_unit_id_ppu,
               md.m2m_tc_fw_exch_rate = cur_update.m2m_tc_fw_exch_rate,
               md.refine_charge       = cur_update.m2m_refining_charge,
               md.rc_price_unit_id    = cur_update.conc_base_price_unit_id_ppu,
               md.m2m_rc_fw_exch_rate = cur_update.m2m_rc_fw_exch_rate
         where md.process_id = pc_process_id
           and md.product_type = 'CONCENTRATES'
           and md.is_tolling_contract = 'N'
           and md.is_tolling_extn = 'N'
           and md.conc_product_id = cur_update.conc_product_id
           and md.conc_quality_id = cur_update.conc_quality_id
           and md.shipment_month_year = cur_update.shipment_month_year
           and md.payment_due_date = cur_update.payment_due_date
           and md.mvp_id = cur_update.mvp_id
           and md.element_id = cur_update.element_id;
      end loop;
    
      vc_err_msg := 'line 7913';
      -- Updating exg_id,settlement_price,settlement price avl date of the md table
      update md_m2m_daily md
         set (md.valuation_exchange_id, md.m2m_settlement_price, md.m2m_sett_price_available_date) = --
              (select pdd.exchange_id,
                      edq.price,
                      edq.dq_trade_date
                 from eodeom_derivative_quote_detail edq,
                      pum_price_unit_master          pum,
                      dim_der_instrument_master      dim,
                      div_der_instrument_valuation   div,
                      pdd_product_derivative_def     pdd,
                      cdim_corporate_dim             cdim
                where edq.dr_id = md.valuation_dr_id
                  and edq.corporate_id = pc_corporate_id
                  and dim.instrument_id = md.instrument_id
                  and edq.instrument_id = div.instrument_id
                  and dim.product_derivative_id = pdd.derivative_def_id
                  and edq.price_source_id = div.price_source_id
                  and div.price_unit_id = edq.price_unit_id
                  and div.is_deleted = 'N'
                  and edq.available_price_id = div.available_price_id
                  and edq.price_unit_id = pum.price_unit_id
                  and edq.price is not null
                  and edq.process_id = pc_process_id
                  and edq.dq_trade_date = cdim.valid_quote_date
                  and cdim.corporate_id = pc_corporate_id
                  and cdim.instrument_id = edq.instrument_id)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'N'
         and md.is_tolling_extn = 'N'
         and md.valuation_method <> 'FIXED'
         and md.process_id = pc_process_id;
    
      vc_err_msg := 'line 2450';
      --
      -- Update the M2M Location Incoterm Deviation    
      --
      for cur_update in (
                         
                         select tmpc.mvpl_id,
                                 tmpc.mvp_id,
                                 tmpc.conc_product_id,
                                 tmpc.valuation_incoterm_id,
                                 tmpc.element_id,
                                 tmpc.payment_due_date,
                                 tmpc.m2m_loc_incoterm_deviation,
                                 tmpc.m2m_ld_fw_exch_rate
                           from tmpc_temp_m2m_pre_check tmpc
                          where tmpc.product_type = 'CONCENTRATES'
                            and tmpc.is_tolling_contract = 'N'
                            and tmpc.is_tolling_extn = 'N'
                            and tmpc.corporate_id = pc_corporate_id)
      loop
      
        update md_m2m_daily md
           set md.m2m_loc_incoterm_deviation = cur_update.m2m_loc_incoterm_deviation,
               md.m2m_ld_fw_exch_rate        = cur_update.m2m_ld_fw_exch_rate
        
         where md.mvpl_id = cur_update.mvpl_id
           and md.mvp_id = cur_update.mvp_id
           and md.conc_product_id = cur_update.conc_product_id
           and md.valuation_incoterm_id = cur_update.valuation_incoterm_id
           and md.element_id = cur_update.element_id
           and md.product_type = 'CONCENTRATES'
           and md.is_tolling_contract = 'N'
           and md.is_tolling_extn = 'N'
           and md.payment_due_date = cur_update.payment_due_date
           and md.process_id = pc_process_id;
      
      end loop;
    
      vc_err_msg := 'line 7972';
      update md_m2m_daily md
         set md.net_m2m_price = nvl(md.m2m_settlement_price, 0)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'N'
         and md.is_tolling_extn = 'N'
         and md.process_id = pc_process_id;
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 5');
      vc_err_msg := 'line 7984';
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 6');
      -- Update derivative def id/name
      update md_m2m_daily md
         set (derivative_def_id, derivative_def_name) = --
              (select pdd.derivative_def_id,
                      pdd.derivative_def_name
                 from dim_der_instrument_master  dim,
                      pdd_product_derivative_def pdd,
                      irm_instrument_type_master irm
                where dim.instrument_id = md.instrument_id
                  and md.product_type = 'CONCENTRATES'
                  and dim.product_derivative_id = pdd.derivative_def_id
                  and dim.instrument_type_id = irm.instrument_type_id
                  and irm.instrument_type = 'Future'
                  and rownum <= 1)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'N'
         and md.is_tolling_extn = 'N'
         and md.process_id = pc_process_id;
      --get the m2m_price_unit_cur_id
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 7');
      vc_err_msg := 'line 8013';
      update md_m2m_daily md
         set (md.m2m_main_cur_id, md.m2m_main_cur_code, md.m2m_main_cur_decimals, md.main_currency_factor) = --
              (select (case
                        when cm.is_sub_cur = 'Y' then
                         scd.cur_id
                        else
                         cm.cur_id
                      end) base_currency_id,
                      (case
                        when cm.is_sub_cur = 'Y' then
                         cm_1.cur_code
                        else
                         cm.cur_code
                      end) cur_code,
                      (case
                        when cm.is_sub_cur = 'Y' then
                         cm_1.decimals
                        else
                         cm.decimals
                      end),
                      (case
                        when cm.is_sub_cur = 'Y' then
                         nvl(scd.factor, 1)
                        else
                         1
                      end) factor
                 from cm_currency_master      cm,
                      scd_sub_currency_detail scd,
                      cm_currency_master      cm_1
                where cm.cur_id = md.m2m_price_unit_cur_id
                  and cm.cur_id = scd.sub_cur_id(+)
                  and scd.cur_id = cm_1.cur_id(+))
       where md.process_id = pc_process_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'N'
         and md.is_tolling_extn = 'N';
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 8');
      -- now update the m2m id in the tmpc_temp_m2m_pre_check
      -- table per contract item level,gmr level,grd level --
      vc_err_msg := 'line 8056';
      for c1 in (select md.md_id,
                        md.conc_product_id,
                        md.conc_quality_id,
                        md.corporate_id,
                        md.product_id,
                        md.element_id,
                        md.crop_year_id,
                        md.quality_id,
                        md.origin_id,
                        md.origin_group_id,
                        md.growth_code_id,
                        md.valuation_method,
                        md.mvp_id,
                        md.mvpl_id,
                        md.valuation_region,
                        md.valuation_point,
                        md.valuation_incoterm_id,
                        md.valuation_city_id,
                        md.valuation_basis,
                        md.reference_incoterm,
                        md.refernce_location_id refernce_location,
                        md.instrument_id,
                        md.valuation_dr_id,
                        md.valuation_month,
                        md.valuation_date,
                        md.shipment_month_year,
                        md.shipment_date,
                        md.rate_type,
                        md.payment_due_date
                   from md_m2m_daily md
                  where md.corporate_id = pc_corporate_id
                    and md.product_type = 'CONCENTRATES'
                    and md.is_tolling_contract = 'N'
                    and md.is_tolling_extn = 'N'
                    and md.process_id = pc_process_id)
      loop
        if c1.valuation_method <> 'FIXED' then
          update tmpc_temp_m2m_pre_check tmpc
             set tmpc.internal_m2m_id = c1.md_id
           where tmpc.corporate_id = c1.corporate_id
             and tmpc.product_id = c1.product_id
             and tmpc.conc_product_id = c1.conc_product_id
             and tmpc.conc_quality_id = c1.conc_quality_id
             and tmpc.element_id = c1.element_id
             and tmpc.quality_id = c1.quality_id
             and tmpc.mvp_id = c1.mvp_id
             and tmpc.mvpl_id = c1.mvpl_id
             and tmpc.valuation_region = c1.valuation_region
             and tmpc.valuation_point = c1.valuation_point
             and tmpc.valuation_incoterm_id = c1.valuation_incoterm_id
             and tmpc.valuation_city_id = c1.valuation_city_id
             and tmpc.valuation_basis = c1.valuation_basis
             and tmpc.valuation_dr_id = c1.valuation_dr_id
             and tmpc.reference_incoterm = c1.reference_incoterm
             and tmpc.refernce_location = c1.refernce_location
             and tmpc.instrument_id = c1.instrument_id
             and tmpc.shipment_date = c1.shipment_date
             and tmpc.shipment_month || '-' || tmpc.shipment_year =
                 c1.shipment_month_year
             and decode(tmpc.section_name, 'OPEN', 'OPEN', 'STOCK') =
                 c1.rate_type
             and tmpc.product_type = 'CONCENTRATES'
             and tmpc.is_tolling_contract = 'N'
             and tmpc.is_tolling_extn = 'N'
             and tmpc.payment_due_date = c1.payment_due_date;
        else
          update tmpc_temp_m2m_pre_check tmpc
             set tmpc.internal_m2m_id = c1.md_id
           where tmpc.corporate_id = c1.corporate_id
             and tmpc.conc_product_id = c1.conc_product_id
             and tmpc.conc_quality_id = c1.conc_quality_id
             and tmpc.product_id = c1.product_id
             and tmpc.quality_id = c1.quality_id
             and tmpc.element_id = c1.element_id
             and tmpc.mvp_id = c1.mvp_id
             and tmpc.mvpl_id = c1.mvpl_id
             and tmpc.valuation_region = c1.valuation_region
             and tmpc.valuation_point = c1.valuation_point
             and tmpc.valuation_incoterm_id = c1.valuation_incoterm_id
             and tmpc.valuation_city_id = c1.valuation_city_id
             and tmpc.valuation_basis = c1.valuation_basis
             and tmpc.reference_incoterm = c1.reference_incoterm
             and tmpc.refernce_location = c1.refernce_location
             and tmpc.shipment_date = c1.shipment_date
             and tmpc.shipment_month || '-' || tmpc.shipment_year =
                 c1.shipment_month_year
             and decode(tmpc.section_name, 'OPEN', 'OPEN', 'STOCK') =
                 c1.rate_type
             and tmpc.product_type = 'CONCENTRATES'
             and tmpc.is_tolling_contract = 'N'
             and tmpc.is_tolling_extn = 'N'
             and tmpc.payment_due_date = c1.payment_due_date;
        end if;
      end loop;
    
      --update valuation_location, reference_location and valuation_incoterm
    
      for cc in (select tmpc.internal_m2m_id,
                        tmpc.product_id,
                        cim_val_loc.city_name valuation_location,
                        cim_ref_loc.city_name reference_location,
                        itm.incoterm valuation_incoterm,
                        cim_val_loc_v.country_name valuation_location_country,
                        cim_ref_loc_r.country_name reference_location_country
                   from tmpc_temp_m2m_pre_check tmpc,
                        cim_citymaster          cim_val_loc,
                        cim_citymaster          cim_ref_loc,
                        cym_countrymaster       cim_val_loc_v,
                        cym_countrymaster       cim_ref_loc_r,
                        itm_incoterm_master     itm
                  where tmpc.valuation_city_id = cim_val_loc.city_id
                    and tmpc.refernce_location = cim_ref_loc.city_id
                    and cim_val_loc_v.country_id = cim_val_loc.country_id
                    and cim_ref_loc_r.country_id = cim_ref_loc.country_id
                    and tmpc.valuation_incoterm_id = itm.incoterm_id
                    and tmpc.corporate_id = pc_corporate_id
                    and tmpc.product_type = 'CONCENTRATES'
                    and tmpc.is_tolling_contract = 'N'
                    and tmpc.is_tolling_extn = 'N'
                  group by cim_val_loc.city_name,
                           cim_ref_loc.city_name,
                           itm.incoterm,
                           cim_val_loc_v.country_name,
                           cim_ref_loc_r.country_name,
                           tmpc.product_id,
                           tmpc.internal_m2m_id)
      loop
      
        update md_m2m_daily md
           set valuation_location         = cc.valuation_location,
               reference_location         = cc.reference_location,
               valuation_incoterm         = cc.valuation_incoterm,
               valuation_location_country = cc.valuation_location_country,
               reference_location_country = cc.reference_location_country
         where md.md_id = cc.internal_m2m_id
           and md.product_id = cc.product_id
           and md.process_id = pc_process_id;
        commit;
      end loop;
    
    end;
    sp_write_log(pc_corporate_id, pd_trade_date, 'sp_calc_m2m', 'Done');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process.sp_calc_m2m_conc_cost',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           vc_err_msg,
                                                           '',
                                                           pkg_phy_physical_process.gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_calc_m2m_tolling_extn_cost(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_calc_m2m_cost
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : populate secondary costs for contracts and gmrs
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pc_process_id                             : eod reference no
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    vn_serial_no            number;
    vobj_error_log          tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count      number := 1;
    vc_err_msg              varchar2(100);
    pn_charge_amt           number;
    pc_charge_price_unit_id varchar2(25);
  begin
    --generate unique m2m data with m2m id
    vc_err_msg := 'before generate Unique M2M data with M2M ID';
    begin
      vn_serial_no := 1;
      for cc in (select t.corporate_id,
                        t.conc_product_id,
                        t.conc_quality_id,
                        t.product_id,
                        t.quality_id,
                        t.element_id,
                        t.product_type,
                        t.mvp_id,
                        t.mvpl_id,
                        t.value_type,
                        t.valuation_region,
                        t.valuation_point,
                        t.valuation_incoterm_id,
                        t.valuation_city_id,
                        t.valuation_basis,
                        t.reference_incoterm,
                        t.refernce_location,
                        t.instrument_id,
                        t.valuation_dr_id,
                        t.price_basis as valuation_method,
                        t.m2m_price_unit_id,
                        pum.cur_id m2m_price_unit_cur_id,
                        cm.cur_code,
                        pum.weight_unit_id,
                        qum.qty_unit,
                        nvl(pum.weight, 1) as weight,
                        t.derivative_def_id,
                        t.valuation_month || '-' || t.valuation_year valuation_period,
                        t.valuation_date,
                        t.shipment_month || '-' || t.shipment_year shipment_month_year,
                        t.shipment_date,
                        decode(t.section_name, 'OPEN', 'OPEN', 'STOCK') rate_type,
                        pum.cur_id valuation_cur_id,
                        t.base_price_unit_id_in_ppu,
                        t.base_price_unit_id_in_pum,
                        t.is_tolling_contract,
                        t.is_tolling_extn
                   from tmpc_temp_m2m_pre_check  t,
                        pum_price_unit_master    pum,
                        cm_currency_master       cm,
                        qum_quantity_unit_master qum
                  where t.corporate_id = pc_corporate_id
                    and t.m2m_price_unit_id = pum.price_unit_id(+)
                    and pum.cur_id = cm.cur_id(+)
                    and pum.weight_unit_id = qum.qty_unit_id(+)
                    and t.product_type = 'CONCENTRATES'
                    and t.is_tolling_contract = 'Y'
                    and t.is_tolling_extn = 'Y'
                  group by t.corporate_id,
                           t.conc_product_id,
                           t.conc_quality_id,
                           t.product_id,
                           t.element_id,
                           t.product_type,
                           t.mvp_id,
                           t.mvpl_id,
                           t.value_type,
                           t.valuation_region,
                           t.valuation_point,
                           t.valuation_incoterm_id,
                           t.valuation_city_id,
                           t.valuation_basis,
                           t.reference_incoterm,
                           t.refernce_location,
                           t.instrument_id,
                           t.valuation_dr_id,
                           t.price_basis,
                           pum.cur_id,
                           t.m2m_price_unit_id,
                           t.m2m_price_unit_cur_id,
                           cm.cur_code,
                           pum.weight_unit_id,
                           qum.qty_unit,
                           nvl(pum.weight, 1),
                           t.quality_id,
                           t.derivative_def_id,
                           t.valuation_month || '-' || t.valuation_year,
                           t.valuation_date,
                           t.shipment_month || '-' || t.shipment_year,
                           t.shipment_date,
                           --this bit is important since for the same dr_id , open contract use forward rates and
                           --stock uses spot. tmef has been populated for both types
                           decode(t.section_name, 'OPEN', 'OPEN', 'STOCK'),
                           t.valuation_cur_id,
                           t.base_price_unit_id_in_ppu,
                           t.base_price_unit_id_in_pum,
                           t.is_tolling_contract,
                           t.is_tolling_extn)
      loop
        insert into md_m2m_daily
          (md_id,
           process_id,
           corporate_id,
           conc_product_id,
           conc_quality_id,
           product_id,
           quality_id,
           element_id,
           product_type,
           mvp_id,
           mvpl_id,
           valuation_region,
           valuation_point,
           valuation_incoterm_id,
           valuation_city_id,
           valuation_basis,
           reference_incoterm,
           refernce_location_id,
           instrument_id,
           valuation_dr_id,
           m2m_price_unit_id,
           m2m_price_unit_cur_id,
           m2m_price_unit_cur_code,
           m2m_price_unit_weight_unit_id,
           m2m_price_unit_weight_unit,
           m2m_price_unit_weight,
           valuation_month,
           valuation_future_contract,
           derivative_def_id,
           valuation_date,
           shipment_month_year,
           shipment_date,
           rate_type,
           valuation_cur_id,
           base_price_unit_id_in_ppu,
           base_price_unit_id_in_pum,
           valuation_method,
           is_tolling_contract,
           is_tolling_extn)
        values
          ('MDE-' || vn_serial_no,
           pc_process_id,
           cc.corporate_id,
           cc.conc_product_id,
           cc.conc_quality_id,
           cc.product_id,
           cc.quality_id,
           cc.element_id,
           cc.product_type,
           cc.mvp_id,
           cc.mvpl_id,
           cc.valuation_region,
           cc.valuation_point,
           cc.valuation_incoterm_id,
           cc.valuation_city_id,
           cc.valuation_basis,
           cc.reference_incoterm,
           cc.refernce_location,
           cc.instrument_id,
           cc.valuation_dr_id,
           cc.m2m_price_unit_id,
           cc.m2m_price_unit_cur_id,
           cc.cur_code,
           cc.weight_unit_id,
           cc.qty_unit,
           cc.weight,
           cc.valuation_period,
           cc.valuation_dr_id,
           cc.derivative_def_id,
           cc.valuation_date,
           cc.shipment_month_year,
           cc.shipment_date,
           cc.rate_type,
           cc.valuation_cur_id,
           cc.base_price_unit_id_in_ppu,
           cc.base_price_unit_id_in_pum,
           cc.value_type,
           cc.is_tolling_contract,
           cc.is_tolling_extn);
        vn_serial_no := vn_serial_no + 1;
      end loop;
      --Checking for the treatment  is there or not
      --For this  we are calling the sp_get_treatment_charge
      for cc_tmpc in (select tmpc.corporate_id,
                             tmpc.conc_product_id,
                             tmpc.conc_quality_id,
                             tmpc.product_id,
                             tmpc.quality_id,
                             tmpc.element_id,
                             tmpc.base_price_unit_id_in_ppu,
                             tmpc.shipment_month,
                             tmpc.shipment_year,
                             tmpc.mvp_id valuation_point_id,
                             ppu.decimals
                        from tmpc_temp_m2m_pre_check tmpc,
                             pdm_productmaster       pdm,
                             qat_quality_attributes  qat,
                             ppu_product_price_units ppu
                       where tmpc.product_type = 'CONCENTRATES'
                         and tmpc.is_tolling_contract = 'Y'
                         and tmpc.is_tolling_extn = 'Y'
                         and tmpc.corporate_id = pc_corporate_id
                         and tmpc.conc_product_id = pdm.product_id
                         and tmpc.conc_quality_id = qat.quality_id
                         and tmpc.base_price_unit_id_in_ppu =
                             ppu.internal_price_unit_id
                       group by tmpc.corporate_id,
                                tmpc.conc_product_id,
                                tmpc.conc_quality_id,
                                tmpc.product_id,
                                tmpc.quality_id,
                                tmpc.base_price_unit_id_in_ppu,
                                tmpc.element_id,
                                tmpc.mvp_id,
                                tmpc.shipment_month,
                                tmpc.shipment_year,
                                ppu.decimals)
      loop
        -- updating treatment charge  to the md table
        pkg_phy_pre_check_process.sp_calc_m2m_tc_pc_rc_charge(cc_tmpc.corporate_id,
                                                              pd_trade_date,
                                                              cc_tmpc.conc_product_id,
                                                              cc_tmpc.conc_quality_id,
                                                              cc_tmpc.valuation_point_id, --valuation_id
                                                              'Treatment Charges', --charge_type
                                                              cc_tmpc.element_id,
                                                              cc_tmpc.shipment_month,
                                                              cc_tmpc.shipment_year,
                                                              cc_tmpc.base_price_unit_id_in_ppu,
                                                              pn_charge_amt,
                                                              pc_charge_price_unit_id);
      
        update md_m2m_daily md
           set md.treatment_charge = pn_charge_amt,
               md.tc_price_unit_id = pc_charge_price_unit_id
         where md.corporate_id = pc_corporate_id
           and md.product_type = 'CONCENTRATES'
           and md.is_tolling_contract = 'Y'
           and md.is_tolling_extn = 'Y'
           and md.conc_product_id = cc_tmpc.conc_product_id
           and md.conc_quality_id = cc_tmpc.conc_quality_id
           and md.product_id = cc_tmpc.product_id
           and md.quality_id = cc_tmpc.quality_id
           and md.shipment_month_year =
               cc_tmpc.shipment_month || '-' || cc_tmpc.shipment_year
           and md.mvp_id = cc_tmpc.valuation_point_id
           and md.process_id = pc_process_id
           and md.element_id = cc_tmpc.element_id
           and md.process_id = pc_process_id;
        -- end if;
        -- updating refine  charge  to the md table
        pkg_phy_pre_check_process.sp_calc_m2m_tc_pc_rc_charge(cc_tmpc.corporate_id,
                                                              pd_trade_date,
                                                              cc_tmpc.conc_product_id,
                                                              cc_tmpc.conc_quality_id,
                                                              cc_tmpc.valuation_point_id,
                                                              'Refining Charges',
                                                              cc_tmpc.element_id,
                                                              cc_tmpc.shipment_month,
                                                              cc_tmpc.shipment_year,
                                                              cc_tmpc.base_price_unit_id_in_ppu,
                                                              pn_charge_amt,
                                                              pc_charge_price_unit_id);
      
        update md_m2m_daily md
           set md.refine_charge    = pn_charge_amt,
               md.rc_price_unit_id = pc_charge_price_unit_id
         where md.corporate_id = pc_corporate_id
           and md.product_type = 'CONCENTRATES'
           and md.is_tolling_contract = 'Y'
           and md.is_tolling_extn = 'Y'
           and md.conc_product_id = cc_tmpc.conc_product_id
           and md.conc_quality_id = cc_tmpc.conc_quality_id
           and md.product_id = cc_tmpc.product_id
           and md.quality_id = cc_tmpc.quality_id
           and md.shipment_month_year =
               cc_tmpc.shipment_month || '-' || cc_tmpc.shipment_year
           and md.mvp_id = cc_tmpc.valuation_point_id
           and md.process_id = pc_process_id
           and md.element_id = cc_tmpc.element_id
           and md.process_id = pc_process_id;
        -- end if;
      end loop;
      -- updating penalty  charge  to the md table 
    
      /** End of updatin the Treatment Charge,Refine Charge and  Penalty Charge of the MD table ***/
      vc_err_msg := 'line 2819';
      --Updating exg_id,settlement_price,settlement price avl date of the md table
      update md_m2m_daily md
         set (md.valuation_exchange_id, md.m2m_settlement_price, md.m2m_sett_price_available_date) = --
              (select pdd.exchange_id,
                      edq.price,
                      edq.dq_trade_date
                 from eodeom_derivative_quote_detail edq,
                      pum_price_unit_master          pum,
                      dim_der_instrument_master      dim,
                      div_der_instrument_valuation   div,
                      pdd_product_derivative_def     pdd,
                      cdim_corporate_dim             cdim
                where edq.dr_id = md.valuation_dr_id
                  and edq.corporate_id = pc_corporate_id
                  and dim.instrument_id = md.instrument_id
                  and edq.instrument_id = div.instrument_id
                  and dim.product_derivative_id = pdd.derivative_def_id
                  and edq.price_source_id = div.price_source_id
                  and div.price_unit_id = edq.price_unit_id
                  and div.is_deleted = 'N'
                  and edq.available_price_id = div.available_price_id
                  and edq.price_unit_id = pum.price_unit_id
                  and edq.price is not null
                  and edq.process_id = pc_process_id
                  and edq.dq_trade_date = cdim.valid_quote_date
                  and cdim.corporate_id = pc_corporate_id
                  and cdim.instrument_id = edq.instrument_id)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'Y'
         and md.is_tolling_extn = 'Y'
         and md.valuation_method <> 'FIXED'
         and md.process_id = pc_process_id;
    
      vc_err_msg := 'line 2887';
      --update the m2m location -incoterm deviation for the within region of growth    
      update md_m2m_daily md
         set md.m2m_loc_incoterm_deviation = round(nvl((select sum(ldc.cost_value /
                                                                  nvl(vpp.weight,
                                                                      1) *
                                                                  pkg_general.f_get_converted_currency_amt(md.corporate_id,
                                                                                                           vpp.cur_id,
                                                                                                           md_base.cur_id,
                                                                                                           pd_trade_date,
                                                                                                           1) *
                                                                  (pkg_general.f_get_converted_quantity(md.product_id,
                                                                                                        vpp.weight_unit_id,
                                                                                                        md_base.weight_unit_id,
                                                                                                        1)))
                                                       
                                                         from lds_location_diff_setup ldh,
                                                              ldc_location_diff_cost  ldc,
                                                              v_ppu_pum               vpp,
                                                              pum_price_unit_master   md_base
                                                        where ldh.loc_diff_id =
                                                              ldc.loc_diff_id
                                                          and ldh.valuation_city_id =
                                                              md.valuation_city_id
                                                          and md.mvp_id =
                                                              ldh.valuation_point_id
                                                          and md.conc_product_id = --updated
                                                              ldh.product_id
                                                          and md_base.price_unit_id =
                                                              md.base_price_unit_id_in_pum
                                                          and md.product_type =
                                                              'CONCENTRATES'
                                                          and ldh.inco_term_id =
                                                              md.valuation_incoterm_id
                                                          and ldh.corporate_id =
                                                              pc_corporate_id
                                                          and ldc.cost_price_unit_id =
                                                              vpp.product_price_unit_id
                                                          and ldh.as_on_date =
                                                              (select max(ldh1.as_on_date)
                                                                 from lds_location_diff_setup ldh1
                                                                where ldh1.as_on_date <=
                                                                      pd_trade_date
                                                                  and ldh1.valuation_point_id =
                                                                      ldh.valuation_point_id
                                                                  and ldh1.inco_term_id =
                                                                      ldh.inco_term_id
                                                                  and ldh1.valuation_city_id =
                                                                      ldh.valuation_city_id
                                                                  and ldh1.product_id =
                                                                      ldh.product_id)),
                                                       0),
                                                   4)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'Y'
         and md.is_tolling_extn = 'Y'
         and md.process_id = pc_process_id;
      vc_err_msg := 'line 3049';
      update md_m2m_daily md
         set md.net_m2m_price = nvl(md.m2m_settlement_price, 0)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.process_id = pc_process_id
         and md.is_tolling_contract = 'Y'
         and md.is_tolling_extn = 'Y';
      --   dbms_output.put_line('after update -5 ');
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 5');
      vc_err_msg := 'line 3068';
    
      vc_err_msg := 'line 3090';
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 6');
      -- update derivative def id/name
      update md_m2m_daily md
         set (derivative_def_id, derivative_def_name) = (select pdd.derivative_def_id,
                                                                pdd.derivative_def_name
                                                           from dim_der_instrument_master  dim,
                                                                pdd_product_derivative_def pdd,
                                                                irm_instrument_type_master irm
                                                          where dim.instrument_id =
                                                                md.instrument_id
                                                            and md.product_type =
                                                                'CONCENTRATES'
                                                            and dim.product_derivative_id =
                                                                pdd.derivative_def_id
                                                            and dim.instrument_type_id =
                                                                irm.instrument_type_id
                                                            and irm.instrument_type =
                                                                'Future'
                                                            and rownum <= 1)
       where md.corporate_id = pc_corporate_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'Y'
         and md.is_tolling_extn = 'Y'
         and md.process_id = pc_process_id;
    
      --get the m2m_price_unit_cur_id
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 7');
      vc_err_msg := 'line 3121';
      update md_m2m_daily md
         set (md.m2m_main_cur_id, md.m2m_main_cur_code, md.m2m_main_cur_decimals, md.main_currency_factor) = --
              (select (case
                        when cm.is_sub_cur = 'Y' then
                         scd.cur_id
                        else
                         cm.cur_id
                      end) base_currency_id,
                      (case
                        when cm.is_sub_cur = 'Y' then
                         cm_1.cur_code
                        else
                         cm.cur_code
                      end) cur_code,
                      (case
                        when cm.is_sub_cur = 'Y' then
                         cm_1.decimals
                        else
                         cm.decimals
                      end),
                      (case
                        when cm.is_sub_cur = 'Y' then
                         nvl(scd.factor, 1)
                        else
                         1
                      end) factor
                 from cm_currency_master      cm,
                      scd_sub_currency_detail scd,
                      cm_currency_master      cm_1
                where cm.cur_id = md.m2m_price_unit_cur_id
                  and cm.cur_id = scd.sub_cur_id(+)
                  and scd.cur_id = cm_1.cur_id(+))
       where md.process_id = pc_process_id
         and md.product_type = 'CONCENTRATES'
         and md.is_tolling_contract = 'Y'
         and md.is_tolling_extn = 'Y';
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_calc_m2m',
                   'before 8');
      -- now update the m2m id in the tmpc_temp_m2m_pre_check
      -- table per contract item level,gmr level,grd level --
      vc_err_msg := 'line 3163';
      for c1 in (select md.md_id,
                        md.conc_product_id,
                        md.conc_quality_id,
                        md.corporate_id,
                        md.product_id,
                        md.element_id,
                        md.crop_year_id,
                        md.quality_id,
                        md.origin_id,
                        md.origin_group_id,
                        md.growth_code_id,
                        md.valuation_method,
                        md.mvp_id,
                        md.mvpl_id,
                        md.valuation_region,
                        md.valuation_point,
                        md.valuation_incoterm_id,
                        md.valuation_city_id,
                        md.valuation_basis,
                        md.reference_incoterm,
                        md.refernce_location_id refernce_location,
                        md.instrument_id,
                        md.valuation_dr_id,
                        md.valuation_month,
                        md.valuation_date,
                        md.shipment_month_year,
                        md.shipment_date,
                        md.rate_type
                   from md_m2m_daily md
                  where md.corporate_id = pc_corporate_id
                    and md.product_type = 'CONCENTRATES'
                    and md.is_tolling_contract = 'Y'
                    and md.is_tolling_extn = 'Y'
                    and md.process_id = pc_process_id)
      loop
        if c1.valuation_method <> 'FIXED' then
          update tmpc_temp_m2m_pre_check tmpc
             set tmpc.internal_m2m_id = c1.md_id
           where tmpc.corporate_id = c1.corporate_id
             and tmpc.product_id = c1.product_id
             and tmpc.conc_product_id = c1.conc_product_id
             and tmpc.conc_quality_id = c1.conc_quality_id
             and tmpc.element_id = c1.element_id
             and tmpc.quality_id = c1.quality_id
             and tmpc.mvp_id = c1.mvp_id
             and tmpc.mvpl_id = c1.mvpl_id
             and tmpc.valuation_region = c1.valuation_region
             and tmpc.valuation_point = c1.valuation_point
             and tmpc.valuation_incoterm_id = c1.valuation_incoterm_id
             and tmpc.valuation_city_id = c1.valuation_city_id
             and tmpc.valuation_basis = c1.valuation_basis
             and tmpc.valuation_dr_id = c1.valuation_dr_id
             and tmpc.reference_incoterm = c1.reference_incoterm
             and tmpc.refernce_location = c1.refernce_location
             and tmpc.instrument_id = c1.instrument_id
             and tmpc.shipment_date = c1.shipment_date
             and tmpc.shipment_month || '-' || tmpc.shipment_year =
                 c1.shipment_month_year
             and decode(tmpc.section_name, 'OPEN', 'OPEN', 'STOCK') =
                 c1.rate_type
             and tmpc.product_type = 'CONCENTRATES'
             and tmpc.is_tolling_contract = 'Y'
             and tmpc.is_tolling_extn = 'Y';
        else
          update tmpc_temp_m2m_pre_check tmpc
             set tmpc.internal_m2m_id = c1.md_id
           where tmpc.corporate_id = c1.corporate_id
             and tmpc.conc_product_id = c1.conc_product_id
             and tmpc.conc_quality_id = c1.conc_quality_id
             and tmpc.product_id = c1.product_id
             and tmpc.quality_id = c1.quality_id
             and tmpc.element_id = c1.element_id
             and tmpc.mvp_id = c1.mvp_id
             and tmpc.mvpl_id = c1.mvpl_id
             and tmpc.valuation_region = c1.valuation_region
             and tmpc.valuation_point = c1.valuation_point
             and tmpc.valuation_incoterm_id = c1.valuation_incoterm_id
             and tmpc.valuation_city_id = c1.valuation_city_id
             and tmpc.valuation_basis = c1.valuation_basis
             and tmpc.reference_incoterm = c1.reference_incoterm
             and tmpc.refernce_location = c1.refernce_location
             and tmpc.shipment_date = c1.shipment_date
             and tmpc.shipment_month || '-' || tmpc.shipment_year =
                 c1.shipment_month_year
             and decode(tmpc.section_name, 'OPEN', 'OPEN', 'STOCK') =
                 c1.rate_type
             and tmpc.product_type = 'CONCENTRATES'
             and tmpc.is_tolling_contract = 'Y'
             and tmpc.is_tolling_extn = 'Y';
        end if;
      end loop;
    
      --update valuation_location, reference_location and valuation_incoterm
    
      for cc in (select tmpc.internal_m2m_id,
                        tmpc.product_id,
                        cim_val_loc.city_name valuation_location,
                        cim_ref_loc.city_name reference_location,
                        itm.incoterm valuation_incoterm,
                        cim_val_loc_v.country_name valuation_location_country,
                        cim_ref_loc_r.country_name reference_location_country
                   from tmpc_temp_m2m_pre_check tmpc,
                        cim_citymaster          cim_val_loc,
                        cim_citymaster          cim_ref_loc,
                        cym_countrymaster       cim_val_loc_v,
                        cym_countrymaster       cim_ref_loc_r,
                        itm_incoterm_master     itm
                  where tmpc.valuation_city_id = cim_val_loc.city_id
                    and tmpc.refernce_location = cim_ref_loc.city_id
                    and cim_val_loc_v.country_id = cim_val_loc.country_id
                    and cim_ref_loc_r.country_id = cim_ref_loc.country_id
                    and tmpc.valuation_incoterm_id = itm.incoterm_id
                    and tmpc.corporate_id = pc_corporate_id
                    and tmpc.product_type = 'CONCENTRATES'
                    and tmpc.is_tolling_contract = 'Y'
                    and tmpc.is_tolling_extn = 'Y'
                  group by cim_val_loc.city_name,
                           cim_ref_loc.city_name,
                           itm.incoterm,
                           cim_val_loc_v.country_name,
                           cim_ref_loc_r.country_name,
                           tmpc.product_id,
                           tmpc.internal_m2m_id)
      loop
      
        update md_m2m_daily md
           set valuation_location         = cc.valuation_location,
               reference_location         = cc.reference_location,
               valuation_incoterm         = cc.valuation_incoterm,
               valuation_location_country = cc.valuation_location_country,
               reference_location_country = cc.reference_location_country
         where md.md_id = cc.internal_m2m_id
           and md.product_id = cc.product_id
           and md.process_id = pc_process_id;
        commit;
      end loop;
    
    end;
    sp_write_log(pc_corporate_id, pd_trade_date, 'sp_calc_m2m', 'Done');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process.sp_calc_m2m_conc_cost',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           vc_err_msg,
                                                           '',
                                                           pkg_phy_physical_process.gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2)
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_process_rollback
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : rollback eod
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
   is
  
    vc_dbd_id          varchar2(15);
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 0;
  begin
  
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_dbd_id,
                          vn_logno,
                          'Rollback Start');
    vc_dbd_id := pc_dbd_id;
    delete from agdul_alloc_group_detail_ul where dbd_id = vc_dbd_id;
    delete from aghul_alloc_group_header_ul where dbd_id = vc_dbd_id;
    delete from cigcul_contrct_itm_gmr_cost_ul where dbd_id = vc_dbd_id;
    delete from csul_cost_store_ul where dbd_id = vc_dbd_id;
    delete from dgrdul_delivered_grd_ul where dbd_id = vc_dbd_id;
    delete from gmrul_gmr_ul where dbd_id = vc_dbd_id;
    delete from mogrdul_moved_out_grd_ul where dbd_id = vc_dbd_id;
    delete from pcadul_pc_agency_detail_ul where dbd_id = vc_dbd_id;
    delete from pcbpdul_pc_base_price_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcbphul_pc_base_prc_header_ul where dbd_id = vc_dbd_id;
    delete from pcdbul_pc_delivery_basis_ul where dbd_id = vc_dbd_id;
    delete from pcddul_document_details_ul where dbd_id = vc_dbd_id;
    delete from pcdiobul_di_optional_basis_ul where dbd_id = vc_dbd_id;
    delete from pcdipeul_di_pricing_elemnt_ul where dbd_id = vc_dbd_id;
    delete from pcdiqdul_di_quality_detail_ul where dbd_id = vc_dbd_id;
    delete from pcdiul_pc_delivery_item_ul where dbd_id = vc_dbd_id;
    delete from pcipful_pci_pricing_formula_ul where dbd_id = vc_dbd_id;
    delete from pciul_phy_contract_item_ul where dbd_id = vc_dbd_id;
    delete from pcjvul_pc_jv_detail_ul where dbd_id = vc_dbd_id;
    delete from pcmul_phy_contract_main_ul where dbd_id = vc_dbd_id;
    delete from pcpdqdul_pd_quality_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcpdul_pc_product_defintn_ul where dbd_id = vc_dbd_id;
    delete from pcpqul_pc_product_quality_ul where dbd_id = vc_dbd_id;
    delete from pcqpdul_pc_qual_prm_discnt_ul where dbd_id = vc_dbd_id;
    delete from pffxdul_phy_formula_fx_dtl_ul where dbd_id = vc_dbd_id;
    delete from pfqppul_phy_formula_qp_prc_ul where dbd_id = vc_dbd_id;
    delete from ppfdul_phy_price_frmula_dtl_ul where dbd_id = vc_dbd_id;
    delete from ppfhul_phy_price_frmla_hdr_ul where dbd_id = vc_dbd_id;
    delete from ciqsl_contract_itm_qty_sts_log where dbd_id = vc_dbd_id;
    delete from diqsl_delivery_itm_qty_sts_log where dbd_id = vc_dbd_id;
    delete from cqsl_contract_qty_status_log where dbd_id = vc_dbd_id;
    delete from grdl_goods_record_detail_log where dbd_id = vc_dbd_id;
    delete from vdul_voyage_detail_ul where dbd_id = vc_dbd_id;
    delete from pcpchul_payble_contnt_headr_ul where dbd_id = vc_dbd_id;
    delete from pqdul_payable_quality_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcepcul_elem_payble_content_ul where dbd_id = vc_dbd_id;
    delete from pcthul_treatment_header_ul where dbd_id = vc_dbd_id;
    delete from tedul_treatment_element_dtl_ul where dbd_id = vc_dbd_id;
    delete from tqdul_treatment_quality_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcetcul_elem_treatmnt_chrg_ul where dbd_id = vc_dbd_id;
    delete from pcarul_assaying_rules_ul where dbd_id = vc_dbd_id;
    delete from pcaeslul_assay_elm_splt_lmt_ul where dbd_id = vc_dbd_id;
    delete from pcaeslul_assay_elm_splt_lmt_ul where dbd_id = vc_dbd_id;
    delete from arqdul_assay_quality_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcaphul_attr_penalty_header_ul where dbd_id = vc_dbd_id;
    delete from pcapul_attribute_penalty_ul where dbd_id = vc_dbd_id;
    delete from pqdul_penalty_quality_dtl_ul where dbd_id = vc_dbd_id;
    delete from padul_penalty_attribute_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcrhul_refining_header_ul where dbd_id = vc_dbd_id;
    delete from rqdul_refining_quality_dtl_ul where dbd_id = vc_dbd_id;
    delete from redul_refining_element_dtl_ul where dbd_id = vc_dbd_id;
    delete from pcercul_elem_refing_charge_ul where dbd_id = vc_dbd_id;
    delete from dithul_di_treatment_header_ul where dbd_id = vc_dbd_id;
    delete from dirhul_di_refining_header_ul where dbd_id = vc_dbd_id;
    delete from diphul_di_penalty_header_ul where dbd_id = vc_dbd_id;
    delete from cipql_ctrt_itm_payable_qty_log where dbd_id = vc_dbd_id;
    delete from dipql_del_itm_payble_qty_log where dbd_id = vc_dbd_id;
    delete from spql_stock_payable_qty_log where dbd_id = vc_dbd_id;
    delete from dipchul_di_payblecon_header_ul where dbd_id = vc_dbd_id;
    delete from agd_alloc_group_detail where dbd_id = vc_dbd_id;
    delete from agh_alloc_group_header where dbd_id = vc_dbd_id;
    delete from cigc_contract_item_gmr_cost where dbd_id = vc_dbd_id;
    delete from cs_cost_store where dbd_id = vc_dbd_id;
    delete from ecs_element_cost_store where dbd_id = vc_dbd_id;
    delete from dgrd_delivered_grd where dbd_id = vc_dbd_id;
    delete from gmr_goods_movement_record where dbd_id = vc_dbd_id;
    delete from mogrd_moved_out_grd where dbd_id = vc_dbd_id;
    delete from pcad_pc_agency_detail where dbd_id = vc_dbd_id;
    delete from pcbpd_pc_base_price_detail where dbd_id = vc_dbd_id;
    delete from pcbph_pc_base_price_header where dbd_id = vc_dbd_id;
    delete from pcdb_pc_delivery_basis where dbd_id = vc_dbd_id;
    delete from pcdd_document_details where dbd_id = vc_dbd_id;
    delete from pcdiob_di_optional_basis where dbd_id = vc_dbd_id;
    delete from pcdipe_di_pricing_elements where dbd_id = vc_dbd_id;
    delete from pcdiqd_di_quality_details where dbd_id = vc_dbd_id;
    delete from pcdi_pc_delivery_item where dbd_id = vc_dbd_id;
    delete from pcipf_pci_pricing_formula where dbd_id = vc_dbd_id;
    delete from pci_physical_contract_item where dbd_id = vc_dbd_id;
    delete from pcjv_pc_jv_detail where dbd_id = vc_dbd_id;
    delete from pcm_physical_contract_main where dbd_id = vc_dbd_id;
    delete from pcpdqd_pd_quality_details where dbd_id = vc_dbd_id;
    delete from pcpd_pc_product_definition where dbd_id = vc_dbd_id;
    delete from pcpq_pc_product_quality where dbd_id = vc_dbd_id;
    delete from pcqpd_pc_qual_premium_discount where dbd_id = vc_dbd_id;
    delete from pffxd_phy_formula_fx_details where dbd_id = vc_dbd_id;
    delete from pfqpp_phy_formula_qp_pricing where dbd_id = vc_dbd_id;
    delete from ppfd_phy_price_formula_details where dbd_id = vc_dbd_id;
    delete from ppfh_phy_price_formula_header where dbd_id = vc_dbd_id;
    delete from ciqs_contract_item_qty_status where dbd_id = vc_dbd_id;
    delete from diqs_delivery_item_qty_status where dbd_id = vc_dbd_id;
    delete from cqs_contract_qty_status where dbd_id = vc_dbd_id;
    delete from grd_goods_record_detail where dbd_id = vc_dbd_id;
    delete from vd_voyage_detail where dbd_id = vc_dbd_id;
    delete from invd_inventory_detail where dbd_id = vc_dbd_id;
    delete from invm_inventory_master where dbd_id = vc_dbd_id;
    delete from cipd_contract_item_price_daily
     where process_id = pc_process_id;
    delete from poud_phy_open_unreal_daily
     where process_id = pc_process_id;
    delete from psu_phy_stock_unrealized where process_id = pc_process_id;
    delete from md_m2m_daily where process_id = pc_process_id;
    delete from tgsc_temp_gmr_sec_cost where process_id = pc_process_id;
    delete from gscs_gmr_sec_cost_summary where process_id = pc_process_id;
    delete from cisc_contract_item_sec_cost
     where process_id = pc_process_id;
    delete from gpd_gmr_price_daily where process_id = pc_process_id;
    delete from pcpch_pc_payble_content_header where dbd_id = vc_dbd_id;
    delete from pqd_payable_quality_details where dbd_id = vc_dbd_id;
    delete from pcepc_pc_elem_payable_content where dbd_id = vc_dbd_id;
    delete from pcth_pc_treatment_header where dbd_id = vc_dbd_id;
    delete from ted_treatment_element_details where dbd_id = vc_dbd_id;
    delete from tqd_treatment_quality_details where dbd_id = vc_dbd_id;
    delete from pcetc_pc_elem_treatment_charge where dbd_id = vc_dbd_id;
    delete from pcar_pc_assaying_rules where dbd_id = vc_dbd_id;
    delete from pcaesl_assay_elem_split_limits where dbd_id = vc_dbd_id;
    delete from arqd_assay_quality_details where dbd_id = vc_dbd_id;
    delete from pcaph_pc_attr_penalty_header where dbd_id = vc_dbd_id;
    delete from pcap_pc_attribute_penalty where dbd_id = vc_dbd_id;
    delete from pqd_penalty_quality_details where dbd_id = vc_dbd_id;
    delete from pad_penalty_attribute_details where dbd_id = vc_dbd_id;
    delete from pcrh_pc_refining_header where dbd_id = vc_dbd_id;
    delete from rqd_refining_quality_details where dbd_id = vc_dbd_id;
    delete from red_refining_element_details where dbd_id = vc_dbd_id;
    delete from pcerc_pc_elem_refining_charge where dbd_id = vc_dbd_id;
    delete from ceqs_contract_ele_qty_status where dbd_id = vc_dbd_id;
    delete from cipde_cipd_element_price where process_id = pc_process_id;
    delete from poue_phy_open_unreal_element
     where process_id = pc_process_id;
    delete from poued_element_details where process_id = pc_process_id;
    delete from gpd_gmr_conc_price_daily where process_id = pc_process_id;
    delete from psue_element_details where process_id = pc_process_id;
    delete from psue_phy_stock_unrealized_ele
     where process_id = pc_process_id;
    delete from dith_di_treatment_header where dbd_id = vc_dbd_id;
    delete from dirh_di_refining_header where dbd_id = vc_dbd_id;
    delete from diph_di_penalty_header where dbd_id = vc_dbd_id;
    delete from cipq_contract_item_payable_qty where dbd_id = vc_dbd_id;
    delete from dipq_delivery_item_payable_qty where dbd_id = vc_dbd_id;
    delete from spq_stock_payable_qty where dbd_id = vc_dbd_id;
    delete from dipch_di_payablecontent_header where dbd_id = vc_dbd_id;
    delete from rgmr_realized_gmr where process_id = pc_process_id;
    delete from rgmrd_realized_gmr_detail where process_id = pc_process_id;
    delete from prd_physical_realized_daily
     where process_id = pc_process_id;
    delete from spd_stock_price_daily where process_id = pc_process_id;
    delete from is_invoice_summary where process_id = pc_process_id;
    delete from cdl_cost_delta_log where dbd_id = vc_dbd_id;
    delete from invs_inventory_sales where process_id = pc_process_id;
    delete from tinvp_temp_invm_cog where process_id = pc_process_id;
    delete from tinvs_temp_invm_cogs where process_id = pc_process_id;
    delete from invm_cog where process_id = pc_process_id;
    delete from invm_cogs where process_id = pc_process_id;
    delete from invme_cog_element where process_id = pc_process_id;
    delete from invme_cogs_element where process_id = pc_process_id;
    delete from pa_purchase_accural where process_id = pc_process_id;
    delete from pa_purchase_accural_gmr where process_id = pc_process_id;
    delete from isr_intrastat_grd where process_id = pc_process_id;
    delete from pcs_purchase_contract_status
     where process_id = pc_process_id;
    delete from fcr_feed_consumption_report
     where process_id = pc_process_id;
    delete from stock_monthly_yeild_data where process_id = pc_process_id;
    delete from upad_unreal_pnl_attr_detail
     where process_id = pc_process_id;
    delete from cccp_conc_contract_cog_price
     where process_id = pc_process_id;
    delete from cgcp_conc_gmr_cog_price where process_id = pc_process_id;
    delete from bccp_base_contract_cog_price
     where process_id = pc_process_id;
    delete from bgcp_base_gmr_cog_price where process_id = pc_process_id;
    delete from cr_customs_report where process_id = pc_process_id;
    delete from mas_metal_account_summary where process_id = pc_process_id;
    delete from md_metal_debt where process_id = pc_process_id;
    delete from dpr_daily_position_record where process_id = pc_process_id;
    delete from prch_phy_realized_conc_header
     where process_id = pc_process_id;
    delete from prce_phy_realized_conc_element
     where process_id = pc_process_id;
    delete from rgmrc_realized_gmr_conc where process_id = pc_process_id;
    delete from trgmrc_temp_rgmr_conc where corporate_id = pc_corporate_id;
    --
    -- If below tables Process ID might have marked for previoud DBD IDs
    -- Since they were not eleigible for previous EODS, we have unmark the Procee ID now
    --
    update grdl_goods_record_detail_log t
       set t.process_id = null
     where t.process_id = pc_process_id;
    update dgrdul_delivered_grd_ul t
       set t.process_id = null
     where t.process_id = pc_process_id;
    update cdl_cost_delta_log t
       set t.process_id = null
     where t.process_id = pc_process_id;
  
    vn_logno := vn_logno + 1;
    -- Washout rollback
    delete from sswh_spe_settle_washout_header where dbd_id = vc_dbd_id;
    delete from sswd_spe_settle_washout_detail where dbd_id = vc_dbd_id;
  
    update sswh_spe_settle_washout_header
       set process_id = null
     where process_id = pc_process_id;
    update sswh_spe_settle_washout_header
       set cancelled_process_id = null
     where cancelled_process_id = pc_process_id;
    update sswd_spe_settle_washout_detail
       set process_id = null
     where process_id = pc_process_id;
  
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_dbd_id,
                          vn_logno,
                          'Rollback End');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_process_rollback',
                                                           'M2M-013',
                                                           ' Code:' ||
                                                           sqlcode ||
                                                           ' Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           null, --pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_phy_rebuild_stats is
  begin
    sp_gather_stats('cipd_contract_item_price_daily');
    sp_gather_stats('cisc_contract_item_sec_cost');
    sp_gather_stats('gscs_gmr_sec_cost_summary');
    sp_gather_stats('tmpc_temp_m2m_pre_check');
    sp_gather_stats('md_m2m_daily');
    sp_gather_stats('dpp_daily_physical_position');
    sp_gather_stats('poud_phy_open_unreal_daily');
    sp_gather_stats('psu_phy_stock_unrealized');
    sp_gather_stats('psci_phy_stock_contract_item');
    sp_gather_stats('psg_phy_stock_gmr');
    sp_gather_stats('tpd_trade_pnl_daily');
    sp_gather_stats('prd_physical_realized_daily');
    sp_gather_stats('ord_overall_realized_pnl_daily');
    sp_gather_stats('cps_cost_pnl_summary');
    sp_gather_stats('pnlc_pnl_change');
    sp_gather_stats('ccd_carrying_cost_daily');
    sp_gather_stats('rgmrd_realized_gmr_detail');
    sp_gather_stats('mes_month_end_stock');
    sp_gather_stats('pps_physical_pnl_summary');
    sp_gather_stats('rgmr_realized_gmr');
  end;

end;
/


create or replace package pkg_phy_eod_reports is

  procedure sp_calc_pnl_summary(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_process      varchar2,
                                pc_user_id      varchar2);

  procedure sp_calc_daily_trade_pnl(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_process      varchar2,
                                    pc_user_id      varchar2);

  procedure sp_phy_purchase_accural(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_dbd_id       varchar2);

  procedure sp_calc_overall_realized_pnl(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2);

  procedure sp_phy_intrstat(pc_corporate_id varchar2,
                            pd_trade_date   date,
                            pc_process      varchar2,
                            pc_process_id   varchar2);
  procedure sp_phy_contract_status(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2);
  procedure sp_feed_consumption_report(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2);
  procedure sp_stock_monthly_yeild(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2);
  procedure sp_calc_risk_limits(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_user_id      varchar2,
                                pc_process      varchar2);
  procedure sp_calc_phy_unreal_pnl_attr(pc_corporate_id        varchar2,
                                        pd_trade_date          date,
                                        pd_prev_trade_date     date,
                                        pc_process_id          varchar2,
                                        pc_previous_process_id varchar2,
                                        pc_user_id             varchar2);
  procedure sp_calc_customs_report(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pc_process      varchar2);
  procedure sp_metal_balance_qty_summary(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2);
  procedure sp_misc(pc_corporate_id varchar2,
                    pd_trade_date   date,
                    pc_user_id      varchar2);
  procedure sp_daily_position_record(pc_corporate_id varchar2,
                                     pd_trade_date   date,
                                     pc_process_id   varchar2);
end;
/
create or replace package body pkg_phy_eod_reports is
  procedure sp_calc_daily_trade_pnl
  --------------------------------------------------------------------------------------------------------------------------
    ----        procedure name                            : sp_calc_daily_trade_pnl
    --        author                                    : 
    --        created date                              : 11th Jan 2011
    --        purpose                                   : populate daily trade pnl
    --
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pd_trade_date                             : trade date
    --        pc_process_id                             : eod reference no
    --
    --        modification history
    --        modified date                             : saurabh
    --        modified by                               : exchange name and exchange id
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_process_id   varchar2,
   pc_process      varchar2,
   pc_user_id      varchar2) is
    vc_prev_process_id varchar2(20);
    vd_prev_eod_date   date;
    vc_prev_eom_ref_no varchar2(20);
    vd_prev_eom_date   date;
    vd_acc_start_date  date;
    vc_process         varchar2(5);
    --vd_acc_end_date           date;
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vn_base_currency_decimals number;
  begin
    -------- to get the previous eod reference number and date
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_calc_trade_pnl',
                 'one');
    vc_process := pc_process;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_process_id := null;
        vd_prev_eod_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    -------- to get the previous eom reference number and date
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_calc_trade_pnl',
                 'two');
    begin
      select tdc.trade_date,
             tdc.process_id
        into vd_prev_eom_date,
             vc_prev_eom_ref_no
        from tdc_trade_date_closure tdc
       where tdc.trade_date = (select max(t.trade_date)
                                 from tdc_trade_date_closure t
                                where t.trade_date < pd_trade_date
                                  and t.corporate_id = pc_corporate_id
                                  and t.process = 'EOM')
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_ref_no := null;
        vd_prev_eom_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    -- to get the accounding period start year date
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_calc_trade_pnl',
                 'three');
    begin
      select start_date
        into vd_acc_start_date
        from cfy_corporate_financial_year@eka_appdb
       where pd_trade_date between start_date and end_date
         and corporateid = pc_corporate_id;
    exception
      when no_data_found then
        vd_acc_start_date := null;
    end;
    -- get the decimals for the base currency
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_calc_trade_pnl',
                 'threeeeeeee');
    begin
      select nvl(decimals, 2)
        into vn_base_currency_decimals
        from ak_corporate       akc,
             cm_currency_master cm
       where akc.corporate_id = pc_corporate_id
         and akc.base_cur_id = cm.cur_id;
    exception
      when others then
        vn_base_currency_decimals := 2;
    end;
    -----------------------------------------------------------------------------------------
    ------------------record unrealized contracts details------------------------------------
    -----------------------------------------------------------------------------------------
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_calc_trade_pnl',
                 'Before Insert into Trade PNL.....');
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(vc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(vc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.product_id,
             t.product_name
        from (select poud.corporate_id,
                     poud.corporate_name,
                     poud.profit_center_id,
                     poud.profit_center_name,
                     poud.profit_center_short_name,
                     poud.main_section,
                     poud.sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when poud.process_id = vc_prev_process_id then
                            nvl(poud.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when poud.process_id = pc_process_id then
                            nvl(poud.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     poud.pnl_cur_id base_cur_id,
                     poud.pnl_cur_code base_cur_code,
                     entity unrealized_section,
                     poud.approval_status is_pending_approval,
                     poud.product_id,
                     poud.product_name
                from pps_physical_pnl_summary poud
               where poud.corporate_id = pc_corporate_id
                 and poud.process_id in (vc_prev_process_id, pc_process_id)
                 and poud.main_section = 'Physical'
                 and poud.sub_section = 'Unrealized'
                 and poud.entity = 'Contract'
               group by poud.corporate_id,
                        poud.corporate_name,
                        poud.profit_center_id,
                        poud.profit_center_name,
                        poud.profit_center_short_name,
                        poud.pnl_cur_id,
                        poud.pnl_cur_code,
                        poud.approval_status,
                        poud.main_section,
                        poud.sub_section,
                        poud.entity,
                        poud.product_id,
                        poud.product_name
              union all
              select poum.corporate_id,
                     poum.corporate_name,
                     poum.profit_center_id,
                     poum.profit_center_name,
                     poum.profit_center_short_name,
                     'Physical' as main_section,
                     'Unrealized' as sub_section,
                     sum(poum.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     poum.pnl_cur_id base_cur_id,
                     poum.pnl_cur_code base_cur_code,
                     poum.entity unrealized_section,
                     poum.approval_status is_pending_approval,
                     poum.product_id,
                     poum.product_name
                from pps_physical_pnl_summary poum,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_process_id
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where poum.corporate_id = pc_corporate_id
                 and poum.main_section = 'Physical'
                 and poum.sub_section = 'Unrealized'
                 and poum.entity = 'Contract'
                 and poum.process_id = prev_month_data.month_process_id
                 and poum.corporate_id = prev_month_data.corporate_id
               group by poum.corporate_id,
                        poum.corporate_name,
                        poum.profit_center_id,
                        poum.profit_center_name,
                        poum.profit_center_short_name,
                        poum.pnl_cur_id,
                        poum.pnl_cur_code,
                        poum.approval_status,
                        poum.main_section,
                        poum.sub_section,
                        poum.entity,
                        poum.product_id,
                        poum.product_name
              union all
              select poum.corporate_id,
                     poum.corporate_name,
                     poum.profit_center_id,
                     poum.profit_center_name,
                     poum.profit_center_short_name,
                     poum.main_section,
                     poum.sub_section,
                     0 prev_yearend_pnl,
                     sum(poum.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     poum.pnl_cur_id base_cur_id,
                     poum.pnl_cur_code base_cur_code,
                     poum.entity unrealized_section,
                     poum.approval_status is_pending_approval,
                     poum.product_id,
                     poum.product_name
                from pps_physical_pnl_summary poum
               where poum.corporate_id = pc_corporate_id
                 and poum.main_section = 'Physical'
                 and poum.sub_section = 'Unrealized'
                 and poum.entity = 'Contract'
                 and poum.process_id = vc_prev_eom_ref_no
               group by poum.corporate_id,
                        poum.corporate_name,
                        poum.profit_center_id,
                        poum.profit_center_name,
                        poum.profit_center_short_name,
                        poum.pnl_cur_id,
                        poum.pnl_cur_code,
                        poum.approval_status,
                        poum.main_section,
                        poum.sub_section,
                        poum.product_id,
                        poum.product_name,
                        poum.entity
              union all
              select psud.corporate_id,
                     psud.corporate_name,
                     psud.profit_center_id,
                     psud.profit_center_name,
                     psud.profit_center_short_name,
                     psud.main_section,
                     psud.sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when psud.process_id = vc_prev_process_id then
                            nvl(psud.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when psud.process_id = pc_process_id then
                            nvl(psud.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     psud.pnl_cur_id,
                     psud.pnl_cur_code,
                     psud.entity unrealized_section,
                     'N' is_pending_approval,
                     psud.product_id,
                     psud.product_name
                from pps_physical_pnl_summary psud
               where psud.corporate_id = pc_corporate_id
                 and psud.process_id in (vc_prev_process_id, pc_process_id)
                 and psud.main_section = 'Physical'
                 and psud.sub_section = 'Unrealized'
                 and psud.entity = 'Stock'
               group by psud.corporate_id,
                        psud.corporate_name,
                        psud.profit_center_id,
                        psud.profit_center_name,
                        psud.profit_center_short_name,
                        psud.pnl_cur_id,
                        psud.pnl_cur_code,
                        psud.main_section,
                        psud.sub_section,
                        psud.product_id,
                        psud.product_name,
                        psud.entity
              union all
              select psum.corporate_id,
                     psum.corporate_name,
                     psum.profit_center_id,
                     psum.profit_center_name,
                     psum.profit_center_short_name,
                     psum.main_section,
                     psum.sub_section,
                     sum(psum.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     psum.pnl_cur_id,
                     psum.pnl_cur_code,
                     psum.entity unrealized_section,
                     psum.approval_status is_pending_approval,
                     psum.product_id,
                     psum.product_name
                from pps_physical_pnl_summary psum,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_process_id
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where psum.corporate_id = pc_corporate_id
                 and psum.main_section = 'Physical'
                 and psum.sub_section = 'Unrealized'
                 and psum.entity = 'Stock'
                 and psum.process_id = prev_month_data.month_process_id
                 and psum.corporate_id = prev_month_data.corporate_id
               group by psum.corporate_id,
                        psum.corporate_name,
                        psum.profit_center_short_name,
                        psum.profit_center_name,
                        psum.profit_center_id,
                        psum.pnl_cur_id,
                        psum.pnl_cur_code,
                        psum.approval_status,
                        psum.main_section,
                        psum.sub_section,
                        psum.product_id,
                        psum.product_name,
                        psum.entity
              union all
              select psum.corporate_id,
                     psum.corporate_name,
                     psum.profit_center_id,
                     psum.profit_center_name,
                     psum.profit_center_short_name,
                     psum.main_section,
                     psum.sub_section,
                     0 prev_yearend_pnl,
                     sum(psum.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     psum.pnl_cur_id,
                     psum.pnl_cur_code,
                     psum.entity unrealized_section,
                     psum.approval_status is_pending_approval,
                     psum.product_id,
                     psum.product_name
                from pps_physical_pnl_summary psum
               where psum.corporate_id = pc_corporate_id
                 and psum.main_section = 'Physical'
                 and psum.sub_section = 'Unrealized'
                 and psum.entity = 'Stock'
                 and psum.process_id = vc_prev_eom_ref_no
               group by psum.corporate_id,
                        psum.corporate_name,
                        psum.profit_center_id,
                        psum.profit_center_short_name,
                        psum.profit_center_name,
                        psum.pnl_cur_id,
                        psum.approval_status,
                        psum.pnl_cur_code,
                        psum.main_section,
                        psum.sub_section,
                        psum.product_id,
                        psum.product_name,
                        psum.entity) t,
             gcd_groupcorporatedetails@eka_appdb gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                main_section,
                sub_section,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                unrealized_section,
                is_pending_approval,
                t.product_id,
                t.product_name;
    -----------------------------------------------------------------------------------------
    ------------------record realized physical contracts details----------------------------------
    -----------------------------------------------------------------------------------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Physical' as main_section,
             'Realized' as sub_section,
             round(sum(prev_month) +
                   decode(vc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(vc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.product_id,
             t.product_name
        from (select prd.corporate_id,
                     prd.corporate_name,
                     prd.profit_center_id,
                     prd.profit_center_name,
                     prd.profit_center_short_name,
                     'Physical' as main_section,
                     'Realized' as sub_section,
                     0 prev_month,
                     sum(prd.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            prd.pnl
                           else
                            0
                         end)) today,
                     prd.pnl_cur_id base_cur_id,
                     prd.pnl_cur_code base_cur_code,
                     'Physical' unrealized_section,
                     'N' is_pending_approval,
                     prd.product_id,
                     prd.product_name
                from pps_physical_pnl_summary prd,
                     tdc_trade_date_closure   tdc
               where prd.corporate_id = pc_corporate_id
                 and prd.process_id = tdc.process_id
                 and prd.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and prd.main_section = 'Physical'
                 and prd.sub_section = 'Realized'
                 and prd.entity = 'Physical'
               group by prd.corporate_id,
                        prd.corporate_name,
                        prd.profit_center_id,
                        profit_center_name,
                        prd.profit_center_short_name,
                        prd.pnl_cur_id,
                        prd.product_id,
                        prd.product_name,
                        prd.pnl_cur_code
              union all
              select prm.corporate_id,
                     prm.corporate_name,
                     prm.profit_center_id,
                     prm.profit_center_name,
                     prm.profit_center_short_name,
                     'Physical' as main_section,
                     'Realized' as sub_section,
                     sum(prm.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     prm.pnl_cur_id,
                     prm.pnl_cur_code,
                     'Physical' unrealized_section,
                     'N' is_pending_approval,
                     prm.product_id,
                     prm.product_name
                from pps_physical_pnl_summary prm,
                     tdc_trade_date_closure   mec
               where prm.corporate_id = mec.corporate_id
                 and prm.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and prm.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and prm.main_section = 'Physical'
                 and prm.sub_section = 'Realized'
                 and prm.entity = 'Physical'
               group by prm.corporate_id,
                        prm.corporate_name,
                        prm.profit_center_id,
                        prm.profit_center_name,
                        prm.profit_center_short_name,
                        prm.pnl_cur_id,
                        prm.pnl_cur_code,
                        prm.product_id,
                        prm.product_name) t,
             gcd_groupcorporatedetails@eka_appdb gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                t.product_id,
                t.product_name;
    --------------------------------------------------------------------------------------
    ------------------record direct to realized costs details----------------------------------
    --------------------------------------------------------------------------------------
    /*insert into tpd_trade_pnl_daily
    (corporate_id,
     corporate_name,
     process_id,
     profit_center_id,
     profit_center_name,
     profit_center_short_name,
     main_section,
     sub_section,
     year_to_date_pnl,
     prev_month_pnl,
     month_to_date_pnl,
     today_pnl,
     pnl_cur_id,
     pnl_cur_code,
     group_id,
     group_name,
     group_cur_id,
     group_cur_code,
     group_qty_unit_id,
     group_qty_unit,
     unrealized_section,
     is_pending_approval)
    select t.corporate_id,
           t.corporate_name,
           pc_process_id,
           profit_center_id,
           profit_center_name,
           profit_center_short_name,
           'Physical' as main_section,
           'Direct to Realized Cost' as sub_section,
           round(sum(prev_month) + decode(gvc_process,'EOM',sum(today),sum(month_to_date)),
                 vn_base_currency_decimals) year_to_date_pnl,
           round(sum(prev_month),
                 vn_base_currency_decimals) previous_month_pnl,
           round(decode(gvc_process,'EOM',0,sum(month_to_date)),
                 vn_base_currency_decimals) month_to_date_pnl,
           round(sum(today),
                 vn_base_currency_decimals) today_pnl,
           t.base_cur_id,
           base_cur_code,
           gcd.groupid,
           gcd.groupname,
           gcd.group_cur_id,
           cm_gcd.cur_code,
           gcd.group_qty_unit_id,
           qum_gcd.qty_unit,
           unrealized_section,
           is_pending_approval
    from   (select gdrc.corporate_id,
                   akc.corporate_name,
                   gdrc.profit_center_id,
                   cpc.profit_center_name,
                   cpc.profit_center_short_name,
                   'Physical' as main_section,
                   'Direct to Realized Cost' as sub_section,
                   0 prev_month,
                   sum(gdrc.dtrc_cost) month_to_date,
                   sum((case
                           when tdc.trade_date = pd_trade_date then
                            gdrc.dtrc_cost
                           else
                            0
                       end)) today,
                   akc.base_cur_id base_cur_id,
                   akc.base_currency_name base_cur_code,
                   'Physical' unrealized_section,
                   'N' is_pending_approval
            from   gdrc_gmr_direct_realized_cost gdrc,
                   cpc_corporate_profit_center cpc,
                   tdc_trade_date_closure   tdc,
                   ak_corporate akc
            where  gdrc.corporate_id = pc_corporate_id
            and    gdrc.process_id = tdc.process_id
            and    gdrc.corporate_id = tdc.corporate_id
            and    tdc.trade_date <= pd_trade_date
            and    tdc.trade_date > vd_prev_eom_date
            and    gdrc.profit_center_id = cpc.profit_center_id
            and    gdrc.corporate_id = akc.corporate_id
            group  by gdrc.corporate_id,
                      akc.corporate_name,
                      gdrc.profit_center_id,
                      cpc.profit_center_name,
                      cpc.profit_center_short_name,
                      akc.base_cur_id,
                      akc.base_currency_name
            union all
            select gdrc.corporate_id,
                   akc.corporate_name,
                   gdrc.profit_center_id,
                   cpc.profit_center_name,
                   cpc.profit_center_short_name,
                   'Physical' as main_section,
                   'Direct to Realized Cost' as sub_section,
                   sum(gdrc.dtrc_cost) prev_month,
                   0 month_to_date,
                   0 today,
                   akc.base_cur_id base_cur_id,
                   akc.base_currency_name base_cur_code,
                   'Physical' unrealized_section,
                   'N' is_pending_approval
            from   gdrc_gmr_direct_realized_cost gdrc,
                   cpc_corporate_profit_center cpc,
                   tdc_trade_date_closure   tdc,
                   ak_corporate akc
            where  gdrc.corporate_id = pc_corporate_id
            and    gdrc.process_id = tdc.process_id
            and    gdrc.corporate_id = tdc.corporate_id
            and    tdc.process = 'EOM'
            and    tdc.trade_date <= vd_prev_eom_date
            and    tdc.trade_date >= vd_acc_start_date
            and    gdrc.profit_center_id = cpc.profit_center_id
            and    gdrc.corporate_id = akc.corporate_id
            group  by gdrc.corporate_id,
                      akc.corporate_name,
                      gdrc.profit_center_id,
                      cpc.profit_center_name,
                      cpc.profit_center_short_name,
                      akc.base_cur_id,
                      akc.base_currency_name) t,
           gcd_groupcorporatedetails@eka_appdb gcd,
           ak_corporate@eka_appdb akc,
           qum_quantity_unit_master qum_gcd,
           cm_currency_master cm_gcd
    where  t.corporate_id = akc.corporate_id
    and    akc.groupid = gcd.groupid
    and    gcd.group_cur_id = cm_gcd.cur_id
    and    gcd.group_qty_unit_id = qum_gcd.qty_unit_id
    group  by t.corporate_id,
              t.corporate_name,
              profit_center_id,
              profit_center_name,
              profit_center_short_name,
              unrealized_section,
              is_pending_approval,
              t.base_cur_id, --
              base_cur_code,
              gcd.groupid,
              gcd.groupname,
              gcd.group_cur_id,
              cm_gcd.cur_code,
              gcd.group_qty_unit_id,
              qum_gcd.qty_unit;*/
    -------------------------------------------------------------------------------------------
    -------------record carrying costs details----------------------------------------
    -------------------------------------------------------------------------------------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select corporate_id,
             corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(today, vn_base_currency_decimals) ytd_pnl,
             round(prev_month, vn_base_currency_decimals) previous_month_pnl,
             round((today - prev_month), vn_base_currency_decimals) mtd_pnl,
             round(decode(vc_process, 'EOM', 0, (today - prev_day)),
                   vn_base_currency_decimals) today_pnl,
             cur_id,
             cur_code,
             group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             unrealized_section,
             is_pending_approval,
             '' exchange_id,
             '' exchange_name
        from (select cps.corporate_id,
                     akc.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Carrying Costs' as main_section,
                     cps.sub_section as sub_section,
                     sum((case
                           when cps.process_id = vc_prev_eom_ref_no then
                            nvl(cps.cost_amt, 0)
                           else
                            0
                         end)) prev_month,
                     0 prev_day,
                     0 today,
                     cps.cost_cur_id cur_id,
                     cps.cost_cur_code cur_code,
                     gcd.groupid group_id,
                     gcd.groupname group_name,
                     gcd.group_cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     gcd.group_qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     '' unrealized_section,
                     'N' is_pending_approval
                from cps_cost_pnl_summary                cps,
                     ak_corporate                        akc,
                     gcd_groupcorporatedetails@eka_appdb gcd,
                     cm_currency_master                  cm_akc,
                     cm_currency_master                  cm_gcd,
                     cm_currency_master                  cm_cps,
                     qum_quantity_unit_master            qum_gcd
               where cps.corporate_id = akc.corporate_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and cm_cps.cur_id = cps.cost_cur_id
                 and cps.process_id = vc_prev_eom_ref_no
                 and cps.main_section = 'Carrying Costs'
               group by cps.corporate_id,
                        akc.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.sub_section,
                        cps.cost_cur_id,
                        cps.cost_cur_code,
                        gcd.groupid,
                        gcd.groupname,
                        gcd.group_cur_id,
                        cm_gcd.cur_code,
                        gcd.group_qty_unit_id,
                        qum_gcd.qty_unit) temp;
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select pc_corporate_id,
             t.corporate_name,
             pc_process_id,
             t.profit_center_id,
             t.profit_center_name,
             t.profit_center_short_name,
             t.main_section,
             t.sub_section,
             sum(t.previous_month_pnl) + sum(t.month_to_date_pnl) year_to_date_pnl,
             sum(t.previous_month_pnl) prev_month_pnl,
             sum(t.month_to_date_pnl) month_to_date_pnl,
             sum(t.today_pnl) today_pnl,
             t.base_cur_id,
             t.base_cur_code,
             gcd.groupid group_id,
             gcd.groupname group_name,
             gcd.group_cur_id group_cur_id,
             cm.cur_code group_cur_code,
             gcd.group_qty_unit_id group_qty_unit_id,
             qum.qty_unit group_qty_unit,
             t.unrealized_section,
             'N' is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     'Write Off Stock' sub_section,
                     sum(case
                           when cps.process_id = pc_process_id then
                            cps.cost_amt
                           else
                            0
                         end) today_pnl,
                     sum(cps.cost_amt) month_to_date_pnl,
                     0 previous_month_pnl,
                     cps.cost_cur_id base_cur_id,
                     cps.cost_cur_code base_cur_code,
                     cps.entity unrealized_section,
                     'N' is_pending_approval
                from cps_cost_pnl_summary   cps,
                     tdc_trade_date_closure tdc
               where cps.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and tdc.process = 'EOD'
                 and cps.process_id = pc_process_id
                 and cps.main_section = 'General Cost'
                 and cps.sub_section in
                     ('Write Off Stock', 'Undo Write-Off Stocks')
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.main_section,
                        cps.cost_cur_id,
                        cps.cost_cur_code,
                        cps.entity) t,
             gcd_groupcorporatedetails@eka_appdb gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and cm.cur_id = gcd.group_cur_id
         and qum.qty_unit_id = gcd.group_qty_unit_id
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                t.base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm.cur_code,
                gcd.group_qty_unit_id,
                qum.qty_unit,
                t.unrealized_section;
    ----ends here      
    -------------record physical write off section for realized-----------------------
    -------------record direct to realized costs details------------------------------   
    -- This is to populate missing sections
    -- Any section that needs data population has to be done before this
    /* INSERT INTO tpd_trade_pnl_daily
        (corporate_id,
         corporate_name,
         process_id,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         main_section,
         sub_section,
         year_to_date_pnl,
         prev_month_pnl,
         month_to_date_pnl,
         today_pnl,
         pnl_cur_id,
         pnl_cur_code,
         group_id,
         group_name,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         unrealized_section,
         is_pending_approval)
        SELECT corporate_id,
               corporate_name,
               pc_process_id,
               cpc.profit_center_id,
               cpc.profit_center_name,
               cpc.profit_center_short_name,
               tps.main_section,
               tps.sub_section,
               0,
               0,
               0,
               0,
               cm_akc.cur_id,
               cm_akc.cur_code,
               gcd.groupid,
               gcd.groupname,
               gcd.group_cur_id,
               cm_gcd.cur_code,
               qum_gcd.qty_unit_id,
               qum_gcd.qty_unit,
               tps.entity,
               'N'
        FROM   ak_corporate                akc,
               cpc_corporate_profit_center cpc,
               tps_trade_pnl_sections      tps,
               cm_currency_master          cm_akc,
               gcd_groupcorporatedetails   gcd,
               cm_currency_master          cm_gcd,
               qum_quantity_unit_master    qum_gcd
        WHERE  akc.base_currency_name = cm_akc.cur_code
        AND    akc.groupid = gcd.groupid
        AND    gcd.group_cur_id = cm_gcd.cur_id
        AND    gcd.group_qty_unit_id = qum_gcd.qty_unit_id
        AND    cpc.corporateid = akc.corporate_id
        AND    tps.is_exchange_required = 'N'
        AND    cpc.corporateid = pc_corporate_id
        AND    NOT EXISTS
         (SELECT *
                FROM   tpd_trade_pnl_daily tpd
                WHERE  tpd.process_id = pc_process_id
                AND    tpd.main_section = tps.main_section
                AND    tpd.sub_section = tps.sub_section
                AND    tpd.unrealized_section = tps.entity
                AND    tpd.profit_center_id = cpc.profit_center_id);
    -- Exchange Based Data
    INSERT INTO tpd_trade_pnl_daily
        (corporate_id,
         corporate_name,
         process_id,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         main_section,
         sub_section,
         year_to_date_pnl,
         prev_month_pnl,
         month_to_date_pnl,
         today_pnl,
         pnl_cur_id,
         pnl_cur_code,
         group_id,
         group_name,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         unrealized_section,
         is_pending_approval,
         exchange_id,
         exchange_name)
        SELECT corporate_id,
               corporate_name,
               pc_process_id,
               cpc.profit_center_id,
               cpc.profit_center_name,
               cpc.profit_center_short_name,
               tps.main_section,
               tps.sub_section,
               0,
               0,
               0,
               0,
               cm_akc.cur_id,
               cm_akc.cur_code,
               gcd.groupid,
               gcd.groupname,
               gcd.group_cur_id,
               cm_gcd.cur_code,
               qum_gcd.qty_unit_id,
               qum_gcd.qty_unit,
               tps.entity,
               'N',
               emt.exchange_id,
               emt.exchange_name
        FROM   ak_corporate                akc,
               cpc_corporate_profit_center cpc,
               tps_trade_pnl_sections      tps,
               cm_currency_master          cm_akc,
               gcd_groupcorporatedetails   gcd,
               cm_currency_master          cm_gcd,
               qum_quantity_unit_master    qum_gcd,
               emt_exchangemaster          emt
        WHERE  akc.base_currency_name = cm_akc.cur_code
        AND    akc.groupid = gcd.groupid
        AND    gcd.group_cur_id = cm_gcd.cur_id
        AND    gcd.group_qty_unit_id = qum_gcd.qty_unit_id
        AND    cpc.corporateid = akc.corporate_id
        AND    tps.is_exchange_required = 'Y'
        AND    cpc.corporateid = pc_corporate_id
        AND    NOT EXISTS
         (SELECT *
                FROM   tpd_trade_pnl_daily tpd
                WHERE  tpd.process_id = pc_process_id
                AND    tpd.main_section = tps.main_section
                AND    tpd.sub_section = tps.sub_section
                AND    tpd.unrealized_section = tps.entity
                AND    tpd.profit_center_id = cpc.profit_center_id
                AND    tpd.exchange_id = emt.exchange_id);*/
    ----PARAMETER INSERT
    insert into tpp_trade_pnl_parameters
      (process_id,
       prev_process_id,
       prev_eod_date,
       prev_eom_ref_no,
       prev_eom_date,
       acc_start_date)
    values
      (pc_process_id,
       vc_prev_process_id,
       vd_prev_eod_date,
       vc_prev_eom_ref_no,
       vd_prev_eom_date,
       vd_acc_start_date);
    ----ENDS HERE 
  
    commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_daily_trade_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           vc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_calc_pnl_summary(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_process      varchar2,
                                pc_user_id      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_process         varchar2(5);
  begin
    --
    -- record physical unrealized pnl
    --the below part is still commented as it is for stocks.
    --
    vc_process := pc_process;
    insert into pps_physical_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       approval_status,
       product_id,
       product_name)
      select poud.corporate_id,
             poud.corporate_name,
             pc_process_id,
             poud.profit_center_id,
             poud.profit_center_short_name,
             poud.profit_center_name,
             'Physical' as main_section,
             'Unrealized' as sub_section,
             'Contract' entity,
             sum(poud.unrealized_pnl_in_base_cur) pnl,
             poud.base_cur_id pnl_cur_id,
             poud.base_cur_code pnl_cur_code,
             (case
               when nvl(poud.approval_status, 'NA') = 'Pending Approval' then
                'Y'
               else
                'N'
             end) is_pending_approval,
             poud.product_id,
             poud.product_name
        from poud_phy_open_unreal_daily poud
       where poud.corporate_id = pc_corporate_id
         and poud.process_id = pc_process_id
         and poud.unrealized_type in ('Unrealized')
       group by poud.corporate_id,
                poud.corporate_name,
                poud.profit_center_id,
                poud.profit_center_name,
                poud.profit_center_short_name,
                poud.base_cur_id,
                poud.base_cur_code,
                poud.approval_status,
                poud.product_id,
                poud.product_name
      union all
      select psu.corporate_id,
             akc.corporate_name,
             pc_process_id,
             cpc.profit_center_id,
             cpc.profit_center_short_name,
             cpc.profit_center_name,
             'Physical' as main_section,
             'Unrealized' as sub_section,
             'Stock' entity,
             sum(psu.pnl_in_base_cur),
             psu.base_cur_id,
             psu.base_cur_code,
             'N',
             psu.product_id,
             psu.product_name
        from psu_phy_stock_unrealized psu,
             ak_corporate             akc,
             ---psci_phy_stock_contract_item psci
             cpc_corporate_profit_center cpc
       where psu.corporate_id = pc_corporate_id
         and akc.corporate_id = psu.corporate_id
         and psu.profit_center_id = cpc.profit_center_id
         and psu.process_id = pc_process_id
         and psu.pnl_type in ('Unrealized')
       group by psu.corporate_id,
                akc.corporate_name,
                cpc.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                psu.base_cur_id,
                psu.base_cur_code,
                psu.product_id,
                psu.product_name
      union all
      ---- record physical open unrealized for element
      select poue.corporate_id,
             poue.corporate_name,
             pc_process_id,
             poue.profit_center_id,
             poue.profit_center_short_name,
             poue.profit_center_name,
             'Physical' as main_section,
             'Unrealized' as sub_section,
             'Contract' entity,
             sum(poue.unrealized_pnl_in_base_cur) pnl,
             poue.base_cur_id pnl_cur_id,
             poue.base_cur_code pnl_cur_code,
             (case
               when nvl(poue.approval_status, 'NA') = 'Pending Approval' then
                'Y'
               else
                'N'
             end) is_pending_approval,
             poue.product_id,
             poue.product_name
        from poue_phy_open_unreal_element poue
       where poue.corporate_id = pc_corporate_id
         and poue.process_id = pc_process_id
         and poue.unrealized_type in ('Unrealized')
       group by poue.corporate_id,
                poue.corporate_name,
                poue.profit_center_id,
                poue.profit_center_name,
                poue.profit_center_short_name,
                poue.base_cur_id,
                poue.base_cur_code,
                poue.approval_status,
                poue.product_id,
                poue.product_name
      -----
      union all
      ---------- record physical stock unrealized for element
      select psue.corporate_id,
             akc.corporate_name,
             pc_process_id,
             cpc.profit_center_id,
             cpc.profit_center_short_name,
             cpc.profit_center_name,
             'Physical' as main_section,
             'Unrealized' as sub_section,
             'Stock' entity,
             sum(psue.pnl_in_base_cur),
             psue.base_cur_id,
             psue.base_cur_code,
             'N',
             psue.product_id,
             psue.product_name
        from psue_phy_stock_unrealized_ele psue,
             ak_corporate                  akc,
             -- psci_phy_stock_contract_item  psci
             cpc_corporate_profit_center cpc
       where psue.corporate_id = pc_corporate_id
         and akc.corporate_id = psue.corporate_id
         and psue.profit_center_id = cpc.profit_center_id
         and psue.process_id = pc_process_id
         and psue.pnl_type in ('Unrealized')
       group by psue.corporate_id,
                akc.corporate_name,
                cpc.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                psue.base_cur_id,
                psue.base_cur_code,
                psue.product_id,
                psue.product_name;
    ---------- 
    --
    -- record physical realized pnl
    --
    insert into pps_physical_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       approval_status,
       product_id,
       product_name)
      select prd.corporate_id,
             prd.corporate_name,
             pc_process_id,
             prd.profit_center_id,
             prd.profit_center_short_name,
             prd.profit_center_name,
             'Physical' as main_section,
             'Realized' as sub_section,
             'Physical' entity,
             sum(case
                   when prd.realized_type in
                        ('Realized Today', 'Reverse Realized',
                         'Reversal of Special Settlements', 'Special Settlements') then
                    nvl(prd.realized_pnl, 0)
                   when prd.realized_type in ('Previously Realized Price fixed today',
                         'Previously Realized PNL Change') then
                    nvl(prd.realized_pnl, 0) - nvl(prd.prev_real_pnl, 0)
                   else
                    0
                 end),
             prd.base_cur_id,
             prd.base_cur_code,
             'N' is_pending_approval,
             prd.product_id,
             prd.product_name
        from prd_physical_realized_daily prd
       where prd.corporate_id = pc_corporate_id
         and prd.process_id = pc_process_id
       group by prd.corporate_id,
                prd.corporate_name,
                prd.profit_center_id,
                prd.profit_center_short_name,
                prd.profit_center_name,
                prd.base_cur_id,
                prd.base_cur_code,
                prd.product_id,
                prd.product_name;
    commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_pnl_summary',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           vc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_phy_purchase_accural(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_dbd_id       varchar2) as
  
    cursor cur_pur_accural is
    -- Payable Elements  
      select /*+ first_rows */
             gmr.internal_gmr_ref_no,
             grd.internal_grd_ref_no,
             gmr.gmr_ref_no,
             grd.product_id,
             spq.element_id,
             spq.payable_qty,
             spq.qty_unit_id payable_qty_unit_id,
             spq.assay_content assay_qty,
             spq.qty_unit_id assay_qty_unit_id,
             gmr.corporate_id,
             akc.corporate_name,
             pcpd.product_id conc_product_id,
             pdm_conc.product_desc conc_product_name,
             grd.quality_id conc_quality_id,
             qat.quality_name conc_quality_name,
             pcpd.profit_center_id profit_center,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             pc_process_id process_id,
             gmr.contract_type contract_type,
             akc.base_cur_id as base_cur_id,
             akc.base_currency_name base_cur_code,
             cm.decimals as base_cur_decimal,
             aml.attribute_name element_name,
             pcpch.payable_type,
             pcm.cp_id,
             phd.companyname counterparty_name,
             pcm.invoice_currency_id pay_cur_id,
             cm_pay.cur_code pay_cur_code,
             cm_pay.decimals pay_cur_decimal,
             pci.pcdi_id
        from gmr_goods_movement_record      gmr,
             grd_goods_record_detail        grd,
             spq_stock_payable_qty          spq,
             ak_corporate                   akc,
             cm_currency_master             cm,
             pcpd_pc_product_definition     pcpd,
             pdm_productmaster              pdm_conc,
             qum_quantity_unit_master       qum_pdm_conc,
             qat_quality_attributes         qat,
             cpc_corporate_profit_center    cpc,
             sac_stock_assay_content        sac,
             aml_attribute_master_list      aml,
             pcpch_pc_payble_content_header pcpch,
             pcm_physical_contract_main     pcm,
             phd_profileheaderdetails       phd,
             ii_invoicable_item             ii,
             cm_currency_master             cm_pay,
             pci_physical_contract_item     pci
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.internal_grd_ref_no = spq.internal_grd_ref_no
         and spq.is_stock_split = 'N'
         and grd.status = 'Active'
         and gmr.corporate_id = akc.corporate_id
         and akc.base_cur_id = cm.cur_id
         and gmr.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpd.product_id = pdm_conc.product_id
         and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
         and grd.quality_id = qat.quality_id(+)
         and pcpd.profit_center_id = cpc.profit_center_id
         and grd.internal_grd_ref_no = sac.internal_grd_ref_no
         and spq.element_id = aml.attribute_id
         and spq.element_id = sac.element_id
         and gmr.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and pcpd.input_output = 'Input'
         and pcpd.process_id = pc_process_id
         and gmr.corporate_id = pc_corporate_id
         and gmr.internal_contract_ref_no = pcpch.internal_contract_ref_no
         and spq.element_id = pcpch.element_id
         and gmr.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.cp_id = phd.profileid
         and gmr.internal_gmr_ref_no = ii.internal_gmr_ref_no
         and grd.internal_grd_ref_no = ii.stock_id
         and pcm.invoice_currency_id = cm_pay.cur_id
         and gmr.is_deleted = 'N'
         and gmr.is_internal_movement = 'N'
         and pcpd.is_active = 'Y'
         and pcm.is_active = 'Y'
         and spq.process_id = pc_process_id
         and pcpch.process_id = pc_process_id
         and pcm.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             grd.internal_contract_item_ref_no
         and pci.process_id = pc_process_id
         and gmr.is_final_invoiced ='N'
      union all
      -- Penalty Elements
      select /*+ first_rows */
             gmr.internal_gmr_ref_no,
             grd.internal_grd_ref_no,
             gmr.gmr_ref_no,
             grd.product_id,
             sac.element_id,
             null payable_qty,
             null payable_qty_unit_id,
             sac.element_total_qty assay_qty,
             sac.element_qty_unit_id assay_qty_unit_id,
             gmr.corporate_id,
             akc.corporate_name,
             pcpd.product_id conc_product_id,
             pdm_conc.product_desc conc_product_name,
             grd.quality_id conc_quality_id,
             qat.quality_name conc_quality_name,
             pcpd.profit_center_id profit_center,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             pc_process_id process_id,
             gmr.contract_type contract_type,
             akc.base_cur_id as base_cur_id,
             akc.base_currency_name base_cur_code,
             cm.decimals as base_cur_decimal,
             aml.attribute_name element_name,
             null payable_type,
             pcm.cp_id,
             phd.companyname counterparty_name,
             pcm.invoice_currency_id pay_cur_id,
             cm_pay.cur_code pay_cur_code,
             cm_pay.decimals pay_cur_decimal,
             pci.pcdi_id
        from gmr_goods_movement_record   gmr,
             grd_goods_record_detail     grd,
             ak_corporate                akc,
             cm_currency_master          cm,
             pcpd_pc_product_definition  pcpd,
             pdm_productmaster           pdm_conc,
             qum_quantity_unit_master    qum_pdm_conc,
             qat_quality_attributes      qat,
             cpc_corporate_profit_center cpc,
             sac_stock_assay_content     sac,
             aml_attribute_master_list   aml,
             pcm_physical_contract_main  pcm,
             phd_profileheaderdetails    phd,
             ii_invoicable_item          ii,
             cm_currency_master          cm_pay,
             pci_physical_contract_item  pci
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and gmr.corporate_id = akc.corporate_id
         and akc.base_cur_id = cm.cur_id
         and gmr.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpd.product_id = pdm_conc.product_id
         and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
         and grd.status = 'Active'
         and grd.quality_id = qat.quality_id(+)
         and pcpd.profit_center_id = cpc.profit_center_id
         and grd.internal_grd_ref_no = sac.internal_grd_ref_no
         and sac.element_id = aml.attribute_id
         and gmr.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.cp_id = phd.profileid
         and gmr.internal_gmr_ref_no = ii.internal_gmr_ref_no
         and grd.internal_grd_ref_no = ii.stock_id
         and pcm.invoice_currency_id = cm_pay.cur_id
         and pcm.process_id = pc_process_id
         and gmr.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and pcpd.input_output = 'Input'
         and pcpd.process_id = pc_process_id
         and gmr.corporate_id = pc_corporate_id
         and gmr.is_deleted = 'N'
         and gmr.is_internal_movement = 'N'
         and pcpd.is_active = 'Y'
         and pcm.is_active = 'Y'
         and aml.is_active = 'Y'
         and pci.internal_contract_item_ref_no =
             grd.internal_contract_item_ref_no
         and pci.process_id = pc_process_id
         and gmr.is_final_invoiced ='N'
         and not exists
       (select spq.element_id
                from spq_stock_payable_qty spq
               where spq.process_id = gmr.process_id
                 and spq.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and spq.element_id = sac.element_id
                 and spq.is_stock_split = 'N');
  
    vn_gmr_treatment_charge      number;
    vc_gmr_treatment_cur_id      varchar2(15);
    vn_base_gmr_treatment_charge number;
    vn_gmr_refine_charge         number;
    vc_gmr_refine_cur_id         varchar2(15);
    vn_base_gmr_refine_charge    number;
    vn_gmr_penality_charge       number;
    vc_gmr_penality_cur_id       varchar2(15);
    vn_base_gmr_penality_charge  number;
    vn_gmr_price                 number;
    vc_gmr_price_untit_id        varchar2(15);
    vn_gmr_price_unit_weight     varchar2(15);
    vn_price_unit_weight_unit_id varchar2(15);
    vc_gmr_price_unit_cur_id     varchar2(10);
    vc_gmr_price_unit_cur_code   varchar2(10);
    vn_payable_amt_in_price_cur  number;
    vn_payable_amt_in_pay_cur    number;
    vc_price_cur_id              varchar2(15);
    vc_price_cur_code            varchar2(15);
    vn_cont_price_cur_id_factor  number;
    vn_cont_price_cur_decimals   number;
    vn_fx_rate_price_to_pay      number;
  
  begin
    for cur_pur_accural_rows in cur_pur_accural
    loop
      -- Price Not event based from CCCP and Event Based from CGCP
      if cur_pur_accural_rows.payable_type = 'Payable' then
        begin
          select cccp.contract_price,
                 cccp.price_unit_id,
                 cccp.price_unit_weight_unit_id,
                 cccp.price_unit_cur_id,
                 cccp.price_unit_cur_code
            into vn_gmr_price,
                 vc_gmr_price_untit_id,
                 vn_price_unit_weight_unit_id,
                 vc_gmr_price_unit_cur_id,
                 vc_gmr_price_unit_cur_code
            from cccp_conc_contract_cog_price cccp
           where cccp.pcdi_id = cur_pur_accural_rows.pcdi_id
             and cccp.process_id = pc_process_id
             and cccp.element_id = cur_pur_accural_rows.element_id;
        exception
          when others then
            begin
              select cgcp.contract_price,
                     cgcp.price_unit_id,
                     cgcp.price_unit_weight_unit_id,
                     cgcp.price_unit_cur_id,
                     cgcp.price_unit_cur_code
                into vn_gmr_price,
                     vc_gmr_price_untit_id,
                     vn_price_unit_weight_unit_id,
                     vc_gmr_price_unit_cur_id,
                     vc_gmr_price_unit_cur_code
                from cgcp_conc_gmr_cog_price cgcp
               where cgcp.internal_gmr_ref_no =
                     cur_pur_accural_rows.internal_gmr_ref_no
                 and cgcp.internal_grd_ref_no =
                     cur_pur_accural_rows.internal_grd_ref_no
                 and cgcp.process_id = pc_process_id
                 and cgcp.element_id = cur_pur_accural_rows.element_id;
            exception
              when others then
                vn_gmr_price                 := null;
                vc_gmr_price_untit_id        := null;
                vn_price_unit_weight_unit_id := null;
                vc_gmr_price_unit_cur_id     := null;
                vc_gmr_price_unit_cur_code   := null;
            end;
          
        end;
        pkg_general.sp_get_main_cur_detail(vc_gmr_price_unit_cur_id,
                                           vc_price_cur_id,
                                           vc_price_cur_code,
                                           vn_cont_price_cur_id_factor,
                                           vn_cont_price_cur_decimals);
      
        vn_payable_amt_in_price_cur := round((vn_gmr_price /
                                             nvl(vn_gmr_price_unit_weight,
                                                  1)) *
                                             (pkg_general.f_get_converted_quantity(cur_pur_accural_rows.conc_product_id,
                                                                                   cur_pur_accural_rows.payable_qty_unit_id,
                                                                                   vn_price_unit_weight_unit_id,
                                                                                   cur_pur_accural_rows.payable_qty)) *
                                             vn_cont_price_cur_id_factor,
                                             vn_cont_price_cur_decimals);
      
        vn_fx_rate_price_to_pay   := 1;
        vn_payable_amt_in_pay_cur := round(vn_payable_amt_in_price_cur *
                                           vn_fx_rate_price_to_pay,
                                           cur_pur_accural_rows.pay_cur_decimal);
        pkg_metals_general.sp_get_gmr_treatment_charge(cur_pur_accural_rows.internal_gmr_ref_no,
                                                       cur_pur_accural_rows.internal_grd_ref_no,
                                                       cur_pur_accural_rows.element_id,
                                                       pc_dbd_id,
                                                       vn_gmr_price,
                                                       vc_gmr_price_untit_id,
                                                       vn_gmr_treatment_charge,
                                                       vc_gmr_treatment_cur_id);
      
        -- converted treatment charges to base currency                                           
        vn_base_gmr_treatment_charge := round(vn_gmr_treatment_charge,
                                              cur_pur_accural_rows.base_cur_decimal);
      
        pkg_metals_general.sp_get_gmr_refine_charge(cur_pur_accural_rows.internal_gmr_ref_no,
                                                    cur_pur_accural_rows.internal_grd_ref_no,
                                                    cur_pur_accural_rows.element_id,
                                                    pc_dbd_id,
                                                    vn_gmr_price,
                                                    vc_gmr_price_untit_id,
                                                    vn_gmr_refine_charge,
                                                    vc_gmr_refine_cur_id);
      
        --- converted refine charges to base currency                                              
      
        vn_base_gmr_refine_charge := round(
                                                                                    vn_gmr_refine_charge,
                                           cur_pur_accural_rows.base_cur_decimal);
      end if;
      pkg_metals_general.sp_get_gmr_penalty_charge(cur_pur_accural_rows.internal_gmr_ref_no,
                                                   cur_pur_accural_rows.internal_grd_ref_no,
                                                   pc_dbd_id,
                                                   cur_pur_accural_rows.element_id,
                                                   vn_gmr_penality_charge,
                                                   vc_gmr_penality_cur_id);
    
      vn_base_gmr_penality_charge := round( vn_gmr_penality_charge,
                                           cur_pur_accural_rows.base_cur_decimal);
    
      insert into pa_purchase_accural
        (corporate_id,
         process_id,
         product_id,
         product_type,
         contract_type,
         cp_id,
         counterparty_name,
         gmr_ref_no,
         internal_gmr_ref_no,
         internal_grd_ref_no,
         element_id,
         element_name,
         payable_returnable_type,
         assay_content,
         assay_content_unit,
         payable_qty,
         payable_qty_unit_id,
         price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         fx_rate_price_to_pay,
         pay_in_cur_id,
         pay_in_cur_code,
         tcharges_amount,
         rcharges_amount,
         penalty_amount,
         payable_amt_price_ccy,
         payable_amt_pay_ccy,
         frightcharges_amount,
         othercharges_amount)
      values
        (cur_pur_accural_rows.corporate_id,
         pc_process_id,
         cur_pur_accural_rows.product_id,
         cur_pur_accural_rows.conc_product_name,
         cur_pur_accural_rows.contract_type,
         cur_pur_accural_rows.cp_id,
         cur_pur_accural_rows.counterparty_name,
         cur_pur_accural_rows.gmr_ref_no,
         cur_pur_accural_rows.internal_gmr_ref_no,
         cur_pur_accural_rows.internal_grd_ref_no,
         cur_pur_accural_rows.element_id,
         cur_pur_accural_rows.element_name,
         cur_pur_accural_rows.payable_type,
         cur_pur_accural_rows.assay_qty,
         cur_pur_accural_rows.assay_qty_unit_id,
         nvl(cur_pur_accural_rows.payable_qty, 0),
         nvl(cur_pur_accural_rows.payable_qty_unit_id,
             cur_pur_accural_rows.assay_qty_unit_id),
         vn_gmr_price,
         vc_gmr_price_untit_id,
         vc_gmr_price_unit_cur_id,
         vc_gmr_price_unit_cur_code,
         vn_fx_rate_price_to_pay,
         cur_pur_accural_rows.pay_cur_id,
         cur_pur_accural_rows.pay_cur_code,
         vn_base_gmr_treatment_charge,
         vn_base_gmr_refine_charge,
         vn_base_gmr_penality_charge,
         nvl(vn_payable_amt_in_price_cur, 0),
         nvl(vn_payable_amt_in_pay_cur, 0),
         0, --frightcharges_amount,
         0 --othercharges_amount    
         );
    end loop;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1001,
                          'sp_phy_purchase_accural Loop over');
    ---- Invoiced  GMR Level
    insert into pa_purchase_accural_gmr
      (corporate_id,
       process_id,
       eod_trade_date,
       product_id,
       product_type,
       contract_type,
       cp_id,
       counterparty_name,
       gmr_ref_no,
       element_id,
       element_name,
       payable_returnable_type,
       assay_content,
       assay_content_unit,
       payable_qty,
       payable_qty_unit_id,
       tcharges_amount,
       rcharges_amount,
       penalty_amount,
       payable_amt_pay_ccy,
       pay_in_cur_id,
       pay_in_cur_code,
       frightcharges_amount,
       othercharges_amount,
       tranascation_type)
      select temp.corporate_id,
             pc_process_id,
             pd_trade_date,
             temp.product_id,
             pdm_conc.product_desc,
             temp.contract_type,
             pcm.cp_id,
             phd.companyname,
             temp.gmr_ref_no,
             temp.element_id,
             aml.attribute_name,
             pcpch.payable_type,
             sum(temp.assay_qty) payable_qty,
             temp.assay_qty_unit assay_qty_unit,
             sum(temp.payble_qty) payable_qty,
             temp.payable_qty_unit payable_qty_unit_id,
             sum(temp.tcharges_amount) tcharges_amount,
             sum(temp.rcharges_amount) rcharges_amount,
             sum(temp.penalty_amount) penalty_amount,
             sum(temp.element_payable_amount) element_payable_amount,
             temp.invoice_currency_id,
             cm.cur_code,
             0,
             --oth_chagres.other_charges,
             case
               when dense_rank() over(partition by temp.gmr_ref_no order by
                         temp.element_id) = 1 then
                oth_chagres.other_charges
               else
                0
             end,
             'Invoiced'
        from (select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     iied.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     iied.element_invoiced_qty payble_qty,
                     iied.element_inv_qty_unit_id payable_qty_unit,
                     iied.element_payable_amount,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record     gmr,
                     grd_goods_record_detail       grd,
                     iid_invoicable_item_details   iid,
                     iied_inv_item_element_details iied,
                     ak_corporate                  akc,
                     cm_currency_master            cm,
                     iam_invoice_assay_mapping     iam,
                     ash_assay_header              ash,
                     asm_assay_sublot_mapping      asm,
                     pqca_pq_chemical_attributes   pqca,
                     rm_ratio_master               rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     iied.internal_invoice_ref_no
                 and iid.stock_id = iied.grd_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and iied.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              union all
              ----- assay qty
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     pqca.element_id,
                     gmr.contract_type,
                     (case
                       when rm.ratio_name = '%' then
                        (pqca.typical * asm.dry_weight) / 100
                       else
                        pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                             asm.net_weight_unit,
                                                             rm.qty_unit_id_denominator,
                                                             asm.dry_weight) *
                        pqca.typical
                     
                     end) assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm,
                     aml_attribute_master_list   aml
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and pqca.element_id = aml.attribute_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              ---- Tc Chrages
              union all
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     intc.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     intc.tcharges_amount tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     intc_inv_treatment_charges  intc,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     aml_attribute_master_list   aml,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     intc.internal_invoice_ref_no
                 and iid.stock_id = intc.grd_id
                 and gmr.corporate_id = akc.corporate_id
                 and intc.element_id = aml.attribute_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and intc.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              -- Rc Chargess
              union all
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     inrc.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     0 tcharges_amount,
                     inrc.rcharges_amount rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     inrc_inv_refining_charges   inrc,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     aml_attribute_master_list   aml,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     inrc.internal_invoice_ref_no
                 and iid.stock_id = inrc.grd_id
                 and gmr.corporate_id = akc.corporate_id
                 and inrc.element_id = aml.attribute_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and inrc.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              -- penality
              union all
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     iepd.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     iepd.element_penalty_amount penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     iepd_inv_epenalty_details   iepd,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     iepd.internal_invoice_ref_no
                 and iid.stock_id = iepd.stock_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and iepd.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id) temp,
             pdm_productmaster pdm_conc,
             qat_quality_attributes qat,
             cpc_corporate_profit_center cpc,
             ak_corporate akc,
             cm_currency_master cm,
             aml_attribute_master_list aml,
             pcm_physical_contract_main pcm,
             phd_profileheaderdetails phd,
             pcpch_pc_payble_content_header pcpch,
             (select gmr.internal_gmr_ref_no,
                     iss.total_other_charge_amount other_charges
                from gmr_goods_movement_record gmr,
                     is_invoice_summary        iss
               where (iss.internal_invoice_ref_no, gmr.internal_gmr_ref_no) in
                     (select iid.internal_invoice_ref_no,
                             iid.internal_gmr_ref_no
                        from iid_invoicable_item_details iid
                       where iid.internal_invoice_ref_no =
                             iss.internal_invoice_ref_no
                         and iid.internal_gmr_ref_no =
                             gmr.internal_gmr_ref_no
                         and gmr.latest_internal_invoice_ref_no =
                             iss.internal_invoice_ref_no
                         and iss.is_active = 'Y'
                         and iss.process_id = pc_process_id
                         and gmr.process_id = pc_process_id)) oth_chagres
       where temp.product_id = pdm_conc.product_id
         and temp.quality_id = qat.quality_id(+)
         and temp.profit_center_id = cpc.profit_center_id
         and temp.corporate_id = akc.corporate_id
         and temp.element_id = aml.attribute_id
         and temp.invoice_currency_id = cm.cur_id
         and temp.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.cp_id = phd.profileid
         and pcm.cp_id = phd.profileid
         and temp.internal_contract_ref_no =
             pcpch.internal_contract_ref_no(+)
         and temp.element_id = pcpch.element_id(+)
         and pcm.process_id = pc_process_id
         and pcpch.process_id(+) = pc_process_id
         and pcm.is_active = 'Y'
         and pcpch.is_active(+) = 'Y'
         and temp.internal_gmr_ref_no = oth_chagres.internal_gmr_ref_no(+)
       group by temp.corporate_id,
                pc_process_id,
                temp.product_id,
                pdm_conc.product_desc,
                pcm.cp_id,
                temp.contract_type,
                phd.companyname,
                temp.gmr_ref_no,
                temp.element_id,
                aml.attribute_name,
                pcpch.payable_type,
                temp.invoice_currency_id,
                temp.payable_qty_unit,
                temp.assay_qty_unit,
                cm.cur_code,
                oth_chagres.other_charges;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1002,
                          'sp_phy_purchase_accural GMR Level');
    --calucalted GMR Leval             
    insert into pa_purchase_accural_gmr
      (corporate_id,
       process_id,
       eod_trade_date,
       product_id,
       product_type,
       contract_type,
       cp_id,
       counterparty_name,
       gmr_ref_no,
       element_id,
       element_name,
       payable_returnable_type,
       assay_content,
       assay_content_unit,
       payable_qty,
       payable_qty_unit_id,
       price,
       price_unit_id,
       price_unit_cur_id,
       price_unit_cur_code,
       pay_in_cur_id,
       pay_in_cur_code,
       payable_amt_price_ccy,
       payable_amt_pay_ccy,
       fx_rate_price_to_pay,
       tcharges_amount,
       rcharges_amount,
       penalty_amount,
       frightcharges_amount,
       othercharges_amount,
       tranascation_type)
      select pa.corporate_id,
             pc_process_id,
             pd_trade_date,
             pa.product_id,
             pa.product_type,
             pa.contract_type,
             pa.cp_id,
             pa.counterparty_name,
             pa.gmr_ref_no,
             pa.element_id,
             pa.element_name,
             pa.payable_returnable_type,
             sum(pa.assay_content),
             pa.assay_content_unit,
             sum(pa.payable_qty),
             pa.payable_qty_unit_id,
             pa.price,
             pa.price_unit_id,
             pa.price_unit_cur_id,
             pa.price_unit_cur_code,
             pa.pay_in_cur_id,
             pa.pay_in_cur_code,
             sum(pa.payable_amt_price_ccy),
             sum(pa.payable_amt_pay_ccy),
             pa.fx_rate_price_to_pay,
             sum(pa.tcharges_amount),
             sum(pa.rcharges_amount),
             sum(pa.penalty_amount),
             0,
             0,
             'Calculated'
        from pa_purchase_accural pa
       where pa.process_id = pc_process_id
         and pa.corporate_id = pc_corporate_id
       group by pa.corporate_id,
                pc_process_id,
                pa.product_id,
                pa.product_type,
                pa.contract_type,
                pa.cp_id,
                pa.counterparty_name,
                pa.gmr_ref_no,
                pa.element_id,
                pa.element_name,
                pa.payable_returnable_type,
                pa.assay_content_unit,
                pa.payable_qty_unit_id,
                pa.price,
                pa.price_unit_id,
                pa.price_unit_cur_id,
                pa.price_unit_cur_code,
                pa.pay_in_cur_id,
                pa.pay_in_cur_code,
                pa.fx_rate_price_to_pay;
    commit;
  
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1003,
                          'sp_phy_purchase_accural Calcualted GMR Level');
    -- diff GMR level
  
    insert into pa_purchase_accural_gmr
      (corporate_id,
       process_id,
       eod_trade_date,
       product_id,
       product_type,
       contract_type,
       cp_id,
       counterparty_name,
       gmr_ref_no,
       element_id,
       element_name,
       payable_returnable_type,
       assay_content,
       assay_content_unit,
       payable_qty,
       payable_qty_unit_id,
       tcharges_amount,
       rcharges_amount,
       penalty_amount,
       payable_amt_pay_ccy,
       payable_amt_price_ccy,
       pay_in_cur_id,
       pay_in_cur_code,
       frightcharges_amount,
       othercharges_amount,
       tranascation_type)
      select pa.corporate_id,
             pc_process_id,
             pd_trade_date,
             pa.product_id,
             pa.product_type,
             pa.contract_type,
             pa.cp_id,
             pa.counterparty_name,
             pa.gmr_ref_no,
             pa.element_id,
             pa.element_name,
             pa.payable_returnable_type,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.assay_content
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.assay_content
                              else
                               0
                            end) assay_content,
             pa.assay_content_unit,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.payable_qty
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.payable_qty
                              else
                               0
                            end) payable_qty,
             pa.payable_qty_unit_id,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.tcharges_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.tcharges_amount
                              else
                               0
                            end) tcharges_amount,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.rcharges_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.rcharges_amount
                              else
                               0
                            end) rcharges_amount,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.penalty_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.penalty_amount
                              else
                               0
                            end) penalty_amount,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.payable_amt_pay_ccy
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.payable_amt_pay_ccy
                              else
                               0
                            end) payable_amount_pay_ccy,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.payable_amt_price_ccy
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.payable_amt_price_ccy
                              else
                               0
                            end) payable_amount_price_ccy,
             pa.pay_in_cur_id,
             pa.pay_in_cur_code,
             0,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.othercharges_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.othercharges_amount
                              else
                               0
                            end) othercharges_amount,
             'Difference'
        from pa_purchase_accural_gmr pa
       where pa.process_id = pc_process_id
         and pa.corporate_id = pc_corporate_id
       group by pa.corporate_id,
                pc_process_id,
                pa.product_id,
                pa.product_type,
                pa.contract_type,
                pa.cp_id,
                pa.counterparty_name,
                pa.gmr_ref_no,
                pa.element_id,
                pa.element_name,
                pa.payable_returnable_type,
                pa.assay_content_unit,
                pa.payable_qty_unit_id,
                pa.pay_in_cur_id,
                pa.pay_in_cur_code;
  
    commit;
  
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1004,
                          'sp_phy_purchase_accural End');
  end;
  procedure sp_phy_purchase_accural_old(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_dbd_id       varchar2) as
  
    cursor cur_pur_accural is
    -- Payable Elements  
      select gmr.internal_gmr_ref_no,
             grd.internal_grd_ref_no,
             gmr.gmr_ref_no,
             grd.product_id,
             spq.element_id,
             spq.payable_qty,
             spq.qty_unit_id payable_qty_unit_id,
             spq.assay_content assay_qty,
             spq.qty_unit_id assay_qty_unit_id,
             gmr.corporate_id,
             akc.corporate_name,
             pcpd.product_id conc_product_id,
             pdm_conc.product_desc conc_product_name,
             grd.quality_id conc_quality_id,
             qat.quality_name conc_quality_name,
             pcpd.profit_center_id profit_center,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             pc_process_id process_id,
             gmr.contract_type contract_type,
             akc.base_cur_id as base_cur_id,
             akc.base_currency_name base_cur_code,
             cm.decimals as base_cur_decimal,
             aml.attribute_name element_name,
             pcpch.payable_type,
             pcm.cp_id,
             phd.companyname counterparty_name,
             pcm.invoice_currency_id pay_cur_id,
             cm_pay.cur_code pay_cur_code,
             cm_pay.decimals pay_cur_decimal,
             pci.pcdi_id
        from gmr_goods_movement_record      gmr,
             grd_goods_record_detail        grd,
             spq_stock_payable_qty          spq,
             ak_corporate                   akc,
             cm_currency_master             cm,
             pcpd_pc_product_definition     pcpd,
             pdm_productmaster              pdm_conc,
             qum_quantity_unit_master       qum_pdm_conc,
             qat_quality_attributes         qat,
             cpc_corporate_profit_center    cpc,
             sac_stock_assay_content        sac,
             aml_attribute_master_list      aml,
             pcpch_pc_payble_content_header pcpch,
             pcm_physical_contract_main     pcm,
             phd_profileheaderdetails       phd,
             ii_invoicable_item             ii,
             cm_currency_master             cm_pay,
             pci_physical_contract_item     pci
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and grd.internal_grd_ref_no = spq.internal_grd_ref_no
         and spq.is_stock_split = 'N'
         and grd.status = 'Active'
         and gmr.corporate_id = akc.corporate_id
         and akc.base_cur_id = cm.cur_id
         and gmr.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpd.product_id = pdm_conc.product_id
         and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
         and grd.quality_id = qat.quality_id(+)
         and pcpd.profit_center_id = cpc.profit_center_id
         and grd.internal_grd_ref_no = sac.internal_grd_ref_no
         and spq.element_id = aml.attribute_id
         and spq.element_id = sac.element_id
         and gmr.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and pcpd.input_output = 'Input'
         and pcpd.process_id = pc_process_id
         and gmr.corporate_id = pc_corporate_id
         and gmr.internal_contract_ref_no = pcpch.internal_contract_ref_no
         and spq.element_id = pcpch.element_id
         and gmr.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.cp_id = phd.profileid
         and gmr.internal_gmr_ref_no = ii.internal_gmr_ref_no
         and grd.internal_grd_ref_no = ii.stock_id
         and pcm.invoice_currency_id = cm_pay.cur_id
         and gmr.is_deleted = 'N'
         and gmr.is_internal_movement = 'N'
         and pcpd.is_active = 'Y'
         and pcm.is_active = 'Y'
         and spq.process_id = pc_process_id
         and pcpch.process_id = pc_process_id
         and pcm.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             grd.internal_contract_item_ref_no
         and pci.process_id = pc_process_id
      union all
      -- Penalty Elements
      select gmr.internal_gmr_ref_no,
             grd.internal_grd_ref_no,
             gmr.gmr_ref_no,
             grd.product_id,
             sac.element_id,
             null payable_qty,
             null payable_qty_unit_id,
             sac.element_total_qty assay_qty,
             sac.element_qty_unit_id assay_qty_unit_id,
             gmr.corporate_id,
             akc.corporate_name,
             pcpd.product_id conc_product_id,
             pdm_conc.product_desc conc_product_name,
             grd.quality_id conc_quality_id,
             qat.quality_name conc_quality_name,
             pcpd.profit_center_id profit_center,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             pc_process_id process_id,
             gmr.contract_type contract_type,
             akc.base_cur_id as base_cur_id,
             akc.base_currency_name base_cur_code,
             cm.decimals as base_cur_decimal,
             aml.attribute_name element_name,
             null payable_type,
             pcm.cp_id,
             phd.companyname counterparty_name,
             pcm.invoice_currency_id pay_cur_id,
             cm_pay.cur_code pay_cur_code,
             cm_pay.decimals pay_cur_decimal,
             pci.pcdi_id
        from gmr_goods_movement_record   gmr,
             grd_goods_record_detail     grd,
             ak_corporate                akc,
             cm_currency_master          cm,
             pcpd_pc_product_definition  pcpd,
             pdm_productmaster           pdm_conc,
             qum_quantity_unit_master    qum_pdm_conc,
             qat_quality_attributes      qat,
             cpc_corporate_profit_center cpc,
             sac_stock_assay_content     sac,
             aml_attribute_master_list   aml,
             pcm_physical_contract_main  pcm,
             phd_profileheaderdetails    phd,
             ii_invoicable_item          ii,
             cm_currency_master          cm_pay,
             pci_physical_contract_item  pci
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and gmr.corporate_id = akc.corporate_id
         and akc.base_cur_id = cm.cur_id
         and gmr.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpd.product_id = pdm_conc.product_id
         and qum_pdm_conc.qty_unit_id = pdm_conc.base_quantity_unit
         and grd.status = 'Active'
         and grd.quality_id = qat.quality_id(+)
         and pcpd.profit_center_id = cpc.profit_center_id
         and grd.internal_grd_ref_no = sac.internal_grd_ref_no
         and sac.element_id = aml.attribute_id
         and gmr.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.cp_id = phd.profileid
         and gmr.internal_gmr_ref_no = ii.internal_gmr_ref_no
         and grd.internal_grd_ref_no = ii.stock_id
         and pcm.invoice_currency_id = cm_pay.cur_id
         and pcm.process_id = pc_process_id
         and gmr.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and pcpd.input_output = 'Input'
         and pcpd.process_id = pc_process_id
         and gmr.corporate_id = pc_corporate_id
         and gmr.is_deleted = 'N'
         and gmr.is_internal_movement = 'N'
         and pcpd.is_active = 'Y'
         and pcm.is_active = 'Y'
         and aml.is_active = 'Y'
         and pci.internal_contract_item_ref_no =
             grd.internal_contract_item_ref_no
         and pci.process_id = pc_process_id
         and not exists
       (select spq.element_id
                from spq_stock_payable_qty spq
               where spq.process_id = gmr.process_id
                 and spq.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and spq.element_id = sac.element_id
                 and spq.is_stock_split = 'N');
  
    vn_gmr_treatment_charge      number;
    vc_gmr_treatment_cur_id      varchar2(15);
    vn_base_gmr_treatment_charge number;
    vn_gmr_refine_charge         number;
    vc_gmr_refine_cur_id         varchar2(15);
    vn_base_gmr_refine_charge    number;
    vn_gmr_penality_charge       number;
    vc_gmr_penality_cur_id       varchar2(15);
    vn_base_gmr_penality_charge  number;
    vn_gmr_price                 number;
    vc_gmr_price_untit_id        varchar2(15);
    vn_gmr_price_unit_weight     varchar2(15);
    vn_price_unit_weight_unit_id varchar2(15);
    vc_gmr_price_unit_cur_id     varchar2(10);
    vc_gmr_price_unit_cur_code   varchar2(10);
    vn_payable_amt_in_price_cur  number;
    vn_payable_amt_in_pay_cur    number;
    vc_price_cur_id              varchar2(15);
    vc_price_cur_code            varchar2(15);
    vn_cont_price_cur_id_factor  number;
    vn_cont_price_cur_decimals   number;
    vn_fx_rate_price_to_pay      number;
  
  begin
    for cur_pur_accural_rows in cur_pur_accural
    loop
      -- Price Not event based from CCCP and Event Based from CGCP
      if cur_pur_accural_rows.payable_type = 'Payable' then
        begin
          select cccp.contract_price,
                 cccp.price_unit_id,
                 cccp.price_unit_weight_unit_id,
                 cccp.price_unit_cur_id,
                 cccp.price_unit_cur_code
            into vn_gmr_price,
                 vc_gmr_price_untit_id,
                 vn_price_unit_weight_unit_id,
                 vc_gmr_price_unit_cur_id,
                 vc_gmr_price_unit_cur_code
            from cccp_conc_contract_cog_price cccp
           where cccp.pcdi_id = cur_pur_accural_rows.pcdi_id
             and cccp.process_id = pc_process_id
             and cccp.element_id = cur_pur_accural_rows.element_id;
        exception
          when others then
            begin
              select cgcp.contract_price,
                     cgcp.price_unit_id,
                     cgcp.price_unit_weight_unit_id,
                     cgcp.price_unit_cur_id,
                     cgcp.price_unit_cur_code
                into vn_gmr_price,
                     vc_gmr_price_untit_id,
                     vn_price_unit_weight_unit_id,
                     vc_gmr_price_unit_cur_id,
                     vc_gmr_price_unit_cur_code
                from cgcp_conc_gmr_cog_price cgcp
               where cgcp.internal_gmr_ref_no =
                     cur_pur_accural_rows.internal_gmr_ref_no
                 and cgcp.internal_grd_ref_no =
                     cur_pur_accural_rows.internal_grd_ref_no
                 and cgcp.process_id = pc_process_id
                 and cgcp.element_id = cur_pur_accural_rows.element_id;
            exception
              when others then
                vn_gmr_price                 := null;
                vc_gmr_price_untit_id        := null;
                vn_price_unit_weight_unit_id := null;
                vc_gmr_price_unit_cur_id     := null;
                vc_gmr_price_unit_cur_code   := null;
            end;
          
        end;
        pkg_general.sp_get_main_cur_detail(vc_gmr_price_unit_cur_id,
                                           vc_price_cur_id,
                                           vc_price_cur_code,
                                           vn_cont_price_cur_id_factor,
                                           vn_cont_price_cur_decimals);
      
        vn_payable_amt_in_price_cur := round((vn_gmr_price /
                                             nvl(vn_gmr_price_unit_weight,
                                                  1)) *
                                             (pkg_general.f_get_converted_quantity(cur_pur_accural_rows.conc_product_id,
                                                                                   cur_pur_accural_rows.payable_qty_unit_id,
                                                                                   vn_price_unit_weight_unit_id,
                                                                                   cur_pur_accural_rows.payable_qty)) *
                                             vn_cont_price_cur_id_factor,
                                             vn_cont_price_cur_decimals);
      
        vn_fx_rate_price_to_pay   := pkg_general.f_get_converted_currency_amt(cur_pur_accural_rows.corporate_id,
                                                                              vc_gmr_price_unit_cur_id,
                                                                              cur_pur_accural_rows.pay_cur_id,
                                                                              pd_trade_date,
                                                                              1);
        vn_payable_amt_in_pay_cur := round(vn_payable_amt_in_price_cur *
                                           vn_fx_rate_price_to_pay,
                                           cur_pur_accural_rows.pay_cur_decimal);
        pkg_metals_general.sp_get_gmr_treatment_charge(cur_pur_accural_rows.internal_gmr_ref_no,
                                                       cur_pur_accural_rows.internal_grd_ref_no,
                                                       cur_pur_accural_rows.element_id,
                                                       pc_dbd_id,
                                                       vn_gmr_price,
                                                       vc_gmr_price_untit_id,
                                                       vn_gmr_treatment_charge,
                                                       vc_gmr_treatment_cur_id);
      
        -- converted treatment charges to base currency                                           
        vn_base_gmr_treatment_charge := round(pkg_general.f_get_converted_currency_amt(cur_pur_accural_rows.corporate_id,
                                                                                       vc_gmr_treatment_cur_id,
                                                                                       cur_pur_accural_rows.pay_cur_id,
                                                                                       pd_trade_date,
                                                                                       vn_gmr_treatment_charge),
                                              cur_pur_accural_rows.base_cur_decimal);
      
        pkg_metals_general.sp_get_gmr_refine_charge(cur_pur_accural_rows.internal_gmr_ref_no,
                                                    cur_pur_accural_rows.internal_grd_ref_no,
                                                    cur_pur_accural_rows.element_id,
                                                    pc_dbd_id,
                                                    vn_gmr_price,
                                                    vc_gmr_price_untit_id,
                                                    vn_gmr_refine_charge,
                                                    vc_gmr_refine_cur_id);
      
        --- converted refine charges to base currency                                              
      
        vn_base_gmr_refine_charge := round(pkg_general.f_get_converted_currency_amt(cur_pur_accural_rows.corporate_id,
                                                                                    vc_gmr_refine_cur_id,
                                                                                    cur_pur_accural_rows.pay_cur_id,
                                                                                    pd_trade_date,
                                                                                    vn_gmr_refine_charge),
                                           cur_pur_accural_rows.base_cur_decimal);
      end if;
      pkg_metals_general.sp_get_gmr_penalty_charge(cur_pur_accural_rows.internal_gmr_ref_no,
                                                   cur_pur_accural_rows.internal_grd_ref_no,
                                                   pc_dbd_id,
                                                   cur_pur_accural_rows.element_id,
                                                   vn_gmr_penality_charge,
                                                   vc_gmr_penality_cur_id);
    
      vn_base_gmr_penality_charge := round(pkg_general.f_get_converted_currency_amt(cur_pur_accural_rows.corporate_id,
                                                                                    vc_gmr_penality_cur_id,
                                                                                    cur_pur_accural_rows.pay_cur_id,
                                                                                    pd_trade_date,
                                                                                    vn_gmr_penality_charge),
                                           cur_pur_accural_rows.base_cur_decimal);
    
      insert into pa_purchase_accural
        (corporate_id,
         process_id,
         product_id,
         product_type,
         contract_type,
         cp_id,
         counterparty_name,
         gmr_ref_no,
         internal_gmr_ref_no,
         internal_grd_ref_no,
         element_id,
         element_name,
         payable_returnable_type,
         assay_content,
         assay_content_unit,
         payable_qty,
         payable_qty_unit_id,
         price,
         price_unit_id,
         price_unit_cur_id,
         price_unit_cur_code,
         fx_rate_price_to_pay,
         pay_in_cur_id,
         pay_in_cur_code,
         tcharges_amount,
         rcharges_amount,
         penalty_amount,
         payable_amt_price_ccy,
         payable_amt_pay_ccy,
         frightcharges_amount,
         othercharges_amount)
      values
        (cur_pur_accural_rows.corporate_id,
         pc_process_id,
         cur_pur_accural_rows.product_id,
         cur_pur_accural_rows.conc_product_name,
         cur_pur_accural_rows.contract_type,
         cur_pur_accural_rows.cp_id,
         cur_pur_accural_rows.counterparty_name,
         cur_pur_accural_rows.gmr_ref_no,
         cur_pur_accural_rows.internal_gmr_ref_no,
         cur_pur_accural_rows.internal_grd_ref_no,
         cur_pur_accural_rows.element_id,
         cur_pur_accural_rows.element_name,
         cur_pur_accural_rows.payable_type,
         cur_pur_accural_rows.assay_qty,
         cur_pur_accural_rows.assay_qty_unit_id,
         nvl(cur_pur_accural_rows.payable_qty, 0),
         nvl(cur_pur_accural_rows.payable_qty_unit_id,
             cur_pur_accural_rows.assay_qty_unit_id),
         vn_gmr_price,
         vc_gmr_price_untit_id,
         vc_gmr_price_unit_cur_id,
         vc_gmr_price_unit_cur_code,
         vn_fx_rate_price_to_pay,
         cur_pur_accural_rows.pay_cur_id,
         cur_pur_accural_rows.pay_cur_code,
         vn_base_gmr_treatment_charge,
         vn_base_gmr_refine_charge,
         vn_base_gmr_penality_charge,
         nvl(vn_payable_amt_in_price_cur, 0),
         nvl(vn_payable_amt_in_pay_cur, 0),
         0, --frightcharges_amount,
         0 --othercharges_amount    
         );
    end loop;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1001,
                          'sp_phy_purchase_accural Loop over');
    ---- Invoiced  GMR Level
    insert into pa_purchase_accural_gmr
      (corporate_id,
       process_id,
       eod_trade_date,
       product_id,
       product_type,
       contract_type,
       cp_id,
       counterparty_name,
       gmr_ref_no,
       element_id,
       element_name,
       payable_returnable_type,
       assay_content,
       assay_content_unit,
       payable_qty,
       payable_qty_unit_id,
       tcharges_amount,
       rcharges_amount,
       penalty_amount,
       payable_amt_pay_ccy,
       pay_in_cur_id,
       pay_in_cur_code,
       frightcharges_amount,
       othercharges_amount,
       tranascation_type)
      select temp.corporate_id,
             pc_process_id,
             pd_trade_date,
             temp.product_id,
             pdm_conc.product_desc,
             temp.contract_type,
             pcm.cp_id,
             phd.companyname,
             temp.gmr_ref_no,
             temp.element_id,
             aml.attribute_name,
             pcpch.payable_type,
             sum(temp.assay_qty) payable_qty,
             temp.assay_qty_unit assay_qty_unit,
             sum(temp.payble_qty) payable_qty,
             temp.payable_qty_unit payable_qty_unit_id,
             sum(temp.tcharges_amount) tcharges_amount,
             sum(temp.rcharges_amount) rcharges_amount,
             sum(temp.penalty_amount) penalty_amount,
             sum(temp.element_payable_amount) element_payable_amount,
             temp.invoice_currency_id,
             cm.cur_code,
             0,
             --oth_chagres.other_charges,
             case
               when dense_rank() over(partition by temp.gmr_ref_no order by
                         temp.element_id) = 1 then
                oth_chagres.other_charges
               else
                0
             end,
             'Invoiced'
        from (select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     iied.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     iied.element_invoiced_qty payble_qty,
                     iied.element_inv_qty_unit_id payable_qty_unit,
                     iied.element_payable_amount,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record     gmr,
                     grd_goods_record_detail       grd,
                     iid_invoicable_item_details   iid,
                     iied_inv_item_element_details iied,
                     ak_corporate                  akc,
                     cm_currency_master            cm,
                     iam_invoice_assay_mapping     iam,
                     ash_assay_header              ash,
                     asm_assay_sublot_mapping      asm,
                     pqca_pq_chemical_attributes   pqca,
                     rm_ratio_master               rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     iied.internal_invoice_ref_no
                 and iid.stock_id = iied.grd_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and iied.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              union all
              ----- assay qty
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     pqca.element_id,
                     gmr.contract_type,
                     (case
                       when rm.ratio_name = '%' then
                        (pqca.typical * asm.dry_weight) / 100
                       else
                        pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                             asm.net_weight_unit,
                                                             rm.qty_unit_id_denominator,
                                                             asm.dry_weight) *
                        pqca.typical
                     
                     end) assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm,
                     aml_attribute_master_list   aml
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and pqca.element_id = aml.attribute_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              ---- Tc Chrages
              union all
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     intc.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     intc.tcharges_amount tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     intc_inv_treatment_charges  intc,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     aml_attribute_master_list   aml,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     intc.internal_invoice_ref_no
                 and iid.stock_id = intc.grd_id
                 and gmr.corporate_id = akc.corporate_id
                 and intc.element_id = aml.attribute_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and intc.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              -- Rc Chargess
              union all
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     inrc.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     0 tcharges_amount,
                     inrc.rcharges_amount rcharges_amount,
                     0 penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     inrc_inv_refining_charges   inrc,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     aml_attribute_master_list   aml,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     inrc.internal_invoice_ref_no
                 and iid.stock_id = inrc.grd_id
                 and gmr.corporate_id = akc.corporate_id
                 and inrc.element_id = aml.attribute_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and inrc.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
              -- penality
              union all
              select grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.gmr_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iid.invoice_currency_id,
                     iepd.element_id,
                     gmr.contract_type,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 element_payable_amount,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     iepd.element_penalty_amount penalty_amount
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     iepd_inv_epenalty_details   iepd,
                     ak_corporate                akc,
                     cm_currency_master          cm,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.internal_invoice_ref_no =
                     iepd.internal_invoice_ref_no
                 and iid.stock_id = iepd.stock_id
                 and gmr.corporate_id = akc.corporate_id
                 and akc.base_cur_id = cm.cur_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and iepd.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and grd.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id) temp,
             pdm_productmaster pdm_conc,
             qat_quality_attributes qat,
             cpc_corporate_profit_center cpc,
             ak_corporate akc,
             cm_currency_master cm,
             aml_attribute_master_list aml,
             pcm_physical_contract_main pcm,
             phd_profileheaderdetails phd,
             pcpch_pc_payble_content_header pcpch,
             (select gmr.internal_gmr_ref_no,
                     iss.total_other_charge_amount other_charges
                from gmr_goods_movement_record gmr,
                     is_invoice_summary        iss
               where (iss.internal_invoice_ref_no, gmr.internal_gmr_ref_no) in
                     (select iid.internal_invoice_ref_no,
                             iid.internal_gmr_ref_no
                        from iid_invoicable_item_details iid
                       where iid.internal_invoice_ref_no =
                             iss.internal_invoice_ref_no
                         and iid.internal_gmr_ref_no =
                             gmr.internal_gmr_ref_no
                         and gmr.latest_internal_invoice_ref_no =
                             iss.internal_invoice_ref_no
                         and iss.is_active = 'Y'
                         and iss.process_id = pc_process_id
                         and gmr.process_id = pc_process_id)) oth_chagres
       where temp.product_id = pdm_conc.product_id
         and temp.quality_id = qat.quality_id(+)
         and temp.profit_center_id = cpc.profit_center_id
         and temp.corporate_id = akc.corporate_id
         and temp.element_id = aml.attribute_id
         and temp.invoice_currency_id = cm.cur_id
         and temp.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.cp_id = phd.profileid
         and pcm.cp_id = phd.profileid
         and temp.internal_contract_ref_no =
             pcpch.internal_contract_ref_no(+)
         and temp.element_id = pcpch.element_id(+)
         and pcm.process_id = pc_process_id
         and pcpch.process_id(+) = pc_process_id
         and pcm.is_active = 'Y'
         and pcpch.is_active(+) = 'Y'
         and temp.internal_gmr_ref_no = oth_chagres.internal_gmr_ref_no(+)
       group by temp.corporate_id,
                pc_process_id,
                temp.product_id,
                pdm_conc.product_desc,
                pcm.cp_id,
                temp.contract_type,
                phd.companyname,
                temp.gmr_ref_no,
                temp.element_id,
                aml.attribute_name,
                pcpch.payable_type,
                temp.invoice_currency_id,
                temp.payable_qty_unit,
                temp.assay_qty_unit,
                cm.cur_code,
                oth_chagres.other_charges;
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1002,
                          'sp_phy_purchase_accural GMR Level');
    --calucalted GMR Leval             
    insert into pa_purchase_accural_gmr
      (corporate_id,
       process_id,
       eod_trade_date,
       product_id,
       product_type,
       contract_type,
       cp_id,
       counterparty_name,
       gmr_ref_no,
       element_id,
       element_name,
       payable_returnable_type,
       assay_content,
       assay_content_unit,
       payable_qty,
       payable_qty_unit_id,
       price,
       price_unit_id,
       price_unit_cur_id,
       price_unit_cur_code,
       pay_in_cur_id,
       pay_in_cur_code,
       payable_amt_price_ccy,
       payable_amt_pay_ccy,
       fx_rate_price_to_pay,
       tcharges_amount,
       rcharges_amount,
       penalty_amount,
       frightcharges_amount,
       othercharges_amount,
       tranascation_type)
      select pa.corporate_id,
             pc_process_id,
             pd_trade_date,
             pa.product_id,
             pa.product_type,
             pa.contract_type,
             pa.cp_id,
             pa.counterparty_name,
             pa.gmr_ref_no,
             pa.element_id,
             pa.element_name,
             pa.payable_returnable_type,
             sum(pa.assay_content),
             pa.assay_content_unit,
             sum(pa.payable_qty),
             pa.payable_qty_unit_id,
             pa.price,
             pa.price_unit_id,
             pa.price_unit_cur_id,
             pa.price_unit_cur_code,
             pa.pay_in_cur_id,
             pa.pay_in_cur_code,
             sum(pa.payable_amt_price_ccy),
             sum(pa.payable_amt_pay_ccy),
             pa.fx_rate_price_to_pay,
             sum(pa.tcharges_amount),
             sum(pa.rcharges_amount),
             sum(pa.penalty_amount),
             0,
             0,
             'Calculated'
        from pa_purchase_accural pa
       where pa.process_id = pc_process_id
         and pa.corporate_id = pc_corporate_id
       group by pa.corporate_id,
                pc_process_id,
                pa.product_id,
                pa.product_type,
                pa.contract_type,
                pa.cp_id,
                pa.counterparty_name,
                pa.gmr_ref_no,
                pa.element_id,
                pa.element_name,
                pa.payable_returnable_type,
                pa.assay_content_unit,
                pa.payable_qty_unit_id,
                pa.price,
                pa.price_unit_id,
                pa.price_unit_cur_id,
                pa.price_unit_cur_code,
                pa.pay_in_cur_id,
                pa.pay_in_cur_code,
                pa.fx_rate_price_to_pay;
    commit;
  
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1003,
                          'sp_phy_purchase_accural Calcualted GMR Level');
    -- diff GMR level
  
    insert into pa_purchase_accural_gmr
      (corporate_id,
       process_id,
       eod_trade_date,
       product_id,
       product_type,
       contract_type,
       cp_id,
       counterparty_name,
       gmr_ref_no,
       element_id,
       element_name,
       payable_returnable_type,
       assay_content,
       assay_content_unit,
       payable_qty,
       payable_qty_unit_id,
       tcharges_amount,
       rcharges_amount,
       penalty_amount,
       payable_amt_pay_ccy,
       payable_amt_price_ccy,
       pay_in_cur_id,
       pay_in_cur_code,
       frightcharges_amount,
       othercharges_amount,
       tranascation_type)
      select pa.corporate_id,
             pc_process_id,
             pd_trade_date,
             pa.product_id,
             pa.product_type,
             pa.contract_type,
             pa.cp_id,
             pa.counterparty_name,
             pa.gmr_ref_no,
             pa.element_id,
             pa.element_name,
             pa.payable_returnable_type,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.assay_content
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.assay_content
                              else
                               0
                            end) assay_content,
             pa.assay_content_unit,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.payable_qty
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.payable_qty
                              else
                               0
                            end) payable_qty,
             pa.payable_qty_unit_id,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.tcharges_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.tcharges_amount
                              else
                               0
                            end) tcharges_amount,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.rcharges_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.rcharges_amount
                              else
                               0
                            end) rcharges_amount,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.penalty_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.penalty_amount
                              else
                               0
                            end) penalty_amount,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.payable_amt_pay_ccy
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.payable_amt_pay_ccy
                              else
                               0
                            end) payable_amount_pay_ccy,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.payable_amt_price_ccy
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.payable_amt_price_ccy
                              else
                               0
                            end) payable_amount_price_ccy,
             pa.pay_in_cur_id,
             pa.pay_in_cur_code,
             0,
             sum(case
                   when pa.tranascation_type = 'Calculated' then
                    pa.othercharges_amount
                   else
                    0
                 end) - sum(case
                              when pa.tranascation_type = 'Invoiced' then
                               pa.othercharges_amount
                              else
                               0
                            end) othercharges_amount,
             'Difference'
        from pa_purchase_accural_gmr pa
       where pa.process_id = pc_process_id
         and pa.corporate_id = pc_corporate_id
       group by pa.corporate_id,
                pc_process_id,
                pa.product_id,
                pa.product_type,
                pa.contract_type,
                pa.cp_id,
                pa.counterparty_name,
                pa.gmr_ref_no,
                pa.element_id,
                pa.element_name,
                pa.payable_returnable_type,
                pa.assay_content_unit,
                pa.payable_qty_unit_id,
                pa.pay_in_cur_id,
                pa.pay_in_cur_code;
  
    commit;
  
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1004,
                          'sp_phy_purchase_accural End');
  end;

  procedure sp_calc_overall_realized_pnl
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_calc_overall_realized_pnl
    --        author                                    : 
    --        created date                              : 
    --        purpose                                   : popualte overall realized data
    --
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pd_trade_date                             : trade date
    --        pc_process_id                             : eod reference no
    --
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_process_id   varchar2,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    --Realized Today', 'Previously Realized PNL Change
    insert into ord_overall_realized_pnl_daily
      (section_name,
       sub_section_name,
       section_id,
       order_id,
       cost_created_date,
       process_id,
       eod_date,
       corporate_id,
       corporate_name,
       base_qty_unit,
       base_cur_code,
       base_qty_unit_id,
       base_cur_id,
       base_cur_decimals,
       base_qty_decimals,
       profit_center_name,
       profit_center_id,
       profit_center_short_name,
       customer_name,
       customer_id,
       journal_type,
       realization_date,
       transaction_ref_no,
       contract_ref_no,
       contract_details,
       cost_id,
       cost_name,
       price_fixation_status,
       current_qty,
       qty_in_units,
       current_amount,
       previous_realized_qty,
       previous_realized_amount,
       cost_month,
       transact_cur_id,
       transact_cur_code,
       transact_cur_decimals,
       transact_amt,
       internal_contract_item_ref_no,
       int_alloc_group_id,
       internal_stock_ref_no)
      select t.section_name,
             t.sub_section_name,
             t.section_id,
             t.order_id,
             t.cost_created_date,
             t.process_id,
             t.eod_date,
             t.corporate_id,
             t.corporate_name,
             t.base_qty_unit,
             t.base_currency_unit,
             t.base_qty_unit_id,
             t.base_currency_unit_id,
             2, -- t.base_currency_decimals,
             2, -- t.base_qty_decimals,
             t.books,
             t.book_id,
             t.book_short_name,
             t.customer_name,
             t.customer_id,
             t.journal_type,
             t.realization_date,
             t.transaction_ref_no,
             t.contract_ref_no,
             t.contract_details,
             t.cost_id,
             t.cost_name,
             t.price_fixation_status,
             t.current_qty,
             t.quantity_in_units,
             t.current_amount,
             t.previous_realized_qty,
             t.previous_realized_amount,
             t.month,
             t.transact_cur_id,
             t.transact_cur_code,
             2, -- t.transact_cur_decimals,
             t.transact_amount,
             t.internal_contract_item_ref_no,
             t.int_alloc_group_id,
             t.internal_stock_ref_no
        from (select (case
                       when prd.realized_type = 'Realized Today' then
                        'Realized on this Day'
                       when prd.realized_type = 'Special Settlements' then
                        'Special Settlements'
                       when prd.realized_type =
                            'Previously Realized PNL Change' then
                        'Change in PNL for Previously Realized Contracts'
                       else
                        'Others'
                     end) section_name,
                     decode(r, 1, 'Sales', 2, 'SS') sub_section_name,
                     (case
                       when prd.realized_type in
                            ('Realized Today', 'Special Settlements') then
                        1
                       else
                        2
                     end) section_id,
                     decode(r, 1, 1, 3) order_id,
                     prd.realized_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     prd.corporate_id corporate_id,
                     prd.corporate_name corporate_name,
                     prd.base_qty_unit base_qty_unit,
                     prd.base_cur_code base_currency_unit,
                     prd.base_qty_unit_id base_qty_unit_id,
                     prd.base_cur_id base_currency_unit_id,
                     3 base_currency_decimals,
                     3 base_qty_decimals,
                     prd.profit_center_name books,
                     prd.profit_center_id book_id,
                     prd.profit_center_short_name book_short_name,
                     prd.cp_name customer_name,
                     prd.cp_profile_id customer_id,
                     'Sales' journal_type,
                     trunc(prd.realized_date) realization_date,
                     null transaction_ref_no, -- prd.invoice_ref_no
                     prd.alloc_group_name contract_ref_no,
                     (case
                       when prd.contract_type = 'S' then
                        prd.contract_ref_no
                       else
                        prd.gmr_ref_no
                     end) contract_details,
                     '' cost_id,
                     '' cost_name,
                     prd.price_fixation_status,
                     decode(r, 1, prd.item_qty_in_base_qty_unit, 2, 0) current_qty,
                     0 quantity_in_units,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        decode(r,
                               1,
                               prd.contract_invoice_value,
                               2,
                               prd.secondary_cost_value)
                       when prd.realized_type = 'Special Settlements' then
                        decode(r,
                               1,
                               0, --prd.income_expense,
                               2,
                               prd.secondary_cost_value)
                       else
                        decode(r,
                               1,
                               prd.contract_invoice_value,
                               2,
                               prd.secondary_cost_value)
                     end) current_amount,
                     pkg_general.f_get_converted_quantity(prd.product_id,
                                                          prd.prev_real_qty_id,
                                                          prd.base_qty_unit_id,
                                                          prd.prev_real_qty) previous_realized_qty,
                     decode(r,
                            1,
                            prd.prev_real_contract_value,
                            2,
                            prd.prev_real_secondary_cost) previous_realized_amount,
                     cast(null as date) month,
                     '' transact_cur_id,
                     '' transact_cur_code,
                     3 transact_cur_decimals,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        0
                       when prd.realized_type = 'Special Settlements' then
                        0 --prd.income_expense
                       else
                        0
                     end) transact_amount,
                     prd.internal_contract_item_ref_no,
                     prd.int_alloc_group_id,
                     prd.internal_stock_ref_no
                from prd_physical_realized_daily prd,
                     tdc_trade_date_closure tdc,
                     (select rownum r from all_objects where rownum <= 2)
               where prd.process_id = tdc.process_id
                 and prd.process_id = pc_process_id
                 and prd.contract_type = 'S'
                 and prd.realized_type in
                     ('Realized Today', 'Previously Realized PNL Change',
                      'Special Settlements')
              
              union all
              
              select (case
                       when prd.realized_type = 'Realized Today' then
                        'Realized on this Day'
                       when prd.realized_type = 'Special Settlements' then
                        'Special Settlements'
                       when prd.realized_type =
                            'Previously Realized PNL Change' then
                        'Change in PNL for Previously Realized Contracts'
                       else
                        'Others'
                     end) section_name,
                     'COGS' sub_section_name,
                     (case
                       when prd.realized_type in
                            ('Realized Today', 'Special Settlements') then
                        1
                       else
                        2
                     end) section_id,
                     2 order_id,
                     prd.realized_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     prd.corporate_id corporate_id,
                     prd.corporate_name corporate_name,
                     prd.base_qty_unit base_qty_unit,
                     prd.base_cur_code base_currency_unit,
                     prd.base_qty_unit_id base_qty_unit_id,
                     prd.base_cur_id base_currency_unit_id,
                     3 base_currency_decimals,
                     3 base_qty_decimals,
                     prd.profit_center_name books,
                     prd.profit_center_id book_id,
                     prd.profit_center_short_name book_short_name,
                     prd.cp_name customer_name,
                     prd.cp_profile_id customer_id,
                     'COGS' journal_type,
                     trunc(prd.realized_date) realization_date,
                     null transaction_ref_no, -- prd.invoice_ref_no
                     prd.alloc_group_name contract_ref_no,
                     (case
                       when prd.contract_type = 'S' then
                        prd.contract_ref_no
                       else
                        prd.gmr_ref_no
                     end) contract_details,
                     '' cost_id,
                     '' cost_name,
                     prd.price_fixation_status price_fixation_status,
                     sum(prd.item_qty_in_base_qty_unit) current_qty,
                     0 quantity_in_units,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        sum(prd.cog_net_sale_value)
                       when prd.realized_type = 'Special Settlements' then
                        0 -- SUM(prd.income_expense)
                       else
                        sum(prd.cog_net_sale_value)
                     end) current_amount,
                     -- SUM(prd.cog_net_sale_value) current_amount,
                     sum(pkg_general.f_get_converted_quantity(prd.product_id,
                                                              prd.prev_real_qty_id,
                                                              prd.base_qty_unit_id,
                                                              prd.prev_real_qty)) previous_realized_qty,
                     sum(prd.prev_real_cog_net_sale_value) previous_realized_amount,
                     null month,
                     '' transact_cur_id,
                     '' transact_cur_code,
                     3 transact_cur_decimals,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        0
                       when prd.realized_type = 'Special Settlements' then
                        0 -- prd.income_expense
                       else
                        0
                     end) transact_amount,
                     prd.internal_contract_item_ref_no,
                     prd.int_alloc_group_id,
                     prd.internal_stock_ref_no
                from prd_physical_realized_daily prd,
                     tdc_trade_date_closure      tdc
               where prd.process_id = tdc.process_id
                 and prd.process_id = pc_process_id
                 and prd.contract_type = 'P'
                 and prd.realized_type in
                     ('Realized Today', 'Previously Realized PNL Change',
                      'Special Settlements')
               group by prd.realized_type,
                        prd.realized_date,
                        prd.corporate_id,
                        prd.corporate_name,
                        prd.base_qty_unit,
                        prd.base_cur_code,
                        prd.base_qty_unit_id,
                        prd.base_cur_id,
                        prd.profit_center_name,
                        prd.profit_center_id,
                        prd.profit_center_short_name,
                        prd.cp_name,
                        prd.cp_profile_id,
                        
                        prd.alloc_group_name,
                        (case
                          when prd.contract_type = 'S' then
                           prd.contract_ref_no
                          else
                           prd.gmr_ref_no
                        end),
                        prd.price_fixation_status,
                        (case
                          when prd.realized_type = 'Realized Today' then
                           0
                          when prd.realized_type = 'Special Settlements' then
                           0 --prd.income_expense
                          else
                           0
                        end),
                        prd.internal_contract_item_ref_no,
                        prd.int_alloc_group_id,
                        prd.internal_stock_ref_no
              
              union all
              select 'Reverse Realized' section_name,
                     decode(r, 1, 'Sales', 2, 'SS') sub_section_name,
                     3 section_id,
                     decode(r, 1, 1, 3) order_id,
                     prd.realized_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     prd.corporate_id corporate_id,
                     prd.corporate_name corporate_name,
                     prd.base_qty_unit base_qty_unit,
                     prd.base_cur_code base_currency_unit,
                     prd.base_qty_unit_id base_qty_unit_id,
                     prd.base_cur_id base_currency_unit_id,
                     3 base_currency_decimals,
                     3 base_qty_decimals,
                     prd.profit_center_name books,
                     prd.profit_center_id book_id,
                     prd.profit_center_short_name book_short_name,
                     prd.cp_name customer_name,
                     prd.cp_profile_id customer_id,
                     'Sales' journal_type,
                     trunc(prd.realized_date) realization_date,
                     null transaction_ref_no, --prd.invoice_ref_no
                     prd.alloc_group_name contract_ref_no,
                     (case
                       when prd.contract_type = 'S' then
                        prd.contract_ref_no
                       else
                        prd.gmr_ref_no
                     end) contract_details,
                     '' cost_id,
                     '' cost_name,
                     prd.price_fixation_status price_fixation_status,
                     decode(r, 1, prd.item_qty_in_base_qty_unit, 2, 0) current_qty,
                     0 quantity_in_units,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        decode(r,
                               1,
                               prd.contract_invoice_value,
                               2,
                               prd.secondary_cost_value)
                       when prd.realized_type = 'Special Settlements' then
                        decode(r,
                               1,
                               0, --prd.income_expense,
                               2,
                               prd.secondary_cost_value)
                       else
                        decode(r,
                               1,
                               prd.contract_invoice_value,
                               2,
                               prd.secondary_cost_value)
                     end) current_amount,
                     pkg_general.f_get_converted_quantity(prd.product_id,
                                                          prd.prev_real_qty_id,
                                                          prd.base_qty_unit_id,
                                                          prd.prev_real_qty) previous_realized_qty,
                     decode(r,
                            1,
                            prd.prev_real_contract_value,
                            2,
                            prd.prev_real_secondary_cost) previous_realized_amount,
                     null month,
                     '' transact_cur_id,
                     '' transact_cur_code,
                     3 transact_cur_decimals,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        0
                       when prd.realized_type = 'Special Settlements' then
                        0 --prd.income_expense
                       else
                        0
                     end) transact_amount,
                     prd.internal_contract_item_ref_no,
                     prd.int_alloc_group_id,
                     prd.internal_stock_ref_no
                from prd_physical_realized_daily prd,
                     tdc_trade_date_closure tdc,
                     (select rownum r from all_objects where rownum <= 2)
               where prd.process_id = tdc.process_id
                 and prd.process_id = pc_process_id
                 and prd.contract_type = 'S'
                 and prd.realized_type in
                     ('Reverse Realized', 'Reversal of Special Settlements')
              
              union all
              select 'Reverse Realized' section_name,
                     'COGS' sub_section_name,
                     3 section_id,
                     2 order_id,
                     prd.realized_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     prd.corporate_id corporate_id,
                     prd.corporate_name corporate_name,
                     prd.base_qty_unit base_qty_unit,
                     prd.base_cur_code base_currency_unit,
                     prd.base_qty_unit_id base_qty_unit_id,
                     prd.base_cur_id base_currency_unit_id,
                     3 base_currency_decimals,
                     3 base_qty_decimals,
                     prd.profit_center_name books,
                     prd.profit_center_id book_id,
                     prd.profit_center_short_name book_short_name,
                     prd.cp_name customer_name,
                     prd.cp_profile_id customer_id,
                     'COGS' journal_type,
                     trunc(prd.realized_date) realization_date,
                     null transaction_ref_no, --prd.invoice_ref_no
                     prd.alloc_group_name contract_ref_no,
                     (case
                       when prd.contract_type = 'S' then
                        prd.contract_ref_no
                       else
                        prd.gmr_ref_no
                     end) contract_details,
                     '' cost_id,
                     '' cost_name,
                     prd.price_fixation_status price_fixation_status,
                     sum(prd.item_qty_in_base_qty_unit) current_qty,
                     0 quantity_in_units,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        sum(abs(prd.cog_net_sale_value))
                       when prd.realized_type = 'Special Settlements' then
                        0 -- SUM(prd.income_expense)
                       else
                        sum(abs(prd.cog_net_sale_value))
                     end) current_amount,
                     --SUM(abs(prd.cog_net_sale_value)) current_amount,
                     sum(pkg_general.f_get_converted_quantity(prd.product_id,
                                                              prd.prev_real_qty_id,
                                                              prd.base_qty_unit_id,
                                                              prd.prev_real_qty)) previous_realized_qty,
                     sum(prd.prev_real_cog_net_sale_value) previous_realized_amount,
                     null month,
                     '' transact_cur_id,
                     '' transact_cur_code,
                     3 transact_cur_decimals,
                     (case
                       when prd.realized_type = 'Realized Today' then
                        0
                       when prd.realized_type = 'Special Settlements' then
                        0 --prd.income_expense
                       else
                        0
                     end) transact_amount,
                     prd.internal_contract_item_ref_no,
                     prd.int_alloc_group_id,
                     prd.internal_stock_ref_no
                from prd_physical_realized_daily prd,
                     tdc_trade_date_closure      tdc
               where prd.process_id = tdc.process_id
                 and prd.process_id = pc_process_id
                 and prd.contract_type = 'P'
                 and prd.realized_type in
                     ('Reverse Realized', 'Reversal of Special Settlements')
               group by prd.realized_date,
                        prd.realized_type,
                        prd.corporate_id,
                        prd.corporate_name,
                        prd.base_qty_unit,
                        prd.base_cur_code,
                        prd.base_qty_unit_id,
                        prd.base_cur_id,
                        prd.profit_center_name,
                        prd.profit_center_id,
                        prd.profit_center_short_name,
                        prd.cp_name,
                        prd.cp_profile_id,
                        
                        prd.alloc_group_name,
                        (case
                          when prd.contract_type = 'S' then
                           prd.contract_ref_no
                          else
                           prd.gmr_ref_no
                        end),
                        prd.price_fixation_status,
                        (case
                          when prd.realized_type = 'Realized Today' then
                           0
                          when prd.realized_type = 'Special Settlements' then
                           0 --prd.income_expense
                          else
                           0
                        end),
                        prd.internal_contract_item_ref_no,
                        prd.int_alloc_group_id,
                        prd.internal_stock_ref_no
              
              union all
              --Debit -- Credit Note--
              select 'Debit/Credit Note' section_name,
                     invs.invoice_type_name sub_section_name,
                     6 section_id,
                     1 order_id,
                     invs.invoice_issue_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     invs.corporate_id corporate_id,
                     akc.corporate_name corporate_name,
                     '' base_qty_unit,
                     akc.base_currency_name base_currency_unit,
                     '' base_qty_unit_id,
                     cm_b.cur_id base_currency_unit_id,
                     cm_b.decimals base_currency_decimals,
                     0 base_qty_decimals,
                     cpc.profit_center_name books,
                     invs.profit_center_id book_id,
                     cpc.profit_center_short_name book_short_name,
                     phd.companyname customer_name,
                     invs.cp_id customer_id,
                     invs.invoice_type_name journal_type,
                     invs.invoice_issue_date realization_date,
                     invs.invoice_ref_no transaction_ref_no, -- Invoice Ref no
                     gmr.gmr_ref_no contract_ref_no, --GMR ref no
                     '-NA-' contract_details,
                     '-NA-' cost_id,
                     '-NA-' cost_name,
                     '' price_fixation_status,
                     0 current_qty,
                     0 quantity_in_units,
                     ((case
                       when invs.invoice_type_name = 'Credit Note General' then
                        -1
                       else
                        1
                     end) * nvl(invs.total_invoice_item_amount, 0) -
                     nvl(invs.amount_paid, 0) * invs.fx_to_base) current_amount,
                     0 previous_realized_qty,
                     0 previous_realized_amount,
                     invs.invoice_issue_date month,
                     invs.invoice_cur_id transact_cur_id,
                     cm.cur_code transact_cur_code,
                     cm.decimals transact_cur_decimals,
                     nvl((invs.total_invoice_item_amount -
                         nvl((invs.amount_paid), 0)),
                         0) transact_amount,
                     null internal_contract_item_ref_no,
                     null int_alloc_group_id,
                     null internal_stock_ref_no
                from is_invoice_summary         invs,
                     pcm_physical_contract_main pcm,
                     gmr_goods_movement_record  gmr,
                     phd_profileheaderdetails   phd,
                     cm_currency_master         cm,
                     ak_corporate               akc,
                     cm_currency_master         cm_b,
                     --scm_service_charge_master    scm,
                     cpc_corporate_profit_center cpc
               where invs.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and gmr.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and invs.invoice_type = 'DebitCreditNote'
                 and invs.invoice_type_name in
                     ('Credit Note General', 'Debit Note General')
                 and invs.invoice_status = 'Active'
                 and invs.cp_id = phd.profileid
                 and cm.cur_id = invs.invoice_cur_id
                 and invs.corporate_id = akc.corporate_id
                 and akc.base_currency_name = cm_b.cur_code
                 and invs.profit_center_id = cpc.profit_center_id
                 and invs.invoice_issue_date <= pd_trade_date
                 and invs.process_id = pcm.process_id
                 and pcm.process_id = gmr.process_id
                 and gmr.process_id = pc_process_id
                 and invs.is_invoice_new = 'Y' --need to do this marking....
              
              union all
              select 'Debit/Credit Note' section_name,
                     invs.invoice_type_name || ' Cancelled' sub_section_name,
                     6 section_id,
                     1 order_id,
                     invs.invoice_issue_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     invs.corporate_id corporate_id,
                     akc.corporate_name corporate_name,
                     '' base_qty_unit,
                     akc.base_currency_name base_currency_unit,
                     '' base_qty_unit_id,
                     cm_b.cur_id base_currency_unit_id,
                     cm_b.decimals base_currency_decimals,
                     0 base_qty_decimals,
                     cpc.profit_center_name books,
                     invs.profit_center_id book_id,
                     cpc.profit_center_short_name book_short_name,
                     phd.companyname customer_name,
                     invs.cp_id customer_id,
                     invs.invoice_type_name journal_type,
                     invs.invoice_issue_date realization_date,
                     invs.invoice_ref_no transaction_ref_no, -- Invoice Ref no
                     gmr.gmr_ref_no contract_ref_no, --GMR ref no
                     '-NA-' contract_details,
                     '-NA-' cost_id,
                     '-NA-' cost_name,
                     '' price_fixation_status,
                     0 current_qty,
                     0 quantity_in_units,
                     (case
                       when invs.invoice_type_name = 'Credit Note General' then
                        -1
                       else
                        1
                     end) * (nvl(invs.total_invoice_item_amount -
                                 nvl(invs.amount_paid, 0),
                                 0) * (-1) * invs.fx_to_base) current_amount,
                     0 previous_realized_qty,
                     0 previous_realized_amount,
                     invs.invoice_issue_date month,
                     invs.invoice_cur_id transact_cur_id,
                     cm.cur_code transact_cur_code,
                     cm.decimals transact_cur_decimals,
                     (-1) * nvl((invs.total_invoice_item_amount -
                                nvl((invs.amount_paid), 0)),
                                0) transact_amount,
                     null internal_contract_item_ref_no,
                     null int_alloc_group_id,
                     null internal_stock_ref_no
                from is_invoice_summary         invs,
                     pcm_physical_contract_main pcm,
                     gmr_goods_movement_record  gmr,
                     phd_profileheaderdetails   phd,
                     cm_currency_master         cm,
                     ak_corporate               akc,
                     cm_currency_master         cm_b,
                     --scm_service_charge_master    scm,
                     cpc_corporate_profit_center cpc
               where invs.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and gmr.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and invs.invoice_type = 'DebitCreditNote'
                 and invs.invoice_type_name in
                     ('Credit Note General', 'Debit Note General')
                 and invs.invoice_status = 'Active'
                 and invs.cp_id = phd.profileid
                 and cm.cur_id = invs.invoice_cur_id
                 and invs.corporate_id = akc.corporate_id
                 and akc.base_currency_name = cm_b.cur_code
                 and invs.profit_center_id = cpc.profit_center_id
                 and invs.invoice_issue_date <= pd_trade_date
                 and invs.process_id = pcm.process_id
                 and pcm.process_id = gmr.process_id
                 and gmr.process_id = pc_process_id
                 and invs.is_cancelled_today = 'Y' --need to do this marking...
              --Ends here
              union all
              select 'Miscellaneous Costs' section_name,
                     'Miscellaneous Costs' sub_section_name,
                     9 section_id,
                     1 order_id,
                     eodc.closed_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     akc.corporate_id corporate_id,
                     akc.corporate_name corporate_name,
                     '' base_qty_unit,
                     akc.base_currency_name base_currency_unit,
                     '' base_qty_unit_id,
                     cm_b.cur_id base_currency_unit_id,
                     cm_b.decimals base_currency_decimals,
                     0 base_qty_decimals,
                     cpc.profit_center_name profit_center_name,
                     cpc.profit_center_id profit_center_id,
                     cpc.profit_center_short_name profit_center_short_name,
                     '' customer_name,
                     '' customer_id,
                     scm.cost_display_name journal_type,
                     eodc.closed_date realization_date,
                     '-NA-' transaction_ref_no, -- Invoice Ref no
                     '-NA-' contract_ref_no, --GMR ref no
                     '-NA-' contract_details,
                     scm.cost_id cost_id,
                     scm.cost_display_name cost_name,
                     '' price_fixation_status,
                     0 current_qty,
                     0 quantity_in_units,
                     nvl(to_number(eodcd.cost_value), 0) current_amount,
                     0 previous_realized_qty,
                     0 previous_realized_amount,
                     eodc.closed_date month,
                     eodcd.currency_id transact_cur_id,
                     cm.cur_code transact_cur_code,
                     cm.decimals transact_cur_decimals,
                     nvl(to_number(eodcd.cost_value), 0) transact_amount,
                     null internal_contract_item_ref_no,
                     null int_alloc_group_id,
                     null internal_stock_ref_no
                from eodc_end_of_day_costs@eka_appdb         eodc,
                     eodcd_end_of_day_cost_details@eka_appdb eodcd,
                     cpc_corporate_profit_center             cpc,
                     scm_service_charge_master               scm,
                     tdc_trade_date_closure                  tdc,
                     ak_corporate                            akc,
                     cm_currency_master                      cm_b,
                     cm_currency_master                      cm
               where eodc.eodc_id = eodcd.eodc_id
                 and eodcd.profit_center_id = cpc.profit_center_id
                 and eodcd.cost_id = scm.cost_id
                 and eodcd.currency_id = cm.cur_id
                 and akc.base_cur_id = cm_b.cur_id
                 and tdc.trade_date = pd_trade_date
                 and eodc.closed_date = pd_trade_date
                 and eodc.corporate_id = pc_corporate_id
                 and cpc.corporateid = pc_corporate_id
                 and eodc.corporate_id = akc.corporate_id
                 and tdc.process_id = pc_process_id
              --Ends here
              union all
              
              select 'General- Accruals' section_name,
                     'General-Original Accruals' sub_section_name,
                     10 section_id,
                     1 order_id,
                     cs.effective_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     akc.corporate_id corporate_id,
                     akc.corporate_name corporate_name,
                     '' base_qty_unit,
                     akc.base_currency_name base_currency_unit,
                     '' base_qty_unit_id,
                     cm_b.cur_id base_currency_unit_id,
                     cm_b.decimals base_currency_decimals,
                     0 base_qty_decimals,
                     cpc.profit_center_name profit_center_name,
                     cpc.profit_center_id profit_center_id,
                     cpc.profit_center_short_name profit_center_short_name,
                     phd.companyname customer_name,
                     phd.profileid customer_id,
                     scm.cost_display_name journal_type,
                     cs.effective_date realization_date,
                     '-NA-' transaction_ref_no, -- Invoice Ref no
                     '-NA-' contract_ref_no, --GMR ref no
                     '-NA-' contract_details,
                     scm.cost_id cost_id,
                     scm.cost_display_name cost_name,
                     '' price_fixation_status,
                     0 current_qty,
                     0 quantity_in_units,
                     nvl(cs.base_amt, 0) current_amount, --* mc.transaction_amt_sign
                     0 previous_realized_qty,
                     0 previous_realized_amount,
                     cs.effective_date month,
                     cm.cur_id transact_cur_id,
                     cm.cur_code transact_cur_code,
                     cm.decimals transact_cur_decimals,
                     nvl(cs.transaction_amt, 0) transact_amount,
                     null internal_contract_item_ref_no,
                     null int_alloc_group_id,
                     null internal_stock_ref_no
                from cs_cost_store               cs,
                     cigc_contract_item_gmr_cost cigc,
                     pci_physical_contract_item  pci,
                     pcdi_pc_delivery_item       pcdi,
                     pcpd_pc_product_definition  pcpd,
                     grd_goods_record_detail     grd,
                     scm_service_charge_master   scm,
                     cpc_corporate_profit_center cpc,
                     tdc_trade_date_closure      tdc,
                     ak_corporate                akc,
                     phd_profileheaderdetails    phd,
                     cm_currency_master          cm_b,
                     cm_currency_master          cm
               where cs.cost_component_id = scm.cost_id
                 and cs.base_amt_cur_id = cm_b.cur_id
                 and cs.transaction_amt_cur_id = cm.cur_id
                 and cigc.int_contract_item_ref_no =
                     pci.internal_contract_item_ref_no(+)
                 and pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                    
                 and pcpd.input_output = 'Input'
                 and grd.internal_grd_ref_no(+) = cigc.internal_grd_ref_no
                 and (case when cigc.int_contract_item_ref_no is null then
                      grd.profit_center_id else pcpd.profit_center_id end) =
                     cpc.profit_center_id
                 and tdc.trade_date = pd_trade_date
                 and scm.reversal_type not in ('CONTRACT')
                 and cs.process_id = tdc.process_id
                 and pci.process_id = tdc.process_id
                 and pcdi.process_id = tdc.process_id
                 and pcpd.process_id = tdc.process_id
                    
                 and tdc.process_id = pc_process_id
                 and cpc.corporateid = pc_corporate_id
                 and cpc.corporateid = akc.corporate_id
                 and cs.is_deleted = 'N'
                 and cs.counter_party_id = phd.profileid(+)
              union all
              
              select 'General- Accruals' section_name,
                     'Actual without Accruals' sub_section_name,
                     10 section_id,
                     1 order_id,
                     cs.effective_date cost_created_date,
                     pc_process_id process_id,
                     pd_trade_date eod_date,
                     akc.corporate_id corporate_id,
                     akc.corporate_name corporate_name,
                     '' base_qty_unit,
                     akc.base_currency_name base_currency_unit,
                     '' base_qty_unit_id,
                     cm_b.cur_id base_currency_unit_id,
                     cm_b.decimals base_currency_decimals,
                     0 base_qty_decimals,
                     cpc.profit_center_name profit_center_name,
                     cpc.profit_center_id profit_center_id,
                     cpc.profit_center_short_name profit_center_short_name,
                     phd.companyname customer_name,
                     phd.profileid customer_id,
                     scm.cost_display_name journal_type,
                     cs.effective_date realization_date,
                     '-NA-' transaction_ref_no, -- Invoice Ref no
                     '-NA-' contract_ref_no, --GMR ref no
                     '-NA-' contract_details,
                     scm.cost_id cost_id,
                     scm.cost_display_name cost_name,
                     '' price_fixation_status,
                     0 current_qty,
                     0 quantity_in_units,
                     nvl(cs.base_amt, 0) current_amount, --* mc.transaction_amt_sign
                     0 previous_realized_qty,
                     0 previous_realized_amount,
                     cs.effective_date month,
                     cm.cur_id transact_cur_id,
                     cm.cur_code transact_cur_code,
                     cm.decimals transact_cur_decimals,
                     nvl(cs.transaction_amt, 0) transact_amount,
                     null internal_contract_item_ref_no,
                     null int_alloc_group_id,
                     null internal_stock_ref_no
                from cs_cost_store               cs,
                     cigc_contract_item_gmr_cost cigc,
                     pci_physical_contract_item  pci,
                     pcdi_pc_delivery_item       pcdi,
                     pcpd_pc_product_definition  pcpd,
                     grd_goods_record_detail     grd,
                     scm_service_charge_master   scm,
                     cpc_corporate_profit_center cpc,
                     tdc_trade_date_closure      tdc,
                     ak_corporate                akc,
                     phd_profileheaderdetails    phd,
                     cm_currency_master          cm_b,
                     cm_currency_master          cm
               where cs.cost_component_id = scm.cost_id
                 and cs.base_amt_cur_id = cm_b.cur_id
                 and cs.transaction_amt_cur_id = cm.cur_id
                 and cigc.int_contract_item_ref_no =
                     pci.internal_contract_item_ref_no(+)
                 and pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                    
                 and pcpd.input_output = 'Input'
                 and grd.internal_grd_ref_no(+) = cigc.internal_grd_ref_no
                 and (case when cigc.int_contract_item_ref_no is null then
                      grd.profit_center_id else pcpd.profit_center_id end) =
                     cpc.profit_center_id
                 and tdc.trade_date = pd_trade_date
                 and cs.cost_type = 'Direct Actual'
                 and cs.process_id = tdc.process_id
                 and pci.process_id = tdc.process_id
                 and pcdi.process_id = tdc.process_id
                 and pcpd.process_id = tdc.process_id
                    
                 and tdc.process_id = pc_process_id
                 and cpc.corporateid = pc_corporate_id
                 and cpc.corporateid = akc.corporate_id
                 and cs.is_deleted = 'N'
                 and cs.counter_party_id = phd.profileid(+)) t;
    --ends here
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_overall_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
  procedure sp_phy_intrstat(pc_corporate_id varchar2,
                            pd_trade_date   date,
                            pc_process      varchar2,
                            pc_process_id   varchar2) as
    vobj_error_log         tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count     number := 1;
    vc_previous_process_id varchar2(15);
  
  begin
   sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1005,
                          'Start Delete temp_gmr_invoice');
   
    delete from temp_gmr_invoice where corporate_id = pc_corporate_id;
    commit;
     sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1006,
                          'End Delete temp_gmr_invoice');
    insert into temp_gmr_invoice
      (process_id,
       corporate_id,
       internal_invoice_ref_no,
       stock_id,
       invoice_item_amount,
       invoice_currency_id,
       new_invoice_price,
       invoice_type,
       invoice_issue_date,
       new_invoice_price_unit_id)
      select gmr.process_id,
       gmr.corporate_id,
       iid.internal_invoice_ref_no,
       iid.stock_id,
       iid.invoice_item_amount,
       iid.invoice_currency_id,
       new_invoice_price,
       iss.invoice_type,
       iss.invoice_issue_date,
       iid.new_invoice_price_unit_id
  from iid_invoicable_item_details iid,
       is_invoice_summary          iss,
       gmr_goods_movement_record   gmr
 where iid.internal_invoice_ref_no = iss.internal_invoice_ref_no
   and iss.is_active = 'Y'
   and gmr.process_id = pc_process_id
   and gmr.process_id = iss.process_id
   and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
   and gmr.latest_internal_invoice_ref_no = iid.internal_invoice_ref_no;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1007,
                          'End of Insert into temp_gmr_invoice 1');
   
commit;   
insert into temp_gmr_invoice
  (process_id,
   corporate_id,
   internal_invoice_ref_no,
   stock_id,
   invoice_item_amount,
   invoice_currency_id,
   new_invoice_price,
   invoice_type,
   invoice_issue_date,
   new_invoice_price_unit_id)
select t.process_id,
       t.corporate_id,
       t.internal_invoice_ref_no,
       grd.internal_grd_ref_no,
       t.invoice_item_amount,
       t.invoice_currency_id,
       t.new_invoice_price,
       t.invoice_type,
       t.invoice_issue_date,
       t.new_invoice_price_unit_id
  from grd_goods_record_detail grd,
       temp_gmr_invoice        t
 where grd.process_id = pc_process_id
   and grd.parent_internal_grd_ref_no = t.stock_id
   and grd.process_id = pc_process_id
   and grd.status = 'Active'
   and grd.is_deleted ='N'
   AND t.corporate_id = pc_corporate_id; 
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1007,
                          'End of Insert into temp_gmr_invoice 2');
    insert into isr_intrastat_grd
      (corporate_id,
       process_id,
       eod_trade_date,
       contract_ref_no,
       contract_item_ref_no,
       gmr_ref_no,
       internal_gmr_ref_no,
       internal_grd_ref_no,
       product_id,
       product_name,
       cp_id,
       counterparty_name,
       quality_id,
       quality_name,
       qty,
       qty_unit_id,
       price,
       price_unit_id,
       price_unit_name,
       shipment_date,
       loading_country_id,
       loading_country_name,
       loading_city_id,
       loading_city_name,
       loading_state_id,
       loading_state_name,
       loading_region_id,
       loading_region_name,
       discharge_country_id,
       discharge_country_name,
       discharge_city_id,
       discharge_city_name,
       discharge_state_id,
       discharge_state_name,
       discharge_region_id,
       discharge_region_name,
       mode_of_transport,
       arrival_no,
       vat_no,
       invoice_date,
       invoice_invenotry_status,
       invoice_invenotry_value,
       invoice_invenotry_cur_id,
       invoice_invenotry_cur_code,
       loading_country_cur_id,
       loading_country_cur_code,
       discharge_country_cur_id,
       discharge_country_cur_code,
       base_cur_id,
       base_cur_code,
       ex_rate_to_base,
       ex_rate_base_to_nat_load,
       ex_rate_base_to_nat_dis,
       comb_nome_item_code,
       contract_type)
    --- Base metal Not Event Based
      select gmr.corporate_id,
             pc_process_id,
             pd_trade_date,
             pcm.contract_ref_no,
             pcm.contract_ref_no || '-' || pcdi.delivery_item_no contract_item_ref_no,
             gmr.gmr_ref_no,
             gmr.internal_gmr_ref_no,
             grd.internal_grd_ref_no,
             pcpd.product_id,
             pdm.product_desc,
             pcm.cp_id,
             phd.companyname supplier,
             grd.quality_id,
             qat.quality_name,
             grd.qty,
             grd.qty_unit_id,
             (case
               when iid.invoice_item_amount is not null then
                iid.new_invoice_price
               else
                bccp.contract_price
             end) invoice_invenotry_price,
             (case
               when iid.invoice_item_amount is not null then
                iid.new_invoice_price_unit_id
               else
                bccp.price_unit_id
             end) invoice_inve_price_unit_id,
             (case
               when iid.invoice_item_amount is not null then
                pum_invoice.price_unit_name
               else
                pum_inven.price_unit_name
             end) invoice_inve_price_unit_name,
             gmr.bl_date shipment_date,
             gmr.loading_country_id,
             cym_load.country_name,
             gmr.loading_city_id,
             cim_load.city_name,
             gmr.loading_state_id,
             sm_load.state_name,
             cym_load.region_id,
             rem_load.region_name loading_region,
             gmr.discharge_country_id,
             cym_discharge.country_name,
             gmr.discharge_city_id,
             cim_discharge.city_name,
             gmr.discharge_state_id,
             sm_discharge.state_name,
             cym_discharge.region_id,
             rem_discharge.region_name discharge_region,
             gmr.mode_of_transport,
             gmr.bl_no,
             bvd.vat_no,
             (case
               when iid.invoice_type = 'Final' then
                iid.invoice_issue_date
               else
                gmr.eff_date
             end) invoice_date,
             (case
               when iid.invoice_item_amount is not null then
                'INVOICE'
               else
                'INVENTORY'
             end) invoice_invenotry_status,
             (case
               when iid.invoice_item_amount is not null then
                iid.invoice_item_amount
               else
                pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                bccp.contract_price,
                                                                bccp.price_unit_id,
                                                                ppu.product_price_unit_id,
                                                                gmr.bl_date) *
                pkg_general.f_get_converted_quantity(grd.product_id,
                                                     grd.qty_unit_id,
                                                     pdm.base_quantity_unit,
                                                     grd.qty)
             
             end) invoice_invenotry_value,
             
             (case
               when iid.invoice_item_amount is not null then
                iid.invoice_currency_id
               else
                bccp.price_unit_cur_id
             end) invoice_invenotry_cur_id,
             (case
               when iid.invoice_item_amount is not null then
                cm_invoice.cur_code
               else
                cm_inven.cur_code
             end) invoice_invenotry_cur_code,
             cm_cym_load.cur_id loading_country_cur,
             cm_cym_load.cur_code loading_country_code,
             cm_cym_discharge.cur_id dischagre_country_cur,
             cm_cym_discharge.cur_code dischagre_country_code,
             ak.base_cur_id,
             cm.cur_code base_cur_code,
             (case
               when iid.invoice_item_amount is not null then
                pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                         iid.invoice_currency_id,
                                                         ak.base_cur_id,
                                                         gmr.bl_date,
                                                         1)
               else
                pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                         bccp.price_unit_cur_id,
                                                         ak.base_cur_id,
                                                         gmr.bl_date,
                                                         1)
             end) ex_rate_to_base,
             pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                      ak.base_cur_id,
                                                      cm_cym_load.cur_id,
                                                      gmr.bl_date,
                                                      1) ex_rate_base_to_nat_load,
             pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                      ak.base_cur_id,
                                                      cm_cym_discharge.cur_id,
                                                      gmr.bl_date,
                                                      1) ex_rate_base_to_nat_dis,
             qat_ppm.attribute_value,
             pcm.contract_type
        from pcm_physical_contract_main pcm,
             pcdi_pc_delivery_item pcdi,
             pci_physical_contract_item pci,
             gmr_goods_movement_record gmr,
             grd_goods_record_detail grd,
             pcpd_pc_product_definition pcpd,
             pdm_productmaster pdm,
             qat_quality_attributes qat,
             phd_profileheaderdetails phd,
             cym_countrymaster cym_load,
             cim_citymaster cim_load,
             sm_state_master sm_load,
             cym_countrymaster cym_discharge,
             cim_citymaster cim_discharge,
             sm_state_master sm_discharge,
             rem_region_master rem_load,
             rem_region_master rem_discharge,
             bccp_base_contract_cog_price bccp,
             temp_gmr_invoice iid,
             cm_currency_master cm_cym_load,
             cm_currency_master cm_cym_discharge,
             ak_corporate ak,
             cm_currency_master cm,
             bvd_bp_vat_details bvd,
             ppu_product_price_units ppu_invoice,
             pum_price_unit_master pum_invoice,
             ppu_product_price_units ppu_inven,
             pum_price_unit_master pum_inven,
             cm_currency_master cm_invoice,
             cm_currency_master cm_inven,
             (select qat.quality_id,
                     qav.attribute_value
                from qat_quality_attributes         qat,
                     qav_quality_attribute_values   qav,
                     ppm_product_properties_mapping ppm,
                     aml_attribute_master_list      aml
               where ppm.product_id = qat.product_id
                 and ppm.attribute_id = aml.attribute_id
                 and qat.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and aml.is_active = 'Y'
                 and qav.is_deleted = 'N'
                 and aml.attribute_name = 'CNCode'
                 and aml.attribute_type_id = 'OTHERS'
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id) qat_ppm,
             v_ppu_pum ppu
      
       where pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
         and pcdi.pcdi_id = pci.pcdi_id
         and pci.internal_contract_item_ref_no =
             grd.internal_contract_item_ref_no
         and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpd.input_output = 'Input'
         and pcpd.product_id = pdm.product_id
         and grd.quality_id = qat.quality_id
         and pcm.cp_id = phd.profileid
         and phd.profileid = bvd.profile_id(+)
         and gmr.loading_country_id = cym_load.country_id(+)
         and gmr.loading_city_id = cim_load.city_id(+)
         and gmr.loading_state_id = sm_load.state_id(+)
         and gmr.discharge_country_id = cym_discharge.country_id(+)
         and gmr.discharge_city_id = cim_discharge.city_id(+)
         and gmr.discharge_state_id = sm_discharge.state_id(+)
         and cym_load.region_id = rem_load.region_id
         and cym_discharge.region_id = rem_discharge.region_id
         and grd.internal_grd_ref_no = iid.stock_id(+)
         and iid.corporate_id = pc_corporate_id -- added
         and cym_load.national_currency = cm_cym_load.cur_id
         and cym_discharge.national_currency = cm_cym_discharge.cur_id
         and gmr.corporate_id = ak.corporate_id
         and ak.base_cur_id = cm.cur_id
         and grd.is_mark_for_tolling = 'N'
         and gmr.is_deleted = 'N'
         and gmr.corporate_id = pc_corporate_id
         and bccp.price_unit_id = ppu_inven.internal_price_unit_id(+)
         and ppu_inven.price_unit_id = pum_inven.price_unit_id(+)
         and iid.new_invoice_price_unit_id =
             ppu_invoice.internal_price_unit_id(+)
         and ppu_invoice.price_unit_id = pum_invoice.price_unit_id(+)
         and iid.invoice_currency_id = cm_invoice.cur_id(+)
         and bccp.price_unit_cur_id = cm_inven.cur_id(+)
         and qat.quality_id = qat_ppm.quality_id(+)
         and pcm.contract_type = 'BASEMETAL'
        /* and pcm.is_active = 'Y'*/
         and pcdi.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcpd.is_active = 'Y'
         and pdm.is_active = 'Y'
         and qat.is_active = 'Y'
         and pcm.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcdi.process_id = pc_process_id
         and gmr.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and bccp.process_id = pc_process_id
         and bccp.pcdi_id = pcdi.pcdi_id
         and ppu.product_id = grd.product_id
         and ppu.cur_id = ak.base_cur_id
         and ppu.weight_unit_id = pdm.base_quantity_unit
         and nvl(ppu.weight, 1) = 1
            --and grd.current_qty > 0
         and gmr.internal_gmr_ref_no not in
             (select bgcp.internal_gmr_ref_no
                from bgcp_base_gmr_cog_price bgcp
               where bgcp.process_id = pc_process_id);
    commit;
    --- Base metal Event Based
    insert into isr_intrastat_grd
      (corporate_id,
       process_id,
       eod_trade_date,
       contract_ref_no,
       contract_item_ref_no,
       gmr_ref_no,
       internal_gmr_ref_no,
       internal_grd_ref_no,
       product_id,
       product_name,
       cp_id,
       counterparty_name,
       quality_id,
       quality_name,
       qty,
       qty_unit_id,
       price,
       price_unit_id,
       price_unit_name,
       shipment_date,
       loading_country_id,
       loading_country_name,
       loading_city_id,
       loading_city_name,
       loading_state_id,
       loading_state_name,
       loading_region_id,
       loading_region_name,
       discharge_country_id,
       discharge_country_name,
       discharge_city_id,
       discharge_city_name,
       discharge_state_id,
       discharge_state_name,
       discharge_region_id,
       discharge_region_name,
       mode_of_transport,
       arrival_no,
       vat_no,
       invoice_date,
       invoice_invenotry_status,
       invoice_invenotry_value,
       invoice_invenotry_cur_id,
       invoice_invenotry_cur_code,
       loading_country_cur_id,
       loading_country_cur_code,
       discharge_country_cur_id,
       discharge_country_cur_code,
       base_cur_id,
       base_cur_code,
       ex_rate_to_base,
       ex_rate_base_to_nat_load,
       ex_rate_base_to_nat_dis,
       comb_nome_item_code,
       contract_type)
      select gmr.corporate_id,
             pc_process_id,
             pd_trade_date,
             pcm.contract_ref_no,
             pcm.contract_ref_no || '-' || pcdi.delivery_item_no contract_item_ref_no,
             gmr.gmr_ref_no,
             gmr.internal_gmr_ref_no,
             grd.internal_grd_ref_no,
             pcpd.product_id,
             pdm.product_desc,
             pcm.cp_id,
             phd.companyname supplier,
             grd.quality_id,
             qat.quality_name,
             grd.qty,
             grd.qty_unit_id,
             (case
               when iid.invoice_item_amount is not null then
                iid.new_invoice_price
               else
                bgcp.contract_price
             end) invoice_invenotry_price,
             (case
               when iid.invoice_item_amount is not null then
                iid.new_invoice_price_unit_id
               else
                bgcp.price_unit_id
             end) invoice_inve_price_unit_id,
             (case
               when iid.invoice_item_amount is not null then
                pum_invoice.price_unit_name
               else
                pum_inven.price_unit_name
             end) invoice_inve_price_unit_name,
             gmr.bl_date shipment_date,
             gmr.loading_country_id,
             cym_load.country_name,
             gmr.loading_city_id,
             cim_load.city_name,
             gmr.loading_state_id,
             sm_load.state_name,
             cym_load.region_id,
             rem_load.region_name loading_region,
             gmr.discharge_country_id,
             cym_discharge.country_name,
             gmr.discharge_city_id,
             cim_discharge.city_name,
             gmr.discharge_state_id,
             sm_discharge.state_name,
             cym_discharge.region_id,
             rem_discharge.region_name discharge_region,
             gmr.mode_of_transport,
             gmr.bl_no,
             bvd.vat_no,
             (case
               when iid.invoice_type = 'Final' then
                iid.invoice_issue_date
               else
                gmr.eff_date
             end) invoice_date,
             (case
               when iid.invoice_item_amount is not null then
                'INVOICE'
               else
                'INVENTORY'
             end) invoice_invenotry_status,
             (case
               when iid.invoice_item_amount is not null then
                iid.invoice_item_amount
               else
                pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                bgcp.contract_price,
                                                                bgcp.price_unit_id,
                                                                ppu.product_price_unit_id,
                                                                gmr.bl_date) *
                pkg_general.f_get_converted_quantity(grd.product_id,
                                                     grd.qty_unit_id,
                                                     pdm.base_quantity_unit,
                                                     grd.qty)
             
             end) invoice_invenotry_value,
             
             (case
               when iid.invoice_item_amount is not null then
                iid.invoice_currency_id
               else
                bgcp.price_unit_cur_id
             end) invoice_invenotry_cur_id,
             (case
               when iid.invoice_item_amount is not null then
                cm_invoice.cur_code
               else
                cm_inven.cur_code
             end) invoice_invenotry_cur_code,
             cm_cym_load.cur_id loading_country_cur,
             cm_cym_load.cur_code loading_country_code,
             cm_cym_discharge.cur_id dischagre_country_cur,
             cm_cym_discharge.cur_code dischagre_country_code,
             ak.base_cur_id,
             cm.cur_code base_cur_code,
             (case
               when iid.invoice_item_amount is not null then
                pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                         iid.invoice_currency_id,
                                                         ak.base_cur_id,
                                                         gmr.bl_date,
                                                         1)
               else
                pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                         bgcp.price_unit_cur_id,
                                                         ak.base_cur_id,
                                                         gmr.bl_date,
                                                         1)
             end) ex_rate_to_base,
             pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                      ak.base_cur_id,
                                                      cm_cym_load.cur_id,
                                                      gmr.bl_date,
                                                      1) ex_rate_base_to_nat_load,
             pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                      ak.base_cur_id,
                                                      cm_cym_discharge.cur_id,
                                                      gmr.bl_date,
                                                      1) ex_rate_base_to_nat_dis,
             qat_ppm.attribute_value,
             pcm.contract_type
        from pcm_physical_contract_main pcm,
             pcdi_pc_delivery_item pcdi,
             pci_physical_contract_item pci,
             gmr_goods_movement_record gmr,
             grd_goods_record_detail grd,
             pcpd_pc_product_definition pcpd,
             pdm_productmaster pdm,
             qat_quality_attributes qat,
             phd_profileheaderdetails phd,
             cym_countrymaster cym_load,
             cim_citymaster cim_load,
             sm_state_master sm_load,
             cym_countrymaster cym_discharge,
             cim_citymaster cim_discharge,
             sm_state_master sm_discharge,
             rem_region_master rem_load,
             rem_region_master rem_discharge,
             bgcp_base_gmr_cog_price bgcp,
             temp_gmr_invoice iid,
             cm_currency_master cm_cym_load,
             cm_currency_master cm_cym_discharge,
             ak_corporate ak,
             cm_currency_master cm,
             bvd_bp_vat_details bvd,
             ppu_product_price_units ppu_invoice,
             pum_price_unit_master pum_invoice,
             ppu_product_price_units ppu_inven,
             pum_price_unit_master pum_inven,
             cm_currency_master cm_invoice,
             cm_currency_master cm_inven,
             (select qat.quality_id,
                     qav.attribute_value
                from qat_quality_attributes         qat,
                     qav_quality_attribute_values   qav,
                     ppm_product_properties_mapping ppm,
                     aml_attribute_master_list      aml
               where ppm.product_id = qat.product_id
                 and ppm.attribute_id = aml.attribute_id
                 and qat.is_active = 'Y'
                 and ppm.is_active = 'Y'
                 and aml.is_active = 'Y'
                 and qav.is_deleted = 'N'
                 and aml.attribute_name = 'CNCode'
                 and aml.attribute_type_id = 'OTHERS'
                 and qat.quality_id = qav.quality_id
                 and qav.attribute_id = ppm.property_id) qat_ppm,
             v_ppu_pum ppu
 where pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
         and pcdi.pcdi_id = pci.pcdi_id
         and pci.internal_contract_item_ref_no =
             grd.internal_contract_item_ref_no
         and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
         and pcpd.input_output = 'Input'
         and pcpd.product_id = pdm.product_id
         and grd.quality_id = qat.quality_id
         and pcm.cp_id = phd.profileid
         and phd.profileid = bvd.profile_id(+)
         and gmr.loading_country_id = cym_load.country_id(+)
         and gmr.loading_city_id = cim_load.city_id(+)
         and gmr.loading_state_id = sm_load.state_id(+)
         and gmr.discharge_country_id = cym_discharge.country_id(+)
         and gmr.discharge_city_id = cim_discharge.city_id(+)
         and gmr.discharge_state_id = sm_discharge.state_id(+)
         and cym_load.region_id = rem_load.region_id
         and cym_discharge.region_id = rem_discharge.region_id
         and grd.internal_grd_ref_no = iid.stock_id(+)
         and iid.corporate_id = pc_corporate_id -- added
         and cym_load.national_currency = cm_cym_load.cur_id
         and cym_discharge.national_currency = cm_cym_discharge.cur_id
         and gmr.corporate_id = ak.corporate_id
         and ak.base_cur_id = cm.cur_id
         and grd.is_mark_for_tolling = 'N'
         and gmr.is_deleted = 'N'
         and gmr.corporate_id = pc_corporate_id
         and bgcp.price_unit_id = ppu_inven.internal_price_unit_id(+)
         and ppu_inven.price_unit_id = pum_inven.price_unit_id(+)
         and iid.new_invoice_price_unit_id =
             ppu_invoice.internal_price_unit_id(+)
         and ppu_invoice.price_unit_id = pum_invoice.price_unit_id(+)
         and iid.invoice_currency_id = cm_invoice.cur_id(+)
         and bgcp.price_unit_cur_id = cm_inven.cur_id(+)
         and qat.quality_id = qat_ppm.quality_id(+)
         and pcm.contract_type = 'BASEMETAL'
     /*    and pcm.is_active = 'Y'*/
         and pcdi.is_active = 'Y'
         and pci.is_active = 'Y'
         and pcpd.is_active = 'Y'
         and pdm.is_active = 'Y'
         and qat.is_active = 'Y'
         and pcm.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pcdi.process_id = pc_process_id
         and gmr.process_id = pc_process_id
         and pcpd.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and bgcp.process_id = pc_process_id
         and bgcp.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and bgcp.internal_grd_ref_no = grd.internal_grd_ref_no
         and ppu.product_id = grd.product_id
         and ppu.cur_id = ak.base_cur_id
         and ppu.weight_unit_id = pdm.base_quantity_unit
         and nvl(ppu.weight, 1) = 1;
         -- and grd.current_qty > 0  
    commit;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1008,
                          'End of Base Metal');
    -- Concentrates
    insert into isr_intrastat_grd
      (corporate_id,
       process_id,
       eod_trade_date,
       contract_ref_no,
       contract_item_ref_no,
       gmr_ref_no,
       internal_gmr_ref_no,
       internal_grd_ref_no,
       product_id,
       product_name,
       cp_id,
       counterparty_name,
       quality_id,
       quality_name,
       qty,
       qty_unit_id,
       price,
       price_unit_id,
       price_unit_name,
       shipment_date,
       loading_country_id,
       loading_country_name,
       loading_city_id,
       loading_city_name,
       loading_state_id,
       loading_state_name,
       loading_region_id,
       loading_region_name,
       discharge_country_id,
       discharge_country_name,
       discharge_city_id,
       discharge_city_name,
       discharge_state_id,
       discharge_state_name,
       discharge_region_id,
       discharge_region_name,
       mode_of_transport,
       arrival_no,
       vat_no,
       invoice_date,
       invoice_invenotry_status,
       invoice_invenotry_value,
       invoice_invenotry_cur_id,
       invoice_invenotry_cur_code,
       loading_country_cur_id,
       loading_country_cur_code,
       discharge_country_cur_id,
       discharge_country_cur_code,
       base_cur_id,
       base_cur_code,
       ex_rate_to_base,
       ex_rate_base_to_nat_load,
       ex_rate_base_to_nat_dis,
       comb_nome_item_code,
       contract_type)
      select corporate_id,
             pc_process_id,
             pd_trade_date,
             contract_ref_no,
             contract_item_ref_no,
             gmr_ref_no,
             internal_gmr_ref_no,
             internal_grd_ref_no,
             product_id,
             product_desc,
             cp_id,
             supplier,
             quality_id,
             quality_name,
             qty,
             qty_unit_id,
             invoice_invenotry_price,
             invoice_inve_price_unit_id,
             invoice_inve_price_unit_name,
             shipment_date,
             loading_country_id,
             loading_country_name,
             loading_city_id,
             loading_city_name,
             loading_state_id,
             loading_state_name,
             loading_region_id,
             loading_region,
             discharge_country_id,
             discharge_country_name,
             discharge_city_id,
             discharge_city_name,
             discharge_state_id,
             discharge_state_name,
             discharge_region_id,
             discharge_region,
             mode_of_transport,
             bl_no,
             vat_no,
             invoice_date,
             invoice_invenotry_status,
             case
               when invoice_invenotry_status = 'INVOICE' then
                case
               when dense_rank() over(partition by internal_grd_ref_no order by
                         element_id) = 1 then
                invoice_invenotry_value
               else
                0
             end else invoice_invenotry_value end,
             invoice_invenotry_cur_id,
             invoice_invenotry_cur_code,
             loading_country_cur,
             loading_country_code,
             dischagre_country_cur,
             dischagre_country_code,
             base_cur_id,
             base_cur_code,
             ex_rate_to_base,
             ex_rate_base_to_nat_load,
             ex_rate_base_to_nat_dis,
             attribute_value,
             contract_type
        from (select gmr.corporate_id,
                     spq.element_id,
                     pcm.contract_ref_no,
                     pcm.contract_ref_no || '-' || pcdi.delivery_item_no contract_item_ref_no,
                     gmr.gmr_ref_no,
                     gmr.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     pcpd.product_id,
                     pdm.product_desc,
                     pcm.cp_id,
                     phd.companyname supplier,
                     grd.quality_id,
                     qat.quality_name,
                     (case
                       when pcpd.unit_of_measure = 'Wet' then
                        grd.qty
                       else
                        pkg_metals_general.fn_get_assay_dry_qty(grd.product_id,
                                                                sam.ash_id,
                                                                grd.qty,
                                                                grd.qty_unit_id)
                     end) qty,
                     grd.qty_unit_id,
                     cccp.contract_price invoice_invenotry_price,
                     cccp.price_unit_id invoice_inve_price_unit_id,
                     null invoice_inve_price_unit_name, -- check later
                     gmr.bl_date shipment_date,
                     gmr.loading_country_id,
                     cym_load.country_name loading_country_name,
                     gmr.loading_city_id,
                     cim_load.city_name loading_city_name,
                     gmr.loading_state_id,
                     sm_load.state_name loading_state_name,
                     cym_load.region_id loading_region_id,
                     rem_load.region_name loading_region,
                     gmr.discharge_country_id,
                     cym_discharge.country_name discharge_country_name,
                     gmr.discharge_city_id,
                     cim_discharge.city_name discharge_city_name,
                     gmr.discharge_state_id,
                     sm_discharge.state_name discharge_state_name,
                     cym_discharge.region_id discharge_region_id,
                     rem_discharge.region_name discharge_region,
                     gmr.mode_of_transport,
                     gmr.bl_no,
                     bvd.vat_no,
                     (case
                       when iid.invoice_type = 'Final' then
                        iid.invoice_issue_date
                       else
                        gmr.eff_date
                     end) invoice_date,
                     (case
                       when iid.invoice_item_amount is not null then
                        'INVOICE'
                       else
                        'INVENTORY'
                     end) invoice_invenotry_status,
                     (case
                       when iid.invoice_item_amount is not null then
                        iid.invoice_item_amount
                       else
                        pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                        cccp.contract_price,
                                                                        cccp.price_unit_id,
                                                                        ppu.product_price_unit_id,
                                                                        pd_trade_date) *
                        pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                             spq.qty_unit_id,
                                                             pdm_aml.base_quantity_unit,
                                                             spq.payable_qty)
                     end) invoice_invenotry_value,
                     (case
                       when iid.invoice_item_amount is not null then
                        iid.invoice_currency_id
                       else
                        cccp.price_unit_id
                     end) invoice_invenotry_cur_id,
                     (case
                       when iid.invoice_item_amount is not null then
                        cm_invoice.cur_code
                       else
                        cm_inven.cur_code
                     end) invoice_invenotry_cur_code,
                     cm_cym_load.cur_id loading_country_cur,
                     cm_cym_load.cur_code loading_country_code,
                     cm_cym_discharge.cur_id dischagre_country_cur,
                     cm_cym_discharge.cur_code dischagre_country_code,
                     ak.base_cur_id,
                     cm.cur_code base_cur_code,
                     (case
                       when iid.invoice_item_amount is not null then
                        pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                                 iid.invoice_currency_id,
                                                                 ak.base_cur_id,
                                                                 gmr.bl_date,
                                                                 1)
                       else
                        pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                                 cccp.price_unit_cur_id,
                                                                 ak.base_cur_id,
                                                                 gmr.bl_date,
                                                                 1)
                     end) ex_rate_to_base,
                     pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                              ak.base_cur_id,
                                                              cm_cym_load.cur_id,
                                                              gmr.bl_date,
                                                              1) ex_rate_base_to_nat_load,
                     pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                              ak.base_cur_id,
                                                              cm_cym_discharge.cur_id,
                                                              gmr.bl_date,
                                                              1) ex_rate_base_to_nat_dis,
                     
                     qat_ppm.attribute_value,
                     pcm.contract_type
                from pcm_physical_contract_main pcm,
                     pcdi_pc_delivery_item pcdi,
                     pci_physical_contract_item pci,
                     gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     pcpd_pc_product_definition pcpd,
                     pdm_productmaster pdm,
                     qat_quality_attributes qat,
                     phd_profileheaderdetails phd,
                     cym_countrymaster cym_load,
                     cim_citymaster cim_load,
                     sm_state_master sm_load,
                     cym_countrymaster cym_discharge,
                     cim_citymaster cim_discharge,
                     sm_state_master sm_discharge,
                     rem_region_master rem_load,
                     rem_region_master rem_discharge,
                     cccp_conc_contract_cog_price cccp,
                     temp_gmr_invoice iid,
                     cm_currency_master cm_cym_load,
                     cm_currency_master cm_cym_discharge,
                     ak_corporate ak,
                     cm_currency_master cm,
                     bvd_bp_vat_details bvd,
                     ppu_product_price_units ppu_invoice,
                     pum_price_unit_master pum_invoice,
                     ppu_product_price_units ppu_inven,
                     pum_price_unit_master pum_inven,
                     cm_currency_master cm_invoice,
                     cm_currency_master cm_inven,
                     (select qat.quality_id,
                             qav.attribute_value
                        from qat_quality_attributes         qat,
                             qav_quality_attribute_values   qav,
                             ppm_product_properties_mapping ppm,
                             aml_attribute_master_list      aml
                       where ppm.product_id = qat.product_id
                         and ppm.attribute_id = aml.attribute_id
                         and qat.is_active = 'Y'
                         and ppm.is_active = 'Y'
                         and aml.is_active = 'Y'
                         and qav.is_deleted = 'N'
                         and aml.attribute_name = 'CNCode'
                         and aml.attribute_type_id = 'OTHERS'
                         and qat.quality_id = qav.quality_id
                         and qav.attribute_id = ppm.property_id) qat_ppm,
                     sam_stock_assay_mapping sam,
                     v_ppu_pum ppu,
                     spq_stock_payable_qty spq,
                     aml_attribute_master_list aml,
                     poch_price_opt_call_off_header poch,
                     pocd_price_option_calloff_dtls pocd,
                     pdm_productmaster pdm_aml
               where pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pci.internal_contract_item_ref_no =
                     grd.internal_contract_item_ref_no
                 and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.input_output = 'Input'
                 and pcpd.product_id = pdm.product_id
                 and grd.quality_id = qat.quality_id
                 and pcm.cp_id = phd.profileid
                 and phd.profileid = bvd.profile_id(+)
                 and gmr.loading_country_id = cym_load.country_id(+)
                 and gmr.loading_city_id = cim_load.city_id(+)
                 and gmr.loading_state_id = sm_load.state_id(+)
                 and gmr.discharge_country_id = cym_discharge.country_id(+)
                 and gmr.discharge_city_id = cim_discharge.city_id(+)
                 and gmr.discharge_state_id = sm_discharge.state_id(+)
                 and cym_load.region_id = rem_load.region_id
                 and cym_discharge.region_id = rem_discharge.region_id
                 and grd.internal_grd_ref_no = iid.stock_id(+)
                 and iid.corporate_id = pc_corporate_id -- added
                 and cym_load.national_currency = cm_cym_load.cur_id(+)
                 and cym_discharge.national_currency =
                     cm_cym_discharge.cur_id(+)
                 and gmr.corporate_id = ak.corporate_id
                 and ak.base_cur_id = cm.cur_id
                 and grd.is_mark_for_tolling = 'N'
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and cccp.price_unit_id =
                     ppu_inven.internal_price_unit_id(+)
                 and ppu_inven.price_unit_id = pum_inven.price_unit_id(+)
                 and iid.new_invoice_price_unit_id =
                     ppu_invoice.internal_price_unit_id(+)
                 and ppu_invoice.price_unit_id =
                     pum_invoice.price_unit_id(+)
                 and iid.invoice_currency_id = cm_invoice.cur_id(+)
                 and cccp.price_unit_cur_id = cm_inven.cur_id(+)
                 and qat.quality_id = qat_ppm.quality_id(+)
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_pricing_assay = 'Y'
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcdi.is_active = 'Y'
                 and pci.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pdm.is_active = 'Y'
                 and qat.is_active = 'Y'
                 and pcm.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and ppu.product_id = aml.underlying_product_id
                 and ppu.cur_id = ak.base_cur_id
                 and ppu.weight_unit_id = pdm_aml.base_quantity_unit
                 and nvl(ppu.weight, 1) = 1
                 and spq.process_id = pc_process_id
                 and spq.is_stock_split = 'N'
                 and spq.internal_grd_ref_no = grd.internal_grd_ref_no
                 and spq.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and spq.element_id = aml.attribute_id
                 and cccp.process_id = pc_process_id
                 and cccp.pcdi_id = pci.pcdi_id
                 and pcdi.pcdi_id = poch.pcdi_id
                 and poch.poch_id = pocd.poch_id
                 and spq.element_id = poch.element_id
                 and spq.element_id = cccp.element_id
                 and aml.underlying_product_id = pdm_aml.product_id
                and nvl(pocd.qp_period_type, 'NA') <> 'Event');
                  -- and grd.current_qty > 0
    Commit;
      sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1009,
                          'End of Concentrates 1');

    insert into isr_intrastat_grd
      (corporate_id,
       process_id,
       eod_trade_date,
       contract_ref_no,
       contract_item_ref_no,
       gmr_ref_no,
       internal_gmr_ref_no,
       internal_grd_ref_no,
       product_id,
       product_name,
       cp_id,
       counterparty_name,
       quality_id,
       quality_name,
       qty,
       qty_unit_id,
       price,
       price_unit_id,
       price_unit_name,
       shipment_date,
       loading_country_id,
       loading_country_name,
       loading_city_id,
       loading_city_name,
       loading_state_id,
       loading_state_name,
       loading_region_id,
       loading_region_name,
       discharge_country_id,
       discharge_country_name,
       discharge_city_id,
       discharge_city_name,
       discharge_state_id,
       discharge_state_name,
       discharge_region_id,
       discharge_region_name,
       mode_of_transport,
       arrival_no,
       vat_no,
       invoice_date,
       invoice_invenotry_status,
       invoice_invenotry_value,
       invoice_invenotry_cur_id,
       invoice_invenotry_cur_code,
       loading_country_cur_id,
       loading_country_cur_code,
       discharge_country_cur_id,
       discharge_country_cur_code,
       base_cur_id,
       base_cur_code,
       ex_rate_to_base,
       ex_rate_base_to_nat_load,
       ex_rate_base_to_nat_dis,
       comb_nome_item_code,
       contract_type)
      select corporate_id,
             pc_process_id,
             pd_trade_date,
             contract_ref_no,
             contract_item_ref_no,
             gmr_ref_no,
             internal_gmr_ref_no,
             internal_grd_ref_no,
             product_id,
             product_desc,
             cp_id,
             supplier,
             quality_id,
             quality_name,
             qty,
             qty_unit_id,
             invoice_invenotry_price,
             invoice_inve_price_unit_id,
             invoice_inve_price_unit_name,
             shipment_date,
             loading_country_id,
             loading_country_name,
             loading_city_id,
             loading_city_name,
             loading_state_id,
             loading_state_name,
             loading_region_id,
             loading_region,
             discharge_country_id,
             discharge_country_name,
             discharge_city_id,
             discharge_city_name,
             discharge_state_id,
             discharge_state_name,
             discharge_region_id,
             discharge_region,
             mode_of_transport,
             bl_no,
             vat_no,
             invoice_date,
             invoice_invenotry_status,
             case
               when invoice_invenotry_status = 'INVOICE' then
                case
               when dense_rank() over(partition by internal_grd_ref_no order by
                         element_id) = 1 then
                invoice_invenotry_value
               else
                0
             end else invoice_invenotry_value end,
             invoice_invenotry_cur_id,
             invoice_invenotry_cur_code,
             loading_country_cur,
             loading_country_code,
             dischagre_country_cur,
             dischagre_country_code,
             base_cur_id,
             base_cur_code,
             ex_rate_to_base,
             ex_rate_base_to_nat_load,
             ex_rate_base_to_nat_dis,
             attribute_value,
             contract_type
        from (--concentrates event based
              select gmr.corporate_id,
                     spq.element_id,
                     pcm.contract_ref_no,
                     pcm.contract_ref_no || '-' || pcdi.delivery_item_no contract_item_ref_no,
                     gmr.gmr_ref_no,
                     gmr.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     pcpd.product_id,
                     pdm.product_desc,
                     pcm.cp_id,
                     phd.companyname supplier,
                     grd.quality_id,
                     gmr.discharge_city_id,
                     qat.quality_name,
                     (case
                       when pcpd.unit_of_measure = 'Wet' then
                        grd.qty
                       else
                        pkg_metals_general.fn_get_assay_dry_qty(grd.product_id,
                                                                sam.ash_id,
                                                                grd.qty,
                                                                grd.qty_unit_id)
                     end) qty,
                     grd.qty_unit_id,
                     cgcp.contract_price invoice_invenotry_price,
                     cgcp.price_unit_id invoice_inve_price_unit_id,
                     null invoice_inve_price_unit_name, -- check later
                     gmr.bl_date shipment_date,
                     gmr.loading_country_id,
                     cym_load.country_name loading_country_name,
                     gmr.loading_city_id,
                     cim_load.city_name loading_city_name,
                     gmr.loading_state_id,
                     sm_load.state_name loading_state_name,
                     cym_load.region_id loading_region_id,
                     rem_load.region_name loading_region,
                     gmr.discharge_country_id discharge_country_id,
                     cym_discharge.country_name discharge_country_name,
                     gmr.discharge_state_id discharge_state_id,
                     cim_discharge.city_name discharge_city_name,
                     sm_discharge.state_name discharge_state_name,
                     cym_discharge.region_id discharge_region_id,
                     rem_discharge.region_name discharge_region,
                     gmr.mode_of_transport,
                     gmr.bl_no,
                     bvd.vat_no,
                     (case
                       when iid.invoice_type = 'Final' then
                        iid.invoice_issue_date
                       else
                        gmr.eff_date
                     end) invoice_date,
                     (case
                       when iid.invoice_item_amount is not null then
                        'INVOICE'
                       else
                        'INVENTORY'
                     end) invoice_invenotry_status,
                     (case
                       when iid.invoice_item_amount is not null then
                        iid.invoice_item_amount
                       else
                        pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                        cgcp.contract_price,
                                                                        cgcp.price_unit_id,
                                                                        ppu.product_price_unit_id,
                                                                        pd_trade_date) *
                        pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                             spq.qty_unit_id,
                                                             pdm_aml.base_quantity_unit,
                                                             spq.payable_qty)
                     end) invoice_invenotry_value,
                     (case
                       when iid.invoice_item_amount is not null then
                        iid.invoice_currency_id
                       else
                        cgcp.price_unit_id
                     end) invoice_invenotry_cur_id,
                     (case
                       when iid.invoice_item_amount is not null then
                        cm_invoice.cur_code
                       else
                        cm_inven.cur_code
                     end) invoice_invenotry_cur_code,
                     cm_cym_load.cur_id loading_country_cur,
                     cm_cym_load.cur_code loading_country_code,
                     cm_cym_discharge.cur_id dischagre_country_cur,
                     cm_cym_discharge.cur_code dischagre_country_code,
                     ak.base_cur_id,
                     cm.cur_code base_cur_code,
                     (case
                       when iid.invoice_item_amount is not null then
                        pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                                 iid.invoice_currency_id,
                                                                 ak.base_cur_id,
                                                                 gmr.bl_date,
                                                                 1)
                       else
                        pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                                 cgcp.price_unit_cur_id,
                                                                 ak.base_cur_id,
                                                                 gmr.bl_date,
                                                                 1)
                     end) ex_rate_to_base,
                     pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                              ak.base_cur_id,
                                                              cm_cym_load.cur_id,
                                                              gmr.bl_date,
                                                              1) ex_rate_base_to_nat_load,
                     pkg_general.f_get_converted_currency_amt(gmr.corporate_id,
                                                              ak.base_cur_id,
                                                              cm_cym_discharge.cur_id,
                                                              gmr.bl_date,
                                                              1) ex_rate_base_to_nat_dis,
                     
                     qat_ppm.attribute_value,
                     pcm.contract_type
                from pcm_physical_contract_main pcm,
                     pcdi_pc_delivery_item pcdi,
                     pci_physical_contract_item pci,
                     gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     pcpd_pc_product_definition pcpd,
                     pdm_productmaster pdm,
                     qat_quality_attributes qat,
                     phd_profileheaderdetails phd,
                     cym_countrymaster cym_load,
                     cim_citymaster cim_load,
                     sm_state_master sm_load,
                     cym_countrymaster cym_discharge,
                     cim_citymaster cim_discharge,
                     sm_state_master sm_discharge,
                     rem_region_master rem_load,
                     rem_region_master rem_discharge,
                     cgcp_conc_gmr_cog_price cgcp,
                     temp_gmr_invoice iid,
                     cm_currency_master cm_cym_load,
                     cm_currency_master cm_cym_discharge,
                     ak_corporate ak,
                     cm_currency_master cm,
                     bvd_bp_vat_details bvd,
                     ppu_product_price_units ppu_invoice,
                     pum_price_unit_master pum_invoice,
                     ppu_product_price_units ppu_inven,
                     pum_price_unit_master pum_inven,
                     cm_currency_master cm_invoice,
                     cm_currency_master cm_inven,
                     (select qat.quality_id,
                             qav.attribute_value
                        from qat_quality_attributes         qat,
                             qav_quality_attribute_values   qav,
                             ppm_product_properties_mapping ppm,
                             aml_attribute_master_list      aml
                       where ppm.product_id = qat.product_id
                         and ppm.attribute_id = aml.attribute_id
                         and qat.is_active = 'Y'
                         and ppm.is_active = 'Y'
                         and aml.is_active = 'Y'
                         and qav.is_deleted = 'N'
                         and aml.attribute_name = 'CNCode'
                         and aml.attribute_type_id = 'OTHERS'
                         and qat.quality_id = qav.quality_id
                         and qav.attribute_id = ppm.property_id) qat_ppm,
                     sam_stock_assay_mapping sam,
                     v_ppu_pum ppu,
                     spq_stock_payable_qty spq,
                     aml_attribute_master_list aml,
                     pdm_productmaster pdm_aml
               where pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcdi.pcdi_id = pci.pcdi_id
                 and pci.internal_contract_item_ref_no =
                     grd.internal_contract_item_ref_no
                 and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.input_output = 'Input'
                 and pcpd.product_id = pdm.product_id
                 and grd.quality_id = qat.quality_id
                 and pcm.cp_id = phd.profileid
                 and phd.profileid = bvd.profile_id(+)
                 and gmr.loading_country_id = cym_load.country_id(+)
                 and gmr.loading_city_id = cim_load.city_id(+)
                 and gmr.loading_state_id = sm_load.state_id(+)
                 and gmr.discharge_country_id = cym_discharge.country_id(+)
                 and gmr.discharge_city_id = cim_discharge.city_id(+)
                 and gmr.discharge_state_id = sm_discharge.state_id(+)
                 and cym_load.region_id = rem_load.region_id
                 and cym_discharge.region_id = rem_discharge.region_id
                 and grd.internal_grd_ref_no = iid.stock_id(+)
                 and iid.corporate_id = pc_corporate_id
                 and cym_load.national_currency = cm_cym_load.cur_id(+)
                 and cym_discharge.national_currency =
                     cm_cym_discharge.cur_id(+)
                 and gmr.corporate_id = ak.corporate_id
                 and ak.base_cur_id = cm.cur_id
                 and grd.is_mark_for_tolling = 'N'
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and cgcp.price_unit_id =
                     ppu_inven.internal_price_unit_id(+)
                 and ppu_inven.price_unit_id = pum_inven.price_unit_id(+)
                 and iid.new_invoice_price_unit_id =
                     ppu_invoice.internal_price_unit_id(+)
                 and ppu_invoice.price_unit_id =
                     pum_invoice.price_unit_id(+)
                 and iid.invoice_currency_id = cm_invoice.cur_id(+)
                 and cgcp.price_unit_cur_id = cm_inven.cur_id(+)
                 and qat.quality_id = qat_ppm.quality_id(+)
                 and grd.internal_grd_ref_no = sam.internal_grd_ref_no
                 and sam.is_latest_pricing_assay = 'Y'
                 and pcm.contract_type = 'CONCENTRATES'
                 /* and pcm.is_active = 'Y'*/
                 and pcdi.is_active = 'Y'
                 and pci.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pdm.is_active = 'Y'
                 and qat.is_active = 'Y'
                 and pcm.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and ppu.product_id = pdm_aml.product_id
                 and ppu.cur_id = ak.base_cur_id
                 and ppu.weight_unit_id = pdm_aml.base_quantity_unit
                 and nvl(ppu.weight, 1) = 1
                 and spq.process_id = pc_process_id
                 and spq.is_stock_split = 'N'
                 and spq.internal_grd_ref_no = grd.internal_grd_ref_no
                 and spq.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and spq.element_id = aml.attribute_id
                 and aml.underlying_product_id = pdm_aml.product_id
                    --  and grd.current_qty > 0
                 and cgcp.process_id = pc_process_id
                 and cgcp.internal_grd_ref_no = grd.internal_grd_ref_no
                 and cgcp.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cgcp.element_id = spq.element_id);
                 
  sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1009,
                          'End of Concentrates 2');
    select tdc.process_id
      into vc_previous_process_id
      from tdc_trade_date_closure tdc
     where tdc.corporate_id = pc_corporate_id
       and process = pc_process
       and tdc.trade_date = (select max(trade_date)
                               from tdc_trade_date_closure
                              where corporate_id = pc_corporate_id
                                and trade_date < pd_trade_date
                                and process = pc_process);
  
    update isr_intrastat_grd isr
       set isr.is_new = 'Y'
     where isr.internal_grd_ref_no in
           (select isr_prev.internal_grd_ref_no
              from isr_intrastat_grd isr_prev
             where isr_prev.process_id = vc_previous_process_id)
       and isr.process_id = pc_process_id;
    commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_daily_trade_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           '',
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_phy_contract_status(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2) as
  begin
    insert into pcs_purchase_contract_status
      (corporate_id,
       corporate_name,
       process_id,
       eod_trade_date,
       contract_ref_no,
       product_id,
       product_name,
       cp_id,
       cp_name,
       contract_status,
       invoice_pay_in_cur,
       invoice_pay_in_cur_code,
       element_id,
       element_name,
       payable_qty,
       payable_qty_unit_id,
       payable_qty_unit_name,
       priced_arrived_qty,
       priced_not_arrived_qty,
       unpriced_arrived_qty,
       unpriced_not_arrived_qty)
      select main_table.corporate_id,
             main_table.corporate_name,
             pc_process_id,
             pd_trade_date,
             main_table.contract_ref_no,
             main_table.product_id,
             main_table.product_desc,
             main_table.cp_id,
             main_table.companyname,
             main_table.contract_status,
             main_table.invoice_cur_id,
             main_table.invoice_cur_code,
             main_table.element_id,
             main_table.attribute_name,
             main_table.open_qty,
             main_table.qty_unit_id,
             main_table.qty_unit,
             --  nvl(stock_table.landed_qty, 0) landed_qty,
             --   nvl(pfc_data.priced_qty, 0) priced_qty,
             (case
               when nvl(stock_table.landed_qty, 0) <
                    nvl(pfc_data.priced_qty, 0) then
                nvl(stock_table.landed_qty, 0)
               else
                nvl(pfc_data.priced_qty, 0)
             end) priced_arrived_qty,
             
             nvl(pfc_data.priced_qty, 0) -
             (case
                when nvl(stock_table.landed_qty, 0) <
                     nvl(pfc_data.priced_qty, 0) then
                 nvl(stock_table.landed_qty, 0)
                else
                 nvl(pfc_data.priced_qty, 0)
              end) price_not_arrived_qty,
             nvl(stock_table.landed_qty, 0) -
             (case
                when nvl(stock_table.landed_qty, 0) <
                     nvl(pfc_data.priced_qty, 0) then
                 nvl(stock_table.landed_qty, 0)
                else
                 nvl(pfc_data.priced_qty, 0)
              end) unpriced_arrived_qty,
             (main_table.open_qty - nvl(stock_table.landed_qty, 0)) -
             (nvl(pfc_data.priced_qty, 0) - (case
               when nvl(stock_table.landed_qty, 0) <
                    nvl(pfc_data.priced_qty, 0) then
                nvl(stock_table.landed_qty, 0)
               else
                nvl(pfc_data.priced_qty, 0)
             end)) unpriced_not_arrived_qty
        from (select pcm.internal_contract_ref_no,
                     pcm.contract_ref_no,
                     pcm.corporate_id,
                     akc.corporate_name,
                     pcm.cp_id,
                     pqca.element_id,
                     aml.attribute_name,
                     phd.companyname,
                     pcm.contract_status,
                     pcpd.product_id,
                     pdm.product_desc,
                     sum((case
                           when rm.ratio_name = '%' then
                            (pqcapd.payable_percentage *
                            pkg_metals_general.fn_get_assay_dry_qty(pcpd.product_id,
                                                                     pcpq.assay_header_id,
                                                                     diqs.total_qty,
                                                                     diqs.item_qty_unit_id)) / 100
                           else
                            pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                 diqs.item_qty_unit_id,
                                                                 rm.qty_unit_id_denominator,
                                                                 pkg_metals_general.fn_get_assay_dry_qty(pcpd.product_id,
                                                                                                         pcpq.assay_header_id,
                                                                                                         diqs.total_qty,
                                                                                                         diqs.item_qty_unit_id)) *
                            pqcapd.payable_percentage
                         end)) open_qty,
                     (case
                       when rm.ratio_name = '%' then
                        diqs.item_qty_unit_id
                       else
                        rm.qty_unit_id_numerator
                     end) qty_unit_id,
                     pqcapd.payable_percentage,
                     qum.qty_unit,
                     pcm.invoice_currency_id invoice_cur_id,
                     cm.cur_code invoice_cur_code
                from pcm_physical_contract_main     pcm,
                     phd_profileheaderdetails       phd,
                     pcpd_pc_product_definition     pcpd,
                     pdm_productmaster              pdm,
                     pcdi_pc_delivery_item          pcdi,
                     cm_currency_master             cm,
                     ak_corporate                   akc,
                     pcmte_pcm_tolling_ext          pcmte,
                     pcpq_pc_product_quality        pcpq,
                     ash_assay_header               ash,
                     asm_assay_sublot_mapping       asm,
                     pqca_pq_chemical_attributes    pqca,
                     pqcapd_prd_qlty_cattr_pay_dtls pqcapd,
                     rm_ratio_master                rm,
                     aml_attribute_master_list      aml,
                     diqs_delivery_item_qty_status  diqs,
                     qum_quantity_unit_master       qum
               where pcm.cp_id = phd.profileid
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.product_id = pdm.product_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcpd.input_output = 'Input'
                 and pcm.contract_status = 'In Position'
                 and pcm.corporate_id = pc_corporate_id
                 and pcm.invoice_currency_id = cm.cur_id
                 and pcm.corporate_id = akc.corporate_id
                 and pcm.internal_contract_ref_no =
                     pcmte.int_contract_ref_no
                 and pcmte.tolling_service_type = 'S'
                 and pcpd.pcpd_id = pcpq.pcpd_id
                 and pcpq.assay_header_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and pqca.pqca_id = pqcapd.pqca_id
                 and rm.ratio_id = pqca.unit_of_measure
                 and aml.attribute_id = pqca.element_id
                 and pqca.is_elem_for_pricing = 'Y'
                 and pcdi.pcdi_id = diqs.pcdi_id
                 and qum.qty_unit_id =
                     (case when rm.ratio_name = '%' then
                      diqs.item_qty_unit_id else rm.qty_unit_id_numerator end)
                 and diqs.process_id = pc_process_id
                 and diqs.is_active = 'Y'
                 and pcpd.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and ash.is_active = 'Y'
                 and asm.is_active = 'Y'
                 and aml.is_active = 'Y'
                 and cm.is_active = 'Y'
                 and qum.is_active = 'Y'
                 and phd.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and pcpq.is_active = 'Y'
                 and rm.is_active = 'Y'
                 and pqcapd.is_active = 'Y'
               group by pcm.internal_contract_ref_no,
                        pcm.contract_ref_no,
                        pcm.corporate_id,
                        akc.corporate_name,
                        pcm.cp_id,
                        pqca.element_id,
                        aml.attribute_name,
                        phd.companyname,
                        pcm.contract_status,
                        pcpd.product_id,
                        pdm.product_desc,
                        rm.ratio_name,
                        diqs.item_qty_unit_id,
                        qum.qty_unit,
                        pcm.invoice_currency_id,
                        cm.cur_code,
                        rm.qty_unit_id_numerator,
                        pqcapd.payable_percentage) main_table,
             (select gmr.internal_contract_ref_no,
                     spq.element_id,
                     sum(spq.payable_qty) landed_qty
                from pcm_physical_contract_main pcm,
                     pcmte_pcm_tolling_ext      pcmte,
                     gmr_goods_movement_record  gmr,
                     spq_stock_payable_qty      spq
               where pcm.internal_contract_ref_no =
                     gmr.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcmte.int_contract_ref_no
                 and pcmte.tolling_service_type = 'S'
                 and gmr.internal_gmr_ref_no = spq.internal_gmr_ref_no
                 and spq.is_stock_split = 'N'
                 and gmr.landed_qty > 0
                 and pcm.is_active = 'Y'
                 and spq.is_active = 'Y'
                 and gmr.is_deleted = 'N'
                 and spq.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
               group by gmr.internal_contract_ref_no,
                        spq.element_id) stock_table,
             (select pcm.internal_contract_ref_no,
                     poch.element_id,
                     sum(pfd.qty_fixed) priced_qty
                from pcm_physical_contract_main     pcm,
                     pcmte_pcm_tolling_ext          pcmte,
                     pcdi_pc_delivery_item          pcdi,
                     poch_price_opt_call_off_header poch,
                     pocd_price_option_calloff_dtls pocd,
                     pofh_price_opt_fixation_header pofh,
                     pfd_price_fixation_details     pfd
               where pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcmte.int_contract_ref_no
                 and pcmte.tolling_service_type = 'S'
                 and pocd.price_type <> 'Fixed'
                 and pcdi.pcdi_id = poch.pcdi_id
                 and poch.poch_id = pocd.poch_id
                 and pocd.pocd_id = pofh.pocd_id
                 and pofh.pofh_id = pfd.pofh_id
                 and pcm.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and poch.is_active = 'Y'
                 and pocd.is_active = 'Y'
                 and pofh.is_active = 'Y'
                 and pfd.is_active = 'Y'
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pfd.as_of_date <= pd_trade_date
               group by pcm.internal_contract_ref_no,
                        poch.element_id
              union all
              select pcm.internal_contract_ref_no,
                     poch.element_id,
                     sum((case
                           when rm.ratio_name = '%' then
                            (pqcapd.payable_percentage *
                            pkg_metals_general.fn_get_assay_dry_qty(pcpd.product_id,
                                                                     pcpq.assay_header_id,
                                                                     diqs.total_qty,
                                                                     diqs.item_qty_unit_id)) / 100
                           else
                            pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                 diqs.item_qty_unit_id,
                                                                 rm.qty_unit_id_denominator,
                                                                 pkg_metals_general.fn_get_assay_dry_qty(pcpd.product_id,
                                                                                                         pcpq.assay_header_id,
                                                                                                         diqs.total_qty,
                                                                                                         diqs.item_qty_unit_id)) *
                            pqcapd.payable_percentage
                         end)) priced_qty
                from pcm_physical_contract_main     pcm,
                     pcmte_pcm_tolling_ext          pcmte,
                     pcdi_pc_delivery_item          pcdi,
                     poch_price_opt_call_off_header poch,
                     pocd_price_option_calloff_dtls pocd,
                     pcbpd_pc_base_price_detail     pcbpd,
                     pcpd_pc_product_definition     pcpd,
                     pcpq_pc_product_quality        pcpq,
                     ash_assay_header               ash,
                     asm_assay_sublot_mapping       asm,
                     pqca_pq_chemical_attributes    pqca,
                     pqcapd_prd_qlty_cattr_pay_dtls pqcapd,
                     rm_ratio_master                rm,
                     aml_attribute_master_list      aml,
                     diqs_delivery_item_qty_status  diqs
               where pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and pcm.internal_contract_ref_no =
                     pcmte.int_contract_ref_no
                 and pcmte.tolling_service_type = 'S'
                 and pcdi.pcdi_id = poch.pcdi_id
                 and poch.poch_id = pocd.poch_id
                 and pocd.price_type = 'Fixed'
                 and pocd.pcbpd_id = pcbpd.pcbpd_id
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.pcpd_id = pcpq.pcpd_id
                 and pcpq.assay_header_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and pqca.is_elem_for_pricing = 'Y'
                 and pqca.pqca_id = pqcapd.pqca_id
                 and rm.ratio_id = pqca.unit_of_measure
                 and aml.attribute_id = pqca.element_id
                 and pcdi.pcdi_id = diqs.pcdi_id
                 and poch.element_id = aml.attribute_id
                 and pcm.corporate_id = pc_corporate_id
                 and pcm.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and poch.is_active = 'Y'
                 and pocd.is_active = 'Y'
                 and pcpd.is_active = 'Y'
                 and ash.is_active = 'Y'
                 and asm.is_active = 'Y'
                 and pqca.is_active = 'Y'
                 and pqcapd.is_active = 'Y'
                 and rm.is_active = 'Y'
                 and aml.is_active = 'Y'
                 and pcpd.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcpq.process_id = pc_process_id
                 and diqs.process_id = pc_process_id
               group by pcm.internal_contract_ref_no,
                        poch.element_id) pfc_data
       where main_table.internal_contract_ref_no =
             stock_table.internal_contract_ref_no(+)
         and main_table.element_id = stock_table.element_id(+)
         and main_table.internal_contract_ref_no =
             pfc_data.internal_contract_ref_no(+)
         and main_table.element_id = pfc_data.element_id(+);
    commit;
  end;
  procedure sp_feed_consumption_report(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2) as
  begin
  
    insert into fcr_feed_consumption_report
      (process_id,
       eod_trade_date,
       corporate_id,
       corporate_name,
       gmr_ref_no,
       product_id,
       product_name,
       quality_id,
       quality_name,
       cp_id,
       cp_name,
       element_id,
       element_name,
       gmr_qty,
       gmr_qty_unit_id,
       gmr_qty_unit,
       assay_qty,
       asaay_qty_unit_id,
       asaay_qty_unit,
       payable_qty,
       payable_qty_unit_id,
       payable_qty_unit,
       tc_amount,
       rc_amount,
       penality_amount,
       inv_add_charges,
       invoice_cur_id,
       invoice_cur_code,
       base_cur_id,
       base_cur_code)
      select pc_process_id,
             temp.invoice_issue_date,
             temp.corporate_id,
             akc.corporate_name,
             temp.gmr_ref_no,
             temp.product_id,
             pdm.product_desc,
             temp.quality_id,
             qat.quality_name,
             pcm.cp_id,
             phd.companyname,
             temp.element_id,
             aml.attribute_name,
             temp.gmr_qty,
             temp.qty_unit_id,
             qum_gmr.qty_unit,
             sum(temp.assay_qty) assay_qty,
             temp.assay_qty_unit assay_qty_unit_id,
             qum_assay.qty_unit,
             sum(temp.payable_qty) payable_qty,
             temp.payable_qty_unit payable_qty_unit_id,
             qum_paybale.qty_unit,
             sum(temp.tcharges_amount) tcharges_amount,
             sum(temp.rcharges_amount) rcharges_amount,
             sum(temp.penalty_amount) penalty_amount,
             oth_chagres.other_charges other_charges,
             temp.invoice_currency_id,
             cm_invoice.cur_code,
             akc.base_cur_id,
             cm_base.cur_code
        from ( -- payable qty,assay qty
              select gmr.gmr_ref_no,
                      grd.internal_gmr_ref_no,
                      grd.internal_grd_ref_no,
                      gmr.internal_contract_ref_no,
                      gmr.corporate_id,
                      grd.product_id,
                      grd.quality_id,
                      grd.profit_center_id,
                      spq.element_id,
                      (case
                        when pcpd.unit_of_measure = 'Wet' then
                         pkg_metals_general.fn_get_assay_dry_qty(gmr.product_id,
                                                                 iam.ash_id,
                                                                 gmr.current_qty,
                                                                 gmr.qty_unit_id)
                        else
                         gmr.current_qty
                      end) gmr_qty,
                      gmr.qty_unit_id,
                      spq.assay_content assay_qty,
                      spq.qty_unit_id assay_qty_unit,
                      spq.payable_qty payable_qty,
                      spq.qty_unit_id payable_qty_unit,
                      0 tcharges_amount,
                      0 rcharges_amount,
                      0 penalty_amount,
                      0 other_charges,
                      iid.invoice_currency_id,
                      iss.invoice_issue_date
                from gmr_goods_movement_record   gmr,
                      grd_goods_record_detail     grd,
                      iid_invoicable_item_details iid,
                      is_invoice_summary          iss,
                      spq_stock_payable_qty       spq,
                      pcpd_pc_product_definition  pcpd,
                      iam_invoice_assay_mapping   iam,
                      ash_assay_header            ash,
                      asm_assay_sublot_mapping    asm,
                      pqca_pq_chemical_attributes pqca,
                      rm_ratio_master             rm
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iid.stock_id = spq.internal_grd_ref_no
                 and spq.is_stock_split = 'N'
                 and iss.internal_invoice_ref_no =
                     iid.internal_invoice_ref_no
                 and iss.is_active = 'Y'
                 and iss.process_id = pc_process_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and spq.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.process_id = pc_process_id
                 and pcpd.input_output = 'Input'
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and spq.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.is_pass_through = 'Y'
                 and grd.tolling_stock_type = 'Clone Stock'
              union all
              -- tc charges
              select gmr.gmr_ref_no,
                     grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     intc.element_id,
                     (case
                       when pcpd.unit_of_measure = 'Wet' then
                        pkg_metals_general.fn_get_assay_dry_qty(gmr.product_id,
                                                                iam.ash_id,
                                                                gmr.current_qty,
                                                                gmr.qty_unit_id)
                       else
                        gmr.current_qty
                     end) gmr_qty,
                     gmr.qty_unit_id,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     intc.tcharges_amount tcharges_amount,
                     0 rcharges_amount,
                     0 penalty_amount,
                     0 other_charges,
                     iid.invoice_currency_id,
                     iss.invoice_issue_date
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     is_invoice_summary          iss,
                     intc_inv_treatment_charges  intc,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm,
                     pcpd_pc_product_definition  pcpd
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iss.internal_invoice_ref_no =
                     iid.internal_invoice_ref_no
                 and iss.is_active = 'Y'
                 and iss.process_id = pc_process_id
                 and iid.internal_invoice_ref_no =
                     intc.internal_invoice_ref_no
                 and iid.stock_id = intc.grd_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and intc.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and gmr.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.process_id = pc_process_id
                 and pcpd.input_output = 'Input'
                 and gmr.is_pass_through = 'Y'
                 and grd.tolling_stock_type = 'Clone Stock'
              union all
              -- rc charges
              select gmr.gmr_ref_no,
                     grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     inrc.element_id,
                     (case
                       when pcpd.unit_of_measure = 'Wet' then
                        pkg_metals_general.fn_get_assay_dry_qty(gmr.product_id,
                                                                iam.ash_id,
                                                                gmr.current_qty,
                                                                gmr.qty_unit_id)
                       else
                        gmr.current_qty
                     end) gmr_qty,
                     gmr.qty_unit_id,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 tcharges_amount,
                     inrc.rcharges_amount rcharges_amount,
                     0 penalty_amount,
                     0 other_charges,
                     iid.invoice_currency_id,
                     iss.invoice_issue_date
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     is_invoice_summary          iss,
                     inrc_inv_refining_charges   inrc,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm,
                     pcpd_pc_product_definition  pcpd
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iss.internal_invoice_ref_no =
                     iid.internal_invoice_ref_no
                 and iss.is_active = 'Y'
                 and iss.process_id = pc_process_id
                 and iid.internal_invoice_ref_no =
                     inrc.internal_invoice_ref_no
                 and iid.stock_id = inrc.grd_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and inrc.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and gmr.is_deleted = 'N'
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and gmr.is_pass_through = 'Y'
                 and gmr.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.process_id = pc_process_id
                 and pcpd.input_output = 'Input'
                 and grd.tolling_stock_type = 'Clone Stock'
              union all
              -- penality charges
              select gmr.gmr_ref_no,
                     grd.internal_gmr_ref_no,
                     grd.internal_grd_ref_no,
                     gmr.internal_contract_ref_no,
                     gmr.corporate_id,
                     grd.product_id,
                     grd.quality_id,
                     grd.profit_center_id,
                     iepd.element_id,
                     (case
                       when pcpd.unit_of_measure = 'Wet' then
                        pkg_metals_general.fn_get_assay_dry_qty(gmr.product_id,
                                                                iam.ash_id,
                                                                gmr.current_qty,
                                                                gmr.qty_unit_id)
                       else
                        gmr.current_qty
                     end) gmr_qty,
                     gmr.qty_unit_id,
                     0 assay_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) assay_qty_unit,
                     0 payble_qty,
                     (case
                       when rm.ratio_name = '%' then
                        ash.net_weight_unit
                       else
                        rm.qty_unit_id_numerator
                     end) payable_qty_unit,
                     0 tcharges_amount,
                     0 rcharges_amount,
                     iepd.element_penalty_amount penalty_amount,
                     0 other_charges,
                     iid.invoice_currency_id,
                     iss.invoice_issue_date
                from gmr_goods_movement_record   gmr,
                     grd_goods_record_detail     grd,
                     iid_invoicable_item_details iid,
                     is_invoice_summary          iss,
                     iepd_inv_epenalty_details   iepd,
                     iam_invoice_assay_mapping   iam,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     rm_ratio_master             rm,
                     pcpd_pc_product_definition  pcpd
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = iid.internal_gmr_ref_no
                 and grd.internal_grd_ref_no = iid.stock_id
                 and iss.internal_invoice_ref_no =
                     iid.internal_invoice_ref_no
                 and iss.is_active = 'Y'
                 and iss.process_id = pc_process_id
                 and iid.internal_invoice_ref_no =
                     iepd.internal_invoice_ref_no
                 and iid.stock_id = iepd.stock_id
                 and iid.internal_invoice_ref_no =
                     iam.internal_invoice_ref_no
                 and iid.stock_id = iam.internal_grd_ref_no
                 and iam.ash_id = ash.ash_id
                 and ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and iepd.element_id = pqca.element_id
                 and pqca.unit_of_measure = rm.ratio_id
                 and gmr.latest_internal_invoice_ref_no =
                     iid.internal_invoice_ref_no(+)
                 and gmr.is_deleted = 'N'
                 and gmr.is_pass_through = 'Y'
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and gmr.corporate_id = pc_corporate_id
                 and gmr.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.process_id = pc_process_id
                 and pcpd.input_output = 'Input'
                 and grd.tolling_stock_type = 'Clone Stock') temp,
             ak_corporate akc,
             pdm_productmaster pdm,
             qat_quality_attributes qat,
             aml_attribute_master_list aml,
             cm_currency_master cm_invoice,
             cm_currency_master cm_base,
             pcm_physical_contract_main pcm,
             phd_profileheaderdetails phd,
             qum_quantity_unit_master qum_gmr,
             qum_quantity_unit_master qum_assay,
             qum_quantity_unit_master qum_paybale,
             (select gmr.internal_gmr_ref_no,
                     iss.total_other_charge_amount other_charges
                from gmr_goods_movement_record gmr,
                     is_invoice_summary        iss
               where (iss.internal_invoice_ref_no, gmr.internal_gmr_ref_no) in
                     (select iid.internal_invoice_ref_no,
                             iid.internal_gmr_ref_no
                        from iid_invoicable_item_details iid
                       where iid.internal_invoice_ref_no =
                             iss.internal_invoice_ref_no
                         and iid.internal_gmr_ref_no =
                             gmr.internal_gmr_ref_no
                         and gmr.latest_internal_invoice_ref_no =
                             iss.internal_invoice_ref_no
                         and iss.is_active = 'Y'
                         and iss.process_id = pc_process_id
                         and gmr.process_id = pc_process_id)) oth_chagres
       where temp.corporate_id = akc.corporate_id
         and temp.product_id = pdm.product_id
         and temp.quality_id = qat.quality_id
         and temp.element_id = aml.attribute_id
         and temp.invoice_currency_id = cm_invoice.cur_id
         and akc.base_cur_id = cm_base.cur_id
         and temp.internal_contract_ref_no = pcm.internal_contract_ref_no
         and pcm.process_id = pc_process_id
         and pcm.cp_id = phd.profileid
         and temp.qty_unit_id = qum_gmr.qty_unit_id
         and temp.assay_qty_unit = qum_assay.qty_unit_id
         and temp.payable_qty_unit = qum_paybale.qty_unit_id
         and temp.internal_gmr_ref_no = oth_chagres.internal_gmr_ref_no(+)
       group by temp.invoice_issue_date,
                pc_process_id,
                temp.corporate_id,
                akc.corporate_name,
                temp.gmr_ref_no,
                temp.product_id,
                pdm.product_desc,
                temp.quality_id,
                qat.quality_name,
                temp.element_id,
                aml.attribute_name,
                temp.assay_qty_unit,
                temp.payable_qty_unit,
                temp.invoice_currency_id,
                cm_invoice.cur_code,
                akc.base_cur_id,
                cm_base.cur_code,
                pcm.cp_id,
                phd.companyname,
                temp.gmr_qty,
                temp.qty_unit_id,
                qum_gmr.qty_unit,
                qum_assay.qty_unit,
                qum_paybale.qty_unit,
                oth_chagres.other_charges;
    commit;
  end;
  procedure sp_stock_monthly_yeild(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2) as
  
  begin
    insert into stock_monthly_yeild_data
      (corporate_id,
       corporate_name,
       process_id,
       internal_gmr_ref_no,
       gmr_ref_no,
       element_id,
       cp_id,
       total_qty_in_wet,
       total_qty_in_dry,
       unit_of_measure,
       avg_typical,
       yield_pct,
       current_qty,
       qty_unit_id,
       ytd_year,
       ytd_month,
       ytd_group_column,
       element_name,
       element_product_id,
       element_product_name,
       conc_product_id,
       conc_qty_unit_id,
       conc_qty_unit) with ytd_data as
      (select ypd.internal_gmr_ref_no,
              ypd.element_id,
              gmr.gmr_ref_no || case
                when gmr.is_final_invoiced = 'Y' then
                 '[FIN]'
                when gmr.is_provisional_invoiced = 'Y' then
                 '[PRV]'
                else
                 ''
              end gmr_ref_no,
              gmr.corporate_id,
              aml.attribute_name element_name,
              pdm.product_id element_product_id,
              pdm.product_desc element_product_name,
              ypd.yield_pct,
              agmr.current_qty,
              agmr.qty_unit_id,
              to_char(agmr.eff_date, 'yyyy') ytd_year,
              to_char(agmr.eff_date, 'Mon') ytd_month,
              to_date('01-' || to_char(agmr.eff_date, 'Mon-yyyy'),
                      'dd-Mon-yyyy') ytd_group_column
         from ypd_yield_pct_detail      ypd,
              axs_action_summary        axs,
              gmr_goods_movement_record gmr,
              agmr_action_gmr           agmr,
              aml_attribute_master_list aml,
              pdm_productmaster         pdm,
              dbd_database_dump         dbd,
              is_invoice_summary        iss
        where ypd.internal_gmr_ref_no = gmr.internal_gmr_ref_no
          and ypd.internal_action_ref_no = axs.internal_action_ref_no
          and ypd.internal_gmr_ref_no = agmr.internal_gmr_ref_no
          and ypd.element_id = aml.attribute_id
          and aml.underlying_product_id = pdm.product_id(+)
          and gmr.process_id = pc_process_id
          and gmr.corporate_id = pc_corporate_id
          and axs.dbd_id = dbd.dbd_id
          and dbd.process = 'EOM'
          and gmr.latest_internal_invoice_ref_no =
              iss.internal_invoice_ref_no(+)
          and gmr.is_deleted = 'N'
          and aml.is_active = 'Y'
          and pdm.is_active = 'Y'
          and agmr.action_no = '1'
          and ypd.is_active = 'Y')
      select ytd.corporate_id,
             akc.corporate_name,
             pc_process_id,
             stock.internal_gmr_ref_no,
             ytd.gmr_ref_no,
             stock.element_id,
             stock.cp_id,
             stock.total_qty_in_wet,
             stock.total_qty_in_dry,
             stock.unit_of_measure,
             round(sum(stock.total_qty_in_dry * stock.typical) /
                   sum(stock.total_qty_in_dry),
                   4) avg_typical,
             ytd.yield_pct,
             ytd.current_qty,
             ytd.qty_unit_id,
             ytd.ytd_year,
             ytd.ytd_month,
             ytd.ytd_group_column,
             ytd.element_name,
             ytd.element_product_id,
             ytd.element_product_name,
             stock.conc_product_id,
             stock.conc_qty_unit_id,
             stock.conc_qty_unit
        from (select sac.internal_gmr_ref_no,
                     sac.internal_grd_ref_no,
                     sac.element_id,
                     (ucm.multiplication_factor * sac.total_qty_in_wet) total_qty_in_wet,
                     (ucm.multiplication_factor * sac.total_qty_in_dry) total_qty_in_dry,
                     sac.wtdavgpostion_ash_id,
                     sac.latest_assay_id,
                     pqca.unit_of_measure,
                     pqca.typical,
                     pqca.finalization_method,
                     pqca.is_final_assay,
                     pqca.assay_winner,
                     pqca.is_final_assay,
                     pqca.is_elem_for_pricing,
                     pqca.is_deductible,
                     pqca.is_returnable,
                     pcm.cp_id,
                     grd.product_id conc_product_id,
                     pdm.base_quantity_unit conc_qty_unit_id,
                     qum.qty_unit conc_qty_unit
                from sac_stock_assay_content     sac,
                     ash_assay_header            ash,
                     asm_assay_sublot_mapping    asm,
                     pqca_pq_chemical_attributes pqca,
                     grd_goods_record_detail     grd,
                     pci_physical_contract_item  pci,
                     pcdi_pc_delivery_item       pcdi,
                     pcm_physical_contract_main  pcm,
                     pdm_productmaster           pdm,
                     ucm_unit_conversion_master  ucm,
                     qum_quantity_unit_master    qum
               where ash.ash_id = asm.ash_id
                 and asm.asm_id = pqca.asm_id
                 and pqca.element_id = sac.element_id
                 and pqca.is_active = 'Y'
                 and ash.ash_id = sac.wtdavgpostion_ash_id
                 and grd.product_id = pdm.product_id
                 and grd.qty_unit_id = ucm.from_qty_unit_id
                 and pdm.base_quantity_unit = ucm.to_qty_unit_id
                 and pdm.base_quantity_unit = qum.qty_unit_id
                 and sac.internal_grd_ref_no = grd.internal_grd_ref_no
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no
                 and pci.pcdi_id = pcdi.pcdi_id
                 and pcdi.internal_contract_ref_no =
                     pcm.internal_contract_ref_no
                 and grd.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pci.is_active = 'Y'
                 and pcm.is_active = 'Y'
                 and pcdi.is_active = 'Y'
                 and ash.is_active = 'Y'
                 and asm.is_active = 'Y'
                 and pqca.is_active = 'Y'
                 and pdm.is_active = 'Y'
                 and ucm.is_active = 'Y'
                 and qum.is_active = 'Y'
               group by sac.internal_gmr_ref_no,
                        sac.internal_grd_ref_no,
                        sac.element_id,
                        sac.total_qty_in_wet,
                        sac.total_qty_in_dry,
                        sac.wtdavgpostion_ash_id,
                        ucm.multiplication_factor,
                        grd.product_id,
                        pdm.base_quantity_unit,
                        qum.qty_unit,
                        sac.latest_assay_id,
                        pqca.unit_of_measure,
                        pqca.typical,
                        pqca.finalization_method,
                        pqca.is_final_assay,
                        pqca.assay_winner,
                        pqca.is_final_assay,
                        pqca.is_elem_for_pricing,
                        pqca.is_deductible,
                        pcm.cp_id,
                        pqca.is_returnable) stock,
             ytd_data ytd,
             ak_corporate akc
       where stock.internal_gmr_ref_no = ytd.internal_gmr_ref_no
         and stock.element_id = ytd.element_id
         and ytd.corporate_id = akc.corporate_id
       group by stock.internal_gmr_ref_no,
                stock.element_id,
                stock.cp_id,
                stock.total_qty_in_wet,
                stock.total_qty_in_dry,
                stock.unit_of_measure,
                ytd.yield_pct,
                ytd.current_qty,
                ytd.qty_unit_id,
                ytd.gmr_ref_no,
                ytd.ytd_year,
                ytd.ytd_month,
                ytd.ytd_group_column,
                ytd.element_name,
                ytd.element_product_id,
                ytd.element_product_name,
                stock.conc_product_id,
                stock.conc_qty_unit_id,
                stock.conc_qty_unit,
                ytd.corporate_id,
                akc.corporate_name,
                pc_process_id;
    commit;
  end;

  procedure sp_calc_risk_limits(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_user_id      varchar2,
                                pc_process      varchar2) is
    --vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    -- vn_eel_error_count number := 1;
  begin
    insert into cre_cp_risk_exposure
      (process_id,
       process_date,
       process,
       corporate_id,
       group_id,
       group_name,
       product_id,
       product_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       contract_type,
       cp_profile_id,
       cp_name,
       qty_exposure,
       qty_exp_unit_id,
       qty_exp_unit,
       value_exposure,
       value_exp_cur_id,
       value_exp_cur_code,
       m2m_exposure,
       m2m_exp_cur_id,
       m2m_exp_cur_code,
       credit_exposure,
       credit_exp_cur_id,
       credit_exp_cur_code)
      select t.process_id,
             t.process_date,
             t.process,
             t.corporate_id,
             t.group_id,
             t.group_name,
             t.product_id,
             t.product_name,
             t.profit_center_id,
             t.profit_center_name,
             t.profit_center_short_name,
             t.contract_type,
             t.cp_profile_id,
             t.cp_name,
             sum(t.qty_exposure) qty_exposure,
             t.qty_exp_unit_id,
             t.qty_exp_unit,
             sum(t.value_exposure) value_exposure,
             t.value_exp_cur_id,
             t.value_exp_cur_code,
             sum(t.m2m_exposure) m2m_exposure,
             t.m2m_exp_cur_id,
             t.m2m_exp_cur_code,
             sum(t.credit_exposure) credit_exposure,
             t.credit_exp_cur_id,
             t.credit_exp_cur_code
        from (select poud.process_id process_id,
                     poud.eod_trade_date process_date,
                     tdc.process process,
                     poud.corporate_id corporate_id,
                     poud.group_id group_id,
                     poud.group_name group_name,
                     poud.product_id product_id,
                     poud.product_name product_name,
                     poud.profit_center_id profit_center_id,
                     poud.profit_center_name profit_center_name,
                     poud.profit_center_short_name profit_center_short_name,
                     poud.contract_type contract_type,
                     poud.cp_profile_id cp_profile_id,
                     poud.cp_name cp_name,
                     sum(poud.qty_in_base_unit) qty_exposure,
                     poud.base_qty_unit_id qty_exp_unit_id,
                     poud.base_qty_unit qty_exp_unit,
                     sum(poud.contract_value_in_price_cur *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.price_main_cur_id,
                                                                  poud.base_cur_id,
                                                                  poud.eod_trade_date,
                                                                  1)) value_exposure,
                     poud.base_cur_id value_exp_cur_id,
                     poud.base_cur_code value_exp_cur_code,
                     sum(poud.m2m_amt *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.m2m_amt_cur_id,
                                                                  poud.base_cur_id,
                                                                  poud.eod_trade_date,
                                                                  1)) m2m_exposure,
                     poud.base_cur_id m2m_exp_cur_id,
                     poud.base_cur_code m2m_exp_cur_code,
                     0 credit_exposure,
                     poud.base_cur_id credit_exp_cur_id,
                     poud.base_cur_code credit_exp_cur_code
                from poud_phy_open_unreal_daily poud,
                     tdc_trade_date_closure     tdc
               where poud.corporate_id = pc_corporate_id
                 and poud.process_id = pc_process_id
                 and poud.process_id = tdc.process_id
               group by poud.process_id,
                        poud.eod_trade_date,
                        tdc.process,
                        poud.corporate_id,
                        poud.group_id,
                        poud.group_name,
                        poud.product_id,
                        poud.product_name,
                        poud.profit_center_id,
                        poud.profit_center_name,
                        poud.profit_center_short_name,
                        poud.contract_type,
                        poud.cp_profile_id,
                        poud.cp_name,
                        poud.base_qty_unit_id,
                        poud.base_qty_unit,
                        poud.base_cur_id,
                        poud.base_cur_code
              union all
              select poud.process_id,
                     tdc.trade_date process_date,
                     tdc.process,
                     poud.corporate_id,
                     akc.groupid group_id,
                     gcd.groupname group_name,
                     poud.product_id,
                     poud.product_name,
                     cpc.profit_center_id,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     poud.contract_type,
                     poud.cp_profile_id,
                     poud.cp_name,
                     sum(poud.qty_in_base_unit) qty_exposure,
                     pdm.base_quantity_unit qty_exp_unit_id,
                     qum.qty_unit qty_exp_unit,
                     sum(poud.contract_value_in_price_cur *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.contract_price_cur_id,
                                                                  poud.base_cur_id,
                                                                  tdc.trade_date,
                                                                  1)) value_exposure,
                     poud.base_cur_id value_exp_cur_id,
                     poud.base_cur_code value_exp_cur_code,
                     sum(poud.m2m_amt *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.m2m_amt_cur_id,
                                                                  poud.base_cur_id,
                                                                  tdc.trade_date,
                                                                  1)) m2m_exposure,
                     poud.base_cur_id m2m_exp_cur_id,
                     poud.base_cur_code m2m_exp_cur_code,
                     0 credit_exposure,
                     poud.base_cur_id credit_exp_cur_id,
                     poud.base_cur_code credit_exp_cur_code
                from psu_phy_stock_unrealized    poud,
                     cpc_corporate_profit_center cpc,
                     tdc_trade_date_closure      tdc,
                     pdm_productmaster           pdm,
                     qum_quantity_unit_master    qum,
                     ak_corporate                akc,
                     gcd_groupcorporatedetails   gcd
               where poud.corporate_id = pc_corporate_id
                 and poud.process_id = pc_process_id
                 and poud.profit_center_id = cpc.profit_center_id
                 and poud.process_id = tdc.process_id
                 and poud.product_id = pdm.product_id
                 and pdm.base_quantity_unit = qum.qty_unit_id
                 and poud.corporate_id = akc.corporate_id
                 and akc.groupid = gcd.groupid
               group by poud.process_id,
                        tdc.trade_date,
                        tdc.process,
                        poud.corporate_id,
                        akc.groupid,
                        gcd.groupname,
                        poud.product_id,
                        poud.product_name,
                        cpc.profit_center_id,
                        cpc.profit_center_name,
                        cpc.profit_center_short_name,
                        poud.contract_type,
                        poud.cp_profile_id,
                        poud.cp_name,
                        pdm.base_quantity_unit,
                        qum.qty_unit,
                        poud.base_cur_id,
                        poud.base_cur_code) t
       group by t.process_id,
                t.process_date,
                t.process,
                t.corporate_id,
                t.group_id,
                t.group_name,
                t.product_id,
                t.product_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.contract_type,
                t.cp_profile_id,
                t.cp_name,
                t.qty_exp_unit_id,
                t.qty_exp_unit,
                t.value_exp_cur_id,
                t.value_exp_cur_code,
                t.m2m_exp_cur_id,
                t.m2m_exp_cur_code,
                t.credit_exp_cur_id,
                t.credit_exp_cur_code;
    ----
    insert into tre_trader_risk_exposure
      (process_id,
       process_date,
       process,
       corporate_id,
       group_id,
       group_name,
       product_id,
       product_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       contract_type,
       trader_user_id,
       trader_user_name,
       qty_exposure,
       qty_exp_unit_id,
       qty_exp_unit,
       value_exposure,
       value_exp_cur_id,
       value_exp_cur_code,
       m2m_exposure,
       m2m_exp_cur_id,
       m2m_exp_cur_code,
       credit_exposure,
       credit_exp_cur_id,
       credit_exp_cur_code)
      select t.process_id,
             t.process_date,
             t.process,
             t.corporate_id,
             t.group_id,
             t.group_name,
             t.product_id,
             t.product_name,
             t.profit_center_id,
             t.profit_center_name,
             t.profit_center_short_name,
             t.contract_type,
             t.trade_user_id trader_user_id,
             gab.firstname || ' ' || gab.lastname trader_user_name,
             sum(t.qty_exposure) qty_exposure,
             t.qty_exp_unit_id,
             t.qty_exp_unit,
             sum(t.value_exposure) value_exposure,
             t.value_exp_cur_id,
             t.value_exp_cur_code,
             sum(t.m2m_exposure) m2m_exposure,
             t.m2m_exp_cur_id,
             t.m2m_exp_cur_code,
             sum(t.credit_exposure) credit_exposure,
             t.credit_exp_cur_id,
             t.credit_exp_cur_code
        from (select poud.process_id process_id,
                     poud.eod_trade_date process_date,
                     tdc.process process,
                     poud.corporate_id corporate_id,
                     poud.group_id group_id,
                     poud.group_name group_name,
                     poud.product_id product_id,
                     poud.product_name product_name,
                     poud.profit_center_id profit_center_id,
                     poud.profit_center_name profit_center_name,
                     poud.profit_center_short_name profit_center_short_name,
                     poud.contract_type contract_type,
                     poud.trade_user_id,
                     poud.trade_user_name,
                     sum(poud.qty_in_base_unit) qty_exposure,
                     poud.base_qty_unit_id qty_exp_unit_id,
                     poud.base_qty_unit qty_exp_unit,
                     sum(poud.contract_value_in_price_cur *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.price_main_cur_id,
                                                                  poud.base_cur_id,
                                                                  poud.eod_trade_date,
                                                                  1)) value_exposure,
                     poud.base_cur_id value_exp_cur_id,
                     poud.base_cur_code value_exp_cur_code,
                     sum(poud.m2m_amt *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.m2m_amt_cur_id,
                                                                  poud.base_cur_id,
                                                                  poud.eod_trade_date,
                                                                  1)) m2m_exposure,
                     poud.base_cur_id m2m_exp_cur_id,
                     poud.base_cur_code m2m_exp_cur_code,
                     0 credit_exposure,
                     poud.base_cur_id credit_exp_cur_id,
                     poud.base_cur_code credit_exp_cur_code
                from poud_phy_open_unreal_daily poud,
                     tdc_trade_date_closure     tdc
               where poud.corporate_id = pc_corporate_id
                 and poud.process_id = pc_process_id
                 and poud.process_id = tdc.process_id
               group by poud.process_id,
                        poud.eod_trade_date,
                        tdc.process,
                        poud.corporate_id,
                        poud.group_id,
                        poud.group_name,
                        poud.product_id,
                        poud.product_name,
                        poud.profit_center_id,
                        poud.profit_center_name,
                        poud.profit_center_short_name,
                        poud.contract_type,
                        poud.trade_user_id,
                        poud.trade_user_name,
                        poud.base_qty_unit_id,
                        poud.base_qty_unit,
                        poud.base_cur_id,
                        poud.base_cur_code
              union all
              select poud.process_id,
                     tdc.trade_date process_date,
                     tdc.process,
                     poud.corporate_id,
                     akc.groupid group_id,
                     gcd.groupname group_name,
                     poud.product_id,
                     poud.product_name,
                     cpc.profit_center_id,
                     cpc.profit_center_name,
                     cpc.profit_center_short_name,
                     poud.contract_type,
                     poud.trader_id trade_user_id,
                     poud.trader_name trade_user_name,
                     sum(poud.qty_in_base_unit) qty_exposure,
                     pdm.base_quantity_unit qty_exp_unit_id,
                     qum.qty_unit qty_exp_unit,
                     sum(poud.contract_value_in_price_cur *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.contract_price_cur_id,
                                                                  poud.base_cur_id,
                                                                  tdc.trade_date,
                                                                  1)) value_exposure,
                     poud.base_cur_id value_exp_cur_id,
                     poud.base_cur_code value_exp_cur_code,
                     sum(poud.m2m_amt *
                         pkg_general.f_get_converted_currency_amt(poud.corporate_id,
                                                                  poud.m2m_amt_cur_id,
                                                                  poud.base_cur_id,
                                                                  tdc.trade_date,
                                                                  1)) m2m_exposure,
                     poud.base_cur_id m2m_exp_cur_id,
                     poud.base_cur_code m2m_exp_cur_code,
                     0 credit_exposure,
                     poud.base_cur_id credit_exp_cur_id,
                     poud.base_cur_code credit_exp_cur_code
                from psu_phy_stock_unrealized    poud,
                     cpc_corporate_profit_center cpc,
                     tdc_trade_date_closure      tdc,
                     pdm_productmaster           pdm,
                     qum_quantity_unit_master    qum,
                     ak_corporate                akc,
                     gcd_groupcorporatedetails   gcd
               where poud.corporate_id = pc_corporate_id
                 and poud.process_id = pc_process_id
                 and poud.profit_center_id = cpc.profit_center_id
                 and poud.process_id = tdc.process_id
                 and poud.product_id = pdm.product_id
                 and pdm.base_quantity_unit = qum.qty_unit_id
                 and poud.corporate_id = akc.corporate_id
                 and akc.groupid = gcd.groupid
               group by poud.process_id,
                        tdc.trade_date,
                        tdc.process,
                        poud.corporate_id,
                        akc.groupid,
                        gcd.groupname,
                        poud.product_id,
                        poud.product_name,
                        cpc.profit_center_id,
                        cpc.profit_center_name,
                        cpc.profit_center_short_name,
                        poud.contract_type,
                        poud.trader_id,
                        poud.trader_name,
                        pdm.base_quantity_unit,
                        qum.qty_unit,
                        poud.base_cur_id,
                        poud.base_cur_code) t,
             gab_globaladdressbook gab,
             ak_corporate_user aku
       where t.trade_user_id = aku.user_id(+)
         and aku.gabid = gab.gabid(+)
       group by t.process_id,
                t.process_date,
                t.process,
                t.corporate_id,
                t.group_id,
                t.group_name,
                t.product_id,
                t.product_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.contract_type,
                t.trade_user_id,
                gab.firstname || ' ' || gab.lastname,
                t.qty_exp_unit_id,
                t.qty_exp_unit,
                t.value_exp_cur_id,
                t.value_exp_cur_code,
                t.m2m_exp_cur_id,
                t.m2m_exp_cur_code,
                t.credit_exp_cur_id,
                t.credit_exp_cur_code;
  exception
    when others then
      dbms_output.put_line('Error in CRC calculation');
      null;
      /*vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'sp_calc_risk_limits',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);*/
  end;
  procedure sp_calc_phy_unreal_pnl_attr(pc_corporate_id        varchar2,
                                        pd_trade_date          date,
                                        pd_prev_trade_date     date,
                                        pc_process_id          varchar2,
                                        pc_previous_process_id varchar2,
                                        pc_user_id             varchar2
                                        --------------------------------------------------------------------------------------------------------------------------
                                        --        procedure name                            : sp_calc_phy_unreal_pnl_attr
                                        --        author                                    : AGS REPORTS TEAM
                                        --        created date                              : 11th Jan 2011
                                        --        purpose                                   : populate physical open unrealized pnl
                                        --        parameters
                                        --        pc_corporate_id                           : corporate id
                                        --        pd_trade_date                             : eod date id
                                        --        pc_user_id                                : user id
                                        --        pc_process                                : process
                                        --        modification history
                                        --        modified date                             :
                                        --        modified by                               :
                                        --        modify description                        :
                                        --------------------------------------------------------------------------------------------------------------------------
                                        ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    --
    -- New Contract
    --
    cursor unreal_pnl_attr is
      select poud.process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'New Contract' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                1.1
               when poud.contract_type = 'S' then
                1.2
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no delivery_item_no,
             pci.del_distribution_item_no,
             poud.contract_type contract_type,
             poud.item_qty item_qty,
             poud.qty_unit_id qty_unit_id,
             poud.qty_unit qty_unit,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud.qty_unit curr_eod_qty_unit,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud.price_unit_cur_code || '/' || poud.price_unit_weight_unit curr_eod_price_unit,
             poud.unrealized_pnl_in_base_cur net_pnlc_in_base,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date trade_date,
             pc_previous_process_id prev_process_id,
             pd_prev_trade_date as prev_trade_date
        from poud_phy_open_unreal_daily poud,
             pci_physical_contract_item pci
       where poud.cont_unr_status = 'NEW_TRADE'
         and poud.process_id = pc_process_id
         and poud.internal_contract_item_ref_no =
             pci.internal_contract_item_ref_no
         and pci.process_id = poud.process_id;
    --        
    --- Quantity Modification on Contract
    --
    cursor unreal_pnl_attr_mcq is
      select poud.process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'Quantity' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
               else
                'Others'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                2.1
               when poud.contract_type = 'S' then
                2.2
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no delivery_item_no,
             pci.del_distribution_item_no,
             poud.contract_type contract_type,
             poud.item_qty item_qty,
             poud.qty_unit_id qty_unit_id,
             poud.qty_unit qty_unit,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud.qty_unit curr_eod_qty_unit,
             poud_prev.qty_in_base_unit prev_eod_qty,
             poud.prev_qty_unit_id prev_eod_qty_unit_id,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud.price_unit_cur_code || '/' || poud.price_unit_weight_unit curr_eod_price_unit,
             poud_prev.contract_price prev_eod_contract_price,
             poud_prev.price_unit_id prev_eod_price_unit_id,
             poud.md_id,
             poud_prev.md_id prev_md_id,
             poud.net_m2m_price,
             poud.m2m_price_unit_id,
             poud_prev.net_m2m_price prev_net_m2m_price,
             poud_prev.m2m_price_unit_id prev_m2m_price_unit_id,
             poud.unrealized_pnl_in_base_cur net_pnlc_in_base,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date trade_date,
             pc_previous_process_id prev_process_id,
             pd_prev_trade_date as prev_trade_date,
             ppu.price_unit_id price_unit_id_in_pum,
             md.base_price_unit_id_in_pum m2m_base_price_unit_id_in_pum
        from poud_phy_open_unreal_daily poud,
             pci_physical_contract_item pci,
             v_ppu_pum ppu,
             md_m2m_daily md,
             (select *
                from poud_phy_open_unreal_daily poud
               where poud.process_id = pc_previous_process_id) poud_prev
       where poud.cont_unr_status = 'EXISTING_TRADE'
         and poud.qty_in_base_unit <> poud_prev.qty_in_base_unit
         and poud.process_id = pc_process_id
         and poud.internal_contract_item_ref_no =
             poud_prev.internal_contract_item_ref_no
         and poud.pcdi_id = poud_prev.pcdi_id
         and pci.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             poud.internal_contract_item_ref_no
         and poud.price_unit_id = ppu.product_price_unit_id
         and poud.md_id = md.md_id
         and md.process_id = pc_process_id;
    --           
    ---Change in Price
    --
    cursor unreal_pnl_attr_price is
      select poud.process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'Pricing' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
               else
                'Others'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                3.1
               when poud.contract_type = 'S' then
                3.2
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no delivery_item_no,
             pci.del_distribution_item_no,
             poud.contract_type contract_type,
             poud.item_qty item_qty,
             poud.qty_unit_id qty_unit_id,
             poud.qty_unit qty_unit,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud.qty_unit curr_eod_qty_unit,
             poud_prev.qty_in_base_unit prev_eod_qty,
             poud_prev.qty_unit_id prev_eod_qty_unit_id,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud.price_unit_cur_code || '/' || poud.price_unit_weight_unit curr_eod_price_unit,
             poud_prev.contract_price prev_eod_contract_price,
             poud_prev.price_unit_id prev_eod_price_unit_id,
             poud.md_id,
             poud_prev.md_id prev_md_id,
             poud.net_m2m_price,
             poud.m2m_price_unit_id,
             poud_prev.net_m2m_price prev_net_m2m_price,
             poud_prev.m2m_price_unit_id prev_m2m_price_unit_id,
             poud.unrealized_pnl_in_base_cur net_pnlc_in_base,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date trade_date,
             pc_previous_process_id prev_process_id,
             pd_prev_trade_date as prev_trade_date,
             ppu.product_price_unit_id price_unit_id_in_base
        from poud_phy_open_unreal_daily poud,
             pci_physical_contract_item pci,
             v_ppu_pum ppu,
             (select *
                from poud_phy_open_unreal_daily poud
               where poud.process_id = pc_previous_process_id) poud_prev
       where poud.cont_unr_status = 'EXISTING_TRADE'
         and poud.contract_price <> poud_prev.contract_price
         and poud.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             poud.internal_contract_item_ref_no
         and poud.internal_contract_item_ref_no =
             poud_prev.internal_contract_item_ref_no
         and poud.pcdi_id = poud_prev.pcdi_id
         and ppu.product_id = poud.product_id
         and ppu.cur_id = poud.base_cur_id
         and ppu.weight_unit_id = poud.base_qty_unit_id
         and nvl(ppu.weight, 1) = 1;
    --
    ---Change in Estimates
    --
    cursor unreal_pnl_attr_estimates is
      select poud.process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'Estimates' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
               else
                'Others'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                4.1
               when poud.contract_type = 'S' then
                4.2
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no delivery_item_no,
             pci.del_distribution_item_no,
             poud.contract_type contract_type,
             poud.item_qty item_qty,
             poud.qty_unit_id qty_unit_id,
             poud.qty_unit qty_unit,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud.qty_unit curr_eod_qty_unit,
             poud_prev.qty_in_base_unit prev_eod_qty,
             poud_prev.qty_unit_id prev_eod_qty_unit_id,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud.price_unit_cur_code || '/' || poud.price_unit_weight_unit curr_eod_price_unit,
             poud_prev.contract_price prev_eod_contract_price,
             poud_prev.price_unit_id prev_eod_price_unit_id,
             poud.md_id,
             poud_prev.md_id prev_md_id,
             poud.net_m2m_price,
             poud.m2m_price_unit_id,
             poud_prev.net_m2m_price prev_net_m2m_price,
             poud_prev.m2m_price_unit_id prev_m2m_price_unit_id,
             poud.sc_in_base_cur,
             poud_prev.sc_in_base_cur prev_sc_in_base_cur,
             poud.unrealized_pnl_in_base_cur net_pnlc_in_base,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date trade_date,
             pc_previous_process_id prev_process_id,
             pd_prev_trade_date as prev_trade_date
        from poud_phy_open_unreal_daily poud,
             pci_physical_contract_item pci,
             (select *
                from poud_phy_open_unreal_daily poud
               where poud.process_id = pc_previous_process_id) poud_prev
       where poud.cont_unr_status = 'EXISTING_TRADE'
         and poud.sc_in_base_cur <> poud_prev.sc_in_base_cur
         and poud.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             poud.internal_contract_item_ref_no
         and poud.internal_contract_item_ref_no =
             poud_prev.internal_contract_item_ref_no
         and poud.pcdi_id = poud_prev.pcdi_id;
    --
    ---Change in Location differentials
    --
    cursor unreal_pnl_attr_ldc is
      select poud.process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'Location differentials' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
               else
                'Others'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                5.1
               when poud.contract_type = 'S' then
                5.2
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no delivery_item_no,
             pci.del_distribution_item_no,
             poud.contract_type contract_type,
             poud.item_qty item_qty,
             poud.qty_unit_id qty_unit_id,
             poud.qty_unit qty_unit,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud.qty_unit curr_eod_qty_unit,
             poud_prev.qty_in_base_unit prev_eod_qty,
             poud_prev.qty_unit_id prev_eod_qty_unit_id,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud.price_unit_cur_code || '/' || poud.price_unit_weight_unit curr_eod_price_unit,
             poud_prev.contract_price prev_eod_contract_price,
             poud_prev.price_unit_id prev_eod_price_unit_id,
             poud.md_id,
             poud_prev.md_id prev_md_id,
             poud.net_m2m_price,
             poud.m2m_price_unit_id,
             poud_prev.net_m2m_price prev_net_m2m_price,
             poud_prev.m2m_price_unit_id prev_m2m_price_unit_id,
             poud.sc_in_base_cur,
             poud_prev.sc_in_base_cur prev_sc_in_base_cur,
             poud.net_m2m_price m2m_settlement_price,
             md.m2m_loc_incoterm_deviation m2m_loc_inco_deviation,
             poud_prev.net_m2m_price prev_m2m_settlement_price,
             md_prev.m2m_loc_incoterm_deviation prev_m2m_loc_inco_deviation,
             poud.unrealized_pnl_in_base_cur net_pnlc_in_base,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date trade_date,
             pc_previous_process_id prev_process_id,
             pd_prev_trade_date as prev_trade_date
        from poud_phy_open_unreal_daily poud,
             md_m2m_daily md,
             md_m2m_daily md_prev,
             pci_physical_contract_item pci,
             (select *
                from poud_phy_open_unreal_daily poud
               where poud.process_id = pc_previous_process_id) poud_prev
       where poud.cont_unr_status = 'EXISTING_TRADE'
         and md.m2m_loc_incoterm_deviation <>
             md_prev.m2m_loc_incoterm_deviation
         and poud.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             poud.internal_contract_item_ref_no
         and poud.internal_contract_item_ref_no =
             poud_prev.internal_contract_item_ref_no
         and poud.pcdi_id = poud_prev.pcdi_id
         and poud.md_id = md.md_id
         and md.process_id = pc_process_id
         and poud_prev.md_id = md_prev.md_id
         and md_prev.process_id = pc_previous_process_id;
    --
    --- Derivative Prices 
    --
    cursor unreal_pnl_attr_m2m_sp is
      select poud.process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'Derivative Prices' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
               else
                'Others'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                6.1
               when poud.contract_type = 'S' then
                6.2
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no delivery_item_no,
             pci.del_distribution_item_no,
             poud.contract_type contract_type,
             poud.item_qty item_qty,
             poud.qty_unit_id qty_unit_id,
             poud.qty_unit qty_unit,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud.qty_unit curr_eod_qty_unit,
             poud_prev.qty_in_base_unit prev_eod_qty,
             poud_prev.qty_unit_id prev_eod_qty_unit_id,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud.price_unit_cur_code || '/' || poud.price_unit_weight_unit curr_eod_price_unit,
             poud_prev.contract_price prev_eod_contract_price,
             poud_prev.price_unit_id prev_eod_price_unit_id,
             poud.md_id,
             poud_prev.md_id prev_md_id,
             poud.net_m2m_price,
             poud.m2m_price_unit_id,
             poud.net_m2m_price prev_net_m2m_price,
             poud_prev.m2m_price_unit_id prev_m2m_price_unit_id,
             poud.sc_in_base_cur,
             poud_prev.sc_in_base_cur prev_sc_in_base_cur,
             poud.net_m2m_price m2m_settlement_price,
             md.m2m_loc_incoterm_deviation m2m_loc_inco_deviation,
             poud_prev.net_m2m_price prev_m2m_settlement_price,
             md_prev.m2m_loc_incoterm_deviation prev_m2m_loc_inco_deviation,
             poud.unrealized_pnl_in_base_cur net_pnlc_in_base,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date trade_date,
             pc_previous_process_id prev_process_id,
             pd_prev_trade_date as prev_trade_date,
             md.base_price_unit_id_in_pum m2m_base_price_unit_id_in_pum
        from poud_phy_open_unreal_daily poud,
             pci_physical_contract_item pci,
             md_m2m_daily md,
             md_m2m_daily md_prev,
             (select *
                from poud_phy_open_unreal_daily poud
               where poud.process_id = pc_previous_process_id) poud_prev
       where poud.cont_unr_status = 'EXISTING_TRADE'
         and poud.net_m2m_price <> poud_prev.net_m2m_price
         and poud.process_id = pc_process_id
         and pci.process_id = pc_process_id
         and pci.internal_contract_item_ref_no =
             poud.internal_contract_item_ref_no
         and poud.internal_contract_item_ref_no =
             poud_prev.internal_contract_item_ref_no
         and poud.pcdi_id = poud_prev.pcdi_id
         and poud.md_id = md.md_id
         and md.process_id = pc_process_id
         and poud_prev.md_id = md_prev.md_id
         and md_prev.process_id = pc_process_id;
    vn_pnlc_due_to_attr   number := 0;
    vn_other_pnlc_in_base number := 0;
  begin
    --
    -- New Contracts
    --
    for unreal_pnl_attr_rows in unreal_pnl_attr
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         delivery_item_no,
         del_distribution_item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         net_pnlc_in_base,
         product_id,
         product_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         base_qty_unit_id,
         base_qty_unit,
         base_cur_id,
         base_cur_code,
         trade_date,
         prev_process_id,
         prev_trade_date)
      values
        (pc_process_id,
         unreal_pnl_attr_rows.corporate_id,
         unreal_pnl_attr_rows.corporate_name,
         unreal_pnl_attr_rows.attribution_type,
         unreal_pnl_attr_rows.attribution_main_type,
         unreal_pnl_attr_rows.attribution_sub_type,
         unreal_pnl_attr_rows.attribution_order,
         unreal_pnl_attr_rows.internal_contract_ref_no,
         unreal_pnl_attr_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_rows.contract_ref_no,
         unreal_pnl_attr_rows.delivery_item_no,
         unreal_pnl_attr_rows.del_distribution_item_no,
         unreal_pnl_attr_rows.contract_type,
         unreal_pnl_attr_rows.item_qty,
         unreal_pnl_attr_rows.qty_unit_id,
         unreal_pnl_attr_rows.curr_eod_qty,
         unreal_pnl_attr_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_rows.curr_eod_contract_price,
         unreal_pnl_attr_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_rows.net_pnlc_in_base,
         unreal_pnl_attr_rows.product_id,
         unreal_pnl_attr_rows.product_name,
         unreal_pnl_attr_rows.profit_center_id,
         unreal_pnl_attr_rows.profit_center_name,
         unreal_pnl_attr_rows.profit_center_short_name,
         unreal_pnl_attr_rows.base_qty_unit_id,
         unreal_pnl_attr_rows.base_qty_unit,
         unreal_pnl_attr_rows.base_cur_id,
         unreal_pnl_attr_rows.base_cur_code,
         unreal_pnl_attr_rows.trade_date,
         unreal_pnl_attr_rows.prev_process_id,
         unreal_pnl_attr_rows.prev_trade_date);
    end loop;
    --
    --- Quantity Modification on Contract
    --
    for unreal_pnl_attr_mcq_rows in unreal_pnl_attr_mcq
    loop
    
      if unreal_pnl_attr_mcq_rows.contract_type = 'P' then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_mcq_rows.curr_eod_qty -
                               nvl(unreal_pnl_attr_mcq_rows.prev_eod_qty,
                                     0)) *
                               ((pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      unreal_pnl_attr_mcq_rows.prev_net_m2m_price,
                                                                                      unreal_pnl_attr_mcq_rows.m2m_price_unit_id,
                                                                                      unreal_pnl_attr_mcq_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_mcq_rows.product_id)) -
                               (pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      unreal_pnl_attr_mcq_rows.prev_eod_contract_price,
                                                                                      unreal_pnl_attr_mcq_rows.price_unit_id_in_pum,
                                                                                      unreal_pnl_attr_mcq_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_mcq_rows.product_id))));
      elsif unreal_pnl_attr_mcq_rows.contract_type = 'S' then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_mcq_rows.curr_eod_qty -
                               nvl(unreal_pnl_attr_mcq_rows.prev_eod_qty,
                                     0)) *
                               ((pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      unreal_pnl_attr_mcq_rows.prev_eod_contract_price,
                                                                                      unreal_pnl_attr_mcq_rows.price_unit_id_in_pum,
                                                                                      unreal_pnl_attr_mcq_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_mcq_rows.product_id)) -
                               (pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      unreal_pnl_attr_mcq_rows.prev_net_m2m_price,
                                                                                      unreal_pnl_attr_mcq_rows.m2m_price_unit_id,
                                                                                      unreal_pnl_attr_mcq_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_mcq_rows.product_id))));
      end if;
    
      vn_other_pnlc_in_base := unreal_pnl_attr_mcq_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         delivery_item_no,
         del_distribution_item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base,
         product_id,
         product_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         base_qty_unit_id,
         base_qty_unit,
         base_cur_id,
         base_cur_code,
         trade_date,
         prev_process_id,
         prev_trade_date)
      values
        (pc_process_id,
         unreal_pnl_attr_mcq_rows.corporate_id,
         unreal_pnl_attr_mcq_rows.corporate_name,
         unreal_pnl_attr_mcq_rows.attribution_type,
         unreal_pnl_attr_mcq_rows.attribution_main_type,
         unreal_pnl_attr_mcq_rows.attribution_sub_type,
         unreal_pnl_attr_mcq_rows.attribution_order,
         unreal_pnl_attr_mcq_rows.internal_contract_ref_no,
         unreal_pnl_attr_mcq_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_mcq_rows.contract_ref_no,
         unreal_pnl_attr_mcq_rows.delivery_item_no,
         unreal_pnl_attr_mcq_rows.del_distribution_item_no,
         unreal_pnl_attr_mcq_rows.contract_type,
         unreal_pnl_attr_mcq_rows.item_qty,
         unreal_pnl_attr_mcq_rows.qty_unit_id,
         unreal_pnl_attr_mcq_rows.curr_eod_qty,
         unreal_pnl_attr_mcq_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_mcq_rows.prev_eod_qty,
         unreal_pnl_attr_mcq_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_mcq_rows.curr_eod_contract_price,
         unreal_pnl_attr_mcq_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_mcq_rows.prev_eod_contract_price,
         unreal_pnl_attr_mcq_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_mcq_rows.md_id,
         unreal_pnl_attr_mcq_rows.prev_md_id,
         unreal_pnl_attr_mcq_rows.net_m2m_price,
         unreal_pnl_attr_mcq_rows.m2m_price_unit_id,
         unreal_pnl_attr_mcq_rows.prev_net_m2m_price,
         unreal_pnl_attr_mcq_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_mcq_rows.net_pnlc_in_base,
         unreal_pnl_attr_mcq_rows.product_id,
         unreal_pnl_attr_mcq_rows.product_name,
         unreal_pnl_attr_mcq_rows.profit_center_id,
         unreal_pnl_attr_mcq_rows.profit_center_name,
         unreal_pnl_attr_mcq_rows.profit_center_short_name,
         unreal_pnl_attr_mcq_rows.base_qty_unit_id,
         unreal_pnl_attr_mcq_rows.base_qty_unit,
         unreal_pnl_attr_mcq_rows.base_cur_id,
         unreal_pnl_attr_mcq_rows.base_cur_code,
         unreal_pnl_attr_mcq_rows.trade_date,
         unreal_pnl_attr_mcq_rows.prev_process_id,
         unreal_pnl_attr_mcq_rows.prev_trade_date);
    end loop;
    --
    -- Change in Price
    --
    for unreal_pnl_attr_price_rows in unreal_pnl_attr_price
    loop
      if unreal_pnl_attr_price_rows.contract_type = 'P' then
        vn_pnlc_due_to_attr := (((pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                                  unreal_pnl_attr_price_rows.prev_eod_contract_price,
                                                                                  unreal_pnl_attr_price_rows.prev_eod_price_unit_id,
                                                                                  unreal_pnl_attr_price_rows.price_unit_id_in_base,
                                                                                  pd_trade_date)) -
                               (pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                                  nvl(unreal_pnl_attr_price_rows.curr_eod_contract_price,
                                                                                      0),
                                                                                  unreal_pnl_attr_price_rows.curr_eod_price_unit_id,
                                                                                  unreal_pnl_attr_price_rows.price_unit_id_in_base,
                                                                                  pd_trade_date))) *
                               (nvl(unreal_pnl_attr_price_rows.prev_eod_qty,
                                     0)));
      elsif unreal_pnl_attr_price_rows.contract_type = 'S' then
        vn_pnlc_due_to_attr := (((pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                                  nvl(unreal_pnl_attr_price_rows.curr_eod_contract_price,
                                                                                      0),
                                                                                  unreal_pnl_attr_price_rows.curr_eod_price_unit_id,
                                                                                  unreal_pnl_attr_price_rows.price_unit_id_in_base,
                                                                                  pd_trade_date)) -
                               (pkg_phy_pre_check_process.f_get_converted_price(pc_corporate_id,
                                                                                  unreal_pnl_attr_price_rows.prev_eod_contract_price,
                                                                                  unreal_pnl_attr_price_rows.prev_eod_price_unit_id,
                                                                                  unreal_pnl_attr_price_rows.price_unit_id_in_base,
                                                                                  pd_trade_date)) *
                               (nvl(unreal_pnl_attr_price_rows.prev_eod_qty,
                                      0))));
      end if;
    
      vn_other_pnlc_in_base := unreal_pnl_attr_price_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         delivery_item_no,
         del_distribution_item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base,
         product_id,
         product_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         base_qty_unit_id,
         base_qty_unit,
         base_cur_id,
         base_cur_code,
         trade_date,
         prev_process_id,
         prev_trade_date)
      values
        (pc_process_id,
         unreal_pnl_attr_price_rows.corporate_id,
         unreal_pnl_attr_price_rows.corporate_name,
         unreal_pnl_attr_price_rows.attribution_type,
         unreal_pnl_attr_price_rows.attribution_main_type,
         unreal_pnl_attr_price_rows.attribution_sub_type,
         unreal_pnl_attr_price_rows.attribution_order,
         unreal_pnl_attr_price_rows.internal_contract_ref_no,
         unreal_pnl_attr_price_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_price_rows.contract_ref_no,
         unreal_pnl_attr_price_rows.delivery_item_no,
         unreal_pnl_attr_price_rows.del_distribution_item_no,
         unreal_pnl_attr_price_rows.contract_type,
         unreal_pnl_attr_price_rows.item_qty,
         unreal_pnl_attr_price_rows.qty_unit_id,
         unreal_pnl_attr_price_rows.curr_eod_qty,
         unreal_pnl_attr_price_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_price_rows.prev_eod_qty,
         unreal_pnl_attr_price_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_price_rows.curr_eod_contract_price,
         unreal_pnl_attr_price_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_price_rows.prev_eod_contract_price,
         unreal_pnl_attr_price_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_price_rows.md_id,
         unreal_pnl_attr_price_rows.prev_md_id,
         unreal_pnl_attr_price_rows.net_m2m_price,
         unreal_pnl_attr_price_rows.m2m_price_unit_id,
         unreal_pnl_attr_price_rows.prev_net_m2m_price,
         unreal_pnl_attr_price_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_price_rows.net_pnlc_in_base,
         unreal_pnl_attr_price_rows.product_id,
         unreal_pnl_attr_price_rows.product_name,
         unreal_pnl_attr_price_rows.profit_center_id,
         unreal_pnl_attr_price_rows.profit_center_name,
         unreal_pnl_attr_price_rows.profit_center_short_name,
         unreal_pnl_attr_price_rows.base_qty_unit_id,
         unreal_pnl_attr_price_rows.base_qty_unit,
         unreal_pnl_attr_price_rows.base_cur_id,
         unreal_pnl_attr_price_rows.base_cur_code,
         unreal_pnl_attr_price_rows.trade_date,
         unreal_pnl_attr_price_rows.prev_process_id,
         unreal_pnl_attr_price_rows.prev_trade_date);
    end loop;
    --
    --Change in Estimates
    --
    for unreal_pnl_attr_estimates_rows in unreal_pnl_attr_estimates
    loop
      if unreal_pnl_attr_estimates_rows.contract_type = 'P' then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_estimates_rows.prev_sc_in_base_cur -
                               nvl(unreal_pnl_attr_estimates_rows.sc_in_base_cur,
                                     0)));
      elsif unreal_pnl_attr_estimates_rows.contract_type = 'S' then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_estimates_rows.sc_in_base_cur -
                               nvl(unreal_pnl_attr_estimates_rows.prev_sc_in_base_cur,
                                     0)));
      end if;
      vn_other_pnlc_in_base := unreal_pnl_attr_estimates_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         delivery_item_no,
         del_distribution_item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         curr_sc_in_base_cur,
         prev_sc_in_base_cur,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base,
         product_id,
         product_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         base_qty_unit_id,
         base_qty_unit,
         base_cur_id,
         base_cur_code,
         trade_date,
         prev_process_id,
         prev_trade_date)
      values
        (pc_process_id,
         unreal_pnl_attr_estimates_rows.corporate_id,
         unreal_pnl_attr_estimates_rows.corporate_name,
         unreal_pnl_attr_estimates_rows.attribution_type,
         unreal_pnl_attr_estimates_rows.attribution_main_type,
         unreal_pnl_attr_estimates_rows.attribution_sub_type,
         unreal_pnl_attr_estimates_rows.attribution_order,
         unreal_pnl_attr_estimates_rows.internal_contract_ref_no,
         unreal_pnl_attr_estimates_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_estimates_rows.contract_ref_no,
         unreal_pnl_attr_estimates_rows.delivery_item_no,
         unreal_pnl_attr_estimates_rows.del_distribution_item_no,
         unreal_pnl_attr_estimates_rows.contract_type,
         unreal_pnl_attr_estimates_rows.item_qty,
         unreal_pnl_attr_estimates_rows.qty_unit_id,
         unreal_pnl_attr_estimates_rows.curr_eod_qty,
         unreal_pnl_attr_estimates_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_estimates_rows.prev_eod_qty,
         unreal_pnl_attr_estimates_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_estimates_rows.curr_eod_contract_price,
         unreal_pnl_attr_estimates_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_estimates_rows.prev_eod_contract_price,
         unreal_pnl_attr_estimates_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_estimates_rows.sc_in_base_cur,
         unreal_pnl_attr_estimates_rows.prev_sc_in_base_cur,
         unreal_pnl_attr_estimates_rows.md_id,
         unreal_pnl_attr_estimates_rows.prev_md_id,
         unreal_pnl_attr_estimates_rows.net_m2m_price,
         unreal_pnl_attr_estimates_rows.m2m_price_unit_id,
         unreal_pnl_attr_estimates_rows.prev_net_m2m_price,
         unreal_pnl_attr_estimates_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_estimates_rows.net_pnlc_in_base,
         unreal_pnl_attr_estimates_rows.product_id,
         unreal_pnl_attr_estimates_rows.product_name,
         unreal_pnl_attr_estimates_rows.profit_center_id,
         unreal_pnl_attr_estimates_rows.profit_center_name,
         unreal_pnl_attr_estimates_rows.profit_center_short_name,
         unreal_pnl_attr_estimates_rows.base_qty_unit_id,
         unreal_pnl_attr_estimates_rows.base_qty_unit,
         unreal_pnl_attr_estimates_rows.base_cur_id,
         unreal_pnl_attr_estimates_rows.base_cur_code,
         unreal_pnl_attr_estimates_rows.trade_date,
         unreal_pnl_attr_estimates_rows.prev_process_id,
         unreal_pnl_attr_estimates_rows.prev_trade_date);
    end loop;
    --
    -- Change in Location differentials
    --
    for unreal_pnl_attr_ldc_rows in unreal_pnl_attr_ldc
    loop
      if unreal_pnl_attr_ldc_rows.contract_type = 'P' then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_ldc_rows.m2m_loc_inco_deviation -
                               nvl(unreal_pnl_attr_ldc_rows.prev_m2m_loc_inco_deviation,
                                     0)) * (nvl(unreal_pnl_attr_ldc_rows.prev_eod_qty,
                                                 0)));
      elsif unreal_pnl_attr_ldc_rows.contract_type = 'S' then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_ldc_rows.prev_m2m_loc_inco_deviation -
                               nvl(unreal_pnl_attr_ldc_rows.m2m_loc_inco_deviation,
                                     0)) * (nvl(unreal_pnl_attr_ldc_rows.prev_eod_qty,
                                                 0)));
      end if;
      vn_other_pnlc_in_base := unreal_pnl_attr_ldc_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         delivery_item_no,
         del_distribution_item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         m2m_loc_inco_deviation,
         prev_m2m_loc_inco_deviation,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base,
         product_id,
         product_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         base_qty_unit_id,
         base_qty_unit,
         base_cur_id,
         base_cur_code,
         trade_date,
         prev_process_id,
         prev_trade_date)
      values
        (pc_process_id,
         unreal_pnl_attr_ldc_rows.corporate_id,
         unreal_pnl_attr_ldc_rows.corporate_name,
         unreal_pnl_attr_ldc_rows.attribution_type,
         unreal_pnl_attr_ldc_rows.attribution_main_type,
         unreal_pnl_attr_ldc_rows.attribution_sub_type,
         unreal_pnl_attr_ldc_rows.attribution_order,
         unreal_pnl_attr_ldc_rows.internal_contract_ref_no,
         unreal_pnl_attr_ldc_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_ldc_rows.contract_ref_no,
         unreal_pnl_attr_ldc_rows.delivery_item_no,
         unreal_pnl_attr_ldc_rows.del_distribution_item_no,
         unreal_pnl_attr_ldc_rows.contract_type,
         unreal_pnl_attr_ldc_rows.item_qty,
         unreal_pnl_attr_ldc_rows.qty_unit_id,
         unreal_pnl_attr_ldc_rows.curr_eod_qty,
         unreal_pnl_attr_ldc_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_ldc_rows.prev_eod_qty,
         unreal_pnl_attr_ldc_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_ldc_rows.curr_eod_contract_price,
         unreal_pnl_attr_ldc_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_ldc_rows.prev_eod_contract_price,
         unreal_pnl_attr_ldc_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_ldc_rows.md_id,
         unreal_pnl_attr_ldc_rows.prev_md_id,
         unreal_pnl_attr_ldc_rows.net_m2m_price,
         unreal_pnl_attr_ldc_rows.m2m_price_unit_id,
         unreal_pnl_attr_ldc_rows.prev_net_m2m_price,
         unreal_pnl_attr_ldc_rows.prev_m2m_price_unit_id,
         unreal_pnl_attr_ldc_rows.m2m_loc_inco_deviation,
         unreal_pnl_attr_ldc_rows.prev_m2m_loc_inco_deviation,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_ldc_rows.net_pnlc_in_base,
         unreal_pnl_attr_ldc_rows.product_id,
         unreal_pnl_attr_ldc_rows.product_name,
         unreal_pnl_attr_ldc_rows.profit_center_id,
         unreal_pnl_attr_ldc_rows.profit_center_name,
         unreal_pnl_attr_ldc_rows.profit_center_short_name,
         unreal_pnl_attr_ldc_rows.base_qty_unit_id,
         unreal_pnl_attr_ldc_rows.base_qty_unit,
         unreal_pnl_attr_ldc_rows.base_cur_id,
         unreal_pnl_attr_ldc_rows.base_cur_code,
         unreal_pnl_attr_ldc_rows.trade_date,
         unreal_pnl_attr_ldc_rows.prev_process_id,
         unreal_pnl_attr_ldc_rows.prev_trade_date);
    end loop;
    --
    -- M2M Price Change
    --
    for unreal_pnl_attr_m2m_sp_rows in unreal_pnl_attr_m2m_sp
    loop
      if unreal_pnl_attr_m2m_sp_rows.contract_type = 'P' then
        vn_pnlc_due_to_attr := (((pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_settlement_price,
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_price_unit_id,
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_m2m_sp_rows.product_id)) -
                               (pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      nvl(unreal_pnl_attr_m2m_sp_rows.prev_m2m_settlement_price,
                                                                                          0),
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_price_unit_id,
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_m2m_sp_rows.product_id))) *
                               (nvl(unreal_pnl_attr_m2m_sp_rows.prev_eod_qty,
                                     0)));
      elsif unreal_pnl_attr_m2m_sp_rows.contract_type = 'S' then
        vn_pnlc_due_to_attr := (((pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      nvl(unreal_pnl_attr_m2m_sp_rows.prev_m2m_settlement_price,
                                                                                          0),
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_price_unit_id,
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_m2m_sp_rows.product_id)) -
                               (pkg_phy_pre_check_process.f_get_converted_price_pum(pc_corporate_id,
                                                                                      nvl(unreal_pnl_attr_m2m_sp_rows.m2m_settlement_price,
                                                                                          0),
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_price_unit_id,
                                                                                      unreal_pnl_attr_m2m_sp_rows.m2m_base_price_unit_id_in_pum,
                                                                                      pd_trade_date,
                                                                                      unreal_pnl_attr_m2m_sp_rows.product_id))
                               
                               ) * (nvl(unreal_pnl_attr_m2m_sp_rows.prev_eod_qty,
                                         0)));
      end if;
      vn_other_pnlc_in_base := unreal_pnl_attr_m2m_sp_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         delivery_item_no,
         del_distribution_item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         m2m_settlement_price,
         prev_m2m_settlement_price,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base,
         product_id,
         product_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         base_qty_unit_id,
         base_qty_unit,
         base_cur_id,
         base_cur_code,
         trade_date,
         prev_process_id,
         prev_trade_date)
      values
        (pc_process_id,
         unreal_pnl_attr_m2m_sp_rows.corporate_id,
         unreal_pnl_attr_m2m_sp_rows.corporate_name,
         unreal_pnl_attr_m2m_sp_rows.attribution_type,
         unreal_pnl_attr_m2m_sp_rows.attribution_main_type,
         unreal_pnl_attr_m2m_sp_rows.attribution_sub_type,
         unreal_pnl_attr_m2m_sp_rows.attribution_order,
         unreal_pnl_attr_m2m_sp_rows.internal_contract_ref_no,
         unreal_pnl_attr_m2m_sp_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_m2m_sp_rows.contract_ref_no,
         unreal_pnl_attr_m2m_sp_rows.delivery_item_no,
         unreal_pnl_attr_m2m_sp_rows.del_distribution_item_no,
         unreal_pnl_attr_m2m_sp_rows.contract_type,
         unreal_pnl_attr_m2m_sp_rows.item_qty,
         unreal_pnl_attr_m2m_sp_rows.qty_unit_id,
         unreal_pnl_attr_m2m_sp_rows.curr_eod_qty,
         unreal_pnl_attr_m2m_sp_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_m2m_sp_rows.prev_eod_qty,
         unreal_pnl_attr_m2m_sp_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_m2m_sp_rows.curr_eod_contract_price,
         unreal_pnl_attr_m2m_sp_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_m2m_sp_rows.prev_eod_contract_price,
         unreal_pnl_attr_m2m_sp_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_m2m_sp_rows.md_id,
         unreal_pnl_attr_m2m_sp_rows.prev_md_id,
         unreal_pnl_attr_m2m_sp_rows.net_m2m_price,
         unreal_pnl_attr_m2m_sp_rows.m2m_price_unit_id,
         unreal_pnl_attr_m2m_sp_rows.prev_net_m2m_price,
         unreal_pnl_attr_m2m_sp_rows.prev_m2m_price_unit_id,
         unreal_pnl_attr_m2m_sp_rows.m2m_settlement_price,
         unreal_pnl_attr_m2m_sp_rows.prev_m2m_settlement_price,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_m2m_sp_rows.net_pnlc_in_base,
         unreal_pnl_attr_m2m_sp_rows.product_id,
         unreal_pnl_attr_m2m_sp_rows.product_name,
         unreal_pnl_attr_m2m_sp_rows.profit_center_id,
         unreal_pnl_attr_m2m_sp_rows.profit_center_name,
         unreal_pnl_attr_m2m_sp_rows.profit_center_short_name,
         unreal_pnl_attr_m2m_sp_rows.base_qty_unit_id,
         unreal_pnl_attr_m2m_sp_rows.base_qty_unit,
         unreal_pnl_attr_m2m_sp_rows.base_cur_id,
         unreal_pnl_attr_m2m_sp_rows.base_cur_code,
         unreal_pnl_attr_m2m_sp_rows.trade_date,
         unreal_pnl_attr_m2m_sp_rows.prev_process_id,
         unreal_pnl_attr_m2m_sp_rows.prev_trade_date);
    end loop;
    commit;
    insert into upad_unreal_pnl_attr_detail
      (process_id,
       corporate_id,
       corporate_name,
       attribution_type,
       attribution_main_type,
       attribution_sub_type,
       attribution_order,
       internal_contract_ref_no,
       internal_contract_item_ref_no,
       contract_ref_no,
       delivery_item_no,
       del_distribution_item_no,
       contract_type,
       item_qty,
       qty_unit_id,
       curr_eod_qty,
       curr_eod_qty_unit_id,
       prev_eod_qty,
       prev_eod_qty_unit_id,
       curr_eod_contract_price,
       curr_eod_price_unit_id,
       prev_eod_contract_price,
       prev_eod_price_unit_id,
       md_id,
       m2m_price_unit_id,
       m2m_settlement_price,
       m2m_loc_inco_deviation,
       net_m2m_price,
       prev_md_id,
       prev_m2m_price_unit_id,
       prev_m2m_settlement_price,
       prev_m2m_loc_inco_deviation,
       prev_net_m2m_price,
       pnlc_due_to_attr,
       product_id,
       product_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       base_qty_unit_id,
       base_qty_unit,
       base_cur_id,
       base_cur_code,
       trade_date,
       prev_process_id,
       prev_trade_date)
      select pc_process_id,
             poud.corporate_id,
             poud.corporate_name,
             'Physical Contract' attribution_type,
             'Others' attribution_main_type,
             (case
               when poud.contract_type = 'P' then
                'Purchase'
               when poud.contract_type = 'S' then
                'Sales'
               else
                'NA'
             end) attribution_sub_type,
             (case
               when poud.contract_type = 'P' then
                10.1
               when poud.contract_type = 'S' then
                10.2
               else
                10.3
             end) attribution_order,
             poud.internal_contract_ref_no,
             poud.internal_contract_item_ref_no,
             poud.contract_ref_no,
             poud.delivery_item_no,
             t.del_distribution_item_no,
             poud.contract_type,
             nvl(poud.trade_day_pnl_in_val_cur, 0) -
             nvl(t.pnlc_due_to_attr, 0) pnlc_due_to_attr,
             poud.item_qty,
             poud.qty_unit_id,
             poud.qty_in_base_unit curr_eod_qty,
             poud.qty_unit_id curr_eod_qty_unit_id,
             poud_prev.item_qty prev_eod_qty,
             poud_prev.qty_unit_id prev_eod_qty_unit_id,
             poud.contract_price curr_eod_contract_price,
             poud.price_unit_id curr_eod_price_unit_id,
             poud_prev.contract_price prev_eod_contract_price,
             poud_prev.price_unit_id prev_eod_price_unit_id,
             poud.md_id,
             poud.m2m_price_unit_id m2m_price_unit_id,
             poud.net_m2m_price m2m_settlement_price,
             0 m2m_loc_inco_deviation,
             poud.net_m2m_price,
             poud_prev.md_id prev_md_id,
             poud_prev.m2m_price_unit_id prev_m2m_price_unit_id,
             poud_prev.net_m2m_price prev_m2m_settlement_price,
             md.m2m_loc_incoterm_deviation prev_m2m_loc_inco_deviation,
             poud_prev.net_m2m_price prev_net_m2m_price,
             poud.product_id,
             poud.product_name,
             poud.profit_center_id,
             poud.profit_center_name,
             poud.profit_center_short_name,
             poud.base_qty_unit_id,
             poud.base_qty_unit,
             poud.base_cur_id,
             poud.base_cur_code,
             pd_trade_date,
             pc_previous_process_id,
             pd_prev_trade_date
        from poud_phy_open_unreal_daily poud,
             md_m2m_daily md,
             (select *
                from poud_phy_open_unreal_daily poud
               where poud.process_id = pc_previous_process_id) poud_prev,
             (select upad.internal_contract_item_ref_no,
                     upad.delivery_item_no,
                     upad.del_distribution_item_no,
                     upad.process_id,
                     tdc.trade_date,
                     sum(upad.pnlc_due_to_attr) pnlc_due_to_attr
                from upad_unreal_pnl_attr_detail upad,
                     tdc_trade_date_closure      tdc
               where upad.process_id = tdc.process_id
                 and upad.attribution_main_type <> 'New Contract'
               group by upad.internal_contract_item_ref_no,
                        upad.delivery_item_no,
                        upad.del_distribution_item_no,
                        upad.process_id,
                        tdc.trade_date) t
       where poud.internal_contract_item_ref_no =
             t.internal_contract_item_ref_no
         and poud.process_id = t.process_id
         and poud.internal_contract_ref_no =
             poud_prev.internal_contract_item_ref_no
         and poud.pcdi_id = poud_prev.pcdi_id
         and poud_prev.md_id = md.md_id
         and md.process_id = pc_previous_process_id;
  
  exception
    when others then
      null;
      /*   vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_phy_unreal_pnl_attr',
                                                           'M2M-013',
                                                           'Code:' || sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           '',
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);*/
  end;
  procedure sp_calc_customs_report(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_user_id      varchar2,
                                   pc_process      varchar2) is
  begin
     sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1005,
                          'Start Of Base Metal Not Event Based');
--
-- Base Metal Not Event Based 
--
    insert into cr_customs_report
      (process_id,
       internal_contract_ref_no,
       contract_ref_no,
       delivery_item_no,
       corporate_id,
       corporate_name,
       smelter_id,
       smelter_name,
       supplier_id,
       supplier_name,
       quality_id,
       quality_name,
       internal_invoice_ref_no,
       invoice_ref_no,
       invoice_date,
       internal_gmr_ref_no,
       gmr_ref_no,
       product_id,
       product_name,
       shipment_date,
       loading_country_id,
       loading_country,
       loading_state_id,
       loading_state,
       loading_city_id,
       loading_city,
       discharge_country_id,
       discharge_country,
       discharge_state_id,
       discharge_state,
       discharge_city_id,
       discharge_city,
       loading_national_cur_id,
       loading_national_cur_code,
       discharge_national_cur_id,
       discharge_national_cur_code,
       no_of_containers,
       incoterm_id,
       incoterm,
       cfx_invent_or_invoice_to_base,
       base_cur_id,
       base_cur_code,
       cfx_base_to_loading_country,
       cfx_base_to_discharge_country,
       qty,
       qty_unit_id,
       qty_unit,
       invoice_eff_date,
       gmr_eff_date,
       final_invoice_date,
       invoice_value,
       invoice_cur_id,
       invoice_cur_code,
       inventory_cur_id,
       inventory_cur_code)
      select pc_process_id,
             internal_contract_ref_no,
             contract_ref_no,
             delivery_item_no,
             corporate_id,
             corporate_name,
             smelter_id,
             smelter_name,
             supplier_id,
             supplier_name,
             quality_id,
             quality_name,
             internal_invoice_ref_no,
             invoice_ref_no,
             invoice_date,
             internal_gmr_ref_no,
             gmr_ref_no,
             product_id,
             product_name,
             shipment_date,
             loading_country_id,
             loading_country,
             loading_state_id,
             loading_state,
             loading_city_id,
             loading_city,
             discharge_country_id,
             discharge_country,
             discharge_state_id,
             discharge_state,
             discharge_city_id,
             discharge_city,
             loading_national_cur_id,
             loading_national_cur_code,
             discharge_national_cur_id,
             discharge_national_cur_code,
             no_of_containers,
             incoterm_id,
             incoterm,
             cfx_inv_to_base,
             base_cur_id,
             base_cur_code,
             cfx_base_to_load_country,
             cfx_base_to_dis_country,
             sum(qty),
             qty_unit_id,
             qty_unit,
             invoice_eff_date,
             gmr_eff_date,
             final_invoice_date,
             sum(invoice_value),
             invoice_cur_id,
             invoice_cur_code,
             inventory_cur_id,
             inventory_cur_code
        from (
              select pcm.internal_contract_ref_no,
                      pcm.contract_ref_no,
                      pcdi.delivery_item_no,
                      pcm.corporate_id,
                      corporate_name,
                      pcm.cp_id smelter_id,
                      phd.companyname smelter_name,
                      phd.profileid supplier_id,
                      phd.companyname supplier_name,
                      qat.quality_id,
                      qat.quality_name,
                      gmr.latest_internal_invoice_ref_no internal_invoice_ref_no,
                      is1.invoice_ref_no,
                      is1.invoice_issue_date invoice_date,
                      gmr.internal_gmr_ref_no,
                      gmr.gmr_ref_no,
                      pcpd.product_id,
                      pdm.product_desc product_name,
                      gmr.bl_date shipment_date,
                      gmr.loading_country_id,
                      cym_l.country_name loading_country,
                      sm_l.state_id loading_state_id,
                      sm_l.state_name loading_state,
                      cim_l.city_id loading_city_id,
                      cim_l.city_name loading_city,
                      gmr.discharge_country_id,
                      cym_d.country_name discharge_country,
                      sm_d.state_id discharge_state_id,
                      sm_d.state_name discharge_state,
                      cim_d.city_id discharge_city_id,
                      cim_d.city_name discharge_city,
                      cym_l.national_currency loading_national_cur_id,
                      cm_countryl.cur_code loading_national_cur_code,
                      cym_d.national_currency discharge_national_cur_id,
                      cm_countryd.cur_code discharge_national_cur_code,
                      grd.no_of_containers,
                      itm.incoterm_id,
                      itm.incoterm,
                      pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                               (case
                                                                 when gmr.latest_internal_invoice_ref_no is not null then
                                                                  is1.invoice_cur_id
                                                                 else
                                                                  invm.cog_cur_id
                                                               end),
                                                               ak.base_cur_id,
                                                               gmr.bl_date,
                                                               1) cfx_inv_to_base,
                      cm_base.cur_id base_cur_id,
                      cm_base.cur_code base_cur_code,
                      pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                               ak.base_cur_id,
                                                               cm_countryl.cur_id,
                                                               gmr.bl_date,
                                                               1) cfx_base_to_load_country,
                      pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                               ak.base_cur_id,
                                                               cm_countryd.cur_id,
                                                               gmr.bl_date,
                                                               1) cfx_base_to_dis_country,
                      
                      pkg_general.f_get_converted_quantity(grd.product_id,
                                                           grd.qty_unit_id,
                                                           pdm.base_quantity_unit,
                                                           grd.current_qty) qty,
                      qum.qty_unit_id,
                      qum.qty_unit,
                      is1.invoice_issue_date invoice_eff_date,
                      gmr.eff_date gmr_eff_date,
                      nvl(is1.invoice_issue_date, gmr.eff_date) final_invoice_date,
                      (case
                        when is1.internal_invoice_ref_no is not null then
                         is1.total_invoice_item_amount
                        else
                         pkg_phy_pre_check_process.f_get_converted_price(pcm.corporate_id,
                                                                         bccp.contract_price,
                                                                         bccp.price_unit_id,
                                                                         ppu.product_price_unit_id,
                                                                         gmr.bl_date) *
                         pkg_general.f_get_converted_quantity(grd.product_id,
                                                              grd.qty_unit_id,
                                                              pdm.base_quantity_unit,
                                                              grd.current_qty)
                      end) invoice_value,
                      is1.invoice_cur_id invoice_cur_id,
                      cm_invoice.cur_code invoice_cur_code,
                      cm_invtry.cur_id inventory_cur_id,
                      cm_invtry.cur_code inventory_cur_code
                from gmr_goods_movement_record    gmr,
                      pcm_physical_contract_main   pcm,
                      pcdi_pc_delivery_item        pcdi,
                      pci_physical_contract_item   pci,
                      phd_profileheaderdetails     phd,
                      sm_state_master              sm_l,
                      sm_state_master              sm_d,
                      cim_citymaster               cim_l,
                      cim_citymaster               cim_d,
                      itm_incoterm_master          itm,
                      grd_goods_record_detail      grd,
                      pcpd_pc_product_definition   pcpd,
                      pdm_productmaster            pdm,
                      qat_quality_attributes       qat,
                      qum_quantity_unit_master     qum,
                      invm_inventory_master        invm,
                      cym_countrymaster            cym_l,
                      cym_countrymaster            cym_d,
                      ak_corporate                 ak,
                      cm_currency_master           cm_invoice,
                      cm_currency_master           cm_invtry,
                      cm_currency_master           cm_base,
                      cm_currency_master           cm_countryl,
                      cm_currency_master           cm_countryd,
                      is_invoice_summary           is1,
                      bccp_base_contract_cog_price bccp,
                      v_ppu_pum                    ppu
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and sm_l.state_id(+) = gmr.loading_state_id
                 and sm_d.state_id(+) = gmr.discharge_state_id
                 and cim_l.city_id(+) = gmr.loading_city_id
                 and cim_d.city_id(+) = gmr.discharge_city_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and gmr.latest_internal_invoice_ref_no =
                     is1.internal_invoice_ref_no(+)
                 and pcm.cp_id = phd.profileid(+)
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no(+)
                 and pci.m2m_inco_term = itm.incoterm_id(+)
                 and grd.pcdi_id = pcdi.pcdi_id(+)
                 and grd.quality_id = qat.quality_id(+)
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.input_output = 'Input'
                 and pdm.product_id = pcpd.product_id
                 and grd.internal_grd_ref_no = invm.internal_grd_ref_no(+)
                 and grd.internal_gmr_ref_no = invm.internal_gmr_ref_no(+)
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and grd.is_mark_for_tolling = 'N'
                 and cym_l.country_id = gmr.loading_country_id
                 and cym_d.country_id = gmr.discharge_country_id
                 and ak.corporate_id = pcm.corporate_id
                 and is1.invoice_cur_id = cm_invoice.cur_id(+)
                 and invm.cog_cur_id = cm_invtry.cur_id(+)
                 and ak.base_cur_id = cm_base.cur_id
                 and cym_l.national_currency = cm_countryl.cur_id(+)
                 and cym_d.national_currency = cm_countryd.cur_id(+)
                 and gmr.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and is1.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and bccp.process_id = pc_process_id
                 and bccp.pcdi_id = pcdi.pcdi_id
                 and pcm.contract_type = 'BASEMETAL'
                 and pcm.purchase_sales = 'P'
                 and grd.product_id = pdm.product_id
                 and ppu.product_id = grd.product_id
                 and ppu.cur_id = ak.base_cur_id
                 and ppu.weight_unit_id = pdm.base_quantity_unit
                 and nvl(ppu.weight, 1) = 1
                 and grd.current_qty > 0
                 and gmr.internal_gmr_ref_no not in
                     (select bgcp.internal_gmr_ref_no
                        from bgcp_base_gmr_cog_price bgcp
                       where bgcp.process_id = pc_process_id))
       group by internal_contract_ref_no,
                contract_ref_no,
                delivery_item_no,
                corporate_id,
                corporate_name,
                smelter_id,
                smelter_name,
                supplier_id,
                supplier_name,
                quality_id,
                quality_name,
                internal_invoice_ref_no,
                invoice_ref_no,
                invoice_date,
                internal_gmr_ref_no,
                gmr_ref_no,
                product_id,
                product_name,
                shipment_date,
                loading_country_id,
                loading_country,
                loading_state_id,
                loading_state,
                loading_city_id,
                loading_city,
                discharge_country_id,
                discharge_country,
                discharge_state_id,
                discharge_state,
                discharge_city_id,
                discharge_city,
                loading_national_cur_id,
                loading_national_cur_code,
                discharge_national_cur_id,
                discharge_national_cur_code,
                no_of_containers,
                incoterm_id,
                incoterm,
                cfx_inv_to_base,
                base_cur_id,
                base_cur_code,
                cfx_base_to_load_country,
                cfx_base_to_dis_country,
                qty_unit_id,
                qty_unit,
                invoice_eff_date,
                gmr_eff_date,
                final_invoice_date,
                invoice_cur_id,
                invoice_cur_code,
                inventory_cur_id,
                inventory_cur_code;

   sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1005,
                          'Start Of Base Metal Event Based');                
--                          
-- Base Metal Event based
--
      insert into cr_customs_report
        (process_id,
         internal_contract_ref_no,
         contract_ref_no,
         delivery_item_no,
         corporate_id,
         corporate_name,
         smelter_id,
         smelter_name,
         supplier_id,
         supplier_name,
         quality_id,
         quality_name,
         internal_invoice_ref_no,
         invoice_ref_no,
         invoice_date,
         internal_gmr_ref_no,
         gmr_ref_no,
         product_id,
         product_name,
         shipment_date,
         loading_country_id,
         loading_country,
         loading_state_id,
         loading_state,
         loading_city_id,
         loading_city,
         discharge_country_id,
         discharge_country,
         discharge_state_id,
         discharge_state,
         discharge_city_id,
         discharge_city,
         loading_national_cur_id,
         loading_national_cur_code,
         discharge_national_cur_id,
         discharge_national_cur_code,
         no_of_containers,
         incoterm_id,
         incoterm,
         cfx_invent_or_invoice_to_base,
         base_cur_id,
         base_cur_code,
         cfx_base_to_loading_country,
         cfx_base_to_discharge_country,
         qty,
         qty_unit_id,
         qty_unit,
         invoice_eff_date,
         gmr_eff_date,
         final_invoice_date,
         invoice_value,
         invoice_cur_id,
         invoice_cur_code,
         inventory_cur_id,
         inventory_cur_code)
        select pc_process_id,
               internal_contract_ref_no,
               contract_ref_no,
               delivery_item_no,
               corporate_id,
               corporate_name,
               smelter_id,
               smelter_name,
               supplier_id,
               supplier_name,
               quality_id,
               quality_name,
               internal_invoice_ref_no,
               invoice_ref_no,
               invoice_date,
               internal_gmr_ref_no,
               gmr_ref_no,
               product_id,
               product_name,
               shipment_date,
               loading_country_id,
               loading_country,
               loading_state_id,
               loading_state,
               loading_city_id,
               loading_city,
               discharge_country_id,
               discharge_country,
               discharge_state_id,
               discharge_state,
               discharge_city_id,
               discharge_city,
               loading_national_cur_id,
               loading_national_cur_code,
               discharge_national_cur_id,
               discharge_national_cur_code,
               no_of_containers,
               incoterm_id,
               incoterm,
               cfx_inv_to_base,
               base_cur_id,
               base_cur_code,
               cfx_base_to_load_country,
               cfx_base_to_dis_country,
               sum(qty),
               qty_unit_id,
               qty_unit,
               invoice_eff_date,
               gmr_eff_date,
               final_invoice_date,
               sum(invoice_value),
               invoice_cur_id,
               invoice_cur_code,
               inventory_cur_id,
               inventory_cur_code
          from (select pcm.internal_contract_ref_no,
                       pcm.contract_ref_no,
                       pcdi.delivery_item_no,
                       pcm.corporate_id,
                       corporate_name,
                       pcm.cp_id smelter_id,
                       phd.companyname smelter_name,
                       phd.profileid supplier_id,
                       phd.companyname supplier_name,
                       qat.quality_id,
                       qat.quality_name,
                       gmr.latest_internal_invoice_ref_no internal_invoice_ref_no,
                       is1.invoice_ref_no,
                       is1.invoice_issue_date invoice_date,
                       gmr.internal_gmr_ref_no,
                       gmr.gmr_ref_no,
                       pcpd.product_id,
                       pdm.product_desc product_name,
                       gmr.bl_date shipment_date,
                       gmr.loading_country_id,
                       cym_l.country_name loading_country,
                       sm_l.state_id loading_state_id,
                       sm_l.state_name loading_state,
                       cim_l.city_id loading_city_id,
                       cim_l.city_name loading_city,
                       gmr.discharge_country_id,
                       cym_d.country_name discharge_country,
                       sm_d.state_id discharge_state_id,
                       sm_d.state_name discharge_state,
                       cim_d.city_id discharge_city_id,
                       cim_d.city_name discharge_city,
                       cym_l.national_currency loading_national_cur_id,
                       cm_countryl.cur_code loading_national_cur_code,
                       cym_d.national_currency discharge_national_cur_id,
                       cm_countryd.cur_code discharge_national_cur_code,
                       grd.no_of_containers,
                       itm.incoterm_id,
                       itm.incoterm,
                       pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                                (case
                                                                  when gmr.latest_internal_invoice_ref_no is not null then
                                                                   is1.invoice_cur_id
                                                                  else
                                                                   invm.cog_cur_id
                                                                end),
                                                                ak.base_cur_id,
                                                                gmr.bl_date,
                                                                1) cfx_inv_to_base,
                       cm_base.cur_id base_cur_id,
                       cm_base.cur_code base_cur_code,
                       pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                                ak.base_cur_id,
                                                                cm_countryl.cur_id,
                                                                gmr.bl_date,
                                                                1) cfx_base_to_load_country,
                       pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                                ak.base_cur_id,
                                                                cm_countryd.cur_id,
                                                                gmr.bl_date,
                                                                1) cfx_base_to_dis_country,
                       pkg_general.f_get_converted_quantity(grd.product_id,
                                                            grd.qty_unit_id,
                                                            pdm.base_quantity_unit,
                                                            grd.current_qty) qty,
                       qum.qty_unit_id,
                       qum.qty_unit,
                       is1.invoice_issue_date invoice_eff_date,
                       gmr.eff_date gmr_eff_date,
                       nvl(is1.invoice_issue_date, gmr.eff_date) final_invoice_date,
                       (case
                         when is1.internal_invoice_ref_no is not null then
                          is1.total_invoice_item_amount
                         else
                          pkg_phy_pre_check_process.f_get_converted_price(pcm.corporate_id,
                                                                          bgcp.contract_price,
                                                                          bgcp.price_unit_id,
                                                                          ppu.product_price_unit_id,
                                                                          gmr.bl_date) *
                          pkg_general.f_get_converted_quantity(grd.product_id,
                                                               grd.qty_unit_id,
                                                               pdm.base_quantity_unit,
                                                               grd.current_qty)
                       end) invoice_value,
                       is1.invoice_cur_id invoice_cur_id,
                       cm_invoice.cur_code invoice_cur_code,
                       cm_invtry.cur_id inventory_cur_id,
                       cm_invtry.cur_code inventory_cur_code
                  from gmr_goods_movement_record  gmr,
                       pcm_physical_contract_main pcm,
                       pcdi_pc_delivery_item      pcdi,
                       pci_physical_contract_item pci,
                       phd_profileheaderdetails   phd,
                       sm_state_master            sm_l,
                       sm_state_master            sm_d,
                       cim_citymaster             cim_l,
                       cim_citymaster             cim_d,
                       itm_incoterm_master        itm,
                       grd_goods_record_detail    grd,
                       pcpd_pc_product_definition pcpd,
                       pdm_productmaster          pdm,
                       qat_quality_attributes     qat,
                       qum_quantity_unit_master   qum,
                       invm_inventory_master      invm,
                       cym_countrymaster          cym_l,
                       cym_countrymaster          cym_d,
                       ak_corporate               ak,
                       cm_currency_master         cm_invoice,
                       cm_currency_master         cm_invtry,
                       cm_currency_master         cm_base,
                       cm_currency_master         cm_countryl,
                       cm_currency_master         cm_countryd,
                       is_invoice_summary         is1,
                       bgcp_base_gmr_cog_price    bgcp,
                       v_ppu_pum                  ppu
                 where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                   and sm_l.state_id(+) = gmr.loading_state_id
                   and sm_d.state_id(+) = gmr.discharge_state_id
                   and cim_l.city_id(+) = gmr.loading_city_id
                   and cim_d.city_id(+) = gmr.discharge_city_id
                   and pcm.internal_contract_ref_no =
                       pcdi.internal_contract_ref_no
                   and gmr.latest_internal_invoice_ref_no =
                       is1.internal_invoice_ref_no(+)
                   and pcm.cp_id = phd.profileid(+)
                   and grd.internal_contract_item_ref_no =
                       pci.internal_contract_item_ref_no(+)
                   and pci.m2m_inco_term = itm.incoterm_id(+)
                   and grd.pcdi_id = pcdi.pcdi_id(+)
                   and grd.quality_id = qat.quality_id(+)
                   and pcm.internal_contract_ref_no =
                       pcpd.internal_contract_ref_no
                   and pcpd.input_output = 'Input'
                   and pdm.product_id = pcpd.product_id
                   and grd.internal_grd_ref_no = invm.internal_grd_ref_no(+)
                   and grd.internal_gmr_ref_no = invm.internal_gmr_ref_no(+)
                   and grd.qty_unit_id = qum.qty_unit_id(+)
                   and grd.is_mark_for_tolling = 'N'
                   and cym_l.country_id = gmr.loading_country_id
                   and cym_d.country_id = gmr.discharge_country_id
                   and ak.corporate_id = pcm.corporate_id
                   and is1.invoice_cur_id = cm_invoice.cur_id(+)
                   and invm.cog_cur_id = cm_invtry.cur_id(+)
                   and ak.base_cur_id = cm_base.cur_id
                   and cym_l.national_currency = cm_countryl.cur_id(+)
                   and cym_d.national_currency = cm_countryd.cur_id(+)
                   and gmr.process_id = pc_process_id
                   and pcm.process_id = pc_process_id
                   and pcdi.process_id = pc_process_id
                   and pci.process_id = pc_process_id
                   and grd.process_id = pc_process_id
                   and pcpd.process_id = pc_process_id
                   and is1.process_id = pc_process_id
                   and gmr.is_deleted = 'N'
                   and bgcp.process_id = pc_process_id
                   and bgcp.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                   and bgcp.internal_grd_ref_no = grd.internal_grd_ref_no -- added
                   and pcm.contract_type = 'BASEMETAL'
                   and pcm.purchase_sales = 'P'
                   and grd.product_id = pdm.product_id
                   and ppu.product_id = grd.product_id
                   and ppu.cur_id = ak.base_cur_id
                   and ppu.weight_unit_id = pdm.base_quantity_unit
                   and nvl(ppu.weight, 1) = 1
                   and grd.current_qty > 0)
         group by internal_contract_ref_no,
                  contract_ref_no,
                  delivery_item_no,
                  corporate_id,
                  corporate_name,
                  smelter_id,
                  smelter_name,
                  supplier_id,
                  supplier_name,
                  quality_id,
                  quality_name,
                  internal_invoice_ref_no,
                  invoice_ref_no,
                  invoice_date,
                  internal_gmr_ref_no,
                  gmr_ref_no,
                  product_id,
                  product_name,
                  shipment_date,
                  loading_country_id,
                  loading_country,
                  loading_state_id,
                  loading_state,
                  loading_city_id,
                  loading_city,
                  discharge_country_id,
                  discharge_country,
                  discharge_state_id,
                  discharge_state,
                  discharge_city_id,
                  discharge_city,
                  loading_national_cur_id,
                  loading_national_cur_code,
                  discharge_national_cur_id,
                  discharge_national_cur_code,
                  no_of_containers,
                  incoterm_id,
                  incoterm,
                  cfx_inv_to_base,
                  base_cur_id,
                  base_cur_code,
                  cfx_base_to_load_country,
                  cfx_base_to_dis_country,
                  qty_unit_id,
                  qty_unit,
                  invoice_eff_date,
                  gmr_eff_date,
                  final_invoice_date,
                  invoice_cur_id,
                  invoice_cur_code,
                  inventory_cur_id,
                  inventory_cur_code;

   sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1005,
                          'Start Of Concentrate Metal Not Event Based');                  
--
-- Concentrate Not Event Based
--                  
      insert into cr_customs_report
        (process_id,
         internal_contract_ref_no,
         contract_ref_no,
         delivery_item_no,
         corporate_id,
         corporate_name,
         smelter_id,
         smelter_name,
         supplier_id,
         supplier_name,
         quality_id,
         quality_name,
         internal_invoice_ref_no,
         invoice_ref_no,
         invoice_date,
         internal_gmr_ref_no,
         gmr_ref_no,
         product_id,
         product_name,
         shipment_date,
         loading_country_id,
         loading_country,
         loading_state_id,
         loading_state,
         loading_city_id,
         loading_city,
         discharge_country_id,
         discharge_country,
         discharge_state_id,
         discharge_state,
         discharge_city_id,
         discharge_city,
         loading_national_cur_id,
         loading_national_cur_code,
         discharge_national_cur_id,
         discharge_national_cur_code,
         no_of_containers,
         incoterm_id,
         incoterm,
         cfx_invent_or_invoice_to_base,
         base_cur_id,
         base_cur_code,
         cfx_base_to_loading_country,
         cfx_base_to_discharge_country,
         qty,
         qty_unit_id,
         qty_unit,
         invoice_eff_date,
         gmr_eff_date,
         final_invoice_date,
         invoice_value,
         invoice_cur_id,
         invoice_cur_code,
         inventory_cur_id,
         inventory_cur_code)
        select pc_process_id,
               internal_contract_ref_no,
               contract_ref_no,
               delivery_item_no,
               corporate_id,
               corporate_name,
               smelter_id,
               smelter_name,
               supplier_id,
               supplier_name,
               quality_id,
               quality_name,
               internal_invoice_ref_no,
               invoice_ref_no,
               invoice_date,
               internal_gmr_ref_no,
               gmr_ref_no,
               product_id,
               product_name,
               shipment_date,
               loading_country_id,
               loading_country,
               loading_state_id,
               loading_state,
               loading_city_id,
               loading_city,
               discharge_country_id,
               discharge_country,
               discharge_state_id,
               discharge_state,
               discharge_city_id,
               discharge_city,
               loading_national_cur_id,
               loading_national_cur_code,
               discharge_national_cur_id,
               discharge_national_cur_code,
               no_of_containers,
               incoterm_id,
               incoterm,
               cfx_inv_to_base,
               base_cur_id,
               base_cur_code,
               cfx_base_to_load_country,
               cfx_base_to_dis_country,
               sum(qty),
               qty_unit_id,
               qty_unit,
               invoice_eff_date,
               gmr_eff_date,
               final_invoice_date,
               sum(invoice_value),
               invoice_cur_id,
               invoice_cur_code,
               inventory_cur_id,
               inventory_cur_code
          from (select pcm.internal_contract_ref_no,
                       pcm.contract_ref_no,
                       pcdi.delivery_item_no,
                       pcm.corporate_id,
                       corporate_name,
                       pcm.cp_id smelter_id,
                       phd.companyname smelter_name,
                       phd.profileid supplier_id,
                       phd.companyname supplier_name,
                       qat.quality_id,
                       qat.quality_name,
                       gmr.latest_internal_invoice_ref_no internal_invoice_ref_no,
                       is1.invoice_ref_no,
                       is1.invoice_issue_date invoice_date,
                       gmr.internal_gmr_ref_no,
                       gmr.gmr_ref_no,
                       pcpd.product_id,
                       pdm.product_desc product_name,
                       gmr.bl_date shipment_date,
                       gmr.loading_country_id,
                       cym_l.country_name loading_country,
                       sm_l.state_id loading_state_id,
                       sm_l.state_name loading_state,
                       cim_l.city_id loading_city_id,
                       cim_l.city_name loading_city,
                       gmr.discharge_country_id,
                       cym_d.country_name discharge_country,
                       sm_d.state_id discharge_state_id,
                       sm_d.state_name discharge_state,
                       cim_d.city_id discharge_city_id,
                       cim_d.city_name discharge_city,
                       cym_l.national_currency loading_national_cur_id,
                       cm_countryl.cur_code loading_national_cur_code,
                       cym_d.national_currency discharge_national_cur_id,
                       cm_countryd.cur_code discharge_national_cur_code,
                       grd.no_of_containers,
                       itm.incoterm_id,
                       itm.incoterm,
                       pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                                (case
                                                                  when gmr.latest_internal_invoice_ref_no is not null then
                                                                   is1.invoice_cur_id
                                                                  else
                                                                   invm.cog_cur_id
                                                                end),
                                                                ak.base_cur_id,
                                                                gmr.bl_date,
                                                                1) cfx_inv_to_base,
                       cm_base.cur_id base_cur_id,
                       cm_base.cur_code base_cur_code,
                       pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                                ak.base_cur_id,
                                                                cm_countryl.cur_id,
                                                                gmr.bl_date,
                                                                1) cfx_base_to_load_country,
                       pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                                ak.base_cur_id,
                                                                cm_countryd.cur_id,
                                                                gmr.bl_date,
                                                                1) cfx_base_to_dis_country,
                       pkg_general.f_get_converted_quantity(grd.product_id,
                                                            grd.qty_unit_id,
                                                            pdm.base_quantity_unit,
                                                            grd.current_qty) qty,
                       qum.qty_unit_id,
                       qum.qty_unit,
                       is1.invoice_issue_date invoice_eff_date,
                       gmr.eff_date gmr_eff_date,
                       nvl(is1.invoice_issue_date, gmr.eff_date) final_invoice_date,
                       (case
                         when is1.internal_invoice_ref_no is not null then
                          is1.total_invoice_item_amount
                         else
                          pkg_phy_pre_check_process.f_get_converted_price(pcm.corporate_id,
                                                                          cccp.contract_price,
                                                                          cccp.price_unit_id,
                                                                          ppu.product_price_unit_id,
                                                                          gmr.bl_date) *
                          pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                               spq.qty_unit_id,
                                                               pdm_aml.base_quantity_unit,
                                                               spq.payable_qty)
                       end) invoice_value,
                       is1.invoice_cur_id invoice_cur_id,
                       cm_invoice.cur_code invoice_cur_code,
                       cm_invtry.cur_id inventory_cur_id,
                       cm_invtry.cur_code inventory_cur_code
                  from gmr_goods_movement_record      gmr,
                       pcm_physical_contract_main     pcm,
                       pcdi_pc_delivery_item          pcdi,
                       pci_physical_contract_item     pci,
                       phd_profileheaderdetails       phd,
                       sm_state_master                sm_l,
                       sm_state_master                sm_d,
                       cim_citymaster                 cim_l,
                       cim_citymaster                 cim_d,
                       itm_incoterm_master            itm,
                       grd_goods_record_detail        grd,
                       pcpd_pc_product_definition     pcpd,
                       pdm_productmaster              pdm,
                       qat_quality_attributes         qat,
                       qum_quantity_unit_master       qum,
                       invm_inventory_master          invm,
                       cym_countrymaster              cym_l,
                       cym_countrymaster              cym_d,
                       ak_corporate                   ak,
                       cm_currency_master             cm_invoice,
                       cm_currency_master             cm_invtry,
                       cm_currency_master             cm_base,
                       cm_currency_master             cm_countryl,
                       cm_currency_master             cm_countryd,
                       is_invoice_summary             is1,
                       cccp_conc_contract_cog_price   cccp,
                       v_ppu_pum                      ppu,
                       poch_price_opt_call_off_header poch,
                       pocd_price_option_calloff_dtls pocd,
                       spq_stock_payable_qty          spq,
                       aml_attribute_master_list      aml,
                       pdm_productmaster              pdm_aml
                 where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                   and sm_l.state_id(+) = gmr.loading_state_id
                   and sm_d.state_id(+) = gmr.discharge_state_id
                   and cim_l.city_id(+) = gmr.loading_city_id
                   and cim_d.city_id(+) = gmr.discharge_city_id
                   and pcm.internal_contract_ref_no =
                       pcdi.internal_contract_ref_no
                   and gmr.latest_internal_invoice_ref_no =
                       is1.internal_invoice_ref_no(+)
                   and pcm.cp_id = phd.profileid(+)
                   and grd.internal_contract_item_ref_no =
                       pci.internal_contract_item_ref_no(+)
                   and pci.m2m_inco_term = itm.incoterm_id(+)
                   and grd.pcdi_id = pcdi.pcdi_id(+)
                   and grd.quality_id = qat.quality_id(+)
                   and pcm.internal_contract_ref_no =
                       pcpd.internal_contract_ref_no
                   and pcpd.input_output = 'Input'
                   and pdm.product_id = pcpd.product_id
                   and grd.internal_grd_ref_no = invm.internal_grd_ref_no(+)
                   and grd.internal_gmr_ref_no = invm.internal_gmr_ref_no(+)
                   and grd.qty_unit_id = qum.qty_unit_id(+)
                   and grd.is_mark_for_tolling = 'N'
                   and cym_l.country_id = gmr.loading_country_id
                   and cym_d.country_id = gmr.discharge_country_id
                   and ak.corporate_id = pcm.corporate_id
                   and is1.invoice_cur_id = cm_invoice.cur_id(+)
                   and invm.cog_cur_id = cm_invtry.cur_id(+)
                   and ak.base_cur_id = cm_base.cur_id
                   and cym_l.national_currency = cm_countryl.cur_id(+)
                   and cym_d.national_currency = cm_countryd.cur_id(+)
                   and gmr.process_id = pc_process_id
                   and pcm.process_id = pc_process_id
                   and pcdi.process_id = pc_process_id
                   and pci.process_id = pc_process_id
                   and grd.process_id = pc_process_id
                   and pcpd.process_id = pc_process_id
                   and is1.process_id = pc_process_id
                   and gmr.is_deleted = 'N'
                   and cccp.process_id = pc_process_id
                   and cccp.pcdi_id = pcdi.pcdi_id
                   and cccp.element_id = spq.element_id
                   and pcm.contract_type = 'CONCENTRATES'
                   and pcm.purchase_sales = 'P'
                   and ppu.product_id = pdm_aml.product_id
                   and ppu.cur_id = ak.base_cur_id
                   and ppu.weight_unit_id = pdm_aml.base_quantity_unit
                   and nvl(ppu.weight, 1) = 1
                   and pcdi.pcdi_id = poch.pcdi_id
                   and poch.poch_id = pocd.poch_id
                   and nvl(pocd.qp_period_type, 'NA') <> 'Event'
                   and spq.process_id = pc_process_id
                   and spq.is_stock_split = 'N'
                   and spq.internal_grd_ref_no = grd.internal_grd_ref_no
                   and spq.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                   and spq.element_id = aml.attribute_id
                   and spq.element_id = poch.element_id
                   and aml.underlying_product_id = pdm_aml.product_id
                      --and aml.underlying_product_id = pdm.product_id
                   and grd.current_qty > 0)
         group by internal_contract_ref_no,
                  contract_ref_no,
                  delivery_item_no,
                  corporate_id,
                  corporate_name,
                  smelter_id,
                  smelter_name,
                  supplier_id,
                  supplier_name,
                  quality_id,
                  quality_name,
                  internal_invoice_ref_no,
                  invoice_ref_no,
                  invoice_date,
                  internal_gmr_ref_no,
                  gmr_ref_no,
                  product_id,
                  product_name,
                  shipment_date,
                  loading_country_id,
                  loading_country,
                  loading_state_id,
                  loading_state,
                  loading_city_id,
                  loading_city,
                  discharge_country_id,
                  discharge_country,
                  discharge_state_id,
                  discharge_state,
                  discharge_city_id,
                  discharge_city,
                  loading_national_cur_id,
                  loading_national_cur_code,
                  discharge_national_cur_id,
                  discharge_national_cur_code,
                  no_of_containers,
                  incoterm_id,
                  incoterm,
                  cfx_inv_to_base,
                  base_cur_id,
                  base_cur_code,
                  cfx_base_to_load_country,
                  cfx_base_to_dis_country,
                  qty_unit_id,
                  qty_unit,
                  invoice_eff_date,
                  gmr_eff_date,
                  final_invoice_date,
                  invoice_cur_id,
                  invoice_cur_code,
                  inventory_cur_id,
                  inventory_cur_code;

 sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1005,
                          'Start Of Concentrate Metal Event Based');                  
   
--
-- Concentrates Event Based                  
--
    insert into cr_customs_report
      (process_id,
       internal_contract_ref_no,
       contract_ref_no,
       delivery_item_no,
       corporate_id,
       corporate_name,
       smelter_id,
       smelter_name,
       supplier_id,
       supplier_name,
       quality_id,
       quality_name,
       internal_invoice_ref_no,
       invoice_ref_no,
       invoice_date,
       internal_gmr_ref_no,
       gmr_ref_no,
       product_id,
       product_name,
       shipment_date,
       loading_country_id,
       loading_country,
       loading_state_id,
       loading_state,
       loading_city_id,
       loading_city,
       discharge_country_id,
       discharge_country,
       discharge_state_id,
       discharge_state,
       discharge_city_id,
       discharge_city,
       loading_national_cur_id,
       loading_national_cur_code,
       discharge_national_cur_id,
       discharge_national_cur_code,
       no_of_containers,
       incoterm_id,
       incoterm,
       cfx_invent_or_invoice_to_base,
       base_cur_id,
       base_cur_code,
       cfx_base_to_loading_country,
       cfx_base_to_discharge_country,
       qty,
       qty_unit_id,
       qty_unit,
       invoice_eff_date,
       gmr_eff_date,
       final_invoice_date,
       invoice_value,
       invoice_cur_id,
       invoice_cur_code,
       inventory_cur_id,
       inventory_cur_code)
      select pc_process_id,
             internal_contract_ref_no,
             contract_ref_no,
             delivery_item_no,
             corporate_id,
             corporate_name,
             smelter_id,
             smelter_name,
             supplier_id,
             supplier_name,
             quality_id,
             quality_name,
             internal_invoice_ref_no,
             invoice_ref_no,
             invoice_date,
             internal_gmr_ref_no,
             gmr_ref_no,
             product_id,
             product_name,
             shipment_date,
             loading_country_id,
             loading_country,
             loading_state_id,
             loading_state,
             loading_city_id,
             loading_city,
             discharge_country_id,
             discharge_country,
             discharge_state_id,
             discharge_state,
             discharge_city_id,
             discharge_city,
             loading_national_cur_id,
             loading_national_cur_code,
             discharge_national_cur_id,
             discharge_national_cur_code,
             no_of_containers,
             incoterm_id,
             incoterm,
             cfx_inv_to_base,
             base_cur_id,
             base_cur_code,
             cfx_base_to_load_country,
             cfx_base_to_dis_country,
             sum(qty),
             qty_unit_id,
             qty_unit,
             invoice_eff_date,
             gmr_eff_date,
             final_invoice_date,
             sum(invoice_value),
             invoice_cur_id,
             invoice_cur_code,
             inventory_cur_id,
             inventory_cur_code
        from (
              select pcm.internal_contract_ref_no,
                     pcm.contract_ref_no,
                     pcdi.delivery_item_no,
                     pcm.corporate_id,
                     corporate_name,
                     pcm.cp_id smelter_id,
                     phd.companyname smelter_name,
                     phd.profileid supplier_id,
                     phd.companyname supplier_name,
                     qat.quality_id,
                     qat.quality_name,
                     gmr.latest_internal_invoice_ref_no internal_invoice_ref_no,
                     is1.invoice_ref_no,
                     is1.invoice_issue_date invoice_date,
                     gmr.internal_gmr_ref_no,
                     gmr.gmr_ref_no,
                     pcpd.product_id,
                     pdm.product_desc product_name,
                     gmr.bl_date shipment_date,
                     gmr.loading_country_id,
                     cym_l.country_name loading_country,
                     sm_l.state_id loading_state_id,
                     sm_l.state_name loading_state,
                     cim_l.city_id loading_city_id,
                     cim_l.city_name loading_city,
                     gmr.discharge_country_id,
                     cym_d.country_name discharge_country,
                     sm_d.state_id discharge_state_id,
                     sm_d.state_name discharge_state,
                     cim_d.city_id discharge_city_id,
                     cim_d.city_name discharge_city,
                     cym_l.national_currency loading_national_cur_id,
                     cm_countryl.cur_code loading_national_cur_code,
                     cym_d.national_currency discharge_national_cur_id,
                     cm_countryd.cur_code discharge_national_cur_code,
                     grd.no_of_containers,
                     itm.incoterm_id,
                     itm.incoterm,
                     pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                              (case
                                                                when gmr.latest_internal_invoice_ref_no is not null then
                                                                 is1.invoice_cur_id
                                                                else
                                                                 invm.cog_cur_id
                                                              end),
                                                              ak.base_cur_id,
                                                              gmr.bl_date,
                                                              1) cfx_inv_to_base,
                     cm_base.cur_id base_cur_id,
                     cm_base.cur_code base_cur_code,
                     pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                              ak.base_cur_id,
                                                              cm_countryl.cur_id,
                                                              gmr.bl_date,
                                                              1) cfx_base_to_load_country,
                     pkg_general.f_get_converted_currency_amt(pcm.corporate_id,
                                                              ak.base_cur_id,
                                                              cm_countryd.cur_id,
                                                              gmr.bl_date,
                                                              1) cfx_base_to_dis_country,
                     pkg_general.f_get_converted_quantity(grd.product_id,
                                                          grd.qty_unit_id,
                                                          pdm.base_quantity_unit,
                                                          grd.current_qty) qty,
                     qum.qty_unit_id,
                     qum.qty_unit,
                     is1.invoice_issue_date invoice_eff_date,
                     gmr.eff_date gmr_eff_date,
                     nvl(is1.invoice_issue_date, gmr.eff_date) final_invoice_date,
                     (case
                       when is1.internal_invoice_ref_no is not null then
                        is1.total_invoice_item_amount
                       else
                        pkg_phy_pre_check_process.f_get_converted_price(pcm.corporate_id,
                                                                        cgcp.contract_price,
                                                                        cgcp.price_unit_id,
                                                                        ppu.product_price_unit_id,
                                                                        gmr.bl_date) *
                        pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                             spq.qty_unit_id,
                                                             pdm_aml.base_quantity_unit,
                                                             spq.payable_qty)
                     end) invoice_value,
                     is1.invoice_cur_id invoice_cur_id,
                     cm_invoice.cur_code invoice_cur_code,
                     cm_invtry.cur_id inventory_cur_id,
                     cm_invtry.cur_code inventory_cur_code
                from gmr_goods_movement_record  gmr,
                     pcm_physical_contract_main pcm,
                     pcdi_pc_delivery_item      pcdi,
                     pci_physical_contract_item pci,
                     phd_profileheaderdetails   phd,
                     sm_state_master            sm_l,
                     sm_state_master            sm_d,
                     cim_citymaster             cim_l,
                     cim_citymaster             cim_d,
                     itm_incoterm_master        itm,
                     grd_goods_record_detail    grd,
                     pcpd_pc_product_definition pcpd,
                     pdm_productmaster          pdm,
                     qat_quality_attributes     qat,
                     qum_quantity_unit_master   qum,
                     invm_inventory_master      invm,
                     cym_countrymaster          cym_l,
                     cym_countrymaster          cym_d,
                     ak_corporate               ak,
                     cm_currency_master         cm_invoice,
                     cm_currency_master         cm_invtry,
                     cm_currency_master         cm_base,
                     cm_currency_master         cm_countryl,
                     cm_currency_master         cm_countryd,
                     is_invoice_summary         is1,
                     cgcp_conc_gmr_cog_price    cgcp,
                     v_ppu_pum                  ppu,
                     spq_stock_payable_qty      spq,
                     aml_attribute_master_list  aml,
                     pdm_productmaster          pdm_aml
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and sm_l.state_id(+) = gmr.loading_state_id
                 and sm_d.state_id(+) = gmr.discharge_state_id
                 and cim_l.city_id(+) = gmr.loading_city_id
                 and cim_d.city_id(+) = gmr.discharge_city_id
                 and pcm.internal_contract_ref_no =
                     pcdi.internal_contract_ref_no
                 and gmr.latest_internal_invoice_ref_no =
                     is1.internal_invoice_ref_no(+)
                 and pcm.cp_id = phd.profileid(+)
                 and grd.internal_contract_item_ref_no =
                     pci.internal_contract_item_ref_no(+)
                 and pci.m2m_inco_term = itm.incoterm_id(+)
                 and grd.pcdi_id = pcdi.pcdi_id(+)
                 and grd.quality_id = qat.quality_id(+)
                 and pcm.internal_contract_ref_no =
                     pcpd.internal_contract_ref_no
                 and pcpd.input_output = 'Input'
                 and pdm.product_id = pcpd.product_id
                 and grd.internal_grd_ref_no = invm.internal_grd_ref_no(+)
                 and grd.internal_gmr_ref_no = invm.internal_gmr_ref_no(+)
                 and grd.qty_unit_id = qum.qty_unit_id(+)
                 and grd.is_mark_for_tolling = 'N'
                 and cym_l.country_id = gmr.loading_country_id
                 and cym_d.country_id = gmr.discharge_country_id
                 and ak.corporate_id = pcm.corporate_id
                 and is1.invoice_cur_id = cm_invoice.cur_id(+)
                 and invm.cog_cur_id = cm_invtry.cur_id(+)
                 and ak.base_cur_id = cm_base.cur_id
                 and cym_l.national_currency = cm_countryl.cur_id(+)
                 and cym_d.national_currency = cm_countryd.cur_id(+)
                 and gmr.process_id = pc_process_id
                 and pcm.process_id = pc_process_id
                 and pcdi.process_id = pc_process_id
                 and pci.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and pcpd.process_id = pc_process_id
                 and is1.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and cgcp.process_id = pc_process_id
                 and cgcp.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cgcp.internal_grd_ref_no = grd.internal_grd_ref_no
                 and cgcp.element_id = spq.element_id
                 and pcm.contract_type = 'CONCENTRATES'
                 and pcm.purchase_sales = 'P'
                 and ppu.product_id = pdm_aml.product_id
                 and ppu.cur_id = ak.base_cur_id
                 and ppu.weight_unit_id = pdm_aml.base_quantity_unit
                 and nvl(ppu.weight, 1) = 1
                 and spq.process_id = pc_process_id
                 and spq.is_stock_split = 'N'
                 and spq.internal_grd_ref_no = grd.internal_grd_ref_no
                 and spq.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and spq.element_id = aml.attribute_id
                 and aml.underlying_product_id = pdm_aml.product_id
                 -- and aml.underlying_product_id = pdm.product_id
                 and grd.current_qty > 0)
       group by internal_contract_ref_no,
                contract_ref_no,
                delivery_item_no,
                corporate_id,
                corporate_name,
                smelter_id,
                smelter_name,
                supplier_id,
                supplier_name,
                quality_id,
                quality_name,
                internal_invoice_ref_no,
                invoice_ref_no,
                invoice_date,
                internal_gmr_ref_no,
                gmr_ref_no,
                product_id,
                product_name,
                shipment_date,
                loading_country_id,
                loading_country,
                loading_state_id,
                loading_state,
                loading_city_id,
                loading_city,
                discharge_country_id,
                discharge_country,
                discharge_state_id,
                discharge_state,
                discharge_city_id,
                discharge_city,
                loading_national_cur_id,
                loading_national_cur_code,
                discharge_national_cur_id,
                discharge_national_cur_code,
                no_of_containers,
                incoterm_id,
                incoterm,
                cfx_inv_to_base,
                base_cur_id,
                base_cur_code,
                cfx_base_to_load_country,
                cfx_base_to_dis_country,
                qty_unit_id,
                qty_unit,
                invoice_eff_date,
                gmr_eff_date,
                final_invoice_date,
                invoice_cur_id,
                invoice_cur_code,
                inventory_cur_id,
                inventory_cur_code;
 sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          1005,
                          'End of Customes Report');                  
  
  end;
  procedure sp_metal_balance_qty_summary(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2) as
    vd_prev_eom_date   date;
    vc_prev_process_id number;
  
  begin
    begin
      select tdc.trade_date,
             tdc.process_id
        into vd_prev_eom_date,
             vc_prev_process_id
        from tdc_trade_date_closure tdc
       where tdc.trade_date = (select max(t.trade_date)
                                 from tdc_trade_date_closure t
                                where t.trade_date < pd_trade_date
                                  and t.corporate_id = pc_corporate_id
                                  and t.process = 'EOM')
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_process_id := null;
        vd_prev_eom_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
  
    insert into mas_metal_account_summary
      (process_id,
       eod_trade_date,
       product_id,
       product_desc,
       corporate_id,
       corporate_name,
       position_type,
       stock_type,
       section_name,
       section_order,
       warehouse_profile_id,
       warehousename,
       stock_qty,
       qty_unit_id,
       qty_unit)
      select pc_process_id,
             pd_trade_date,
             t.underlying_product_id,
             t.product_desc,
             t.corporate_id,
             t.corporate_name,
             t.position_type,
             t.stock_type,
             t.section_name,
             t.section_order,
             t.warehouse_profile_id,
             t.companyname,
             t.stock_qty,
             t.qty_unit_id,
             t.qty_unit
        from (select aml.underlying_product_id,
                     pdm.product_desc,
                     gmr.corporate_id,
                     akc.corporate_name,
                     'Inventory' position_type,
                     'Raw Material Stock' stock_type,
                     (case
                       when agmr.eff_date > vd_prev_eom_date and
                            agmr.eff_date <= pd_trade_date then
                        'New Stocks'
                       else
                        'Existing Stock'
                     end) section_name,
                     (case
                       when agmr.eff_date > vd_prev_eom_date and
                            agmr.eff_date <= pd_trade_date then
                        '2'
                       else
                        '1'
                     end) section_order,
                     grd.warehouse_profile_id,
                     phd.companyname,
                     sum(case
                           when agmr.eff_date > vd_prev_eom_date and
                                agmr.eff_date <= pd_trade_date then
                            (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                  spq.qty_unit_id,
                                                                  pdm.base_quantity_unit,
                                                                  spq.payable_qty))
                         
                           else
                            (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                  spq.qty_unit_id,
                                                                  pdm.base_quantity_unit,
                                                                  spq.payable_qty))
                         
                         end) stock_qty,
                     pdm.base_quantity_unit qty_unit_id,
                     qum.qty_unit
                from gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     (select gmr.internal_gmr_ref_no,
                             agmr.eff_date
                        from gmr_goods_movement_record gmr,
                             agmr_action_gmr           agmr
                       where gmr.internal_gmr_ref_no =
                             agmr.internal_gmr_ref_no
                         and agmr.gmr_latest_action_action_id in
                             ('landingDetail', 'warehouseReceipt')
                         and agmr.is_deleted = 'N'
                         and gmr.process_id = pc_process_id) agmr,
                     phd_profileheaderdetails phd,
                     spq_stock_payable_qty spq,
                     aml_attribute_master_list aml,
                     pdm_productmaster pdm,
                     qum_quantity_unit_master qum,
                     ak_corporate akc
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = agmr.internal_gmr_ref_no(+)
                 and gmr.is_deleted = 'N'
                 and grd.status = 'Active'
                 and grd.is_afloat = 'N'
                 and grd.is_trans_ship = 'N'
                 and grd.tolling_stock_type = 'None Tolling'
                 and grd.warehouse_profile_id = phd.profileid
                 and grd.internal_grd_ref_no = spq.internal_grd_ref_no
                 and spq.is_stock_split = 'N'
                 and spq.element_id = aml.attribute_id
                 and aml.underlying_product_id = pdm.product_id
                 and pdm.base_quantity_unit = qum.qty_unit_id
                 and gmr.corporate_id = akc.corporate_id
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and spq.process_id = pc_process_id
                 and agmr.eff_date <= pd_trade_date
               group by aml.underlying_product_id,
                        pdm.product_desc,
                        grd.warehouse_profile_id,
                        phd.companyname,
                        pdm.base_quantity_unit,
                        qum.qty_unit,
                        gmr.corporate_id,
                        akc.corporate_name,
                        (case
                          when agmr.eff_date > vd_prev_eom_date and
                               agmr.eff_date <= pd_trade_date then
                           'New Stocks'
                          else
                           'Existing Stock'
                        end),
                        (case
                          when agmr.eff_date > vd_prev_eom_date and
                               agmr.eff_date <= pd_trade_date then
                           '2'
                          else
                           '1'
                        end)
              union all
              select aml.underlying_product_id,
                     pdm.product_desc,
                     gmr.corporate_id,
                     akc.corporate_name,
                     'Inventory' position_type,
                     'In Process Stock' stock_type,
                     (case
                       when agmr.eff_date > vd_prev_eom_date and
                            agmr.eff_date <= pd_trade_date then
                        'New Stocks'
                       else
                        'Existing Stock'
                     end) section_name,
                     (case
                       when agmr.eff_date > vd_prev_eom_date and
                            agmr.eff_date <= pd_trade_date then
                        '3'
                       else
                        '2'
                     end) section_order,
                     grd.warehouse_profile_id,
                     phd.companyname,
                     sum(case
                           when agmr.eff_date > vd_prev_eom_date and
                                agmr.eff_date <= pd_trade_date then
                            (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                  grd.qty_unit_id,
                                                                  pdm.base_quantity_unit,
                                                                  grd.qty))
                           else
                            (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                  grd.qty_unit_id,
                                                                  pdm.base_quantity_unit,
                                                                  grd.qty))
                         
                         end) stock_qty,
                     pdm.base_quantity_unit qty_unit_id,
                     qum.qty_unit
                from gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     aml_attribute_master_list aml,
                     pdm_productmaster pdm,
                     (select gmr.internal_gmr_ref_no,
                             agmr.eff_date
                        from gmr_goods_movement_record gmr,
                             agmr_action_gmr           agmr
                       where gmr.internal_gmr_ref_no =
                             agmr.internal_gmr_ref_no
                         and agmr.gmr_latest_action_action_id in
                             ('MARK_FOR_TOLLING')
                         and agmr.is_deleted = 'N'
                         and gmr.process_id = pc_process_id) agmr,
                     qum_quantity_unit_master qum,
                     phd_profileheaderdetails phd,
                     ak_corporate akc
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = agmr.internal_gmr_ref_no(+)
                 and gmr.is_deleted = 'N'
                 and grd.status = 'Active'
                 and grd.is_afloat = 'N'
                 and grd.is_trans_ship = 'N'
                 and grd.product_id = aml.underlying_product_id
                 and aml.underlying_product_id = pdm.product_id
                 and pdm.base_quantity_unit = qum.qty_unit_id
                 and grd.warehouse_profile_id = phd.profileid
                 and gmr.corporate_id = akc.corporate_id
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and agmr.eff_date <= pd_trade_date
                 and grd.tolling_stock_type in
                     ('MFT In Process Stock', 'Free Metal IP Stock',
                      'Delta FM IP Stock', 'Delta MFT IP Stock')
               group by aml.underlying_product_id,
                        pdm.product_desc,
                        grd.warehouse_profile_id,
                        phd.companyname,
                        pdm.base_quantity_unit,
                        qum.qty_unit,
                        gmr.corporate_id,
                        akc.corporate_name,
                        (case
                          when agmr.eff_date > vd_prev_eom_date and
                               agmr.eff_date <= pd_trade_date then
                           'New Stocks'
                          else
                           'Existing Stock'
                        end),
                        (case
                          when agmr.eff_date > vd_prev_eom_date and
                               agmr.eff_date <= pd_trade_date then
                           '3'
                          else
                           '2'
                        end)
              union all
              select aml.underlying_product_id,
                     pdm.product_desc,
                     gmr.corporate_id,
                     akc.corporate_name,
                     'Inventory' position_type,
                     'Finished Stock' stock_type,
                     (case
                       when agmr.eff_date > vd_prev_eom_date and
                            agmr.eff_date <= pd_trade_date then
                        'New Stocks - Not Consumed'
                       else
                        'Existing Stock'
                     end) section_name,
                     (case
                       when agmr.eff_date > vd_prev_eom_date and
                            agmr.eff_date <= pd_trade_date then
                        '3'
                       else
                        '1'
                     end) section_order,
                     grd.warehouse_profile_id,
                     phd.companyname,
                     sum(case
                           when agmr.eff_date > vd_prev_eom_date and
                                agmr.eff_date <= pd_trade_date then
                            (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                  grd.qty_unit_id,
                                                                  pdm.base_quantity_unit,
                                                                  grd.qty))
                           else
                            (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                                  grd.qty_unit_id,
                                                                  pdm.base_quantity_unit,
                                                                  grd.qty))
                         end) stock_qty,
                     pdm.base_quantity_unit qty_unit_id,
                     qum.qty_unit
                from gmr_goods_movement_record gmr,
                     grd_goods_record_detail grd,
                     aml_attribute_master_list aml,
                     pdm_productmaster pdm,
                     (select gmr.internal_gmr_ref_no,
                             agmr.eff_date
                        from gmr_goods_movement_record gmr,
                             agmr_action_gmr           agmr
                       where gmr.internal_gmr_ref_no =
                             agmr.internal_gmr_ref_no
                         and agmr.gmr_latest_action_action_id in
                             ('RECORD_OUT_PUT_TOLLING')
                         and agmr.is_deleted = 'N'
                         and gmr.process_id = pc_process_id) agmr,
                     qum_quantity_unit_master qum,
                     phd_profileheaderdetails phd,
                     ak_corporate akc
              
               where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
                 and gmr.internal_gmr_ref_no = agmr.internal_gmr_ref_no(+)
                 and gmr.is_deleted = 'N'
                 and grd.status = 'Active'
                 and grd.is_afloat = 'N'
                 and grd.is_trans_ship = 'N'
                 and grd.product_id = aml.underlying_product_id
                 and aml.underlying_product_id = pdm.product_id
                 and pdm.base_quantity_unit = qum.qty_unit_id
                 and grd.warehouse_profile_id = phd.profileid
                 and gmr.process_id = pc_process_id
                 and grd.process_id = pc_process_id
                 and agmr.eff_date <= pd_trade_date
                 and gmr.corporate_id = akc.corporate_id
                 and grd.tolling_stock_type = 'RM In Process Stock'
               group by aml.underlying_product_id,
                        pdm.product_desc,
                        grd.warehouse_profile_id,
                        phd.companyname,
                        pdm.base_quantity_unit,
                        qum.qty_unit,
                        gmr.corporate_id,
                        akc.corporate_name,
                        (case
                          when agmr.eff_date > vd_prev_eom_date and
                               agmr.eff_date <= pd_trade_date then
                           'New Stocks - Not Consumed'
                          else
                           'Existing Stock'
                        end),
                        (case
                          when agmr.eff_date > vd_prev_eom_date and
                               agmr.eff_date <= pd_trade_date then
                           '3'
                          else
                           '1'
                        end)) t;
    commit;
    ---Consumed for Raw Material Stock 
    insert into mas_metal_account_summary
      (process_id,
       eod_trade_date,
       product_id,
       product_desc,
       corporate_id,
       corporate_name,
       position_type,
       stock_type,
       section_name,
       section_order,
       warehouse_profile_id,
       warehousename,
       stock_qty,
       qty_unit_id,
       qty_unit)
      select pc_process_id,
             pd_trade_date,
             mas.product_id,
             mas.product_desc,
             mas.corporate_id,
             mas.corporate_name,
             'Inventory' position_type,
             'Raw Material Stock' stock_type,
             'Consumed' section_name,
             '3' section_order,
             mas.warehouse_profile_id,
             mas.warehousename,
             mas.stock_qty,
             mas.qty_unit_id,
             mas.qty_unit
        from mas_metal_account_summary mas
       where mas.stock_type = 'In Process Stock'
         and mas.section_name = 'New Stocks'
         and mas.process_id = pc_process_id;
    commit;
    --- Iron Stock for In Process Stock 
  
    insert into mas_metal_account_summary
      (process_id,
       eod_trade_date,
       product_id,
       product_desc,
       corporate_id,
       corporate_name,
       position_type,
       stock_type,
       section_name,
       section_order,
       warehouse_profile_id,
       warehousename,
       stock_qty,
       qty_unit_id,
       qty_unit)
      select pc_process_id,
             pd_trade_date,
             sbs.product_id,
             pdm.product_desc,
             sbs.corporate_id,
             akc.corporate_name,
             'Inventory' position_type,
             'In Process Stock' stock_type,
             'Iron Stock',
             '1' section_order,
             sbs.warehouse_profile_id,
             phd.companyname,
             pkg_general.f_get_converted_quantity(sbs.product_id,
                                                  sbs.qty_unit_id,
                                                  pdm.base_quantity_unit,
                                                  sbs.qty),
             pdm.base_quantity_unit qty_unit_id,
             qum.qty_unit
        from sbs_smelter_base_stock   sbs,
             pdm_productmaster        pdm,
             ak_corporate             akc,
             phd_profileheaderdetails phd,
             qum_quantity_unit_master qum
       where sbs.product_id = pdm.product_id
         and sbs.corporate_id = akc.corporate_id
         and sbs.warehouse_profile_id = phd.profileid
         and pdm.base_quantity_unit = qum.qty_unit_id;
    ---  
    commit;
    insert into mas_metal_account_summary
      (process_id,
       eod_trade_date,
       product_id,
       product_desc,
       corporate_id,
       corporate_name,
       position_type,
       stock_type,
       section_name,
       section_order,
       warehouse_profile_id,
       warehousename,
       stock_qty,
       qty_unit_id,
       qty_unit)
      select pc_process_id,
             pd_trade_date,
             mas.product_id,
             mas.product_desc,
             mas.corporate_id,
             mas.corporate_name,
             'Inventory' position_type,
             mas.stock_type,
             decode(mas.stock_type,
                    'In Process Stock',
                    'Consumed',
                    'New Stocks - Consumed') stock_type,
             decode(mas.stock_type, 'In Process Stock', '4', '2') section_order,
             mas.warehouse_profile_id,
             mas.warehousename,
             0,
             mas.qty_unit_id,
             mas.qty_unit
        from mas_metal_account_summary mas
       where (mas.stock_type, mas.section_name) in
             (('In Process Stock', 'New Stocks'),
              ('Finished Stock', 'New Stocks - Not Consumed'))
         and mas.process_id = pc_process_id;
    commit;
    ---afolat
    insert into mas_metal_account_summary
      (process_id,
       eod_trade_date,
       product_id,
       product_desc,
       corporate_id,
       corporate_name,
       position_type,
       stock_type,
       section_name,
       section_order,
       warehouse_profile_id,
       warehousename,
       stock_qty,
       qty_unit_id,
       qty_unit)
      select pc_process_id,
             pd_trade_date,
             aml.underlying_product_id,
             pdm.product_desc,
             gmr.corporate_id,
             akc.corporate_name,
             'Afloat' position_type,
             'Raw Material Stock' stock_type,
             (case
               when agmr.eff_date > vd_prev_eom_date and
                    agmr.eff_date <= pd_trade_date then
                'New Stocks'
               else
                'Existing Stock'
             end) section_name,
             (case
               when agmr.eff_date > vd_prev_eom_date and
                    agmr.eff_date <= pd_trade_date then
                '2'
               else
                '1'
             end) section_order,
             null warehouse_profile_id,
             null companyname,
             sum(case
                   when agmr.eff_date > vd_prev_eom_date and
                        agmr.eff_date <= pd_trade_date then
                    (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                          spq.qty_unit_id,
                                                          pdm.base_quantity_unit,
                                                          spq.payable_qty))
                   else
                    (pkg_general.f_get_converted_quantity(aml.underlying_product_id,
                                                          spq.qty_unit_id,
                                                          pdm.base_quantity_unit,
                                                          spq.payable_qty))
                 end) stock_qty,
             pdm.base_quantity_unit qty_unit_id,
             qum.qty_unit
        from gmr_goods_movement_record gmr,
             grd_goods_record_detail grd,
             (select gmr.internal_gmr_ref_no,
                     agmr.eff_date
                from gmr_goods_movement_record gmr,
                     agmr_action_gmr           agmr
               where gmr.internal_gmr_ref_no = agmr.internal_gmr_ref_no
                 and agmr.gmr_latest_action_action_id in ('shipmentDetail')
                 and agmr.is_deleted = 'N'
                 and gmr.process_id = pc_process_id) agmr,
             spq_stock_payable_qty spq,
             aml_attribute_master_list aml,
             pdm_productmaster pdm,
             qum_quantity_unit_master qum,
             ak_corporate akc
       where gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and gmr.internal_gmr_ref_no = agmr.internal_gmr_ref_no(+)
         and gmr.is_deleted = 'N'
         and grd.status = 'Active'
         and grd.is_afloat = 'Y'
         and grd.tolling_stock_type = 'None Tolling'
         and grd.internal_grd_ref_no = spq.internal_grd_ref_no
         and spq.is_stock_split = 'N'
         and spq.element_id = aml.attribute_id
         and aml.underlying_product_id = pdm.product_id
         and pdm.base_quantity_unit = qum.qty_unit_id
         and gmr.corporate_id = akc.corporate_id
         and gmr.process_id = pc_process_id
         and grd.process_id = pc_process_id
         and spq.process_id = pc_process_id
         and agmr.eff_date <= pd_trade_date
       group by aml.underlying_product_id,
                pdm.product_desc,
                pdm.base_quantity_unit,
                qum.qty_unit,
                gmr.corporate_id,
                akc.corporate_name,
                (case
                  when agmr.eff_date > vd_prev_eom_date and
                       agmr.eff_date <= pd_trade_date then
                   'New Stocks'
                  else
                   'Existing Stock'
                end),
                (case
                  when agmr.eff_date > vd_prev_eom_date and
                       agmr.eff_date <= pd_trade_date then
                   '2'
                  else
                   '1'
                end);
  
    commit;
    insert into md_metal_debt
      (process_id,
       corporate_id,
       product_id,
       product_name,
       stock_qty,
       debt_qty,
       net_qty,
       qty_unit_id,
       qty_unit)
      select pc_process_id,
             corporate_id,
             product_id,
             product_name,
             sum(stock_qty) stock_qty,
             sum(debt_qty),
             sum(stock_qty) + sum(debt_qty) net_qty,
             qty_unit_id,
             qty_unit
        from (select debt_temp.corporate_id,
                     debt_temp.product_id product_id,
                     debt_temp.product_name product_name,
                     0 stock_qty,
                     sum(debt_temp.total_qty) debt_qty,
                     debt_temp.qty_unit_id qty_unit_id,
                     qum.qty_unit qty_unit
                from (select returnable_temp.corporate_id,
                             returnable_temp.supplier_id supplier_id,
                             returnable_temp.product_id,
                             returnable_temp.product_name,
                             -1 * sum(returnable_temp.total_qty) total_qty,
                             returnable_temp.qty_unit_id,
                             returnable_temp.qty_type
                        from (select axs.corporate_id,
                                     prrqs.cp_id supplier_id,
                                     prrqs.product_id product_id,
                                     pdm.product_desc product_name,
                                     sum(prrqs.qty_sign *
                                         pkg_general.f_get_converted_quantity(cpm.product_id,
                                                                              prrqs.qty_unit_id,
                                                                              cpm.inventory_qty_unit,
                                                                              prrqs.qty)) total_qty,
                                     cpm.inventory_qty_unit qty_unit_id,
                                     prrqs.qty_type qty_type
                                from prrqs_prr_qty_status       prrqs,
                                     axs_action_summary         axs,
                                     aml_attribute_master_list  aml,
                                     pdm_productmaster          pdm,
                                     cpm_corporateproductmaster cpm
                               where prrqs.internal_action_ref_no =
                                     axs.internal_action_ref_no
                                 and prrqs.cp_type = 'Supplier'
                                 and prrqs.is_active = 'Y'
                                 and prrqs.qty_type = 'Returnable'
                                 and aml.attribute_id(+) = prrqs.element_id
                                 and pdm.product_id = prrqs.product_id
                                 and cpm.is_active = 'Y'
                                 and cpm.is_deleted = 'N'
                                 and cpm.product_id = pdm.product_id
                                 and cpm.corporate_id = axs.corporate_id
                                 and prrqs.corporate_id = pc_corporate_id
                                 and axs.corporate_id = pc_corporate_id
                                 and axs.eff_date <= pd_trade_date
                               group by axs.corporate_id,
                                        prrqs.cp_id,
                                        prrqs.product_id,
                                        pdm.product_desc,
                                        cpm.inventory_qty_unit,
                                        prrqs.qty_type
                              union
                              select axs.corporate_id,
                                     spq.supplier_id,
                                     product_temp.underlying_product_id product_id,
                                     product_temp.product_desc product_name,
                                     sum(pkg_general.f_get_converted_quantity(cpm.product_id,
                                                                              spq.qty_unit_id,
                                                                              cpm.inventory_qty_unit,
                                                                              spq.payable_qty)) total_qty,
                                     cpm.inventory_qty_unit qty_unit_id,
                                     spq.qty_type qty_type
                                from spq_stock_payable_qty spq,
                                     axs_action_summary axs,
                                     (select aml.attribute_id,
                                             aml.attribute_name,
                                             qav.quality_id quality_id,
                                             qat.long_desc,
                                             qav.comp_quality_id comp_quality_id,
                                             aml.underlying_product_id underlying_product_id,
                                             pdm.product_desc,
                                             ppm.product_id
                                        from aml_attribute_master_list      aml,
                                             ppm_product_properties_mapping ppm,
                                             qav_quality_attribute_values   qav,
                                             qat_quality_attributes         qat,
                                             pdm_productmaster              pdm
                                       where aml.attribute_id =
                                             ppm.attribute_id
                                         and aml.is_active = 'Y'
                                         and aml.is_deleted = 'N'
                                         and ppm.is_active = 'Y'
                                         and ppm.is_deleted = 'N'
                                         and qav.attribute_id = ppm.property_id
                                         and qav.is_deleted = 'N'
                                         and qat.quality_id = qav.quality_id
                                         and qat.product_id = ppm.product_id
                                         and qat.is_active = 'Y'
                                         and qat.is_deleted = 'N'
                                         and aml.underlying_product_id is not null
                                         and qav.comp_quality_id is not null
                                         and pdm.product_id =
                                             aml.underlying_product_id) product_temp,
                                     cpm_corporateproductmaster cpm,
                                     grd_goods_record_detail grd
                               where spq.internal_action_ref_no =
                                     axs.internal_action_ref_no
                                 and spq.smelter_id is null
                                 and spq.is_active = 'Y'
                                 and spq.is_stock_split = 'N'
                                 and spq.qty_type = 'Returnable'
                                 and grd.internal_grd_ref_no =
                                     spq.internal_grd_ref_no
                                 and product_temp.attribute_id =
                                     spq.element_id
                                 and product_temp.product_id = grd.product_id
                                 and product_temp.quality_id = grd.quality_id
                                 and cpm.is_active = 'Y'
                                 and cpm.is_deleted = 'N'
                                 and cpm.product_id =
                                     product_temp.underlying_product_id
                                 and cpm.corporate_id = axs.corporate_id
                                 and spq.process_id = pc_process_id
                                 and grd.process_id = pc_process_id
                                 and axs.corporate_id = pc_corporate_id
                               group by axs.corporate_id,
                                        spq.supplier_id,
                                        product_temp.underlying_product_id,
                                        product_temp.product_desc,
                                        cpm.inventory_qty_unit,
                                        spq.qty_type) returnable_temp
                       group by returnable_temp.corporate_id,
                                returnable_temp.supplier_id,
                                returnable_temp.product_id,
                                returnable_temp.product_name,
                                returnable_temp.qty_unit_id,
                                returnable_temp.qty_type
                      union
                      select axs.corporate_id,
                             prrqs.cp_id supplier_id,
                             prrqs.product_id product_id,
                             pdm.product_desc product_name,
                             sum(prrqs.qty_sign *
                                 pkg_general.f_get_converted_quantity(cpm.product_id,
                                                                      prrqs.qty_unit_id,
                                                                      cpm.inventory_qty_unit,
                                                                      prrqs.qty)) total_qty,
                             cpm.inventory_qty_unit qty_unit_id,
                             prrqs.qty_type qty_type
                        from prrqs_prr_qty_status       prrqs,
                             axs_action_summary         axs,
                             aml_attribute_master_list  aml,
                             pdm_productmaster          pdm,
                             cpm_corporateproductmaster cpm
                       where prrqs.internal_action_ref_no =
                             axs.internal_action_ref_no
                         and prrqs.cp_type = 'Supplier'
                         and prrqs.is_active = 'Y'
                         and prrqs.qty_type = 'Returned'
                         and aml.attribute_id(+) = prrqs.element_id
                         and pdm.product_id = prrqs.product_id
                         and cpm.is_active = 'Y'
                         and cpm.is_deleted = 'N'
                         and cpm.product_id = pdm.product_id
                         and cpm.corporate_id = axs.corporate_id
                         and prrqs.corporate_id = pc_corporate_id
                         and axs.eff_date <= pd_trade_date
                       group by axs.corporate_id,
                                prrqs.cp_id,
                                prrqs.product_id,
                                pdm.product_desc,
                                cpm.inventory_qty_unit,
                                prrqs.qty_type) debt_temp,
                     phd_profileheaderdetails phd,
                     qum_quantity_unit_master qum
               where debt_temp.supplier_id = phd.profileid
                 and debt_temp.qty_unit_id = qum.qty_unit_id
               group by debt_temp.corporate_id,
                        debt_temp.product_id,
                        debt_temp.product_name,
                        debt_temp.qty_unit_id,
                        qum.qty_unit
              union all
              select mas.corporate_id,
                     mas.product_id product_id,
                     mas.product_desc product_name,
                     -- sum(mas.stock_qty) stock_qty,
                     sum(case
                            when mas.stock_type = 'Finished Stock' then
                             (case
                            when mas.section_name = 'Existing Stock' then
                             mas.stock_qty
                            when mas.section_name = 'New Stocks - Consumed' then
                             mas.stock_qty
                            when mas.section_name = 'New Stocks - Not Consumed' then
                             0
                          end) when mas.stock_type = 'In Process Stock' then(case
                       when mas.section_name =
                            'Existing Stock' then
                        mas.stock_qty
                       when mas.section_name =
                            'New Stocks' then
                        mas.stock_qty
                       when mas.section_name =
                            'Consumed' then
                        mas.stock_qty * (-1)
                       when mas.section_name =
                            'Iron Stock' then
                        0
                     end) when mas.stock_type = 'Raw Material Stock' then(case
                       when mas.section_name =
                            'Existing Stock' then
                        mas.stock_qty
                       when mas.section_name =
                            'New Stocks' then
                        mas.stock_qty
                       when mas.section_name =
                            'Consumed' then
                        mas.stock_qty * (-1)
                     end) end) stock_qty,
                     0 debt_qty,
                     mas.qty_unit_id qty_unit_id,
                     mas.qty_unit
                from mas_metal_account_summary mas
               where mas.process_id = pc_process_id
                 and mas.position_type = 'Inventory'
               group by mas.corporate_id,
                        mas.product_id,
                        mas.product_desc,
                        mas.qty_unit_id,
                        mas.qty_unit)
       group by corporate_id,
                product_id,
                product_name,
                qty_unit_id,
                qty_unit;
  
    commit;
  end;
  
  PROCEDURE sp_misc
    (
        pc_corporate_id VARCHAR2,
        pd_trade_date   DATE,
        pc_user_id      VARCHAR2
    ) IS
        --------------------------------------------------------------------------------------------------------------------------
        --        Procedure Name                            : sp_misc
        --        Author                                    : Janna
        --        Created Date                              : 19th Sep 2010
        --        Purpose                                   : Populate Price Conversion data to be used with EOD
        --
        --        Parameters
        --        pc_corporate_id                           : Corporate ID
        --        pd_trade_date                             : Trade Date
        --        pc_user_id                                : User ID
        --        pc_process                                : Process EOD or EOM
        --
        --        Modification History
        --        Modified Date                             :
        --        Modified By                               :
        --        Modify Description                        :
        --------------------------------------------------------------------------------------------------------------------------
        vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
        vn_eel_error_count        number := 1;
    CURSOR cur_price_units_out IS
            SELECT cm.cur_id
            FROM   cm_currency_master cm;
        CURSOR cur_price_units_in IS
            SELECT cm.cur_id
            FROM   cm_currency_master cm;
        vn_conv_factor NUMBER;
    BEGIN
        DELETE FROM cet_corporate_exch_rate
        WHERE  corporate_id = pc_corporate_id;
        FOR cur_price_units_outer IN cur_price_units_out LOOP
            FOR cur_price_units_inner IN cur_price_units_in LOOP
                vn_conv_factor := pkg_phy_pre_check_process.f_get_converted_currency_amt(pc_corporate_id,
                                                                    cur_price_units_outer.cur_id,
                                                                    cur_price_units_inner.cur_id,
                                                                    pd_trade_date,
                                                                    1);
                INSERT INTO cet_corporate_exch_rate
                    (corporate_id,
                     from_cur_id,
                     to_cur_id,
                     exch_rate)
                VALUES
                    (pc_corporate_id,
                     cur_price_units_outer.cur_id,
                     cur_price_units_inner.cur_id,
                     vn_conv_factor);
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            vobj_error_log.EXTEND;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                'procedure sp_misc',
                                                                'GEN-001',
                                                                'Code:' ||
                                                                SQLCODE ||
                                                                ' Message:' ||
                                                                SQLERRM,
                                                                NULL,
                                                                'EOD',
                                                                pc_user_id,
                                                                SYSDATE,
                                                                pd_trade_date);
            sp_insert_error_log(vobj_error_log);
    END;
 procedure sp_daily_position_record ( pc_corporate_id varchar2, pd_trade_date date,pc_process_id   varchar2)
as

begin

insert into dpr_daily_position_record
  (TRADE_DATE,
   corporate_id,
   business_line_id,
   profit_center_id,
   product_id,
   fixed_qty,
   quotational_qty,process_id)
with last_eod_dump  as
(select --dbd1.corporate_id,
       --dbd1.trade_date,
       dbd1.end_date db_dump_end_timestamp,
       dbd1.start_date db_dump_start_timestamp,
       (select max(tdc.trade_date)
          from tdc_trade_date_closure tdc
         where tdc.corporate_id = dbd1.corporate_id
           and tdc.process = dbd1.process
           and tdc.trade_date < dbd1.trade_date) trade_date
  from dbd_database_dump dbd1
 where dbd1.trade_date = pd_trade_date
   and dbd1.corporate_id = pc_corporate_id
   and dbd1.process = 'EOD')
select 
pd_trade_date,
t.corporate_id, 
t.business_line_id, 
t.profit_center_id, 
t.product_id,
sum(t.fixed_qty) fixed_qty,
sum(t.quotational_qty) quotational_qty,
pc_process_id
from 
(
select 
pd_trade_date trade_date,
corporate_id, 
business_line_id, 
profit_center_id, 
product_id,
sum(fixed_qty) fixed_qty,
sum(quotational_qty) quotational_qty
from (
-- Physical New Trades and Modified trade
SELECT   'Physicals' section_name,
         pcm.contract_ref_no, 
         pcm.corporate_id, 
         pcdi.pcdi_id,
         akc.corporate_name, 
         blm.business_line_id, 
         blm.business_line_name,
         cpc.profit_center_id, 
         cpc.profit_center_short_name,
         cpc.profit_center_name, 
         pdm.product_id,
         pdm.product_desc product_name, 
         pcm.issue_date,
         CASE
            WHEN pcbph.price_basis = 'Fixed'
               THEN ( case when PCM.PURCHASE_SALES = 'S' then (-1) * diqsl.total_qty_delta * ucm.multiplication_factor else diqsl.total_qty_delta * ucm.multiplication_factor end)
            ELSE 0
         END fixed_qty,
         CASE
            WHEN pcbph.price_basis <> 'Fixed'
               THEN ( case when PCM.PURCHASE_SALES = 'S' then (-1) * diqsl.total_qty_delta * ucm.multiplication_factor else diqsl.total_qty_delta * ucm.multiplication_factor end)
            ELSE 0
         END quotational_qty,
         last_eod_dump1.db_dump_end_timestamp,
         qum.qty_unit_id,
         qum.qty_unit base_qty_unit
         
    FROM pcm_physical_contract_main@eka_appdb pcm,
         pcdi_pc_delivery_item@eka_appdb pcdi,
         diqs_delivery_item_qty_status@eka_appdb diqs,
         pcpd_pc_product_definition@eka_appdb pcpd,
         (SELECT   pcbph.internal_contract_ref_no,
                   CASE
                      WHEN SUM (CASE
                                   WHEN pcbpd.price_basis = 'Fixed'
                                      THEN 0
                                   ELSE 1
                                END
                               ) = 0
                         THEN 'Fixed'
                      ELSE 'Other'
                   END price_basis
              FROM pcbph_pc_base_price_header@eka_appdb pcbph,
                   pcbpd_pc_base_price_detail@eka_appdb pcbpd
             WHERE pcbph.pcbph_id = pcbpd.pcbph_id
               AND pcbph.is_active = 'Y'
               AND pcbpd.is_active = 'Y'
          GROUP BY pcbph.internal_contract_ref_no) pcbph,
         pdm_productmaster pdm,
         ucm_unit_conversion_master ucm,
         ak_corporate akc,
         cpc_corporate_profit_center cpc,
         blm_business_line_master@eka_appdb blm,
         diqsl_delivery_itm_qty_sts_log@eka_appdb diqsl, 
         axs_action_summary@eka_appdb axs,
         qum_quantity_unit_master qum,
         last_eod_dump last_eod_dump1
   WHERE pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
     AND pcdi.pcdi_id = diqs.pcdi_id
     AND pcpd.internal_contract_ref_no = pcm.internal_contract_ref_no
     AND pcm.contract_status IN ( 'In Position','Cancelled')
     AND pcm.contract_type = 'BASEMETAL'
     AND pcdi.is_active = 'Y'
     AND diqs.is_active = 'Y'
     AND pcpd.is_active = 'Y'
     AND pcpd.input_output = 'Input'
     AND pcbph.internal_contract_ref_no = pcm.internal_contract_ref_no
     AND pcdi.internal_contract_ref_no = pcbph.internal_contract_ref_no
     AND ucm.from_qty_unit_id = diqs.item_qty_unit_id
     AND ucm.to_qty_unit_id = pdm.base_quantity_unit
     AND pcpd.product_id = pdm.product_id
     AND pcm.corporate_id = akc.corporate_id
     AND pcpd.profit_center_id = cpc.profit_center_id(+)
     AND cpc.business_line_id = blm.business_line_id(+)
     and diqs.diqs_id = diqsl.diqs_id
     and diqsl.internal_action_ref_no = axs.internal_action_ref_no
     and pdm.base_quantity_unit = qum.qty_unit_id
    -- and diqsl.entry_type ='Insert'
     and axs.action_id in('CREATE_SC','CREATE_PC','AMEND_PC','AMEND_SC','MODIFY_PC','MODIFY_SC')
     and axs.created_date > last_eod_dump1.db_dump_start_timestamp
     and axs.created_date <= last_eod_dump1.db_dump_end_timestamp
     AND AXS.EFF_DATE <= pd_trade_date
     and pcm.corporate_id=pc_corporate_id
 union all
   --Physical Cancelled trade
  SELECT   'Physicals' section_name,
         pcm.contract_ref_no, 
         pcm.corporate_id, 
         pcdi.pcdi_id,
         akc.corporate_name, 
         blm.business_line_id, 
         blm.business_line_name,
         cpc.profit_center_id, 
         cpc.profit_center_short_name,
         cpc.profit_center_name, 
         pdm.product_id,
         pdm.product_desc product_name, 
         pcm.issue_date,
         CASE
            WHEN pcbph.price_basis = 'Fixed'
               THEN ( case when PCM.PURCHASE_SALES = 'S' then  diqs.total_qty * ucm.multiplication_factor else (-1) *diqs.total_qty * ucm.multiplication_factor end)
            ELSE 0
         END fixed_qty,
         CASE
            WHEN pcbph.price_basis <> 'Fixed'
               THEN ( case when PCM.PURCHASE_SALES = 'S' then diqs.total_qty * ucm.multiplication_factor else  (-1) * diqs.total_qty * ucm.multiplication_factor end)
            ELSE 0
         END quotational_qty,
         last_eod_dump1.db_dump_end_timestamp,
         qum.qty_unit_id,
         qum.qty_unit base_qty_unit
         
    FROM pcm_physical_contract_main@eka_appdb pcm,
         pcdi_pc_delivery_item@eka_appdb pcdi,
         diqs_delivery_item_qty_status@eka_appdb diqs,
         pcpd_pc_product_definition@eka_appdb pcpd,
         (SELECT   pcbph.internal_contract_ref_no,
                   CASE
                      WHEN SUM (CASE
                                   WHEN pcbpd.price_basis = 'Fixed'
                                      THEN 0
                                   ELSE 1
                                END
                               ) = 0
                         THEN 'Fixed'
                      ELSE 'Other'
                   END price_basis
              FROM pcbph_pc_base_price_header@eka_appdb pcbph,
                   pcbpd_pc_base_price_detail@eka_appdb pcbpd
             WHERE pcbph.pcbph_id = pcbpd.pcbph_id
               AND pcbph.is_active = 'Y'
               AND pcbpd.is_active = 'Y'
          GROUP BY pcbph.internal_contract_ref_no) pcbph,
         pdm_productmaster pdm,
         ucm_unit_conversion_master ucm,
         ak_corporate akc,
         cpc_corporate_profit_center cpc,
         blm_business_line_master@eka_appdb blm,
          pcmul_phy_contract_main_ul@eka_appdb pcmul,
         axs_action_summary@eka_appdb axs,
         qum_quantity_unit_master qum,
         last_eod_dump last_eod_dump1
   WHERE pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
     AND pcdi.pcdi_id = diqs.pcdi_id
     AND pcpd.internal_contract_ref_no = pcm.internal_contract_ref_no
     AND pcm.contract_status = 'Cancelled'
     AND pcm.contract_type = 'BASEMETAL'
     AND pcdi.is_active = 'Y'
     AND diqs.is_active = 'Y'
     AND pcpd.is_active = 'Y'
     AND pcpd.input_output = 'Input'
     AND pcbph.internal_contract_ref_no = pcm.internal_contract_ref_no
     AND pcdi.internal_contract_ref_no = pcbph.internal_contract_ref_no
     AND ucm.from_qty_unit_id = diqs.item_qty_unit_id
     AND ucm.to_qty_unit_id = pdm.base_quantity_unit
     AND pcpd.product_id = pdm.product_id
     AND pcm.corporate_id = akc.corporate_id
     AND pcpd.profit_center_id = cpc.profit_center_id(+)
     AND cpc.business_line_id = blm.business_line_id(+)
     and pcmul.internal_contract_ref_no = pcm.internal_contract_ref_no
     and pcmul.contract_status = 'Cancelled'
     and pcmul.internal_action_ref_no = axs.internal_action_ref_no
     and pdm.base_quantity_unit = qum.qty_unit_id
    -- and diqsl.entry_type ='Insert'
     and axs.action_id in('CANCEL_PC', 'CANCEL_SC')
     and axs.created_date > last_eod_dump1.db_dump_start_timestamp
     and axs.created_date <= last_eod_dump1.db_dump_end_timestamp
     AND AXS.EFF_DATE <= pd_trade_date
     and pcm.corporate_id=pc_corporate_id
   
     
-- 'Any one day price fix' 
union all
select 'Any one day price fix' section_name,
       pcm.contract_ref_no,
       pcm.corporate_id,
       pcdi.pcdi_id,
       akc.corporate_name,
       blm.business_line_id,
       blm.business_line_name,
       cpc.profit_center_id,
       cpc.profit_center_short_name,
       cpc.profit_center_name,
       pdm.product_id,
       pdm.product_desc product_name,
       pfd.as_of_date issue_date,
       (pfd.qty_fixed * ucm.multiplication_factor) fixed_qty,
       ((-1) * pfd.qty_fixed * ucm.multiplication_factor) quotational_qty,
       last_eod_dump1.db_dump_end_timestamp,
       qum.qty_unit_id,
       qum.qty_unit base_qty_unit    

  from pcm_physical_contract_main@eka_appdb     pcm,
       pcdi_pc_delivery_item@eka_appdb          pcdi,
       pfd_price_fixation_details@eka_appdb     pfd,
       poch_price_opt_call_off_header@eka_appdb poch,
       pofh_price_opt_fixation_header@eka_appdb pofh,
       pocd_price_option_calloff_dtls@eka_appdb pocd,
       ppfh_phy_price_formula_header@eka_appdb  ppfh,
       pfqpp_phy_formula_qp_pricing@eka_appdb   pfqpp,
       pcpd_pc_product_definition@eka_appdb     pcpd,
       axs_action_summary@eka_appdb             axs,
       pfam_price_fix_action_mapping@EKA_APPDB  pfam,
       pdm_productmaster              pdm,
       qum_quantity_unit_master       qum,
       ucm_unit_conversion_master     ucm,
       ak_corporate                   akc,
       cpc_corporate_profit_center    cpc,
       blm_business_line_master@eka_appdb       blm,
       last_eod_dump             last_eod_dump1
 where pcm.contract_type = 'BASEMETAL'
   and pcm.contract_status = 'In Position'
   and pcdi.is_active = 'Y'
   and pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
   and pfd.pofh_id = pofh.pofh_id
   and pcdi.pcdi_id = poch.pcdi_id
   and poch.poch_id = pocd.poch_id
   and pocd.pocd_id = pofh.pocd_id
   and pocd.pcbpd_id = ppfh.pcbpd_id
   and ppfh.ppfh_id = pfqpp.ppfh_id
   and pfqpp.is_qp_any_day_basis = 'Y'
   and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
   and pcpd.input_output = 'Input'
   and pfam.pfd_id = pfd.pfd_id
   and axs.internal_action_ref_no = pfam.internal_action_ref_no
   and axs.action_id  in ('CREATE_PRICE_FIXATION')
   and pcpd.product_id = pdm.product_id
   and pdm.base_quantity_unit = qum.qty_unit_id
   and ucm.from_qty_unit_id = pcdi.qty_unit_id
   and ucm.to_qty_unit_id = pdm.base_quantity_unit
   and pcm.corporate_id = akc.corporate_id
   and pcpd.profit_center_id = cpc.profit_center_id(+)
   and cpc.business_line_id = blm.business_line_id(+)
      -- and pfd.is_active = 'Y' --comment  this condition to fetch cancelled price fixation also for same contract it balance the next section data
   and pcm.is_active = 'Y'
   and poch.is_active = 'Y'
   and pofh.is_active = 'Y'
   and ppfh.is_active = 'Y'
   and pfqpp.is_active = 'Y'
   and pfd.as_of_date <= pd_trade_date
   and axs.created_date > last_eod_dump1.db_dump_start_timestamp
   and axs.created_date <= last_eod_dump1.db_dump_end_timestamp
   and pcm.corporate_id=pc_corporate_id
---todo need to use axs table creatation date between db_dump_start_timestamp and db_dump_end_timestamp

  -- any one day price fix cancelled
   union all
 select 'Any one day price fix' section_name,
        pcm.contract_ref_no,
        pcm.corporate_id,
        pcdi.pcdi_id,
        akc.corporate_name,
        blm.business_line_id,
        blm.business_line_name,
        cpc.profit_center_id,
        cpc.profit_center_short_name,
        cpc.profit_center_name,
        pdm.product_id,
        pdm.product_desc product_name,
        pfd.as_of_date issue_date,
        ((-1) * pfd.qty_fixed * ucm.multiplication_factor) fixed_qty,
        (pfd.qty_fixed * ucm.multiplication_factor) quotational_qty,
        last_eod_dump1.db_dump_end_timestamp,
        qum.qty_unit_id,
        qum.qty_unit base_qty_uni
        
 
   from pcm_physical_contract_main@eka_appdb     pcm,
        pcdi_pc_delivery_item@eka_appdb          pcdi,
        pfd_price_fixation_details@eka_appdb     pfd,
        poch_price_opt_call_off_header@eka_appdb poch,
        pofh_price_opt_fixation_header@eka_appdb pofh,
        pocd_price_option_calloff_dtls@eka_appdb pocd,
        ppfh_phy_price_formula_header@eka_appdb  ppfh,
        pfqpp_phy_formula_qp_pricing@eka_appdb   pfqpp,
        pcpd_pc_product_definition@eka_appdb     pcpd,
        pdm_productmaster              pdm,
        qum_quantity_unit_master       qum,
        ucm_unit_conversion_master     ucm,
        axs_action_summary@eka_appdb             axs,
        pfam_price_fix_action_mapping@EKA_APPDB  pfam,
        ak_corporate                   akc,
        cpc_corporate_profit_center    cpc,
        blm_business_line_master@eka_appdb       blm,
        last_eod_dump                  last_eod_dump1
  where pcm.contract_type = 'BASEMETAL'
    and pcm.contract_status = 'In Position'
    and pcdi.is_active = 'Y'
    and pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
    and pfd.pofh_id = pofh.pofh_id
    and pcdi.pcdi_id = poch.pcdi_id
    and poch.poch_id = pocd.poch_id
    and pocd.pocd_id = pofh.pocd_id
    and pocd.pcbpd_id = ppfh.pcbpd_id
    and ppfh.ppfh_id = pfqpp.ppfh_id
    and pfqpp.is_qp_any_day_basis = 'Y'
    and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
    and pcpd.input_output = 'Input'
    and pcpd.product_id = pdm.product_id
    and pdm.base_quantity_unit = qum.qty_unit_id
    and ucm.from_qty_unit_id = pcdi.qty_unit_id
    and ucm.to_qty_unit_id = pdm.base_quantity_unit
    and pcm.corporate_id = akc.corporate_id
    and pcpd.profit_center_id = cpc.profit_center_id(+)
    and cpc.business_line_id = blm.business_line_id(+)
    and axs.action_id in ('CANCEL_PRICE_FIXATION')
    and axs.internal_action_ref_no = pfam.internal_action_ref_no
    and pfam.pfd_id = pfd.pfd_id
    and pfd.is_active = 'N'
    and pcm.is_active = 'Y'
    and poch.is_active = 'Y'
    and pofh.is_active = 'Y'
    and ppfh.is_active = 'Y'
    and pfqpp.is_active = 'Y'
    and axs.created_date > last_eod_dump1.db_dump_start_timestamp
    and axs.created_date <= last_eod_dump1.db_dump_end_timestamp
    AND AXS.EFF_DATE <= pd_trade_date
    and pcm.corporate_id = pc_corporate_id
 union all
  -- 'Average price fix'and cancelled
 select --(CASE when is_any_day.any_one_day = 'N' then 'Average price fix' else 'Any one day price fix' end) section_name,
        --pcm.contract_ref_no,
        (case
         when to_char(pofh.qp_start_date, 'dd') = '01' and
              last_day(pofh.qp_start_date) = pofh.qp_end_date then
          'Average price fix'
         else
          'Any one day price fix'
       end) section_name,
      (case
         when to_char(pofh.qp_start_date, 'dd') = '01' and
              last_day(pofh.qp_start_date) = pofh.qp_end_date then
         null
         else
          pcm.contract_ref_no
       end) contract_ref_no,
        pcm.corporate_id,
        pcdi.pcdi_id,
        akc.corporate_name,
        blm.business_line_id,
        blm.business_line_name,
        cpc.profit_center_id,
        cpc.profit_center_short_name,
        cpc.profit_center_name,
        pdm.product_id,
        pdm.product_desc product_name,
         (case
         when to_char(pofh.qp_start_date, 'dd') = '01' and
              last_day(pofh.qp_start_date) = pofh.qp_end_date then
         null
         else
          pofhd.priced_date
       end)  issue_date,
        (pofhd.per_day_pricing_qty * ucm.multiplication_factor) fixed_qty,
        ((-1) * pofhd.per_day_pricing_qty * ucm.multiplication_factor) quotational_qty,
        last_eod_dump1.db_dump_end_timestamp,
        qum.qty_unit_id,
        qum.qty_unit base_qty_unit
    from pcm_physical_contract_main@eka_appdb     pcm,
        pcdi_pc_delivery_item@eka_appdb          pcdi,
        pofhd_pofh_daily@EKA_APPDB     pofhd,
        poch_price_opt_call_off_header@eka_appdb poch,
        pofh_price_opt_fixation_header@eka_appdb pofh,
        pocd_price_option_calloff_dtls@eka_appdb pocd,
        ppfh_phy_price_formula_header@eka_appdb  ppfh,
        pfqpp_phy_formula_qp_pricing@eka_appdb   pfqpp,
        pcpd_pc_product_definition@eka_appdb     pcpd,
        pdm_productmaster              pdm,
        qum_quantity_unit_master       qum,
        ucm_unit_conversion_master     ucm,
        ak_corporate                   akc,
        cpc_corporate_profit_center    cpc,
        blm_business_line_master@eka_appdb       blm,
        last_eod_dump last_eod_dump1 
  where pcm.contract_type = 'BASEMETAL'
    and pcm.contract_status = 'In Position'
    and pcdi.is_active = 'Y'
    and pcm.internal_contract_ref_no = pcdi.internal_contract_ref_no
    and pofhd.pofh_id = pofh.pofh_id
    and pcdi.pcdi_id = poch.pcdi_id
    and poch.poch_id = pocd.poch_id
    and pofhd.pocd_id = pocd.pocd_id
    and pocd.pocd_id = pofh.pocd_id
    and pocd.pcbpd_id = ppfh.pcbpd_id
    and ppfh.ppfh_id = pfqpp.ppfh_id
    and pfqpp.is_qp_any_day_basis is null
    and not exists (select pfd.pfd_id
          from pfd_price_fixation_details@eka_appdb pfd
         where pfd.pofh_id = pofh.pofh_id
           and pfd.is_active = 'Y'
           and pfd.as_of_date = pofhd.priced_date)
    and pcm.internal_contract_ref_no = pcpd.internal_contract_ref_no
    and pcpd.input_output = 'Input'
  --  and is_any_day.pofh_id = pofhd.pofh_id
    and pcpd.product_id = pdm.product_id
    and pdm.base_quantity_unit = qum.qty_unit_id
    and ucm.from_qty_unit_id = pcdi.qty_unit_id
    and ucm.to_qty_unit_id = pdm.base_quantity_unit
    and pcm.corporate_id = akc.corporate_id
    and pcpd.profit_center_id = cpc.profit_center_id(+)
    and cpc.business_line_id = blm.business_line_id(+)
    and pofhd.is_active = 'Y'
    and pcm.is_active = 'Y'
    and poch.is_active = 'Y'
    and pofh.is_active = 'Y'
    and ppfh.is_active = 'Y'
    and pfqpp.is_active = 'Y'
    and pofhd.priced_date <= pd_trade_date
    and pcm.corporate_id = pc_corporate_id
    and pofhd.priced_date > last_eod_dump1.trade_date 
  UNION ALL
----Futures
select section_name,
       contract_ref_no,
       corporate_id,
       null pcdi_id,
       corporate_name,
       business_line_id,
       business_line_name,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       product_id,
       product_name,
       issue_date,
       case
         when instrument_type = 'Future' then
          qty
         else
          0
       end fixed_qty,
       case
         when instrument_type = 'Average' then
          qty
         else
          0
       end quotational_qty,
       db_dump_end_timestamp,
       qty_unit_id,
       base_qty_unit
  from (select 'Futures' section_name,
               dt.derivative_ref_no contract_ref_no,
               dt.corporate_id corporate_id,
               akc.corporate_name corporate_name,
               blm.business_line_id business_line_id,
               blm.business_line_name business_line_name,
               cpc.profit_center_id profit_center_id,
               cpc.profit_center_short_name profit_center_short_name,
               cpc.profit_center_name profit_center_name,
               pdm.product_id product_id,
               pdm.product_desc product_name,
               dt.trade_date issue_date,
               sum(dtql.total_quantity_delta *
                   decode(dt.trade_type, 'Buy', 1, 'Sell', -1) *
                   ucm.multiplication_factor) qty,
               last_eod_dump1.db_dump_end_timestamp,
               pdm.base_quantity_unit qty_unit_id,
               qum.qty_unit base_qty_unit,
               irm.instrument_type
          from dt_derivative_trade@eka_appdb         dt,
               ak_corporate                akc,
               cpc_corporate_profit_center cpc,
               blm_business_line_master@eka_appdb    blm,
               drm_derivative_master@eka_appdb       drm,
               dim_der_instrument_master@eka_appdb   dim,
               irm_instrument_type_master@eka_appdb  irm,
               dt_qty_log@eka_appdb                  dtql,
               pdd_product_derivative_def  pdd,
               pdm_productmaster           pdm,
               axs_action_summary@eka_appdb          axs,
               last_eod_dump               last_eod_dump1,
               ucm_unit_conversion_master  ucm,
               qum_quantity_unit_master    qum
         where akc.corporate_id = dt.corporate_id
           and dt.profit_center_id = cpc.profit_center_id
           and cpc.business_line_id = blm.business_line_id
           and dt.dr_id = drm.dr_id
           and drm.instrument_id = dim.instrument_id
           and irm.instrument_type_id = dim.instrument_type_id
           and dt.internal_derivative_ref_no =
               dtql.internal_derivative_ref_no
           and axs.action_id in
               ('CDC_CREATE_OTC_AVERAGE_FORWARD', 'CDC_CREATE_EX_FUTURE',
                'CDC_MODIFY_EX_FUTURE', 'CDC_DELETE_EX_FUTURE',
                'CDC_DELETE_OTC_AVERAGE_FORWARD',
                'CDC_MODIFY_OTC_AVERAGE_FORWARD')
           and irm.instrument_type in ('Average', 'Future')
           and pdd.derivative_def_id = dim.product_derivative_id
           and pdd.product_id = pdm.product_id
           and axs.internal_action_ref_no = dtql.internal_action_ref_no
           and axs.created_date > last_eod_dump1.db_dump_start_timestamp
           and axs.created_date <= last_eod_dump1.db_dump_end_timestamp
           and dt.corporate_id = pc_corporate_id
           and dt.status = 'Verified'
           and dt.trade_date <= pd_trade_date
           and ucm.from_qty_unit_id = dt.quantity_unit_id
           and ucm.to_qty_unit_id = pdm.base_quantity_unit
           and qum.qty_unit_id = pdm.base_quantity_unit
           AND  axs.eff_date <= pd_trade_date
         group by dt.derivative_ref_no,
                  dt.corporate_id,
                  akc.corporate_name,
                  blm.business_line_id,
                  blm.business_line_name,
                  cpc.profit_center_id,
                  cpc.profit_center_short_name,
                  cpc.profit_center_name,
                  pdm.product_id,
                  pdm.product_desc,
                  dt.trade_date,
                  pdm.base_quantity_unit,
                  db_dump_end_timestamp,
                  qum.qty_unit,
                  irm.instrument_type)
UNION ALL
---------------------avg trades       
select 'Average price fix' section_name,
       null contract_ref_no,
       dt.corporate_id corporate_id,
       null,
       akc.corporate_name corporate_name,
       blm.business_line_id business_line_id,
       blm.business_line_name business_line_name,
       cpc.profit_center_id profit_center_id,
       cpc.profit_center_short_name profit_center_short_name,
       cpc.profit_center_name profit_center_name,
       pdm.product_id product_id,
       pdm.product_desc product_name,
       null issue_date,
       sum (dtavg.quantity * decode(dt.trade_type, 'Buy', 1, 'Sell', -1) * ucm.multiplication_factor) fixed_qty,
       sum(dtavg.quantity * decode(dt.trade_type, 'Buy', -1, 'Sell', 1) * ucm.multiplication_factor) quotational_qty,
       last_eod_dump1.db_dump_end_timestamp,
       pdm.base_quantity_unit qty_unit_id,
       qum.qty_unit base_qty_unit
  from dt_derivative_trade@eka_appdb dt,
       ak_corporate akc,
       cpc_corporate_profit_center cpc,
       blm_business_line_master@eka_appdb blm,
       drm_derivative_master drm,
       dim_der_instrument_master dim,
       irm_instrument_type_master irm,
       pdd_product_derivative_def pdd,
       pdm_productmaster pdm,
       ucm_unit_conversion_master ucm,
       last_eod_dump last_eod_dump1,
       dt_avg@eka_appdb dtavg,
       qum_quantity_unit_master qum,
       (SELECT dt.derivative_ref_no,
           CASE
               WHEN to_char(dt.average_from_date, 'MON') = to_char(dt.average_to_date, 'MON') AND
                  to_char(dt.average_from_date, 'DD') = '01' AND
                  dt.average_to_date = last_day(dt.average_to_date) THEN
                'N'
               ELSE
                'Y'
           END any_one_day
      FROM   dt_derivative_trade@eka_appdb dt) avg_or_any_day
 where akc.corporate_id = dt.corporate_id
   and dt.profit_center_id = cpc.profit_center_id
   AND    avg_or_any_day.derivative_ref_no = dt.derivative_ref_no
AND    avg_or_any_day.any_one_day = 'N'
   and cpc.business_line_id = blm.business_line_id
   and dt.dr_id = drm.dr_id
   and drm.instrument_id = dim.instrument_id
   and irm.instrument_type_id = dim.instrument_type_id
   and pdd.derivative_def_id = dim.product_derivative_id
   and pdd.product_id = pdm.product_id
   and ucm.from_qty_unit_id = dt.quantity_unit_id
   and ucm.to_qty_unit_id = pdm.base_quantity_unit
   and dtavg.internal_derivative_ref_no = dt.internal_derivative_ref_no
   and qum.qty_unit_id = pdm.base_quantity_unit
   and dtavg.period_date > last_eod_dump1.trade_date
   and irm.instrument_type = 'Average'
   and dt.status <> 'Delete'
   and dtavg.period_date <= pd_trade_date
   and dt.corporate_id= pc_corporate_id
 group by dt.derivative_ref_no,
          dt.corporate_id,
          akc.corporate_name,
          blm.business_line_id,
          blm.business_line_name,
          cpc.profit_center_id,
          cpc.profit_center_short_name,
          cpc.profit_center_name,
          pdm.product_id,
          pdm.product_desc,
        --  dt.trade_date,
           db_dump_end_timestamp,
          pdm.base_quantity_unit,
          qum.qty_unit
union all
select 'Any one day price fix' section_name,
       dt.derivative_ref_no contract_ref_no,
       dt.corporate_id corporate_id,
       null,
       akc.corporate_name corporate_name,
       blm.business_line_id business_line_id,
       blm.business_line_name business_line_name,
       cpc.profit_center_id profit_center_id,
       cpc.profit_center_short_name profit_center_short_name,
       cpc.profit_center_name profit_center_name,
       pdm.product_id product_id,
       pdm.product_desc product_name,
       dt.trade_date issue_date,
       sum(dtavg.quantity * decode(dt.trade_type, 'Buy', 1, 'Sell', -1) * ucm.multiplication_factor) fixed_qty,
     sum(dtavg.quantity * decode(dt.trade_type, 'Buy', -1, 'Sell', 1) * ucm.multiplication_factor) quotational_qty,
       last_eod_dump1.db_dump_end_timestamp,
       pdm.base_quantity_unit qty_unit_id,
       qum.qty_unit base_qty_unit
  from dt_derivative_trade@eka_appdb dt,
       ak_corporate akc,
       cpc_corporate_profit_center cpc,
       blm_business_line_master@eka_appdb blm,
       drm_derivative_master drm,
       dim_der_instrument_master dim,
       irm_instrument_type_master irm,
       pdd_product_derivative_def pdd,
       pdm_productmaster pdm,
       ucm_unit_conversion_master ucm,
       last_eod_dump last_eod_dump1,
       dt_avg@eka_appdb dtavg,
       qum_quantity_unit_master qum,
       (SELECT dt.derivative_ref_no,
           CASE
               WHEN to_char(dt.average_from_date, 'MON') = to_char(dt.average_to_date, 'MON') AND
                  to_char(dt.average_from_date, 'DD') = '01' AND
                  dt.average_to_date = last_day(dt.average_to_date) THEN
                'N'
               ELSE
                'Y'
           END any_one_day
      FROM   dt_derivative_trade@eka_appdb dt) avg_or_any_day
 where akc.corporate_id = dt.corporate_id
   and dt.profit_center_id = cpc.profit_center_id
   AND    avg_or_any_day.derivative_ref_no = dt.derivative_ref_no
AND    avg_or_any_day.any_one_day = 'Y'
   and cpc.business_line_id = blm.business_line_id
   and dt.dr_id = drm.dr_id
   and drm.instrument_id = dim.instrument_id
   and irm.instrument_type_id = dim.instrument_type_id
   and pdd.derivative_def_id = dim.product_derivative_id
   and pdd.product_id = pdm.product_id
   and ucm.from_qty_unit_id = dt.quantity_unit_id
   and ucm.to_qty_unit_id = pdm.base_quantity_unit
   and dtavg.internal_derivative_ref_no = dt.internal_derivative_ref_no
   and qum.qty_unit_id = pdm.base_quantity_unit
    -- and dtavg.period_date > last_eod_dump1.trade_date :todo need to use previous eod date
   and irm.instrument_type = 'Average'
   and dt.status = 'Verified'
   and dt.status <> 'Delete'
   and dtavg.period_date <= pd_trade_date
   and dt.corporate_id= pc_corporate_id
 group by dt.derivative_ref_no,
          dt.corporate_id,
          akc.corporate_name,
          blm.business_line_id,
          blm.business_line_name,
          cpc.profit_center_id,
          cpc.profit_center_short_name,
          cpc.profit_center_name,
          pdm.product_id,
          pdm.product_desc,
          dt.trade_date,
          db_dump_end_timestamp,
          pdm.base_quantity_unit,
          qum.qty_unit
UNION ALL
--delete average forward trades       
select 'Any one day price fix' section_name,
       dt.derivative_ref_no contract_ref_no,
       null,
       dt.corporate_id corporate_id,
       akc.corporate_name corporate_name,
       blm.business_line_id business_line_id,
       blm.business_line_name business_line_name,
       cpc.profit_center_id profit_center_id,
       cpc.profit_center_short_name profit_center_short_name,
       cpc.profit_center_name profit_center_name,
       pdm.product_id product_id,
       pdm.product_desc product_name,
       dt.trade_date issue_date,
       sum(dtavg.quantity * decode(dt.trade_type, 'Buy', -1, 'Sell', 1) * ucm.multiplication_factor) fixed_qty,
     sum(dtavg.quantity * decode(dt.trade_type, 'Buy', 1, 'Sell', -1) * ucm.multiplication_factor) quotational_qty,
       last_eod_dump1.db_dump_end_timestamp,
       pdm.base_quantity_unit qty_unit_id,
       qum.qty_unit base_qty_unit
  from dt_derivative_trade@eka_appdb dt,
       dtul_derivative_trade_ul@eka_appdb dtul,
       axs_action_summary@eka_appdb axs,
       ak_corporate akc,
       cpc_corporate_profit_center cpc,
       blm_business_line_master@eka_appdb blm,
       drm_derivative_master drm,
       dim_der_instrument_master dim,
       irm_instrument_type_master irm,
       pdd_product_derivative_def pdd,
       pdm_productmaster pdm,
       ucm_unit_conversion_master ucm,
       last_eod_dump last_eod_dump1,
       dt_avg@eka_appdb  dtavg,
       qum_quantity_unit_master qum,
       (SELECT dt.derivative_ref_no,
           CASE
               WHEN to_char(dt.average_from_date, 'MON') = to_char(dt.average_to_date, 'MON') AND
                  to_char(dt.average_from_date, 'DD') = '01' AND
                  dt.average_to_date = last_day(dt.average_to_date) THEN
                'N'
               ELSE
                'Y'
           END any_one_day
      FROM   dt_derivative_trade@eka_appdb dt) avg_or_any_day
 where akc.corporate_id = dt.corporate_id
   and dtul.internal_derivative_ref_no = dt.internal_derivative_ref_no
   AND    avg_or_any_day.derivative_ref_no = dt.derivative_ref_no
AND    avg_or_any_day.any_one_day = 'Y'
   and dtul.status = 'Delete'
   and dtul.internal_action_ref_no = axs.internal_action_ref_no
   and axs.created_date > last_eod_dump1.db_dump_start_timestamp
   and axs.action_id = 'CDC_DELETE_OTC_AVERAGE_FORWARD'
   and dt.profit_center_id = cpc.profit_center_id
   and cpc.business_line_id = blm.business_line_id
   and dt.dr_id = drm.dr_id
   and drm.instrument_id = dim.instrument_id
   and irm.instrument_type_id = dim.instrument_type_id
   and pdd.derivative_def_id = dim.product_derivative_id
   and pdd.product_id = pdm.product_id
   and ucm.from_qty_unit_id = dt.quantity_unit_id
   and ucm.to_qty_unit_id = pdm.base_quantity_unit
   and dtavg.internal_derivative_ref_no = dt.internal_derivative_ref_no   
   and qum.qty_unit_id = pdm.base_quantity_unit
 --  and dtavg.period_date > last_eod_dump1.trade_date need to use previous eod date
   and irm.instrument_type = 'Average'
   and dtavg.period_date <= pd_trade_date
     and dt.corporate_id= pc_corporate_id
 group by dt.derivative_ref_no,
          dt.corporate_id,
          akc.corporate_name,
          blm.business_line_id,
          blm.business_line_name,
          cpc.profit_center_id,
          cpc.profit_center_short_name,
          cpc.profit_center_name,
          pdm.product_id,
          pdm.product_desc,
          dt.trade_date,
          db_dump_end_timestamp,
          pdm.base_quantity_unit,
          qum.qty_unit
UNION ALL
select 'Average price fix' section_name,
       dt.derivative_ref_no contract_ref_no,
       null,
       dt.corporate_id corporate_id,
       akc.corporate_name corporate_name,
       blm.business_line_id business_line_id,
       blm.business_line_name business_line_name,
       cpc.profit_center_id profit_center_id,
       cpc.profit_center_short_name profit_center_short_name,
       cpc.profit_center_name profit_center_name,
       pdm.product_id product_id,
       pdm.product_desc product_name,
       dt.trade_date issue_date,
       sum(dtavg.quantity * decode(dt.trade_type, 'Buy', -1, 'Sell', 1) * ucm.multiplication_factor) fixed_qty,
     sum(dtavg.quantity * decode(dt.trade_type, 'Buy', 1, 'Sell', -1) * ucm.multiplication_factor) quotational_qty,
       last_eod_dump1.db_dump_end_timestamp,
       pdm.base_quantity_unit qty_unit_id,
       qum.qty_unit base_qty_unit
  from dt_derivative_trade@eka_appdb dt,
       dtul_derivative_trade_ul@eka_appdb dtul,
       axs_action_summary@eka_appdb axs,
       ak_corporate akc,
       cpc_corporate_profit_center cpc,
       blm_business_line_master@eka_appdb blm,
       drm_derivative_master drm,
       dim_der_instrument_master dim,
       irm_instrument_type_master irm,
       pdd_product_derivative_def pdd,
       pdm_productmaster pdm,
       ucm_unit_conversion_master ucm,
       last_eod_dump last_eod_dump1,
       dt_avg@eka_appdb  dtavg,
       qum_quantity_unit_master qum,
       (SELECT dt.derivative_ref_no,
           CASE
               WHEN to_char(dt.average_from_date, 'MON') = to_char(dt.average_to_date, 'MON') AND
                  to_char(dt.average_from_date, 'DD') = '01' AND
                  dt.average_to_date = last_day(dt.average_to_date) THEN
                'N'
               ELSE
                'Y'
           END any_one_day
      FROM   dt_derivative_trade@eka_appdb dt) avg_or_any_day
 where akc.corporate_id = dt.corporate_id
   and dtul.internal_derivative_ref_no = dt.internal_derivative_ref_no
   AND    avg_or_any_day.derivative_ref_no = dt.derivative_ref_no
AND    avg_or_any_day.any_one_day = 'N'
   and dtul.status = 'Delete'
   and dtul.internal_action_ref_no = axs.internal_action_ref_no
   and axs.created_date > last_eod_dump1.db_dump_start_timestamp
   and axs.action_id = 'CDC_DELETE_OTC_AVERAGE_FORWARD'
   and dt.profit_center_id = cpc.profit_center_id
   and cpc.business_line_id = blm.business_line_id
   and dt.dr_id = drm.dr_id
   and drm.instrument_id = dim.instrument_id
   and irm.instrument_type_id = dim.instrument_type_id
   and pdd.derivative_def_id = dim.product_derivative_id
   and pdd.product_id = pdm.product_id
   and ucm.from_qty_unit_id = dt.quantity_unit_id
   and ucm.to_qty_unit_id = pdm.base_quantity_unit
   and dtavg.internal_derivative_ref_no = dt.internal_derivative_ref_no   
   and qum.qty_unit_id = pdm.base_quantity_unit
 --  and dtavg.period_date > last_eod_dump1.trade_date need to use previous eod date
   and irm.instrument_type = 'Average'
   and dtavg.period_date <= pd_trade_date
     and dt.corporate_id= pc_corporate_id
 group by dt.derivative_ref_no,
          dt.corporate_id,
          akc.corporate_name,
          blm.business_line_id,
          blm.business_line_name,
          cpc.profit_center_id,
          cpc.profit_center_short_name,
          cpc.profit_center_name,
          pdm.product_id,
          pdm.product_desc,
          dt.trade_date,
          
          db_dump_end_timestamp,
          pdm.base_quantity_unit,
          qum.qty_unit          )
group by 
corporate_id, 
business_line_id, 
profit_center_id, 
product_id
union all
select pd_trade_date trade_date,
       corporate_id,
       business_line_id,
       profit_center_id,       
       product_id,
       fixed_qty,
       quotational_qty
  from dpr_daily_position_record dpr
  WHERE dpr.trade_date = (select max(t.trade_date)
                                 from tdc_trade_date_closure t
                                where t.trade_date < pd_trade_date
                                  and t.corporate_id = pc_corporate_id
                                  and t.process = 'EOD')
    and dpr.corporate_id = pc_corporate_id)t
    
    group by --t.trade_date,
t.corporate_id, 
t.business_line_id, 
t.profit_center_id, 
t.product_id;
    
    
exception
when others then
null;--TODO : need to ad exception handling
end;

end; 
/

create or replace package pkg_phy_calculate_cog is
  procedure sp_calc_invm_cog(pc_corporate_id varchar2,
                             pc_process_id   varchar2,
                             pc_user_id      varchar2,
                             pd_trade_date   date,
                             pc_process      varchar2);
  procedure sp_calc_invm_cogs(pc_corporate_id varchar2,
                              pc_process_id   varchar2,
                              pc_user_id      varchar2,
                              pd_trade_date   date,
                              pc_process      varchar2);
  procedure sp_calc_gmr_sec_cost(pc_corporate_id varchar2,
                                 pc_process_id   varchar2,
                                 pc_user_id      varchar2,
                                 pd_trade_date   date,
                                 pc_process      varchar2);
end; 
/
create or replace package body pkg_phy_calculate_cog is
  procedure sp_calc_invm_cog(pc_corporate_id varchar2,
                             pc_process_id   varchar2,
                             pc_user_id      varchar2,
                             pd_trade_date   date,
                             pc_process      varchar2) is
    vobj_error_log                tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count            number := 1;
    vc_error_msg                  varchar2(5) := '0';
    vn_qty_conv_price_to_stock    number;
    vn_qty_conv_stock_to_base     number;
    vn_fw_exch_rate_trans_to_base number;
    vn_forward_points             number;
    vc_exch_rate_string           varchar2(25);
    vc_base_cur_id                varchar2(15);
    vc_base_cur_code              varchar2(15);
    vn_price_to_base_fw_exch_rate number;
  begin
    select akc.base_cur_id,
           akc.base_currency_name
      into vc_base_cur_id,
           vc_base_cur_code
      from ak_corporate akc
     where akc.corporate_id = pc_corporate_id;
  
    insert into tinvp_temp_invm_cog
      (corporate_id,
       process_id,
       internal_cost_id,
       cost_type,
       internal_grd_ref_no,
       product_id,
       base_qty_unit_id,
       base_qty_unit,
       grd_current_qty,
       grd_qty_unit_id,
       cost_value,
       transformation_ratio,
       transaction_price_unit_id,
       transaction_cur_factor,
       transaction_amt_cur_id,
       transaction_amt_main_cur_id,
       base_cur_id,
       base_cur_code,
       base_price_unit_id,
       price_qty_unit_id,
       price_weight,
       price_to_stock_wt_conversion,
       stock_to_base_wt_conversion,
       transact_to_base_fw_exch_rate,
       base_price_unit_id_in_ppu,
       transact_amt_sign)
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign transact_amt_sign
        from scm_stock_cost_mapping      scm,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             invm_inventory_master       invm,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where scm.internal_grd_ref_no = grd.internal_grd_ref_no
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Accrual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and invm.internal_grd_ref_no = grd.internal_grd_ref_no
         and invm.process_id = pc_process_id
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1
        from scm_stock_cost_mapping      scm,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             invm_inventory_master       invm,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where scm.internal_grd_ref_no = grd.internal_grd_ref_no
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Actual' -- Overaccrual case avoid
         and cs.cost_ref_no in
             (select distinct cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_ref_no = cs.cost_ref_no
                 and cs_in.cost_type = 'Actual'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.is_deleted = 'N'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and invm.internal_grd_ref_no = grd.internal_grd_ref_no
         and invm.process_id = pc_process_id
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             case
               when scms.cost_display_name = 'Material Cost' then
                'Price'
               when scms.cost_display_name = 'Location Premium' then
                'Location Premium'
               when scms.cost_display_name = 'Quality Premium' then
                'Quality Premium'
               when scms.cost_display_name = 'Penalties' then
                'Penalties'
               when scms.cost_display_name = 'Refining Charges' then
                'Refining Charges'
               when scms.cost_display_name = 'Treatment Charges' then
                'Treatment Charges'
             end cost_type,
             grd.internal_grd_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1
        from scm_stock_cost_mapping      scm,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             invm_inventory_master       invm,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where scm.internal_grd_ref_no = grd.internal_grd_ref_no
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_display_name in
             ('Material Cost', 'Location Premium', 'Quality Premium',
              'Penalties', 'Refining Charges', 'Treatment Charges')
         and cs.cost_type in ('Actual', 'Accrual')
         and cs.is_actual_posted_in_cog = 'Y'
         and cs.internal_cost_id in
             (select substr(max(to_char(axs.created_date,
                                        'yyyymmddhh24missff9') ||
                                cs.internal_cost_id),
                            24)
                from cs_cost_store      cs,
                     axs_action_summary axs
               where cs.process_id = pc_process_id
                 and cs.internal_action_ref_no = axs.internal_action_ref_no
                 and cs.process_id = pc_process_id
                 and cs.is_deleted = 'N'
               group by cs.cost_ref_no)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and invm.internal_grd_ref_no = grd.internal_grd_ref_no
         and invm.process_id = pc_process_id
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             case
               when scms.cost_display_name = 'Material Cost' then
                'Price'
               when scms.cost_display_name = 'Location Premium' then
                'Location Premium'
               when scms.cost_display_name = 'Quality Premium' then
                'Quality Premium'
               when scms.cost_display_name = 'Penalties' then
                'Penalties'
               when scms.cost_display_name = 'Refining Charges' then
                'Refining Charges'
               when scms.cost_display_name = 'Treatment Charges' then
                'Treatment Charges'
               else
                'Secondary Cost'
             end cost_type,
             grd.internal_grd_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             case
               when scms.cost_display_name = 'Treatment Charges' then
                1
               when scms.cost_display_name = 'Refining Charges' then
                1
               when scms.cost_display_name = 'Penalties' then
                1
               else
                cs.transact_amt_sign
             end transact_amt_sign
        from scm_stock_cost_mapping      scm,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             invm_inventory_master       invm,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where scm.internal_grd_ref_no = grd.internal_grd_ref_no
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and (scms.cost_display_name in
             ('Material Cost', 'Location Premium', 'Quality Premium',
              'Penalties', 'Refining Charges', 'Treatment Charges') or
             scms.cost_type = 'SECONDARY_COST')
         and cs.cost_type = 'Direct Actual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and invm.internal_grd_ref_no = grd.internal_grd_ref_no
         and invm.process_id = pc_process_id
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_direct_actual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             case
               when scms.cost_display_name = 'Material Cost' then
                'Price'
               when scms.cost_display_name = 'Location Premium' then
                'Location Premium'
               when scms.cost_display_name = 'Quality Premium' then
                'Quality Premium'
               when scms.cost_display_name = 'Penalties' then
                'Penalties'
               when scms.cost_display_name = 'Refining Charges' then
                'Refining Charges'
               when scms.cost_display_name = 'Treatment Charges' then
                'Treatment Charges'
               else
                'Secondary Cost'
             end cost_type,
             grd.internal_grd_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             case
               when scms.cost_display_name = 'Treatment Charges' then
                1
               when scms.cost_display_name = 'Refining Charges' then
                1
               when scms.cost_display_name = 'Penalties' then
                1
               else
                cs.transact_amt_sign
             end transact_amt_sign
        from scm_stock_cost_mapping      scm,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             invm_inventory_master       invm,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where scm.internal_grd_ref_no = grd.internal_grd_ref_no
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and (scms.cost_display_name in
             ('Material Cost', 'Location Premium', 'Quality Premium',
              'Penalties', 'Refining Charges', 'Treatment Charges') or
             scms.cost_type = 'SECONDARY_COST')
         and cs.cost_type = 'Reversal'
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and invm.internal_grd_ref_no = grd.internal_grd_ref_no
         and invm.process_id = pc_process_id
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_over_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling';
  
    --
    -- Quantity Conversion from Price Weight Unit to Stock Weight Unit
    --         
    for cur_conv1 in (select t.product_id,
                             t.price_qty_unit_id,
                             t.grd_qty_unit_id
                        from tinvp_temp_invm_cog t
                       where t.process_id = pc_process_id
                         and t.price_qty_unit_id <> t.grd_qty_unit_id
                       group by t.price_qty_unit_id,
                                t.grd_qty_unit_id,
                                t.product_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_conv1.product_id,
                                                  cur_conv1.price_qty_unit_id,
                                                  cur_conv1.grd_qty_unit_id,
                                                  1)
        into vn_qty_conv_price_to_stock
        from dual;
      update tinvp_temp_invm_cog t
         set t.price_to_stock_wt_conversion = vn_qty_conv_price_to_stock
       where t.price_qty_unit_id = cur_conv1.price_qty_unit_id
         and t.grd_qty_unit_id = cur_conv1.grd_qty_unit_id
         and t.product_id = cur_conv1.product_id
         and t.process_id = pc_process_id;
    end loop;
    --
    -- Quantity Conversion from Stock Weight Unit to Product Base Unit
    --
    for cur_conv2 in (select t.product_id,
                             t.grd_qty_unit_id,
                             t.base_qty_unit_id
                        from tinvp_temp_invm_cog t
                       where t.grd_qty_unit_id <> t.base_qty_unit_id
                         and t.process_id = pc_process_id
                       group by t.product_id,
                                t.grd_qty_unit_id,
                                t.base_qty_unit_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_conv2.product_id,
                                                  cur_conv2.grd_qty_unit_id,
                                                  cur_conv2.base_qty_unit_id,
                                                  1)
        into vn_qty_conv_stock_to_base
        from dual;
      update tinvp_temp_invm_cog t
         set t.price_to_stock_wt_conversion = vn_qty_conv_stock_to_base
       where t.base_qty_unit_id = cur_conv2.base_qty_unit_id
         and t.grd_qty_unit_id = cur_conv2.grd_qty_unit_id
         and t.product_id = cur_conv2.product_id
         and t.process_id = pc_process_id;
    end loop;
    --
    -- Value in Transaction Currency
    --    
    update tinvp_temp_invm_cog t
       set t.value_in_transact_currency = t.cost_value *
                                          t.transaction_cur_factor *
                                          t.price_to_stock_wt_conversion *
                                          t.grd_current_qty *
                                          t.transformation_ratio /
                                          t.price_weight
     where t.process_id = pc_process_id;
  
    --
    -- Get the Exchange Rate from Transaction Main Currency to Base Currency
    --
    for cur_exch_rate in (select t.transaction_amt_main_cur_id,
                                 t.base_cur_id,
                                 cm_base.cur_code base_cur_code,
                                 cm_trans.cur_code transaction_amt_main_cur_code
                            from tinvp_temp_invm_cog t,
                                 cm_currency_master  cm_trans,
                                 cm_currency_master  cm_base
                           where t.transaction_amt_main_cur_id <>
                                 t.base_cur_id
                             and t.process_id = pc_process_id
                             and t.transaction_amt_main_cur_id =
                                 cm_trans.cur_id
                             and t.base_cur_id = cm_base.cur_id
                           group by t.transaction_amt_main_cur_id,
                                    t.base_cur_id,
                                    cm_base.cur_code,
                                    cm_trans.cur_code)
    loop
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  pd_trade_date,
                                  cur_exch_rate.transaction_amt_main_cur_id,
                                  cur_exch_rate.base_cur_id,
                                  30,
                                  'procedure pkg_phy_calculate_cog.sp_calc_invm_cog',
                                  pc_process,
                                  vn_fw_exch_rate_trans_to_base,
                                  vn_forward_points);
      update tinvp_temp_invm_cog t
         set t.trans_to_base_fw_exch_rate    = '1 ' ||
                                               cur_exch_rate.transaction_amt_main_cur_code || '=' ||
                                               vn_fw_exch_rate_trans_to_base || ' ' ||
                                               cur_exch_rate.base_cur_code,
             t.transact_to_base_fw_exch_rate = vn_fw_exch_rate_trans_to_base
       where t.transaction_amt_main_cur_id =
             cur_exch_rate.transaction_amt_main_cur_id
         and t.process_id = pc_process_id;
    
    end loop;
  
    --
    -- Update Value in Base and Avg Cost in Base Price Unit
    --
  
    update tinvp_temp_invm_cog t
       set t.value_in_base_currency = t.value_in_transact_currency *
                                      t.transact_to_base_fw_exch_rate *
                                      t.transact_amt_sign,
           t.avg_cost               = (t.transact_amt_sign *
                                      t.value_in_transact_currency *
                                      t.transact_to_base_fw_exch_rate) /
                                      (t.stock_to_base_wt_conversion *
                                      t.grd_current_qty)
     where t.process_id = pc_process_id;
    --
    -- All calculations done and ready with data into invm_cog
    --
    insert into invm_cog
      (process_id,
       internal_grd_ref_no,
       material_cost_per_unit,
       secondary_cost_per_unit,
       product_premium_per_unit,
       quality_premium_per_unit,
       tc_charges_per_unit,
       rc_charges_per_unit,
       pc_charges_per_unit,
       total_mc_charges,
       total_tc_charges,
       total_rc_charges,
       total_pc_charges,
       total_sc_charges,
       price_to_base_fw_exch_rate_act,
       price_to_base_fw_exch_rate,
       contract_qp_fw_exch_rate,
       contract_pp_fw_exch_rate,
       accrual_to_base_fw_exch_rate,
       tc_to_base_fw_exch_rate,
       rc_to_base_fw_exch_rate,
       pc_to_base_fw_exch_rate,
       price_unit_id,
       price_unit_cur_id,
       price_unit_cur_code,
       price_unit_weight_unit_id,
       price_unit_weight_unit,
       price_unit_weight)
      select pc_process_id,
             internal_grd_ref_no,
             sum(material_cost_per_unit),
             nvl(sum(secondary_cost_per_unit), 0),
             nvl(sum(product_premium_per_unit), 0),
             nvl(sum(quality_premium_per_unit), 0),
             nvl(sum(tc_charges_per_unit), 0),
             nvl(sum(rc_charges_per_unit), 0),
             nvl(sum(pc_charges_per_unit), 0),
             nvl(sum(total_mc_charges), 0),
             nvl(sum(total_tc_charges), 0),
             nvl(sum(total_rc_charges), 0),
             nvl(sum(total_pc_charges), 0),
             nvl(sum(total_sc_charges), 0),
             min(price_to_base_fw_exch_rate_act),
             f_string_aggregate(price_to_base_fw_exch_rate),
             f_string_aggregate(contract_qp_fw_exch_rate),
             f_string_aggregate(contract_pp_fw_exch_rate),
             f_string_aggregate(accrual_to_base_fw_exch_rate),
             f_string_aggregate(tc_to_base_fw_exch_rate),
             f_string_aggregate(rc_to_base_fw_exch_rate),
             f_string_aggregate(pc_to_base_fw_exch_rate),
             price_unit_id,
             price_unit_cur_id,
             price_unit_cur_code,
             price_unit_weight_unit_id,
             price_unit_weight_unit,
             weight
        from (select t.internal_grd_ref_no,
                     case
                       when t.cost_type = 'Price' then
                        t.avg_cost
                       else
                        0
                     end as material_cost_per_unit,
                     case
                       when t.cost_type = 'Price' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_mc_charges,
                     case
                       when t.cost_type = 'Price' then
                        t.transact_to_base_fw_exch_rate
                       else
                        null
                     end as price_to_base_fw_exch_rate_act,
                     case
                       when t.cost_type = 'Price' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as price_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Location Premium' then
                        t.avg_cost
                       else
                        0
                     end as product_premium_per_unit,
                     case
                       when t.cost_type = 'Location Premium' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as contract_pp_fw_exch_rate,
                     case
                       when t.cost_type = 'Quality Premium' then
                        t.avg_cost
                       else
                        0
                     end as quality_premium_per_unit,
                     case
                       when t.cost_type = 'Quality Premium' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as contract_qp_fw_exch_rate,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.avg_cost
                       else
                        0
                     end as secondary_cost_per_unit,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_sc_charges,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as accrual_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_tc_charges,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        t.avg_cost
                       else
                        0
                     end as tc_charges_per_unit,
                     case
                       when t.cost_type = 'Refining Charges' then
                        t.avg_cost
                       else
                        0
                     end as rc_charges_per_unit,
                     case
                       when t.cost_type = 'Penalties' then
                        t.avg_cost
                       else
                        0
                     end as pc_charges_per_unit,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as tc_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Refining Charges' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_rc_charges,
                     case
                       when t.cost_type = 'Refining Charges' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as rc_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Penalties' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_pc_charges,
                     case
                       when t.cost_type = 'Penalties' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as pc_to_base_fw_exch_rate,
                     base_price_unit_id_in_ppu price_unit_id,
                     base_cur_id price_unit_cur_id,
                     base_cur_code price_unit_cur_code,
                     base_qty_unit_id price_unit_weight_unit_id,
                     base_qty_unit price_unit_weight_unit,
                     1 weight
                from tinvp_temp_invm_cog t
               where t.process_id = pc_process_id) t
       group by internal_grd_ref_no,
                price_unit_id,
                price_unit_cur_id,
                price_unit_cur_code,
                price_unit_weight_unit_id,
                price_unit_weight_unit,
                weight;
    -- Insert Element Price/TC/RC Details
    insert into invme_cog_element
      (process_id,
       internal_grd_ref_no,
       element_id,
       mc_per_unit,
       mc_price_unit_id,
       tc_per_unit,
       tc_price_unit_id,
       rc_per_unit,
       rc_price_unit_id,
       payable_qty,
       payable_qty_unit_id)
      select pc_process_id,
             t.internal_grd_ref_no,
             t.element_id,
             sum(mc_per_unit),
             max(mc_price_unit_id),
             nvl(sum(tc_per_unit), 0),
             max(tc_price_unit_id),
             nvl(sum(rc_per_unit), 0),
             max(rc_price_unit_id),
             payable_qty,
             payable_qty_unit_id
        from (select t.internal_grd_ref_no,
                     ecs.element_id,
                     case
                       when t.cost_type = 'Price' then
                        ecs.cost_value
                       else
                        0
                     end mc_per_unit,
                     case
                       when t.cost_type = 'Price' then
                        ecs.rate_price_unit_id
                       else
                        null
                     end mc_price_unit_id,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        ecs.cost_value
                       else
                        null
                     end tc_per_unit,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        ecs.rate_price_unit_id
                       else
                        null
                     end tc_price_unit_id,
                     case
                       when t.cost_type = 'Refining Charges' then
                        ecs.cost_value
                       else
                        null
                     end rc_per_unit,
                     case
                       when t.cost_type = 'Refining Charges' then
                        ecs.rate_price_unit_id
                       else
                        null
                     end rc_price_unit_id,
                     ecs.payable_qty,
                     ecs.qty_unit_id payable_qty_unit_id
                from tinvp_temp_invm_cog    t,
                     ecs_element_cost_store ecs
               where t.process_id = pc_process_id
                 and ecs.process_id = pc_process_id
                 and t.internal_cost_id = ecs.internal_cost_id
                 and t.cost_type <> 'Secondary Cost'
                 and ecs.internal_cost_id in
                     (select substr(max(to_char(axs.created_date,
                                                'yyyymmddhh24missff9') ||
                                        cs.internal_cost_id),
                                    24)
                        from cs_cost_store      cs,
                             axs_action_summary axs
                       where cs.process_id = pc_process_id
                         and cs.internal_action_ref_no =
                             axs.internal_action_ref_no
                         and cs.process_id = pc_process_id
                         and cs.is_deleted = 'N'
                       group by cs.cost_ref_no)) t
       group by t.internal_grd_ref_no,
                t.element_id,
                t.payable_qty,
                t.payable_qty_unit_id;
    update invme_cog_element t
       set (t.mc_price_unit_name, t.mc_price_unit_cur_id, t.mc_price_unit_cur_code, t.mc_price_unit_weight_unit_id, t.mc_price_unit_weight_unit, t.mc_price_unit_weight) = (select ppu.price_unit_name,
                                                                                                                                                                                   cm.cur_id,
                                                                                                                                                                                   cm.cur_code,
                                                                                                                                                                                   qum.qty_unit_id,
                                                                                                                                                                                   qum.qty_unit,
                                                                                                                                                                                   ppu.weight
                                                                                                                                                                              from v_ppu_pum                ppu,
                                                                                                                                                                                   cm_currency_master       cm,
                                                                                                                                                                                   qum_quantity_unit_master qum
                                                                                                                                                                             where ppu.product_price_unit_id =
                                                                                                                                                                                   t.mc_price_unit_id
                                                                                                                                                                               and cm.cur_id =
                                                                                                                                                                                   ppu.cur_id
                                                                                                                                                                               and qum.qty_unit_id =
                                                                                                                                                                                   ppu.weight_unit_id)
     where t.process_id = pc_process_id;
  
    update invme_cog_element t
       set (t.tc_price_unit_name) = (select ppu.price_unit_name
                                       from v_ppu_pum ppu
                                      where ppu.product_price_unit_id =
                                            t.tc_price_unit_id)
     where t.process_id = pc_process_id;
  
    update invme_cog_element t
       set (t.rc_price_unit_name) = (select ppu.price_unit_name
                                       from v_ppu_pum ppu
                                      where ppu.product_price_unit_id =
                                            t.rc_price_unit_id)
     where t.process_id = pc_process_id;
  
    for cur_price_ex_rate in (select t.mc_price_unit_cur_id,
                                     t.mc_price_unit_cur_code
                                from invme_cog_element t
                               where t.process_id = pc_process_id
                                 and t.mc_price_unit_cur_id <>
                                     vc_base_cur_id)
    loop
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  pd_trade_date,
                                  cur_price_ex_rate.mc_price_unit_cur_id,
                                  vc_base_cur_id,
                                  30,
                                  'INVME_COG Element Price to Base',
                                  pc_process,
                                  vn_price_to_base_fw_exch_rate,
                                  vn_forward_points);
      if vn_price_to_base_fw_exch_rate <> 0 then
        update invme_cog_element t
           set t.price_to_base_fw_exch_rate = '1 ' ||
                                              cur_price_ex_rate.mc_price_unit_cur_code || '=' ||
                                              vn_price_to_base_fw_exch_rate || ' ' ||
                                              vc_base_cur_code
         where t.process_id = pc_process_id
           and t.mc_price_unit_cur_id =
               cur_price_ex_rate.mc_price_unit_cur_id;
      
      end if;
    
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process sp_calc_invm_cog',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace ||
                                                           'No ' ||
                                                           vc_error_msg,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_calc_invm_cogs(pc_corporate_id varchar2,
                              pc_process_id   varchar2,
                              pc_user_id      varchar2,
                              pd_trade_date   date,
                              pc_process      varchar2) is
    vobj_error_log                tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count            number := 1;
    vc_error_msg                  varchar2(5) := '0';
    vn_qty_conv_price_to_stock    number;
    vn_qty_conv_stock_to_base     number;
    vn_fw_exch_rate_trans_to_base number;
    vn_forward_points             number;
    vc_exch_rate_string           varchar2(25);
    vc_base_cur_id                varchar2(15);
    vc_base_cur_code              varchar2(15);
    vn_price_to_base_fw_exch_rate number;
  begin
    select akc.base_cur_id,
           akc.base_currency_name
      into vc_base_cur_id,
           vc_base_cur_code
      from ak_corporate akc
     where akc.corporate_id = pc_corporate_id;
    insert into tinvs_temp_invm_cogs
      (corporate_id,
       process_id,
       internal_cost_id,
       cost_type,
       internal_grd_ref_no,
       sales_internal_gmr_ref_no,
       product_id,
       base_qty_unit_id,
       base_qty_unit,
       grd_current_qty,
       grd_qty_unit_id,
       cost_value,
       transformation_ratio,
       transaction_price_unit_id,
       transaction_cur_factor,
       transaction_amt_cur_id,
       transaction_amt_main_cur_id,
       base_cur_id,
       base_cur_code,
       base_price_unit_id,
       price_qty_unit_id,
       price_weight,
       price_to_stock_wt_conversion,
       stock_to_base_wt_conversion,
       transact_to_base_fw_exch_rate,
       base_price_unit_id_in_ppu,
       transact_amt_sign)
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             invm.sales_internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             invm.stock_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign transact_amt_sign
        from scm_stock_cost_mapping      scm,
             invs_inventory_sales        invm,
             dgrd_delivered_grd          dgrd,
             agh_alloc_group_header      agh,
             agd_alloc_group_detail      agd,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where invm.internal_dgrd_ref_no = scm.internal_dgrd_ref_no
         and invm.process_id = pc_process_id
         and invm.internal_dgrd_ref_no = dgrd.internal_dgrd_ref_no
         and dgrd.int_alloc_group_id = agh.int_alloc_group_id
         and agh.int_alloc_group_id = agd.int_alloc_group_id
         and agd.internal_stock_ref_no = grd.internal_grd_ref_no
         and dgrd.process_id = pc_process_id
         and agh.process_id = pc_process_id
         and agd.process_id = pc_process_id
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Accrual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and invm.is_active = 'Y'
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
         and cigc.cog_ref_no not in
             (select cigc_in.cog_ref_no
                from cigc_contract_item_gmr_cost cigc_in,
                     gmr_goods_movement_record   gmr
               where cigc_in.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cigc_in.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and cigc_in.is_deleted = 'N'
                 and gmr.contract_type = 'Sales')
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             invm.sales_internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             invm.stock_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1
        from scm_stock_cost_mapping      scm,
             invs_inventory_sales        invm,
             dgrd_delivered_grd          dgrd,
             agh_alloc_group_header      agh,
             agd_alloc_group_detail      agd,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where invm.process_id = pc_process_id
         and invm.internal_dgrd_ref_no = scm.internal_dgrd_ref_no
         and invm.process_id = pc_process_id
         and invm.internal_dgrd_ref_no = dgrd.internal_dgrd_ref_no
         and dgrd.int_alloc_group_id = agh.int_alloc_group_id
         and agh.int_alloc_group_id = agd.int_alloc_group_id
         and agd.internal_stock_ref_no = grd.internal_grd_ref_no
         and dgrd.process_id = pc_process_id
         and agh.process_id = pc_process_id
         and agd.process_id = pc_process_id
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Actual' -- Overaccrual case avoid
         and cs.cost_ref_no in
             (select distinct cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_ref_no = cs.cost_ref_no
                 and cs_in.cost_type = 'Actual'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.is_deleted = 'N'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
         and cigc.cog_ref_no not in
             (select cigc_in.cog_ref_no
                from cigc_contract_item_gmr_cost cigc_in,
                     gmr_goods_movement_record   gmr
               where cigc_in.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cigc_in.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and cigc_in.is_deleted = 'N'
                 and gmr.contract_type = 'Sales')
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             case
               when scms.cost_display_name = 'Material Cost' then
                'Price'
               when scms.cost_display_name = 'Location Premium' then
                'Location Premium'
               when scms.cost_display_name = 'Quality Premium' then
                'Quality Premium'
               when scms.cost_display_name = 'Penalties' then
                'Penalties'
               when scms.cost_display_name = 'Refining Charges' then
                'Refining Charges'
               when scms.cost_display_name = 'Treatment Charges' then
                'Treatment Charges'
             end cost_type,
             grd.internal_grd_ref_no,
            -- invm.sales_internal_gmr_ref_no,
            invm.internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
            -- invm.stock_qty,
             agd.qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1
        from scm_stock_cost_mapping      scm,
             invm_inventory_master@eka_appdb        invm,
             dgrd_delivered_grd          dgrd,
             agh_alloc_group_header      agh,
             agd_alloc_group_detail      agd,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where /*invm.process_id = pc_process_id
         and */invm.internal_dgrd_ref_no = scm.internal_dgrd_ref_no
         /*and invm.process_id = pc_process_id*/
         and invm.internal_dgrd_ref_no = dgrd.internal_dgrd_ref_no
         and dgrd.int_alloc_group_id = agh.int_alloc_group_id
         and agh.int_alloc_group_id = agd.int_alloc_group_id
         and agd.internal_stock_ref_no = grd.internal_grd_ref_no
         and dgrd.process_id = pc_process_id
         and agh.process_id = pc_process_id
         and agd.process_id = pc_process_id
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_display_name in
             ('Material Cost', 'Location Premium', 'Quality Premium',
              'Penalties', 'Refining Charges', 'Treatment Charges')
         and cs.cost_type in ('Actual', 'Accrual')
        -- and cs.is_actual_posted_in_cog = 'Y'
        and CIGC.COG_REF_NO IN ( select scm_in.cog_ref_no from SCM_STOCK_COST_MAPPING scm_in
                                where SCM_IN.INTERNAL_GRD_REF_NO = GRD.INTERNAL_GRD_REF_NO)
         and cs.internal_cost_id in
             (select substr(max(to_char(axs.created_date,
                                        'yyyymmddhh24missff9') ||
                                cs.internal_cost_id),
                            24)
                from cs_cost_store      cs,
                     axs_action_summary axs
               where cs.process_id = pc_process_id
                 and cs.internal_action_ref_no = axs.internal_action_ref_no
                 and cs.process_id = pc_process_id
                 and cs.is_deleted = 'N'
               group by cs.cost_ref_no)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and invm.is_active = 'Y'
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
         and cigc.cog_ref_no not in
             (select cigc_in.cog_ref_no
                from cigc_contract_item_gmr_cost cigc_in,
                     gmr_goods_movement_record   gmr
               where cigc_in.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cigc_in.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and cigc_in.is_deleted = 'N'
                 and gmr.contract_type = 'Sales')
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             case
               when scms.cost_display_name = 'Material Cost' then
                'Price'
               when scms.cost_display_name = 'Location Premium' then
                'Location Premium'
               when scms.cost_display_name = 'Quality Premium' then
                'Quality Premium'
               when scms.cost_display_name = 'Penalties' then
                'Penalties'
               when scms.cost_display_name = 'Refining Charges' then
                'Refining Charges'
               when scms.cost_display_name = 'Treatment Charges' then
                'Treatment Charges'
               else
                'Secondary Cost'
             end cost_type,
             grd.internal_grd_ref_no,
             invm.sales_internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             invm.stock_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             case
               when scms.cost_display_name = 'Treatment Charges' then
                1
               when scms.cost_display_name = 'Refining Charges' then
                1
               when scms.cost_display_name = 'Penalties' then
                1
               else
                cs.transact_amt_sign
             end transact_amt_sign
        from scm_stock_cost_mapping      scm,
             invs_inventory_sales        invm,
             dgrd_delivered_grd          dgrd,
             agh_alloc_group_header      agh,
             agd_alloc_group_detail      agd,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where invm.internal_dgrd_ref_no = scm.internal_dgrd_ref_no
         and invm.process_id = pc_process_id
         and invm.internal_dgrd_ref_no = dgrd.internal_dgrd_ref_no
         and dgrd.int_alloc_group_id = agh.int_alloc_group_id
         and agh.int_alloc_group_id = agd.int_alloc_group_id
         and agd.internal_stock_ref_no = grd.internal_grd_ref_no
         and dgrd.process_id = pc_process_id
         and agh.process_id = pc_process_id
         and agd.process_id = pc_process_id
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and (scms.cost_display_name in
             ('Material Cost', 'Location Premium', 'Quality Premium',
              'Penalties', 'Refining Charges', 'Treatment Charges') or
             scms.cost_type = 'SECONDARY_COST')
         and cs.cost_type = 'Direct Actual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and invm.is_active = 'Y'
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_direct_actual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
         and cigc.cog_ref_no not in
             (select cigc_in.cog_ref_no
                from cigc_contract_item_gmr_cost cigc_in,
                     gmr_goods_movement_record   gmr
               where cigc_in.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cigc_in.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and cigc_in.is_deleted = 'N'
                 and gmr.contract_type = 'Sales')
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             case
               when scms.cost_display_name = 'Material Cost' then
                'Price'
               when scms.cost_display_name = 'Location Premium' then
                'Location Premium'
               when scms.cost_display_name = 'Quality Premium' then
                'Quality Premium'
               when scms.cost_display_name = 'Penalties' then
                'Penalties'
               when scms.cost_display_name = 'Refining Charges' then
                'Refining Charges'
               when scms.cost_display_name = 'Treatment Charges' then
                'Treatment Charges'
               else
                'Secondary Cost'
             end cost_type,
             grd.internal_grd_ref_no,
             invm.sales_internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             invm.stock_qty,
             grd.qty_unit_id,
             cs.cost_value,
             scm.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             case
               when scms.cost_display_name = 'Treatment Charges' then
                1
               when scms.cost_display_name = 'Refining Charges' then
                1
               when scms.cost_display_name = 'Penalties' then
                1
               else
                cs.transact_amt_sign
             end transact_amt_sign
        from scm_stock_cost_mapping      scm,
             invs_inventory_sales        invm,
             dgrd_delivered_grd          dgrd,
             agh_alloc_group_header      agh,
             agd_alloc_group_detail      agd,
             grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm
       where invm.internal_dgrd_ref_no = scm.internal_dgrd_ref_no
         and invm.process_id = pc_process_id
         and invm.internal_dgrd_ref_no = dgrd.internal_dgrd_ref_no
         and dgrd.int_alloc_group_id = agh.int_alloc_group_id
         and agh.int_alloc_group_id = agd.int_alloc_group_id
         and agd.internal_stock_ref_no = grd.internal_grd_ref_no
         and dgrd.process_id = pc_process_id
         and agh.process_id = pc_process_id
         and agd.process_id = pc_process_id
         and scm.cog_ref_no = cigc.cog_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and (scms.cost_display_name in
             ('Material Cost', 'Location Premium', 'Quality Premium',
              'Penalties', 'Refining Charges', 'Treatment Charges') or
              scms.cost_type = 'SECONDARY_COST' )
         and cs.cost_type = 'Reversal'
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and scm.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and invm.is_active = 'Y'
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_over_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and grd.tolling_stock_type = 'None Tolling'
         and cigc.cog_ref_no not in
             (select cigc_in.cog_ref_no
                from cigc_contract_item_gmr_cost cigc_in,
                     gmr_goods_movement_record   gmr
               where cigc_in.internal_gmr_ref_no = gmr.internal_gmr_ref_no
                 and cigc_in.process_id = pc_process_id
                 and gmr.process_id = pc_process_id
                 and gmr.is_deleted = 'N'
                 and cigc_in.is_deleted = 'N'
                 and gmr.contract_type = 'Sales');
    --
    -- Quantity Conversion from Price Weight Unit to Stock Weight Unit
    --         
    for cur_conv1 in (select t.product_id,
                             t.price_qty_unit_id,
                             t.grd_qty_unit_id
                        from tinvs_temp_invm_cogs t
                       where t.process_id = pc_process_id
                         and t.price_qty_unit_id <> t.grd_qty_unit_id
                       group by t.price_qty_unit_id,
                                t.grd_qty_unit_id,
                                t.product_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_conv1.product_id,
                                                  cur_conv1.price_qty_unit_id,
                                                  cur_conv1.grd_qty_unit_id,
                                                  1)
        into vn_qty_conv_price_to_stock
        from dual;
      update tinvs_temp_invm_cogs t
         set t.price_to_stock_wt_conversion = vn_qty_conv_price_to_stock
       where t.price_qty_unit_id = cur_conv1.price_qty_unit_id
         and t.grd_qty_unit_id = cur_conv1.grd_qty_unit_id
         and t.product_id = cur_conv1.product_id
         and t.process_id = pc_process_id;
    end loop;
    --
    -- Quantity Conversion from Stock Weight Unit to Product Base Unit
    --
    for cur_conv2 in (select t.product_id,
                             t.grd_qty_unit_id,
                             t.base_qty_unit_id
                        from tinvs_temp_invm_cogs t
                       where t.grd_qty_unit_id <> t.base_qty_unit_id
                         and t.process_id = pc_process_id
                       group by t.product_id,
                                t.grd_qty_unit_id,
                                t.base_qty_unit_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_conv2.product_id,
                                                  cur_conv2.grd_qty_unit_id,
                                                  cur_conv2.base_qty_unit_id,
                                                  1)
        into vn_qty_conv_stock_to_base
        from dual;
      update tinvs_temp_invm_cogs t
         set t.price_to_stock_wt_conversion = vn_qty_conv_stock_to_base
       where t.base_qty_unit_id = cur_conv2.base_qty_unit_id
         and t.grd_qty_unit_id = cur_conv2.grd_qty_unit_id
         and t.product_id = cur_conv2.product_id
         and t.process_id = pc_process_id;
    end loop;
    --
    -- Value in Transaction Currency
    --    
    update tinvs_temp_invm_cogs t
       set t.value_in_transact_currency = t.cost_value *
                                          t.transaction_cur_factor *
                                          t.price_to_stock_wt_conversion *
                                          t.grd_current_qty *
                                          t.transformation_ratio /
                                          t.price_weight
     where t.process_id = pc_process_id;
  
    --
    -- Get the Exchange Rate from Transaction Main Currency to Base Currency
    --
    for cur_exch_rate in (select t.transaction_amt_main_cur_id,
                                 t.base_cur_id,
                                 cm_base.cur_code base_cur_code,
                                 cm_trans.cur_code transaction_amt_main_cur_code
                            from tinvs_temp_invm_cogs t,
                                 cm_currency_master   cm_trans,
                                 cm_currency_master   cm_base
                           where t.transaction_amt_main_cur_id <>
                                 t.base_cur_id
                             and t.process_id = pc_process_id
                             and t.transaction_amt_main_cur_id =
                                 cm_trans.cur_id
                             and t.base_cur_id = cm_base.cur_id
                           group by t.transaction_amt_main_cur_id,
                                    t.base_cur_id,
                                    cm_base.cur_code,
                                    cm_trans.cur_code)
    loop
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  pd_trade_date,
                                  cur_exch_rate.transaction_amt_main_cur_id,
                                  cur_exch_rate.base_cur_id,
                                  30,
                                  'procedure pkg_phy_calculate_cog.sp_calc_invm_cogs',
                                  pc_process,
                                  vn_fw_exch_rate_trans_to_base,
                                  vn_forward_points);
    
      update tinvs_temp_invm_cogs t
         set t.trans_to_base_fw_exch_rate    = '1 ' ||
                                               cur_exch_rate.transaction_amt_main_cur_code || '=' ||
                                               vn_fw_exch_rate_trans_to_base || ' ' ||
                                               cur_exch_rate.base_cur_code,
             t.transact_to_base_fw_exch_rate = vn_fw_exch_rate_trans_to_base
       where t.transaction_amt_main_cur_id =
             cur_exch_rate.transaction_amt_main_cur_id
         and t.process_id = pc_process_id;
    
    end loop;
  
    --
    -- Update Value in Base and Avg Cost in Base Price Unit
    --
  
    update tinvs_temp_invm_cogs t
       set t.value_in_base_currency = t.value_in_transact_currency *
                                      t.transact_to_base_fw_exch_rate,
           t.avg_cost               = (t.value_in_transact_currency *
                                      t.transact_to_base_fw_exch_rate) /
                                      (t.stock_to_base_wt_conversion *
                                      t.grd_current_qty)
     where t.process_id = pc_process_id;
    --
    -- All calculations done and ready with data into invm_cog
    --
    insert into invm_cogs
      (process_id,
       sales_internal_gmr_ref_no,
       internal_grd_ref_no,
       material_cost_per_unit,
       secondary_cost_per_unit,
       product_premium_per_unit,
       quality_premium_per_unit,
       tc_charges_per_unit,
       rc_charges_per_unit,
       pc_charges_per_unit,
       
       total_mc_charges,
       total_tc_charges,
       total_rc_charges,
       total_pc_charges,
       total_sc_charges,
       price_to_base_fw_exch_rate_act,
       price_to_base_fw_exch_rate,
       contract_qp_fw_exch_rate,
       contract_pp_fw_exch_rate,
       accrual_to_base_fw_exch_rate,
       tc_to_base_fw_exch_rate,
       rc_to_base_fw_exch_rate,
       pc_to_base_fw_exch_rate,
       price_unit_id,
       price_unit_cur_id,
       price_unit_cur_code,
       price_unit_weight_unit_id,
       price_unit_weight_unit,
       price_unit_weight)
      select pc_process_id,
             sales_internal_gmr_ref_no,
             internal_grd_ref_no,
             sum(material_cost_per_unit),
             nvl(sum(secondary_cost_per_unit), 0),
             nvl(sum(product_premium_per_unit), 0),
             nvl(sum(quality_premium_per_unit), 0),
             nvl(sum(tc_charges_per_unit), 0),
             nvl(sum(rc_charges_per_unit), 0),
             nvl(sum(pc_charges_per_unit), 0),
             nvl(sum(total_mc_charges), 0),
             nvl(sum(total_tc_charges), 0),
             nvl(sum(total_rc_charges), 0),
             nvl(sum(total_pc_charges), 0),
             nvl(sum(total_sc_charges), 0),
             min(price_to_base_fw_exch_rate_act),
             f_string_aggregate(price_to_base_fw_exch_rate),
             f_string_aggregate(contract_qp_fw_exch_rate),
             f_string_aggregate(contract_pp_fw_exch_rate),
             f_string_aggregate(accrual_to_base_fw_exch_rate),
             f_string_aggregate(tc_to_base_fw_exch_rate),
             f_string_aggregate(rc_to_base_fw_exch_rate),
             f_string_aggregate(pc_to_base_fw_exch_rate),
             price_unit_id,
             price_unit_cur_id,
             price_unit_cur_code,
             price_unit_weight_unit_id,
             price_unit_weight_unit,
             weight
        from (select t.internal_grd_ref_no,
                     sales_internal_gmr_ref_no,
                     case
                       when t.cost_type = 'Price' then
                        t.avg_cost
                       else
                        0
                     end as material_cost_per_unit,
                     case
                       when t.cost_type = 'Price' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_mc_charges,
                     case
                       when t.cost_type = 'Price' then
                        t.transact_to_base_fw_exch_rate
                       else
                        null
                     end as price_to_base_fw_exch_rate_act,
                     case
                       when t.cost_type = 'Price' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as price_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Location Premium' then
                        t.avg_cost
                       else
                        0
                     end as product_premium_per_unit,
                     case
                       when t.cost_type = 'Location Premium' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as contract_pp_fw_exch_rate,
                     case
                       when t.cost_type = 'Quality Premium' then
                        t.avg_cost
                       else
                        0
                     end as quality_premium_per_unit,
                     case
                       when t.cost_type = 'Quality Premium' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as contract_qp_fw_exch_rate,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.avg_cost
                       else
                        0
                     end as secondary_cost_per_unit,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_sc_charges,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as accrual_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_tc_charges,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as tc_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Refining Charges' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_rc_charges,
                     case
                       when t.cost_type = 'Refining Charges' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as rc_to_base_fw_exch_rate,
                     case
                       when t.cost_type = 'Penalties' then
                        t.avg_cost * t.grd_current_qty *
                        t.stock_to_base_wt_conversion
                       else
                        0
                     end as total_pc_charges,
                     case
                       when t.cost_type = 'Penalties' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as pc_to_base_fw_exch_rate,
                     base_price_unit_id_in_ppu price_unit_id,
                     base_cur_id price_unit_cur_id,
                     base_cur_code price_unit_cur_code,
                     base_qty_unit_id price_unit_weight_unit_id,
                     base_qty_unit price_unit_weight_unit,
                     1 weight,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        t.avg_cost
                       else
                        0
                     end as tc_charges_per_unit,
                     case
                       when t.cost_type = 'Refining Charges' then
                        t.avg_cost
                       else
                        0
                     end as rc_charges_per_unit,
                     case
                       when t.cost_type = 'Penalties' then
                        t.avg_cost
                       else
                        0
                     end as pc_charges_per_unit
              
                from tinvs_temp_invm_cogs t
               where t.process_id = pc_process_id)
       group by internal_grd_ref_no,
                sales_internal_gmr_ref_no,
                price_unit_id,
                price_unit_cur_id,
                price_unit_cur_code,
                price_unit_weight_unit_id,
                price_unit_weight_unit,
                weight;
  
    -- Insert Element Price/TC/RC Details
    insert into invme_cogs_element
      (process_id,
       internal_grd_ref_no,
       sales_internal_gmr_ref_no,
       element_id,
       mc_per_unit,
       mc_price_unit_id,
       tc_per_unit,
       tc_price_unit_id,
       rc_per_unit,
       rc_price_unit_id,
       payable_qty,
       payable_qty_unit_id)
      select pc_process_id,
             t.internal_grd_ref_no,
             t.sales_internal_gmr_ref_no,
             t.element_id,
             sum(t.mc_per_unit) mc_per_unit,
             max(t.mc_price_unit_id) mc_price_unit_id,
             sum(t.tc_per_unit) tc_per_unit,
             max(t.tc_price_unit_id) tc_price_unit_id,
             nvl(sum(t.rc_per_unit), 0) rc_per_unit,
             max(t.rc_price_unit_id) rc_price_unit_id,
             payable_qty,
             payable_qty_unit_id
        from (select t.internal_grd_ref_no,
                     ecs.element_id,
                     case
                       when t.cost_type = 'Price' then
                        ecs.cost_value
                       else
                        0
                     end mc_per_unit,
                     case
                       when t.cost_type = 'Price' then
                        ecs.rate_price_unit_id
                       else
                        null
                     end mc_price_unit_id,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        ecs.cost_value
                       else
                        null
                     end tc_per_unit,
                     case
                       when t.cost_type = 'Treatment Charges' then
                        ecs.rate_price_unit_id
                       else
                        null
                     end tc_price_unit_id,
                     case
                       when t.cost_type = 'Refining Charges' then
                        ecs.cost_value
                       else
                        null
                     end rc_per_unit,
                     case
                       when t.cost_type = 'Refining Charges' then
                        ecs.rate_price_unit_id
                       else
                        null
                     end rc_price_unit_id,
                     t.sales_internal_gmr_ref_no,
                     ecs.payable_qty,
                     ecs.qty_unit_id payable_qty_unit_id
                from tinvs_temp_invm_cogs   t,
                     ecs_element_cost_store ecs,
                     cs_cost_store          cs
               where t.process_id = pc_process_id
                 and ecs.process_id = pc_process_id
                 and t.internal_cost_id = ecs.internal_cost_id
                 and t.cost_type <> 'Secondary Cost'
                 and ecs.internal_cost_id = cs.internal_cost_id
                 and cs.process_id = pc_process_id
                 and cs.cog_ref_no not in
                     (select cigc_in.cog_ref_no
                        from cigc_contract_item_gmr_cost cigc_in,
                             gmr_goods_movement_record   gmr
                       where cigc_in.internal_gmr_ref_no =
                             gmr.internal_gmr_ref_no
                         and cigc_in.process_id = pc_process_id
                         and gmr.process_id = pc_process_id
                         and gmr.is_deleted = 'N'
                         and cigc_in.is_deleted = 'N'
                         and gmr.contract_type = 'Sales')) t
       group by t.internal_grd_ref_no,
                t.sales_internal_gmr_ref_no,
                t.element_id,
                t.payable_qty,
                t.payable_qty_unit_id;
  
    update invme_cogs_element t
       set (t.mc_price_unit_name, t.mc_price_unit_cur_id, t.mc_price_unit_cur_code, t.mc_price_unit_weight_unit_id, t.mc_price_unit_weight_unit, t.mc_price_unit_weight) = (select ppu.price_unit_name,
                                                                                                                                                                                   cm.cur_id,
                                                                                                                                                                                   cm.cur_code,
                                                                                                                                                                                   qum.qty_unit_id,
                                                                                                                                                                                   qum.qty_unit,
                                                                                                                                                                                   ppu.weight
                                                                                                                                                                              from v_ppu_pum                ppu,
                                                                                                                                                                                   cm_currency_master       cm,
                                                                                                                                                                                   qum_quantity_unit_master qum
                                                                                                                                                                             where ppu.product_price_unit_id =
                                                                                                                                                                                   t.mc_price_unit_id
                                                                                                                                                                               and cm.cur_id =
                                                                                                                                                                                   ppu.cur_id
                                                                                                                                                                               and qum.qty_unit_id =
                                                                                                                                                                                   ppu.weight_unit_id);
    update invme_cogs_element t
       set t.tc_price_unit_name = (select ppu.price_unit_name
                                     from v_ppu_pum ppu
                                    where ppu.product_price_unit_id =
                                          t.tc_price_unit_id);
  
    update invme_cogs_element t
       set t.rc_price_unit_name = (select ppu.price_unit_name
                                     from v_ppu_pum ppu
                                    where ppu.product_price_unit_id =
                                          t.rc_price_unit_id);
  
    for cur_price_ex_rate in (select t.mc_price_unit_cur_id,
                                     t.mc_price_unit_cur_code
                                from invme_cogs_element t
                               where t.process_id = pc_process_id
                                 and t.mc_price_unit_cur_id <>
                                     vc_base_cur_id)
    loop
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  pd_trade_date,
                                  cur_price_ex_rate.mc_price_unit_cur_id,
                                  vc_base_cur_id,
                                  30,
                                  'INVME_COG Element Price to Base',
                                  pc_process,
                                  vn_price_to_base_fw_exch_rate,
                                  vn_forward_points);
      if vn_price_to_base_fw_exch_rate <> 0 then
        update invme_cogs_element t
           set t.price_to_base_fw_exch_rate = '1 ' ||
                                              cur_price_ex_rate.mc_price_unit_cur_code || '=' ||
                                              vn_price_to_base_fw_exch_rate || ' ' ||
                                              vc_base_cur_code
         where t.process_id = pc_process_id
           and t.mc_price_unit_cur_id =
               cur_price_ex_rate.mc_price_unit_cur_id;
      
      end if;
    
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process sp_calc_invm_cogs',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace ||
                                                           'No ' ||
                                                           vc_error_msg,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_calc_gmr_sec_cost(pc_corporate_id varchar2,
                                 pc_process_id   varchar2,
                                 pc_user_id      varchar2,
                                 pd_trade_date   date,
                                 pc_process      varchar2) is
    vobj_error_log                tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count            number := 1;
    vc_error_msg                  varchar2(5) := '0';
    vn_qty_conv_price_to_stock    number;
    vn_qty_conv_stock_to_base     number;
    vn_fw_exch_rate_trans_to_base number;
    vn_forward_points             number;
    vc_exch_rate_string           varchar2(25);
  begin
  
    insert into tgsc_temp_gmr_sec_cost
      (corporate_id,
       process_id,
       internal_cost_id,
       cost_type,
       internal_grd_ref_no,
       internal_gmr_ref_no,
       product_id,
       base_qty_unit_id,
       base_qty_unit,
       grd_current_qty,
       grd_qty_unit_id,
       cost_value,
       transformation_ratio,
       transaction_price_unit_id,
       transaction_cur_factor,
       transaction_amt_cur_id,
       transaction_amt_main_cur_id,
       base_cur_id,
       base_cur_code,
       base_price_unit_id,
       price_qty_unit_id,
       price_weight,
       price_to_stock_wt_conversion,
       stock_to_base_wt_conversion,
       transact_to_base_fw_exch_rate,
       base_price_unit_id_in_ppu,
       transact_amt_sign,
       payment_due_date)
    -- 
    -- Section 1
    -- Purchase GMR Shipped But Not TT Query Start
    --
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             grd.internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Accrual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(grd.inventory_status, 'NA') = 'NA'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             grd.internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Actual'
         and cs.cost_ref_no in
             (select distinct cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_ref_no = cs.cost_ref_no
                 and cs_in.cost_type = 'Actual'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.is_deleted = 'N'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(grd.inventory_status, 'NA') = 'NA'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             grd.internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Direct Actual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_direct_actual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(grd.inventory_status, 'NA') = 'NA'
         and grd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             grd.internal_grd_ref_no,
             grd.internal_gmr_ref_no,
             grd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             grd.current_qty,
             grd.qty_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from grd_goods_record_detail     grd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.product_id = pc_process_id
         and gmr.internal_gmr_ref_no = grd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = grd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Reversal'
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and grd.is_deleted = 'N'
         and grd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and grd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and grd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = grd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_over_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(grd.inventory_status, 'NA') = 'NA'
         and grd.tolling_stock_type = 'None Tolling'
      --
      -- Purchase GMR Shipped But Not TT Query End
      --
      -- Section 2
      -- Sales GMR Shipped But Not TT Starts Here
      --
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Accrual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(dgrd.inventory_status, 'NA') in ('NA', 'None')
         and dgrd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Actual'
         and cs.cost_ref_no in
             (select distinct cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_ref_no = cs.cost_ref_no
                 and cs_in.cost_type = 'Actual'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.is_deleted = 'N'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(dgrd.inventory_status, 'NA') in ('NA', 'None')
         and dgrd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Direct Actual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_direct_actual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(dgrd.inventory_status, 'NA') in ('NA', 'None')
         and dgrd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             1,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.product_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Reversal'
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_over_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and nvl(dgrd.inventory_status, 'NA') in ('NA', 'None')
         and dgrd.tolling_stock_type = 'None Tolling'
      
      -- Sales GMR Shipped But Not TT Ends Here
      -- 
      -- Section 3
      -- Sales GMR Inventory Out Starts Here
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             scmt.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr,
             scm_stock_cost_mapping      scmt
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Accrual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and dgrd.inventory_status = 'Out'
         and scmt.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and scmt.cog_ref_no = cigc.cog_ref_no
         and scmt.is_deleted = 'N'
         and dgrd.tolling_stock_type = 'None Tolling'
      
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             scmt.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             1,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr,
             scm_stock_cost_mapping      scmt
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Actual'
         and cs.cost_ref_no in
             (select distinct cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_ref_no = cs.cost_ref_no
                 and cs_in.cost_type = 'Actual'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.is_deleted = 'N'
                 and cs_in.process_id = pc_process_id)
         and cs.is_deleted = 'N'
         and cpm.corporate_id = pc_corporate_id
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_under_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and dgrd.inventory_status = 'Out'
         and scmt.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and scmt.cog_ref_no = cigc.cog_ref_no
         and scmt.is_deleted = 'N'
         and dgrd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             scmt.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr,
             scm_stock_cost_mapping      scmt
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Direct Actual'
         and cs.cost_ref_no not in
             (select cs_in.cost_ref_no
                from cs_cost_store cs_in
               where cs_in.cost_type = 'Actual'
                 and cs_in.is_deleted = 'N'
                 and cs_in.is_actual_posted_in_cog = 'Y'
                 and cs_in.process_id = pc_process_id)
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_direct_actual = 'Y'
         and cs.income_expense = 'Expense'
         and dgrd.inventory_status = 'Out'
         and scmt.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and scmt.cog_ref_no = cigc.cog_ref_no
         and scmt.is_deleted = 'N'
         and dgrd.tolling_stock_type = 'None Tolling'
      union all
      select pc_corporate_id,
             pc_process_id,
             cs.internal_cost_id,
             'Secondary Cost' cost_type,
             dgrd.internal_dgrd_ref_no,
             dgrd.internal_gmr_ref_no,
             dgrd.product_id,
             pum_base.weight_unit_id,
             qum.qty_unit,
             dgrd.current_qty,
             dgrd.net_weight_unit_id,
             cs.cost_value,
             scmt.transformation_ratio,
             cs.transaction_price_unit_id,
             nvl(scd.factor, 1),
             cs.transaction_amt_cur_id,
             nvl(scd.cur_id, cs.transaction_amt_cur_id),
             akc.base_cur_id,
             cm.cur_code,
             pum_base.price_unit_id as base_price_unit_id,
             pum_trans.weight_unit_id as price_weight_unit_id,
             nvl(pum_trans.weight, 1),
             1,
             1,
             1,
             ppu.product_price_unit_id,
             cs.transact_amt_sign,
             nvl(cs.est_payment_due_date, pd_trade_date)
        from dgrd_delivered_grd          dgrd,
             cigc_contract_item_gmr_cost cigc,
             cs_cost_store               cs,
             cpm_corporateproductmaster  cpm,
             scm_service_charge_master   scms,
             pdm_productmaster           pdm,
             ak_corporate                akc,
             pum_price_unit_master       pum_base,
             scd_sub_currency_detail     scd,
             pum_price_unit_master       pum_trans,
             v_ppu_pum                   ppu,
             qum_quantity_unit_master    qum,
             cm_currency_master          cm,
             gmr_goods_movement_record   gmr,
             scm_stock_cost_mapping      scmt
       where cigc.internal_gmr_ref_no = gmr.internal_gmr_ref_no
         and gmr.process_id = pc_process_id
         and gmr.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and cigc.cog_ref_no = cs.cog_ref_no
         and cpm.product_id = dgrd.product_id
         and cs.cost_component_id = scms.cost_id
         and scms.cost_type = 'SECONDARY_COST'
         and cs.cost_type = 'Reversal'
         and cpm.corporate_id = pc_corporate_id
         and cs.is_deleted = 'N'
         and cigc.is_deleted = 'N'
         and dgrd.status = 'Active'
         and dgrd.product_id = pdm.product_id
         and cpm.corporate_id = akc.corporate_id
         and pum_base.cur_id = akc.base_cur_id
         and pum_base.weight_unit_id = pdm.base_quantity_unit
         and pum_base.is_active = 'Y'
         and pum_base.is_deleted = 'N'
         and cs.transaction_amt_cur_id = scd.sub_cur_id(+)
         and dgrd.process_id = pc_process_id
         and cs.process_id = pc_process_id
         and cigc.process_id = pc_process_id
         and cs.transaction_price_unit_id = pum_trans.price_unit_id
         and pum_trans.is_active = 'Y'
         and pum_trans.is_deleted = 'N'
         and dgrd.current_qty <> 0
         and ppu.price_unit_id = pum_base.price_unit_id
         and ppu.product_id = dgrd.product_id
         and pum_base.weight_unit_id = qum.qty_unit_id
         and akc.base_cur_id = cm.cur_id
         and cs.reversal_type = 'CONTRACT'
         and cs.acc_original_accrual = 'Y'
         and cs.acc_over_accrual = 'Y'
         and cs.income_expense = 'Expense'
         and dgrd.inventory_status = 'Out'
         and scmt.internal_gmr_ref_no = dgrd.internal_gmr_ref_no
         and scmt.cog_ref_no = cigc.cog_ref_no
         and scmt.is_deleted = 'N'
         and dgrd.tolling_stock_type = 'None Tolling';
    -- Sales GMR Inventory Out Ends Here
    --
    -- Quantity Conversion from Price Weight Unit to Stock Weight Unit
    --         
    for cur_conv1 in (select t.product_id,
                             t.price_qty_unit_id,
                             t.grd_qty_unit_id
                        from tgsc_temp_gmr_sec_cost t
                       where t.process_id = pc_process_id
                         and t.price_qty_unit_id <> t.grd_qty_unit_id
                       group by t.price_qty_unit_id,
                                t.grd_qty_unit_id,
                                t.product_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_conv1.product_id,
                                                  cur_conv1.price_qty_unit_id,
                                                  cur_conv1.grd_qty_unit_id,
                                                  1)
        into vn_qty_conv_price_to_stock
        from dual;
      update tgsc_temp_gmr_sec_cost t
         set t.price_to_stock_wt_conversion = vn_qty_conv_price_to_stock
       where t.price_qty_unit_id = cur_conv1.price_qty_unit_id
         and t.grd_qty_unit_id = cur_conv1.grd_qty_unit_id
         and t.product_id = cur_conv1.product_id
         and t.process_id = pc_process_id;
    end loop;
    --
    -- Quantity Conversion from Stock Weight Unit to Product Base Unit
    --
    for cur_conv2 in (select t.product_id,
                             t.grd_qty_unit_id,
                             t.base_qty_unit_id
                        from tgsc_temp_gmr_sec_cost t
                       where t.grd_qty_unit_id <> t.base_qty_unit_id
                         and t.process_id = pc_process_id
                       group by t.product_id,
                                t.grd_qty_unit_id,
                                t.base_qty_unit_id)
    loop
      select pkg_general.f_get_converted_quantity(cur_conv2.product_id,
                                                  cur_conv2.grd_qty_unit_id,
                                                  cur_conv2.base_qty_unit_id,
                                                  1)
        into vn_qty_conv_stock_to_base
        from dual;
      update tgsc_temp_gmr_sec_cost t
         set t.price_to_stock_wt_conversion = vn_qty_conv_stock_to_base
       where t.base_qty_unit_id = cur_conv2.base_qty_unit_id
         and t.grd_qty_unit_id = cur_conv2.grd_qty_unit_id
         and t.product_id = cur_conv2.product_id
         and t.process_id = pc_process_id;
    end loop;
    --
    -- Value in Transaction Currency
    --    
    update tgsc_temp_gmr_sec_cost t
       set t.value_in_transact_currency = t.cost_value *
                                          t.transaction_cur_factor *
                                          t.price_to_stock_wt_conversion *
                                          t.grd_current_qty *
                                          t.transformation_ratio /
                                          t.price_weight
     where t.process_id = pc_process_id;
  
    --
    -- Get the Exchange Rate from Transaction Main Currency to Base Currency
    --
    for cur_exch_rate in (select t.transaction_amt_main_cur_id,
                                 t.base_cur_id,
                                 cm_base.cur_code base_cur_code,
                                 cm_trans.cur_code transaction_amt_main_cur_code,
                                 t.payment_due_date
                            from tgsc_temp_gmr_sec_cost t,
                                 cm_currency_master     cm_trans,
                                 cm_currency_master     cm_base
                           where t.transaction_amt_main_cur_id <>
                                 t.base_cur_id
                             and t.process_id = pc_process_id
                             and t.transaction_amt_main_cur_id =
                                 cm_trans.cur_id
                             and t.base_cur_id = cm_base.cur_id
                           group by t.transaction_amt_main_cur_id,
                                    t.base_cur_id,
                                    cm_base.cur_code,
                                    cm_trans.cur_code,
                                    t.payment_due_date)
    loop
      pkg_general.sp_bank_fx_rate(pc_corporate_id,
                                  pd_trade_date,
                                  cur_exch_rate.payment_due_date,
                                  cur_exch_rate.transaction_amt_main_cur_id,
                                  cur_exch_rate.base_cur_id,
                                  30,
                                  'procedure pkg_phy_calculate_cog.sp_calc_gms_sec_cost',
                                  pc_process,
                                  vn_fw_exch_rate_trans_to_base,
                                  vn_forward_points);
    
      update tgsc_temp_gmr_sec_cost t
         set t.trans_to_base_fw_exch_rate    = '1 ' ||
                                               cur_exch_rate.transaction_amt_main_cur_code || '=' ||
                                               vn_fw_exch_rate_trans_to_base || ' ' ||
                                               cur_exch_rate.base_cur_code,
             t.transact_to_base_fw_exch_rate = vn_fw_exch_rate_trans_to_base
       where t.process_id = pc_process_id
         and t.transaction_amt_main_cur_id =
             cur_exch_rate.transaction_amt_main_cur_id;
    
    end loop;
  
    --
    -- Update Value in Base and Avg Cost in Base Price Unit
    --
  
    update tgsc_temp_gmr_sec_cost t
       set t.value_in_base_currency = t.value_in_transact_currency *
                                      t.transact_to_base_fw_exch_rate *
                                      t.transact_amt_sign,
           t.avg_cost               = (t.transact_amt_sign *
                                      t.value_in_transact_currency *
                                      t.transact_to_base_fw_exch_rate) /
                                      (t.stock_to_base_wt_conversion *
                                      t.grd_current_qty)
     where t.process_id = pc_process_id;
    --
    -- All calculations done and ready with data into invm_cog
    --
    insert into gscs_gmr_sec_cost_summary
      (process_id, internal_gmr_ref_no, avg_cost_fw_rate, fw_rate_string)
      select pc_process_id,
             internal_gmr_ref_no,
             nvl(sum(secondary_cost_per_unit), 0),
             f_string_aggregate(accrual_to_base_fw_exch_rate)
      
        from (select t.internal_gmr_ref_no,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.avg_cost
                       else
                        0
                     end as secondary_cost_per_unit,
                     case
                       when t.cost_type = 'Secondary Cost' then
                        t.trans_to_base_fw_exch_rate
                       else
                        null
                     end as accrual_to_base_fw_exch_rate
                from tgsc_temp_gmr_sec_cost t
               where t.process_id = pc_process_id) t
       group by internal_gmr_ref_no;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure pkg_phy_physical_process sp_calc_gmr_sec_cost',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           dbms_utility.format_error_backtrace ||
                                                           'No ' ||
                                                           vc_error_msg,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;
end; 
/
