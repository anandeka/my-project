alter  table DIM_DAILY_INITIAL_MARGIN modify NO_OF_LOTS number(20);
alter  table DIM_DAILY_INITIAL_MARGIN modify LONG_LOTS  number(20);
alter  table DIM_DAILY_INITIAL_MARGIN modify SHORT_LOTS  number(20);
alter table DCOH_DER_CLOSEOUT_HEADER  modify TOT_LOTS_CLOSED number(20);
alter table DT_DERIVATIVE_TRADE modify  TOTAL_LOTS number(20);
alter table DT_DERIVATIVE_TRADE modify OPEN_LOTS number(20);
alter table DT_DERIVATIVE_TRADE modify EXERCISED_LOTS number(20);
alter table DT_DERIVATIVE_TRADE modify EXPIRED_LOTS number(20);
alter table DT_DERIVATIVE_TRADE modify CLOSED_LOTS number(20);
alter table DT_DERIVATIVE_TRADE modify TOTAL_LOTS_CLOSED number(20);
alter table BMU_BROKER_MARGIN_UTILIZATION modify NO_OF_LOTS number(20);
alter table BMU_BROKER_MARGIN_UTILIZATION modify NET_NO_OF_LOTS number(20);
alter table BMU_BROKER_MARGIN_UTILIZATION modify GROSS_NO_OF_LOTS number(20);
alter table BMU_BROKER_MARGIN_UTILIZATION modify OPEN_NO_OF_LOTS number(20);
alter table DPD_DERIVATIVE_PNL_DAILY add (prev_settlement_price number);

create or replace package "PKG_CDC_PRE_CHECK_PROCESS" is

  -- author  : siva
  -- created :
  -- purpose : pre check data for eod and eom
  gvc_dbd_id varchar2(15);

  gvc_process varchar2(3);

  procedure sp_pre_check(pc_corporate_id varchar2,
                         pd_trade_date   date,
                         pc_user_id      varchar2,
                         pc_process      varchar2);

  procedure sp_pre_check_corp_fx_rate(pc_corporate_id varchar2,
                                      pd_trade_date   date,
                                      pc_user_id      varchar2,
                                      pc_process      varchar2);

  procedure sp_pre_check_derivatives(pc_corporate_id varchar2,
                                     pd_trade_date   date,
                                     pc_user_id      varchar2,
                                     pc_process      varchar2);

  procedure sp_pre_check_swap_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2);

  procedure sp_pre_check_currency(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2,
                                  pc_dbd_id       varchar2);
  procedure sp_record_expired_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_process_id   varchar2);
  procedure sp_record_expired_currency(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_process_id   varchar2);

  procedure sp_pre_check_gather_stats;

end; 
/
create or replace package body "PKG_CDC_PRE_CHECK_PROCESS" is

  procedure sp_pre_check
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_pre_check
    --        author                                    : janna
    --        created date                              : 20th jan 2009
    --        purpose                                   : calls all precheck packages
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pd_trade_date                             : trade date
    --        pc_user_id                                : user id
    --        pc_process                                : process eod or eom
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 100;
  begin
    gvc_process := pc_process;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    select max(dbd.dbd_id)
      into gvc_dbd_id
      from dbd_database_dump dbd
     where dbd.corporate_id = pc_corporate_id
       and dbd.process = pc_process
       and dbd.trade_date = pd_trade_date;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_corp_fx_rate');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_corp_fx_rate(pc_corporate_id,
                              pd_trade_date,
                              pc_user_id,
                              pc_process);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'inside sp_pre_check process !!!!');
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_derivatives');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_derivatives(pc_corporate_id,
                             pd_trade_date,
                             pc_user_id,
                             pc_process);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_currency');
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_currency(pc_corporate_id,
                          pd_trade_date,
                          pc_user_id,
                          pc_process,
                          gvc_dbd_id);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_swap_derivatives');
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_swap_derivatives(pc_corporate_id,
                                  pd_trade_date,
                                  pc_user_id,
                                  pc_process,
                                  gvc_dbd_id);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_gather_stats');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_gather_stats;
  
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while pnl calculation');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_corp_fx_rate(pc_corporate_id varchar2,
                                      pd_trade_date   date,
                                      pc_user_id      varchar2,
                                      pc_process      varchar2) is
    pragma autonomous_transaction;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_error_string    varchar2(1000);
  
    cursor cur_currency is
      select cm.cur_id,
             cm.cur_code,
             akc.base_cur_id,
             akc.base_currency_name
        from cm_currency_master cm,
             ak_corporate       akc
       where akc.corporate_id = pc_corporate_id
         and cm.is_sub_cur = 'N';
  
  begin
    for cur_currency_rows in cur_currency
    loop
      if pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                  cur_currency_rows.base_cur_id,
                                                  cur_currency_rows.cur_id,
                                                  pd_trade_date,
                                                  1) = -1 then
        vc_error_string := vc_error_string || cur_currency_rows.cur_code || ',';
      end if;
    end loop;
    if length(vc_error_string) > 1 then
      vc_error_string := substr(vc_error_string,
                                1,
                                length(vc_error_string) - 1);
    
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_corp_fx_rate',
                                                           'PHY-003',
                                                           vc_error_string,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
    end if;
  end;
  procedure sp_pre_check_derivatives(pc_corporate_id varchar2,
                                     pd_trade_date   date,
                                     pc_user_id      varchar2,
                                     pc_process      varchar2) is
    pragma autonomous_transaction;
    /******************************************************************************************************************************************
    procedure name                            : sp_pre_check_derivatives
    author                                    : janna
    created date                              : 11th jan 2009
    purpose                                   : pre check for derivativ trades
    
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_user_id                                : user id
    pc_process                                : process
    
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_position_check  varchar2(100);
    vc_error_type      varchar2(7);
    vc_dbd_id          varchar2(20);
  
    cursor cur_3rd_wed is
      select drm.dr_id,
             drm.instrument_id,
             dt.average_to_date,
             dt.derivative_ref_no,
             div.price_source_id,
             div.available_price_id,
             dim.underlying_instrument_id,
             ps.price_source_name,
             apm.available_price_name,
             div.price_unit_id,
             pum.price_unit_name,
             dim_underlying.instrument_name,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable
        from dt_derivative_trade          dt,
             drm_derivative_master        drm,
             dim_der_instrument_master    dim,
             irm_instrument_type_master   irm,
             div_der_instrument_valuation div,
             ps_price_source              ps,
             apm_available_price_master   apm,
             pum_price_unit_master        pum,
             dim_der_instrument_master    dim_underlying,
             pdc_prompt_delivery_calendar pdc
       where dt.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.instrument_type_id = irm.instrument_type_id
         and irm.instrument_type = 'Average'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dim.underlying_instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and dt.dbd_id = vc_dbd_id
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and div.price_source_id = ps.price_source_id
         and div.available_price_id = apm.available_price_id
         and div.price_unit_id = pum.price_unit_id
         and div.instrument_id = dim_underlying.instrument_id
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+);
    vc_caluclate_val_dr_id varchar2(30);
    vd_3rd_wed_of_qp       varchar2(15);
    workings_days          number;
    vd_quotes_date         date;
    vc_calculate_price     number;
    vc_dr_id_name          varchar2(30);
    vc_prompt_date         date;
    vc_prompt_month        varchar2(15);
    vc_prompt_year         number;
  
  begin
    -- get the dump id
    select max((dbd.dbd_id))
      into vc_dbd_id
      from dbd_database_dump dbd
     where corporate_id = pc_corporate_id
       and process = pc_process
       and trade_date = pd_trade_date;
    gvc_dbd_id := vc_dbd_id;
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_pre_check_derivatives',
                 pc_process || ' - M2M-025 @' || systimestamp);
  
    -- check all the quotes entry insurments price source with valuation price source
    --TODO - Siva - If both are not matching we have raise error.
    insert into eel_eod_eom_exception_log
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-025',
             t.instrument_name,
             null,
             pc_process,
             systimestamp,
             pc_user_id,
             null,
             pd_trade_date
        from (select stragg(dim.instrument_name) instrument_name
                from dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and pdm.product_asset_class = 'Commodity'
                 and dim.is_currency_curve = 'N'
                 and dim.is_active = 'Y'
                 and dim.is_deleted = 'N'
                 and pdm.is_active = 'Y'
                 and pdm.is_deleted = 'N'
                 and not exists
               (select *
                        from div_der_instrument_valuation div
                       where div.instrument_id = dim.instrument_id
                         and div.is_deleted = 'N'
                         and div.price_source_id is not null)) t
       where t.instrument_name is not null;
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_pre_check_derivatives',
                 pc_process || ' - M2M-001 @' || systimestamp);
  
    -- check all the derivative deals existing in the system are verified
    insert into eel_eod_eom_exception_log
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-001',
             'Following derivative trades are not verified',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             drt.dr_id,
             pd_trade_date
        from dt_derivative_trade drt
       where drt.status = 'None'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.trade_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id;
    -- check settlement price should be avaialble for all open future trades as on eod
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-002',
             t.available_price_name || ' Price for' || ' ' ||
             t.instrument_name || ' ' || 'is missing; ' || 'Trade Date :' ||
             to_char(t.valid_quote_date, 'dd-Mon-yyyy') || ' ' ||
             'Price Source :' || t.price_source_name || ' ' ||
             'Price Unit :' || t.price_unit_name || ' ' || 'Prompt Date :' ||
             t.dr_id_name,
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null, -- t.dr_id,
             pd_trade_date
        from (select drt.dr_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     dim.instrument_name,
                     drm.dr_id_name,
                     ps.price_source_name,
                     cdim.valid_quote_date
                from dt_derivative_trade          drt,
                     pdd_product_derivative_def   pdd,
                     drm_derivative_master        drm,
                     dim_der_instrument_master    dim,
                     irm_instrument_type_master   irm,
                     div_der_instrument_valuation div,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     ps_price_source              ps,
                     cdim_corporate_dim           cdim
               where drt.dr_id = drm.dr_id
                 and drt.corporate_id = pc_corporate_id
                 and drm.instrument_id = dim.instrument_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Future', 'Forward')
                 and drt.status = 'Verified'
                 and drt.is_what_if = 'N'
                 and dim.is_active='Y'
                 and drt.trade_price_type_id in
                     ('Fixed', 'Index', 'Formula')
                 and dim.instrument_id = div.instrument_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id(+)
                 and div.price_source_id = ps.price_source_id
                 and div.is_deleted = 'N'
                 and drt.open_quantity > 0
                 and drt.trade_date <= pd_trade_date
                 and drt.dbd_id = vc_dbd_id
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = drm.instrument_id
                 and not exists
               (select edi.dr_id
                        from edi_expired_dr_id edi
                       where edi.corporate_id = pc_corporate_id
                         and edi.process = pc_process
                         and edi.dr_id = drt.dr_id)
                 and not exists
               (select drt.dr_id
                        from eodeom_derivative_quote_detail edq,
                             cdim_corporate_dim             cdim
                       where edq.eodeom_trade_date = pd_trade_date
                         and edq.dq_trade_date = cdim.valid_quote_date
                         and edq.price <> 0
                         and edq.corporate_id = drt.corporate_id
                         and edq.dr_id = drt.dr_id
                         and edq.available_price_id = div.available_price_id
                         and edq.price_unit_id = div.price_unit_id
                         and cdim.corporate_id = pc_corporate_id
                         and cdim.instrument_id = edq.instrument_id
                            -- and apm.available_price_name = 'Settlement'
                            --  and apm.is_active = 'Y'
                            --   and apm.is_deleted = 'N'
                         and edq.dbd_id = vc_dbd_id
                       group by drt.dr_id)
               group by drt.dr_id,
                        apm.available_price_name,
                        pum.price_unit_name,
                        dim.instrument_name,
                        drm.dr_id_name,
                        ps.price_source_name,
                        cdim.valid_quote_date) t
       group by t.dr_id,
                t.available_price_name,
                t.price_unit_name,
                t.instrument_name,
                t.dr_id_name,
                t.price_source_name,
                t.valid_quote_date;
    -- check settlement price should be avaialble for all open option trades as on eod
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-003',
             instrument_type || ' ' || t.dr_id_name || ' @ ' ||
             t.strike_price || ' ' || ppu.price_unit_name || '( ' ||
             t.available_price_name || ' Price in ' || t.price_unit_name || ')' ||
             'Price Source:' || t.price_source_name || ' Trade Date :' ||
             to_char(t.valid_quote_date, 'dd-Mon-yyyy'),
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null, --t.dr_id,
             pd_trade_date
        from pum_price_unit_master ppu,
             qum_quantity_unit_master qum,
             cm_currency_master cm,
             (select drt.dr_id,
                     dim.instrument_name instrument_type,
                     drt.strike_price,
                     drt.strike_price_unit_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     drm.dr_id_name,
                     ps.price_source_name,
                     cdim.valid_quote_date
                from dt_derivative_trade          drt,
                     pdd_product_derivative_def   pdd,
                     drm_derivative_master        drm,
                     dim_der_instrument_master    dim,
                     irm_instrument_type_master   irm,
                     div_der_instrument_valuation div,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     ps_price_source              ps,
                     cdim_corporate_dim           cdim
               where drt.corporate_id = pc_corporate_id
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and drt.dbd_id = vc_dbd_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id(+)
                 and div.price_source_id = ps.price_source_id
                 and drt.status = 'Verified'
                 and drt.is_what_if = 'N'
                 and drt.open_quantity > 0
                 and drt.trade_date <= pd_trade_date
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = drm.instrument_id
                 and not exists
               (select edi.dr_id
                        from edi_expired_dr_id edi
                       where edi.corporate_id = pc_corporate_id
                         and edi.process = pc_process
                         and edi.dr_id = drt.dr_id)
                 and drt.dr_id not in
                     (select drt.dr_id
                        from eodeom_derivative_quote_detail edq,
                             cdim_corporate_dim             cdim
                       where drt.corporate_id = pc_corporate_id
                         and drt.trade_date <= pd_trade_date
                         and edq.eodeom_trade_date = pd_trade_date
                         and edq.dq_trade_date = cdim.valid_quote_date
                         and drt.status = 'Verified'
                         and edq.price <> 0
                         and drt.dr_id = edq.dr_id
                         and edq.available_price_id = div.available_price_id
                         and edq.price_unit_id = div.price_unit_id
                         and edq.price_source_id = div.price_source_id
                         and drt.dbd_id = vc_dbd_id
                         and drt.corporate_id = edq.corporate_id
                         and cdim.corporate_id = pc_corporate_id
                         and cdim.instrument_id = edq.instrument_id)) t
       where t.strike_price_unit_id = ppu.price_unit_id
         and ppu.weight_unit_id = qum.qty_unit_id
         and ppu.cur_id = cm.cur_id
       group by instrument_type,
                t.strike_price,
                ppu.price_unit_name,
                cm.cur_code,
                ppu.weight,
                qum.qty_unit,
                t.available_price_name,
                t.price_unit_name,
                t.dr_id,
                t.dr_id_name,
                t.price_source_name,
                t.valid_quote_date;
    -- check settlement price should be available for all closed trades as on eod
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-002',
             'Settlement Price for Close out date is missing,' ||
             t.instrument_name || ',' || t.dr_id_name || ' Close out date:' ||
             t.close_out_date || '( ' || t.available_price_name || ',' ||
             t.price_unit_name || ')',
             stragg(t.derivative_ref_no) derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null,
             pd_trade_date
        from (select drt.dr_id,
                     dim.instrument_name,
                     drm.dr_id_name,
                     dcoh.close_out_date,
                     drt.derivative_ref_no,
                     apm.available_price_name,
                     pum.price_unit_name
                from dt_derivative_trade          drt,
                     pdd_product_derivative_def   pdd,
                     drm_derivative_master        drm,
                     dim_der_instrument_master    dim,
                     irm_instrument_type_master   irm,
                     div_der_instrument_valuation div,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     dcoh_der_closeout_header     dcoh,
                     dcod_der_closeout_detail     dcod
               where drt.dr_id = drm.dr_id
                 and drt.corporate_id = pc_corporate_id
                 and drm.instrument_id = dim.instrument_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                    --and    irm.instrument_type_id = 'irmf'
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id(+)
                 and drt.trade_date <= pd_trade_date
                 and drt.dbd_id = vc_dbd_id
                 and drt.is_what_if = 'N'
                 and drt.internal_derivative_ref_no =
                     dcod.internal_derivative_ref_no
                 and dcod.internal_close_out_ref_no =
                     dcoh.internal_close_out_ref_no
                 and dcoh.close_out_date <= pd_trade_date
                    --and    dcoh.dbd_id = vc_dbd_id
                 and dcoh.is_rolled_back = 'N'
                 and not exists
               (select drt.dr_id
                        from dq_derivative_quotes        dq,
                             dqd_derivative_quote_detail dqd
                       where dq.dq_id = dqd.dq_id
                         and dq.dbd_id = dqd.dbd_id
                         and dq.trade_date = dcoh.valid_closeout_date
                         and dqd.price <> 0
                         and dqd.dr_id = drt.dr_id
                         and dq.corporate_id = drt.corporate_id
                         and upper(dq.entry_type) = upper(pdd.traded_on)
                         and dq.instrument_id = dim.instrument_id
                         and dqd.available_price_id = div.available_price_id
                         and dqd.price_unit_id = div.price_unit_id
                         and dq.dbd_id = vc_dbd_id
                      
                      )
               group by drt.dr_id,
                        dcoh.close_out_date,
                        drt.derivative_ref_no,
                        dim.instrument_name,
                        drm.dr_id_name,
                        apm.available_price_name,
                        pum.price_unit_name) t
       group by t.instrument_name,
                t.dr_id_name,
                t.available_price_name,
                t.price_unit_name,
                t.close_out_date;
    /* not required since for expired/exercised, we dont use market rates
    -- check settlement price should be avaialble for all exercised/expired trades as on eod
    insert into eel_eod_eom_exception_log eel
        (corporate_id,
         submodule_name,
         exception_code,
         data_missing_for,
         trade_ref_no,
         process,
         process_run_date,
         process_run_by,
         dr_id,
         trade_date)
        select pc_corporate_id,
               'derivatives pre-check',
               'm2m-003', --preeti check for code
               instrument_type || ' @ ' || t.strike_price || ' ' ||
               cm.cur_code || '/' || ppu.weight || qum.qty_unit,
               null as derivative_ref_no,
               pc_process,
               systimestamp,
               pc_user_id,
               t.dr_id,
               pd_trade_date
        from   ppu_product_price_units ppu,
               qum_quantity_unit_master qum,
               cm_currency_master cm,
               (select drt.dr_id,
                       irm.instrument_type,
                       drt.strike_price,
                       drt.strike_price_unit_id
                from   drt_derivative_trade       drt,
                       pdd_product_derivative_def pdd,
                       drm_derivative_master      drm,
                       dim_der_instrument_master  dim,
                       irm_instrument_type_master irm
                where  drt.corporate_id = pc_corporate_id
                and    drt.dr_id = drm.dr_id
                and    drm.instrument_id = dim.instrument_id
                and    drt.dbd_id = vc_dbd_id
                and    pdd.derivative_def_id = dim.derivative_def_id
                and    irm.instrument_type_id = dim.instrument_type_id
                and    irm.instrument_type_id in
                       ('irmco', 'irmpo', 'irmotco', 'irmotpo')
                and    drt.status in ('exercised','expired')
                --and    drt.open_quantity > 0
                and    drt.trade_date <= pd_trade_date
                and    drt.dr_id not in
                       (select drt.dr_id
                         from   drt_derivative_trade drt,
                                dq_derivative_quotes dq
                         where  drt.corporate_id = pc_corporate_id
                         and    drt.trade_date <= pd_trade_date
                         and    dq.trade_date = drt.exercised_expired_date
                         and    drt.status in ('exercised','expired')
                         and    dq.settlement_price <> 0
                         and    dq.dr_id = drt.dr_id
                         and    dq.dbd_id = drt.dbd_id
                         and    dq.dbd_id = vc_dbd_id
                         and    dq.corporate_id = drt.corporate_id)) t
        where  t.strike_price_unit_id = ppu.price_unit_id
        and    ppu.weight_unit_id = qum.qty_unit_id
        and    ppu.cur_id = cm.cur_id
        group  by instrument_type,
                  t.strike_price,
                  cm.cur_code,
                  ppu.weight,
                  qum.qty_unit,
                  dr_id;
     */
    -- check for trades beyond expiry date which are still open and throw error
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-023',
             'Following derivative trades are not closed/expired/exercised',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             drt.dr_id,
             pd_trade_date,
             'Error'
        from dt_derivative_trade   drt,
             drm_derivative_master drm
       where drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.trade_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id
         and drt.dr_id = drm.dr_id
         and drm.expiry_date <= pd_trade_date;
    -- check for trades beyond first notice date which are still open and warn
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-023',
             'Following derivative trades are not closed/expired/exercised',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             drt.dr_id,
             pd_trade_date,
             'Warning'
        from dt_derivative_trade   drt,
             drm_derivative_master drm
       where drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.trade_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id
         and drt.dr_id = drm.dr_id
         and drm.first_notice_date <= pd_trade_date
         and drm.expiry_date > pd_trade_date;
  
    --  Check to identify whether the Average Trades available in the System are Settled:
  
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-027',
             'Following Average trades were not Setteled',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null,
             pd_trade_date,
             'Error'
        from dt_derivative_trade drt
       where drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.average_to_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id;
  
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-028',
             'Market Premium were missing for the Following Average trades, Prompt Date : ' ||
             drm.dr_id_name || ' (Trade Date : ' ||
             to_char(cdim.valid_quote_date, 'dd-Mon-yyyy') || ' )',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null, -- drt.dr_id,
             pd_trade_date,
             'Error'
        from dt_derivative_trade        drt,
             drm_derivative_master      drm,
             dim_der_instrument_master  dim,
             irm_instrument_type_master irm,
             cdim_corporate_dim         cdim
       where drt.dr_id = drm.dr_id
         and drt.corporate_id = pc_corporate_id
         and drm.instrument_id = dim.instrument_id
         and dim.instrument_type_id = irm.instrument_type_id
         and irm.instrument_type = 'Average'
         and drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.open_quantity > 0
         and drt.trade_date <= pd_trade_date
         and pd_trade_date between drt.average_from_date and
             drt.average_to_date
         and drt.dbd_id = vc_dbd_id
         and cdim.corporate_id = pc_corporate_id
         and cdim.instrument_id = drm.instrument_id
         and not exists
       (select drt.dr_id
                from eodeom_derivative_quote_detail eodeom,
                     cdim_corporate_dim             cdim
               where eodeom.price_source_id = drt.price_source_id
                 and eodeom.available_price_id = drt.available_price_id
                 and eodeom.dr_id = drt.dr_id
                 and eodeom.dbd_id = vc_dbd_id
                 and eodeom.eodeom_trade_date = pd_trade_date
                 and eodeom.dq_trade_date = cdim.valid_quote_date
                 and eodeom.price <> 0
                 and eodeom.corporate_id = pc_corporate_id
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = eodeom.instrument_id);
  
    ---Check to identify the Prompt Date Price Quotes for the Available Average Trades:
  
    for cur_3rd_wed_rows in cur_3rd_wed
    loop
    
      vd_3rd_wed_of_qp := pkg_cdc_derivatives_process.f_get_next_day(cur_3rd_wed_rows.average_to_date,
                                                                     'Wed',
                                                                     3);
      while true
      loop
        if pkg_cdc_derivatives_process.f_is_day_holiday(cur_3rd_wed_rows.underlying_instrument_id,
                                                        vd_3rd_wed_of_qp) then
          vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
        else
          exit;
        end if;
      end loop;
    
      --- get 3rd wednesday  before QP period
      --  Get the quotation date = Trade Date +2 working Days
    
      if vd_3rd_wed_of_qp < pd_trade_date then
        workings_days  := 0;
        vd_quotes_date := pd_trade_date + 1;
        while workings_days <> 2
        loop
          if pkg_cdc_derivatives_process.f_is_day_holiday(cur_3rd_wed_rows.underlying_instrument_id,
                                                          vd_quotes_date) then
            vd_quotes_date := vd_quotes_date + 1;
          else
            workings_days := workings_days + 1;
            if workings_days <> 2 then
              vd_quotes_date := vd_quotes_date + 1;
            end if;
          end if;
        end loop;
        vd_3rd_wed_of_qp := vd_quotes_date;
      end if;
    
      -- Valuation dr_id:
      begin
        select cdim.valid_quote_date
          into vd_quotes_date
          from cdim_corporate_dim cdim
         where cdim.corporate_id = pc_corporate_id
           and cdim.instrument_id =
               cur_3rd_wed_rows.underlying_instrument_id;
      exception
        when others then
          vd_quotes_date := pd_trade_date;
        
      end;
      if cur_3rd_wed_rows.is_daily_cal_applicable = 'Y' then
      begin
        select drm.dr_id,
               drm.dr_id_name
          into vc_caluclate_val_dr_id,
               vc_dr_id_name               
          from drm_derivative_master drm
         where drm.instrument_id =
               cur_3rd_wed_rows.underlying_instrument_id
           and drm.prompt_date = vd_3rd_wed_of_qp
           and drm.price_point_id is null
           and rownum <= 1
           and drm.is_deleted = 'N';
      exception
        when no_data_found then
          vc_caluclate_val_dr_id := null;
      end;
     elsif cur_3rd_wed_rows.is_daily_cal_applicable = 'N' and
                   cur_3rd_wed_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_general.fn_get_next_month_prompt_date(cur_3rd_wed_rows.delivery_calender_id,
                                                                                      cur_3rd_wed_rows.average_to_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
       
     begin
        select drm.dr_id,
               drm.dr_id_name
          into vc_caluclate_val_dr_id,
               vc_dr_id_name               
          from drm_derivative_master drm
         where drm.instrument_id =
               cur_3rd_wed_rows.underlying_instrument_id
           and drm.period_month = vc_prompt_month
           and drm.period_year = vc_prompt_year
           and drm.price_point_id is null
           and rownum <= 1
           and drm.is_deleted = 'N';
      exception
        when no_data_found then
          vc_caluclate_val_dr_id := null;
      end;
      end if;
    
      -- price:
    
      begin
        select eodeom.price
          into vc_calculate_price
          from eodeom_derivative_quote_detail eodeom,
               cdim_corporate_dim             cdim,
               drm_derivative_master          drm
         where eodeom.price_source_id = cur_3rd_wed_rows.price_source_id
           and eodeom.available_price_id =
               cur_3rd_wed_rows.available_price_id
           and eodeom.dr_id = vc_caluclate_val_dr_id
           and eodeom.corporate_id = pc_corporate_id
           and eodeom.dbd_id = vc_dbd_id
           and cdim.corporate_id = pc_corporate_id
           and drm.dr_id = vc_caluclate_val_dr_id
           and drm.instrument_id = cdim.instrument_id
           and eodeom.price_unit_id=cur_3rd_wed_rows.price_unit_id
           and eodeom.dq_trade_date = cdim.valid_quote_date;
      exception
        when no_data_found then
          vc_calculate_price := 0;
      end;
    
      if vc_calculate_price = 0 then
        insert into eel_eod_eom_exception_log eel
          (corporate_id,
           submodule_name,
           exception_code,
           data_missing_for,
           trade_ref_no,
           process,
           process_run_date,
           process_run_by,
           dr_id,
           trade_date,
           error_type)
        values
          (pc_corporate_id,
           'Derivatives Pre-Check',
           'M2M-029',
           'Settlement Price Missing for ' ||
           cur_3rd_wed_rows.instrument_name || ' ' || 'is missing; ' ||
           ' Price Source :' || cur_3rd_wed_rows.price_source_name ||
           ' Price Unit :' || cur_3rd_wed_rows.price_unit_name ||
           ' Prompt Date :' || vc_dr_id_name ||
           ' Trade Date :' || to_char(vd_quotes_date, 'dd-Mon-rrrr'),
           cur_3rd_wed_rows.derivative_ref_no,
           pc_process,
           systimestamp,
           pc_user_id,
           null,
           pd_trade_date,
           'Error');
        null;
      end if;
    end loop;
  
    -- check open position which can be closed out for future and option trades
    -- based on the ccg this might be a error or message
    select position_check
      into vc_position_check
      from ccg_corporateconfig
     where corporateid = pc_corporate_id;
    if vc_position_check <>
       'Allow processing even if position exist which can be closed out' then
      vc_error_type := 'Error';
    else
      vc_error_type := 'Warning';
    end if;
  
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-004',
             'Buy Lots : ' || to_char(t.buy_lots) || '  Sell Lots : ' ||
             to_char(t.sell_lots),
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             t.dr_id,
             pd_trade_date,
             vc_error_type
        from (select drt.dr_id,
                     sum(case
                           when drt.trade_type = 'Buy' then
                            drt.total_lots
                           else
                            0
                         end) as buy_lots,
                     sum(case
                           when drt.trade_type = 'Sell' then
                            drt.total_lots
                           else
                            0
                         end) as sell_lots
                from dt_derivative_trade        drt,
                     pdd_product_derivative_def pdd,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     irm_instrument_type_master irm
               where drt.dbd_id = vc_dbd_id
                 and drt.corporate_id = pc_corporate_id
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and drm.expiry_date <= pd_trade_date
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in
                     ('Future', 'Forward', 'Option Put', 'Option Call')
                 and drt.status = 'Verified'
                 and drt.is_what_if = 'N'
                 and drt.trade_date <= pd_trade_date
               group by drt.dr_id
              having sum(case when drt.trade_type = 'Buy' then drt.total_lots else 0 end) <> 0 and sum(case when drt.trade_type = 'Sell' then drt.total_lots else 0 end) <> 0) t;
    commit;
  exception
    when others then
      rollback;
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_derivatives',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_swap_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2) is
  
    cursor cur_swap_index is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_1 swap_type,
             dt.swap_trade_price_type_1 swap_trade_price_type,
             dt.swap_float_type_1 swap_float_type,
             dt.swap_trade_price_1 swap_trade_price,
             dt.swap_trade_price_unit_id_1 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_1 swap_index_instrument_id,
             dt.swap_formula_id_1 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade dt,
             dt_fbi              dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.swap_trade_price_type_1 = 'Floating'
         and dt.swap_float_type_1 = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dtfbi.is_deleted = 'N'
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
      union all
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_2 swap_type,
             dt.swap_trade_price_type_2 swap_trade_price_type,
             dt.swap_float_type_2 swap_float_type,
             dt.swap_trade_price_2 swap_trade_price,
             dt.swap_trade_price_unit_id_2 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_2 swap_index_instrument_id,
             dt.swap_formula_id_2 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade dt,
             dt_fbi              dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.swap_trade_price_type_2 = 'Floating'
         and dt.swap_float_type_2 = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dtfbi.is_deleted = 'N'
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id;
    --one reocrds for forward records
    cursor cur_fwd is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.formula_id,
             fbs.formula_internal,
             fbs.formula_display,
             fbs.formula_name,
             fbs.price_unit_id
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs
       where dt.trade_price_type_id = 'Formula'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dt.formula_id = fbs.formula_id
      union all
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dtfbi.instrument_id formula_id,
             '$' || dtfbi.instrument_id || '$' formula_internal,
             'Test' formula_display,
             'Test' formula_name,
             dtfbi.basis_price_unit_id price_unit_id
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs,
             dt_fbi                    dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.trade_price_type_id = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dtfbi.is_deleted = 'N'
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
         and dt.formula_id = fbs.formula_id(+);
  
    cursor cur_fwd_det(pc_internal_derivative_ref_no varchar2) is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.formula_id,
             fbs.formula_internal,
             fbs.formula_display,
             fbs.formula_name,
             --  fbs.formula_id,
             fbs.price_unit_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs,
             dt_fbi                    dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.trade_price_type_id = 'Formula'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
         and dtfbi.is_deleted = 'N'
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.formula_id = fbs.formula_id
      union all
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dtfbi.instrument_id formula_id,
             '$' || dtfbi.instrument_id || '$' formula_internal,
             'Test' formula_display,
             'Test' formula_name,
             dtfbi.basis_price_unit_id price_unit_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs,
             dt_fbi                    dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.trade_price_type_id = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
         and dtfbi.is_deleted = 'N'
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.formula_id = fbs.formula_id(+);
  
    cursor cur_dt is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id
        from dt_derivative_trade dt
       where dt.status = 'Verified'
            --  and dt.internal_derivative_ref_no = '75'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id;
  
    cursor cur_swap_formula_leg1(pc_internal_derivative_ref_no varchar2) is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_1 swap_type,
             dt.swap_trade_price_type_1 swap_trade_price_type,
             dt.swap_float_type_1 swap_float_type,
             dt.swap_trade_price_1 swap_trade_price,
             dt.swap_trade_price_unit_id_1 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_1 swap_index_instrument_id,
             dt.swap_formula_id_1 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_,
             fbs.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             fbs.formula_internal,
             fbs.price_unit_id
        from dt_derivative_trade       dt,
             dt_fbi                    dtfbi,
             fbs_formula_builder_setup fbs
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dtfbi.formula_id = fbs.formula_id
         and dt.swap_formula_id_1 = dtfbi.formula_id
         and dt.swap_trade_price_type_1 = 'Floating'
         and dt.swap_float_type_1 = 'Formula'
         and dt.status = 'Verified'
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.is_what_if = 'N'
         and dtfbi.is_deleted = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id;
  
    cursor cur_swap_formula_leg2(pc_internal_derivative_ref_no varchar2) is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_2 swap_type,
             dt.swap_trade_price_type_2 swap_trade_price_type,
             dt.swap_float_type_2 swap_float_type,
             dt.swap_trade_price_2 swap_trade_price,
             dt.swap_trade_price_unit_id_2 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_2 swap_index_instrument_id,
             dt.swap_formula_id_2 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_,
             fbs.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             fbs.formula_internal,
             fbs.price_unit_id
        from dt_derivative_trade       dt,
             dt_fbi                    dtfbi,
             fbs_formula_builder_setup fbs
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dtfbi.formula_id = fbs.formula_id
         and dt.swap_formula_id_2 = dtfbi.formula_id
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.swap_trade_price_type_2 = 'Floating'
         and dt.swap_float_type_2 = 'Formula'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dtfbi.is_deleted = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id;
  
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vt_tbl_ind_setup          fb_tbl_setup;
    vt_tbl_ind_instrument     fb_tbl_instrument_data;
    vt_tbl_ind_instrument_out fb_tbl_instrument_data;
    vt_tbl_ind_setup_out      fb_tbl_setup;
    vt_fb_tbl_ind_error_out   fb_tbl_error;
    vt_tbl_frm_setup          fb_tbl_setup;
    vt_tbl_frm_instrument     fb_tbl_instrument_data;
    vt_tbl_frm_instrument_out fb_tbl_instrument_data;
    vt_tbl_frm_setup_out      fb_tbl_setup;
    vt_fb_tbl_frm_error_out   fb_tbl_error;
    vn_cur_row_cnt            number;
    vn_fb_order_sq            number := 1;
    --vc_period_month           varchar2(10);
    --vn_period_year            number;
  
  begin
    vt_tbl_frm_setup          := fb_tbl_setup();
    vt_tbl_frm_instrument     := fb_tbl_instrument_data();
    vt_tbl_frm_instrument_out := fb_tbl_instrument_data();
    vt_tbl_frm_setup_out      := fb_tbl_setup();
    vt_fb_tbl_frm_error_out   := fb_tbl_error();
    vt_tbl_ind_setup          := fb_tbl_setup();
    vt_tbl_ind_instrument     := fb_tbl_instrument_data();
    vt_tbl_ind_instrument_out := fb_tbl_instrument_data();
    vt_tbl_ind_setup_out      := fb_tbl_setup();
    vt_fb_tbl_ind_error_out   := fb_tbl_error();
  
    vn_cur_row_cnt := 1;
  
    for cur_swap_index_rows in cur_swap_index
    loop
      vt_tbl_ind_setup.extend;
      vt_tbl_ind_setup(1) := fb_typ_setup(cur_swap_index_rows.instrument_id,
                                          pc_corporate_id,
                                          'index',
                                          'index',
                                          '$' ||
                                          cur_swap_index_rows.instrument_id || '$',
                                          cur_swap_index_rows.basis_price_unit_id,
                                          pd_trade_date,
                                          null,
                                          null,
                                          null,
                                          null);
    
      vt_tbl_ind_instrument.extend;
      vt_tbl_ind_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                      cur_swap_index_rows.instrument_id,
                                                                      cur_swap_index_rows.instrument_id,
                                                                      cur_swap_index_rows.price_source_id,
                                                                      cur_swap_index_rows.price_point_id,
                                                                      cur_swap_index_rows.available_price_id,
                                                                      cur_swap_index_rows.fb_period_type,
                                                                      cur_swap_index_rows.fb_period_sub_type,
                                                                      cur_swap_index_rows.period_month,
                                                                      cur_swap_index_rows.period_year,
                                                                      cur_swap_index_rows.period_from_date,
                                                                      cur_swap_index_rows.period_to_date,
                                                                      cur_swap_index_rows.no_of_months,
                                                                      cur_swap_index_rows.no_of_days,
                                                                      cur_swap_index_rows.period_type_id,
                                                                      cur_swap_index_rows.delivery_period_id,
                                                                      cur_swap_index_rows.off_day_price,
                                                                      cur_swap_index_rows.basis,
                                                                      cur_swap_index_rows.basis_price_unit_id,
                                                                      cur_swap_index_rows.fx_rate_type,
                                                                      cur_swap_index_rows.fx_rate_,
                                                                      null,
                                                                      null,
                                                                      null,
                                                                      null,
                                                                      null);
      vn_fb_order_sq := vn_fb_order_sq + 1;
      vn_cur_row_cnt := vn_cur_row_cnt + 1;
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_pre_check_swap_derivatives',
                   'for swap index price check: trade ref  ' ||
                   cur_swap_index_rows.derivative_ref_no || ' started');
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind_setup,
                                                 vt_tbl_ind_instrument,
                                                 vt_tbl_ind_setup_out,
                                                 vt_tbl_ind_instrument_out,
                                                 vt_fb_tbl_ind_error_out,
                                                 pc_dbd_id,
                                                 cur_swap_index_rows.derivative_ref_no);
    
    end loop;
  
    --each trade wise   cur_dt--
    for cur_dt_rows in cur_dt
    loop
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
    
      for cur_swap_formula_rows in cur_swap_formula_leg1(cur_dt_rows.internal_derivative_ref_no)
      loop
        sp_write_log(pc_corporate_id,
                     pd_trade_date,
                     'sp_pre_check_swap_derivatives',
                     'for swap formula price check: trade ref leg 1  ' ||
                     cur_dt_rows.derivative_ref_no || ' started ' ||
                     cur_swap_formula_rows.formula_name);
        vt_tbl_frm_setup.extend;
        vt_tbl_frm_setup(1) := fb_typ_setup(cur_swap_formula_rows.formula_id,
                                            pc_corporate_id,
                                            cur_swap_formula_rows.formula_name,
                                            cur_swap_formula_rows.formula_display,
                                            cur_swap_formula_rows.formula_internal,
                                            cur_swap_formula_rows.price_unit_id,
                                            pd_trade_date,
                                            null,
                                            null,
                                            null,
                                            null);
      
        vt_tbl_frm_instrument.extend;
        vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                        cur_swap_formula_rows.swap_formula_id,
                                                                        cur_swap_formula_rows.instrument_id,
                                                                        cur_swap_formula_rows.price_source_id,
                                                                        cur_swap_formula_rows.price_point_id,
                                                                        cur_swap_formula_rows.available_price_id,
                                                                        cur_swap_formula_rows.fb_period_type,
                                                                        cur_swap_formula_rows.fb_period_sub_type,
                                                                        cur_swap_formula_rows.period_month,
                                                                        cur_swap_formula_rows.period_year,
                                                                        cur_swap_formula_rows.period_from_date,
                                                                        cur_swap_formula_rows.period_to_date,
                                                                        cur_swap_formula_rows.no_of_months,
                                                                        cur_swap_formula_rows.no_of_days,
                                                                        cur_swap_formula_rows.period_type_id,
                                                                        cur_swap_formula_rows.delivery_period_id,
                                                                        cur_swap_formula_rows.off_day_price,
                                                                        cur_swap_formula_rows.basis,
                                                                        cur_swap_formula_rows.basis_price_unit_id,
                                                                        cur_swap_formula_rows.fx_rate_type,
                                                                        cur_swap_formula_rows.fx_rate_,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null);
        vn_fb_order_sq := vn_fb_order_sq + 1;
        vn_cur_row_cnt := vn_cur_row_cnt + 1;
      end loop;
    
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                 vt_tbl_frm_instrument,
                                                 vt_tbl_frm_setup_out,
                                                 vt_tbl_frm_instrument_out,
                                                 vt_fb_tbl_frm_error_out,
                                                 pc_dbd_id,
                                                 cur_dt_rows.derivative_ref_no);
    
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
      for cur_swap_formula_rows in cur_swap_formula_leg2(cur_dt_rows.internal_derivative_ref_no)
      loop
        sp_write_log(pc_corporate_id,
                     pd_trade_date,
                     'sp_pre_check_swap_derivatives',
                     'for swap formula price check: trade ref leg 2  ' ||
                     cur_dt_rows.derivative_ref_no || ' started ' ||
                     cur_swap_formula_rows.formula_name);
        vt_tbl_frm_setup.extend;
        vt_tbl_frm_setup(1) := fb_typ_setup(cur_swap_formula_rows.formula_id,
                                            pc_corporate_id,
                                            cur_swap_formula_rows.formula_name,
                                            cur_swap_formula_rows.formula_display,
                                            cur_swap_formula_rows.formula_internal,
                                            cur_swap_formula_rows.price_unit_id,
                                            pd_trade_date,
                                            null,
                                            null,
                                            null,
                                            null);
      
        vt_tbl_frm_instrument.extend;
        vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                        cur_swap_formula_rows.swap_formula_id,
                                                                        cur_swap_formula_rows.instrument_id,
                                                                        cur_swap_formula_rows.price_source_id,
                                                                        cur_swap_formula_rows.price_point_id,
                                                                        cur_swap_formula_rows.available_price_id,
                                                                        cur_swap_formula_rows.fb_period_type,
                                                                        cur_swap_formula_rows.fb_period_sub_type,
                                                                        cur_swap_formula_rows.period_month,
                                                                        cur_swap_formula_rows.period_year,
                                                                        cur_swap_formula_rows.period_from_date,
                                                                        cur_swap_formula_rows.period_to_date,
                                                                        cur_swap_formula_rows.no_of_months,
                                                                        cur_swap_formula_rows.no_of_days,
                                                                        cur_swap_formula_rows.period_type_id,
                                                                        cur_swap_formula_rows.delivery_period_id,
                                                                        cur_swap_formula_rows.off_day_price,
                                                                        cur_swap_formula_rows.basis,
                                                                        cur_swap_formula_rows.basis_price_unit_id,
                                                                        cur_swap_formula_rows.fx_rate_type,
                                                                        cur_swap_formula_rows.fx_rate_,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null);
        vn_fb_order_sq := vn_fb_order_sq + 1;
        vn_cur_row_cnt := vn_cur_row_cnt + 1;
      
      end loop;
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                 vt_tbl_frm_instrument,
                                                 vt_tbl_frm_setup_out,
                                                 vt_tbl_frm_instrument_out,
                                                 vt_fb_tbl_frm_error_out,
                                                 pc_dbd_id,
                                                 cur_dt_rows.derivative_ref_no
                                                 
                                                 );
    
    end loop;
    --check for forward trades
  
    for cur_fwd_rows in cur_fwd
    loop
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_pre_check_swap_derivatives',
                   'for swap formula price check: trade ref leg 1  ' ||
                   cur_fwd_rows.derivative_ref_no || ' started ' ||
                   cur_fwd_rows.formula_name);
      vt_tbl_frm_setup.extend;
      vt_tbl_frm_setup(1) := fb_typ_setup(cur_fwd_rows.formula_id,
                                          pc_corporate_id,
                                          cur_fwd_rows.formula_name,
                                          cur_fwd_rows.formula_display,
                                          cur_fwd_rows.formula_internal,
                                          cur_fwd_rows.price_unit_id,
                                          pd_trade_date,
                                          null,
                                          null,
                                          null,
                                          null);
      for cur_fwd_det_rows in cur_fwd_det(cur_fwd_rows.internal_derivative_ref_no)
      loop
        sp_write_log(pc_corporate_id,
                     pd_trade_date,
                     'sp_pre_check_swap_derivatives',
                     'for swap formula price check: trade ref leg 1  ' ||
                     cur_fwd_rows.derivative_ref_no || ' started ' ||
                     cur_fwd_rows.formula_name);
        vt_tbl_frm_instrument.extend;
        vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                        cur_fwd_det_rows.formula_id,
                                                                        cur_fwd_det_rows.instrument_id,
                                                                        cur_fwd_det_rows.price_source_id,
                                                                        cur_fwd_det_rows.price_point_id,
                                                                        cur_fwd_det_rows.available_price_id,
                                                                        cur_fwd_det_rows.fb_period_type,
                                                                        cur_fwd_det_rows.fb_period_sub_type,
                                                                        cur_fwd_det_rows.period_month,
                                                                        cur_fwd_det_rows.period_year,
                                                                        cur_fwd_det_rows.period_from_date,
                                                                        cur_fwd_det_rows.period_to_date,
                                                                        cur_fwd_det_rows.no_of_months,
                                                                        cur_fwd_det_rows.no_of_days,
                                                                        cur_fwd_det_rows.period_type_id,
                                                                        cur_fwd_det_rows.delivery_period_id,
                                                                        cur_fwd_det_rows.off_day_price,
                                                                        cur_fwd_det_rows.basis,
                                                                        cur_fwd_det_rows.basis_price_unit_id,
                                                                        cur_fwd_det_rows.fx_rate_type,
                                                                        cur_fwd_det_rows.fx_rate_,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null);
        vn_fb_order_sq := vn_fb_order_sq + 1;
        vn_cur_row_cnt := vn_cur_row_cnt + 1;
      end loop;
    
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                 vt_tbl_frm_instrument,
                                                 vt_tbl_frm_setup_out,
                                                 vt_tbl_frm_instrument_out,
                                                 vt_fb_tbl_frm_error_out,
                                                 pc_dbd_id,
                                                 cur_fwd_rows.derivative_ref_no);
    
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
    
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_swap_derivatives',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_currency(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2,
                                  pc_dbd_id       varchar2) is
    pragma autonomous_transaction;
    /******************************************************************************************************************************************
    procedure name                            : sp_pre_check_derivatives
    author                                    : janna
    created date                              : 11th jan 2009
    purpose                                   : pre check for derivativ trades
    
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_user_id                                : user id
    pc_process                                : process
    
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    --vc_position_check  varchar2(100);
    --vc_error_type      varchar2(7);
  begin
    -- get the dump id
    /*select max(dbd.dbd_id)
     into gvc_dbd_id
     from dbd_database_dump dbd
    where corporate_id = pc_corporate_id
      and process = pc_process
      and trade_date = pd_trade_date;*/
    -- check all the derivative deals existing in the system are verified
    insert into eel_eod_eom_exception_log
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Currency Pre-Check',
             'M2M-020',
             'Following currency trades are not verified',
             ct.treasury_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             ct.dr_id,
             pd_trade_date
        from ct_currency_trade ct
       where ct.status = 'None'
         and ct.corporate_id = pc_corporate_id
         and ct.trade_date <= pd_trade_date
         and ct.dbd_id = pc_dbd_id;
    -- check settlement price should be avaialble for all open future trades as on eod
    --check for currency quotes for unrealized pnl(prompt_date<>trade date)
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Currency Pre-Check',
             'M2M-021',
             'Settlement Price for currency trade is missing',
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             t.dr_id,
             pd_trade_date
        from (select ct.dr_id
                from ct_currency_trade     ct,
                     drm_derivative_master drm
               where ct.corporate_id = pc_corporate_id
                 and ct.dr_id = drm.dr_id
                 and upper(ct.status) = 'VERIFIED'
                 and ct.trade_date <= pd_trade_date
                 and ct.dbd_id = pc_dbd_id
                    --  and drm.period_date <> pd_trade_date
                 and not exists
               (select ecd.ct_id
                        from eci_expired_ct_id ecd
                       where ecd.corporate_id = pc_corporate_id
                         and ecd.ct_id = ct.dr_id
                         and ecd.process = pc_process)
                 and not exists
               (select cfq.dr_id
                        from eodeom_currency_forward_quotes cfq
                       where cfq.dr_id = ct.dr_id
                         and cfq.rate <> 0
                         and cfq.corporate_id = pc_corporate_id
                         and cfq.dbd_id = pc_dbd_id)
               group by ct.dr_id) t
       group by t.dr_id;
  
    --check for currency quotes for realized pnl(prompt_date=trade date) as warning
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Currency Pre-Check',
             'M2M-026',
             'Bank Fx Rate(Spot) is not available',
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             t.dr_id,
             pd_trade_date,
             'Warning'
        from (select ct.dr_id
                from ct_currency_trade     ct,
                     drm_derivative_master drm
               where ct.corporate_id = pc_corporate_id
                 and ct.dr_id = drm.dr_id
                 and upper(ct.status) = 'VERIFIED'
                 and ct.trade_date <= pd_trade_date
                 and ct.dbd_id = pc_dbd_id
                 and drm.prompt_date <= pd_trade_date
                 and not exists
               (select ecd.ct_id
                        from eci_expired_ct_id ecd
                       where ecd.corporate_id = pc_corporate_id
                         and ecd.ct_id = ct.dr_id
                         and ecd.process = pc_process)
                 and not exists
               (select cfq.dr_id
                        from eodeom_currency_forward_quotes cfq
                       where cfq.dr_id = ct.dr_id
                         and cfq.rate <> 0
                         and cfq.corporate_id = pc_corporate_id
                         and cfq.dbd_id = pc_dbd_id
                            -- and cfq.prompt_date = pd_trade_date
                         and cfq.prompt_date = drm.prompt_date
                         and cfq.is_spot = 'Y')
               group by ct.dr_id) t
       group by t.dr_id;
    commit;
  exception
    when others then
      rollback;
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_currency',
                                                           'M2M-022',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_record_expired_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_process_id   varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_record_expired_dr_id
    --        author                                    :
    --        created date                              :
    --        purpose                                   :
    --        parameters
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    -- pragma autonomous_transaction;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into edi_expired_dr_id
      (corporate_id, dr_id, trade_date, process_id, process)
      select pc_corporate_id,
             drm.dr_id,
             pd_trade_date,
             pc_process_id,
             pc_process
        from drm_derivative_master drm
       where nvl(drm.expiry_date, drm.prompt_date) <= pd_trade_date
         and drm.price_point_id is null
         and not exists
       (select edid.dr_id,
                     edid.corporate_id
                from edi_expired_dr_id edid
               where edid.dr_id = drm.dr_id
                 and edid.process = pc_process
                 and edid.corporate_id = pc_corporate_id)
       group by drm.dr_id;
  
    -- update the dr id expired flag to y in drt table
    --
    /*update dt_derivative_trade drt
      set drt.is_what_if = 'Y'
    where drt.dbd_id = pc_dbd_id
      and drt.dr_id in
          (select edid.dr_id
             from edi_expired_dr_id edid
            where edid.corporate_id = pc_corporate_id);*/ --siva
    -- commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_record_expired_derivatives',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_record_expired_currency(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_process_id   varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_record_expired_currency
    --        author                                    :
    --        created date                              :
    --        purpose                                   :
    --        parameters
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    -- pragma autonomous_transaction;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into eci_expired_ct_id
      (corporate_id, ct_id, trade_date, process, process_id)
      select pc_corporate_id,
             drm.dr_id ct_id,
             pd_trade_date,
             pc_process,
             pc_process_id
        from ct_currency_trade     ct,
             drm_derivative_master drm
       where ct.process_id = pc_process_id
         and ct.dr_id = drm.dr_id
         and drm.prompt_date <= pd_trade_date
         and ct.corporate_id = pc_corporate_id
         and exists (select cfq.dr_id
                from eodeom_currency_forward_quotes cfq
               where cfq.corporate_id = pc_corporate_id
                 and cfq.process_id = pc_process_id
                 and cfq.dr_id = ct.dr_id
                 and cfq.is_spot = 'Y')
         and not exists (select ecid.ct_id
                from eci_expired_ct_id ecid
               where ecid.corporate_id = pc_corporate_id
                 and ecid.process = pc_process
                 and ecid.ct_id = drm.dr_id)
       group by drm.dr_id;
  
    --
    -- update the dr id expired flag to y in drt table
    --
    /*   update ct_currency_trade ct
      set ct.is_ct_id_expired = 'Y', ct.status = 'SETTLED'
    where ct.dbd_id = pc_dbd_id
      and ct.dr_id in
          (select ecid.ct_id
             from eci_expired_ct_id ecid
            where ecid.corporate_id = pc_corporate_id);*/
    -- commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_record_expired_currency',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           pc_process,
                                                           '',
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_gather_stats is
  begin
    sp_gather_stats('dt_derivative_trade');
    sp_gather_stats('ct_currency_trade');
    sp_gather_stats('crtd_cur_trade_details');
    sp_gather_stats('dcoh_der_closeout_header');
    sp_gather_stats('dcod_der_closeout_detail');
    sp_gather_stats('fsh_fin_settlement_header');
    sp_gather_stats('dt_fbi');
    sp_gather_stats('dat_derivative_aggregate_trade');
  end;
end; 
/
create or replace package pkg_general is

  -- All general packages and procedures
  function f_get_converted_currency_amt(pc_corporate_id        in varchar2,
                                        pc_from_cur_id         in varchar2,
                                        pc_to_cur_id           in varchar2,
                                        pd_cur_date            in date,
                                        pn_amt_to_be_converted in number)
    return number;

  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number;

  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2;

  procedure sp_forward_cur_exchange_rate(pc_corporate_id         in varchar2,
                                         pd_trade_date           in date,
                                         pc_maturity_date        in date,
                                         pc_from_cur_id          in varchar2,
                                         pc_to_cur_id            in varchar2,
                                         pc_settlement_price     out number,
                                         pc_sum_of_forward_point out number);

  function f_get_base_cur_id(pc_cur_id varchar2) return varchar2;

  procedure sp_get_base_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number);

  procedure sp_get_main_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number,
                                   pn_base_cur_decimals out number);

  procedure sp_spot_cur_exchange_rate(pc_corporate_id         in varchar2,
                                      pd_trade_date           in date,
                                      pc_from_cur_id          in varchar2,
                                      pc_to_cur_id            in varchar2,
                                      pc_settlement_price     out number,
                                      pc_sum_of_forward_point out number);

  procedure sp_ltst_spot_cur_exchange_rate(pc_corporate_id         in varchar2,
                                           pd_trade_date           in date,
                                           pc_from_cur_id          in varchar2,
                                           pc_to_cur_id            in varchar2,
                                           pc_settlement_price     out number,
                                           pc_sum_of_forward_point out number);
  procedure sp_forward_cur_exchange_new(pc_corporate_id         in varchar2,
                                        pd_trade_date           in date,
                                        pc_maturity_date        in date,
                                        pc_from_cur_id          in varchar2,
                                        pc_to_cur_id            in varchar2,
                                        pc_max_deviation        in number,
                                        pc_settlement_price     out number,
                                        pc_sum_of_forward_point out number);

  procedure sp_forward_cur_exchange_old(pc_corporate_id         in varchar2,
                                        pd_trade_date           in date,
                                        pc_maturity_date        in date,
                                        pc_from_cur_id          in varchar2,
                                        pc_to_cur_id            in varchar2,
                                        pc_max_deviation        in number,
                                        pc_settlement_price     out number,
                                        pc_sum_of_forward_point out number);

  procedure sp_forward_cur_exchange_sub(pc_corporate_id         in varchar2,
                                        pd_trade_date           in date,
                                        pc_maturity_date        in date,
                                        pc_from_cur_id          in varchar2,
                                        pc_to_cur_id            in varchar2,
                                        pc_max_deviation        in number,
                                        pc_settlement_price     out number,
                                        pc_sum_of_forward_point out number);

  function fn_forward_interest_rate(pc_corporate_id      in varchar2,
                                    pd_trade_date        in date,
                                    pc_payment_due_date  in date,
                                    pc_ir_id             in varchar2,
                                    pc_interest_curve_id in varchar2)
    return number;

  function f_get_currency_pair(pc_corporate_id  varchar2,
                               pc_from_cur_id   in varchar2,
                               pc_from_cur_code in varchar2,
                               pc_to_cur_id     in varchar2,
                               pc_to_cur_code   in varchar2) return varchar2;

  function f_get_currency_pair_decimals(pc_from_cur_id in varchar2,
                                        pc_to_cur_id   in varchar2)
    return number;
  function f_get_is_same_classification(pc_from_qty_unit_id in varchar2,
                                        pc_to_qty_unit_id   in varchar2)
  
   return varchar2;

  function f_get_conv_factor(pc_from_qty_unit_id in varchar2,
                             pc_to_qty_unit_id   in varchar2,
                             pc_product_id       varchar2) return number;
  function fn_mass_volume_qty_conversion(pc_product_id                 in varchar2,
                                         pc_from_qty_unit_id           in varchar2,
                                         pc_to_qty_unit_id             in varchar2,
                                         pn_qty_to_be_converted        in number,
                                         pn_gravity                    in number,
                                         pc_gravity_type               in varchar2,
                                         pc_density_mass_qty_unit_id   in varchar2,
                                         pc_density_volume_qty_unit_id in varchar2)
    return number;
  procedure sp_bank_fx_rate(pc_corporate_id         in varchar2,
                            pd_trade_date           in date,
                            pd_maturity_date        in date,
                            pc_from_cur_id          in varchar2,
                            pc_to_cur_id            in varchar2,
                            pc_max_deviation        in number,
                            pc_from_where           in varchar2,
                            pc_process              in varchar2,
                            pc_settlement_price     out number,
                            pc_sum_of_forward_point out number);
 function fn_get_next_month_prompt_date(pc_promp_del_cal_id varchar2,
                                         pd_trade_date       date)
    return date;                            

end; 
/
create or replace package body pkg_general is

  function f_get_converted_currency_amt
  /**************************************************************************************************
    Function Name                       : f_get_converted_currency_amt
    Author                              : Janna
    Created Date                        : 19th Aug 2008
    Purpose                             : To convert a given amount between two currencies as on a given date
    
    Parameters                          :
    
    pc_corporate_id                     : Corporate ID
    pc_from_cur_id                      : From Currency
    pc_to_cur_id                        : To Currency
    pd_cur_date                         : Currency Date
    pn_amt_to_be_converted              : Amount to be converted
    
    Returns                             :
    
    Number                              : Converted amount
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id        in varchar2,
   pc_from_cur_id         in varchar2,
   pc_to_cur_id           in varchar2,
   pd_cur_date            in date,
   pn_amt_to_be_converted in number) return number is
    vn_result                    number;
    vc_base_cur_id               varchar2(30);
    vc_from_main_cur_id          varchar2(30);
    vc_to_main_cur_id            varchar2(30);
    vn_from_rate                 number;
    vn_from_main_currency_factor number := 1;
    vn_to_main_currency_factor   number := 1;
    vn_to_rate                   number;
  begin
    vn_from_rate        := 1;
    vn_to_rate          := 1;
    vc_from_main_cur_id := pc_from_cur_id;
    vc_to_main_cur_id   := pc_to_cur_id;
    -- Get the Base Currency ID of the corporate
    -- This is used to determine if one of the currencies given is the base currency itself
    -- Since AK_CORPORATE is not having Currency ID column and we are not changing it now
    -- We are joining CUR_CODE of CM with BASE_CURRENCY_NAME of AK_CORPORATE
    -- When AK_CORPORATE table is revamped change this code
    begin
      select base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
    
    exception
      when no_data_found then
        return - 1;
    end;
    -- Check if the currency passed is a sub-currency if yes take into account
    -- the sub currency factor...
    begin
      select scd.cur_id,
             scd.factor
        into vc_from_main_cur_id,
             vn_from_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_from_cur_id;
    exception
      when no_data_found then
        vn_from_main_currency_factor := 1;
        vc_from_main_cur_id          := pc_from_cur_id;
    end;
    begin
      select scd.cur_id,
             scd.factor
        into vc_to_main_cur_id,
             vn_to_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_to_cur_id;
    exception
      when no_data_found then
        vn_to_main_currency_factor := 1;
        vc_to_main_cur_id          := pc_to_cur_id;
    end;
    if vc_base_cur_id = vc_from_main_cur_id and
       vc_base_cur_id = vc_to_main_cur_id then
      vn_from_rate := 1;
      vn_to_rate   := 1;
    else
      begin
        -- Get the From Currency Exchange rate
        if pc_to_cur_id = pc_from_cur_id then
          return(pn_amt_to_be_converted);
        else
          if vc_from_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_from_rate
              from cq_currency_quote cq
             where cq.cur_id = vc_from_main_cur_id
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = vc_from_main_cur_id
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
          -- Get the To Currency Exchange rate
          if vc_to_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_to_rate
              from cq_currency_quote cq
             where cq.cur_id = upper(vc_to_main_cur_id)
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = upper(vc_to_main_cur_id)
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
        end if;
      exception
        when no_data_found then
          return - 1;
      end;
    end if;
    vn_result := pn_amt_to_be_converted *
                 ((vn_to_rate / vn_to_main_currency_factor) /
                 (vn_from_rate / vn_from_main_currency_factor));
    return(vn_result);
  exception
    when no_data_found then
      return - 1;
  end;

  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2 is
    vc_is_derived_unit varchar2(1);
  begin
    select qum.is_derrived
      into vc_is_derived_unit
      from qum_quantity_unit_master qum
     where qum.qty_unit_id = pc_qty_unit_id
       and is_deleted = 'N'
       and is_active = 'Y';
    return vc_is_derived_unit;
  exception
    when no_data_found then
      return 'N';
    when others then
      return 'N';
  end;

  function f_get_is_same_classification(pc_from_qty_unit_id in varchar2,
                                        pc_to_qty_unit_id   in varchar2)
    return varchar2 is
    vc_result             varchar2(1) := 'N';
    vc_from_qty_unit_type varchar2(15);
    vc_to_qty_unit_type   varchar2(15);
  begin
  
    select unit_type
      into vc_from_qty_unit_type
      from qum_quantity_unit_master
     where qty_unit_id = pc_from_qty_unit_id
       and is_active = 'Y'
       and is_deleted = 'N';
  
    select unit_type
      into vc_to_qty_unit_type
      from qum_quantity_unit_master
     where qty_unit_id = pc_to_qty_unit_id
       and is_active = 'Y'
       and is_deleted = 'N';
  
    if (vc_from_qty_unit_type = vc_to_qty_unit_type) then
      vc_result := 'Y';
    end if;
  
    return vc_result;
  exception
    when no_data_found then
      return 'X';
    when others then
      return 'X';
  end;
  function f_get_conv_factor(pc_from_qty_unit_id in varchar2,
                             pc_to_qty_unit_id   in varchar2,
                             pc_product_id       in varchar2) return number
  
   is
  
    vc_conv_factor           number(16, 8);
    vc_base_from_qty_unit_id varchar2(15) := pc_from_qty_unit_id;
    vc_base_to_qty_unit_id   varchar2(15) := pc_to_qty_unit_id;
    vc_from_to_der_factor    number(20, 5) := 1;
    vc_to_to_der_factor      number(20, 5) := 1;
    vc_is_from_der_qty_unit  varchar2(1);
    vc_is_to_der_qty_unit    varchar2(1);
  
  begin
  
    vc_is_from_der_qty_unit := f_get_is_derived_qty_unit(pc_from_qty_unit_id);
    vc_is_to_der_qty_unit   := f_get_is_derived_qty_unit(pc_to_qty_unit_id);
  
    if (vc_is_from_der_qty_unit = 'Y') then
    
      select dqu.qty_unit_id,
             dqu.qty
        into vc_base_from_qty_unit_id,
             vc_from_to_der_factor
        from dqu_derived_quantity_unit dqu
       where dqu.derrived_qty_unit_id = pc_from_qty_unit_id
         and dqu.product_id = pc_product_id
         and dqu.is_deleted = 'N';
    end if;
  
    if (vc_is_to_der_qty_unit = 'Y') then
      select dqu.qty_unit_id,
             dqu.qty
        into vc_base_to_qty_unit_id,
             vc_to_to_der_factor
        from dqu_derived_quantity_unit dqu
       where dqu.derrived_qty_unit_id = pc_to_qty_unit_id
         and dqu.product_id = pc_product_id
         and dqu.is_deleted = 'N';
    end if;
  
    if (vc_base_from_qty_unit_id = vc_base_to_qty_unit_id)
    
     then
      vc_conv_factor := vc_from_to_der_factor / vc_to_to_der_factor;
    
    else
    
      select multiplication_factor
        into vc_conv_factor
        from ucm_unit_conversion_master
       where from_qty_unit_id = vc_base_from_qty_unit_id
         and to_qty_unit_id = vc_base_to_qty_unit_id;
    
      vc_conv_factor := vc_conv_factor *
                        (vc_from_to_der_factor / vc_to_to_der_factor);
    
    end if;
  
    return vc_conv_factor;
  
  exception
    when no_data_found then
      return - 1;
    when others then
      return - 1;
  end;
  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number is
    vn_conv_factor             number;
    vn_converted_qty           number;
    vc_is_from_der_qty_unit_id varchar2(1);
    vc_is_to_der_qty_unit_id   varchar2(1);
    vc_base_form_qty_unit_id   varchar2(15) := pc_from_qty_unit_id;
    vn_from_der_to_base_conv   number(20, 5) := 1;
    vc_base_to_qty_unit_id     varchar2(15) := pc_to_qty_unit_id;
    vn_to_der_to_base_conv     number(20, 5) := 1;
  begin
    begin
      vc_is_from_der_qty_unit_id := f_get_is_derived_qty_unit(pc_from_qty_unit_id);
      vc_is_to_der_qty_unit_id   := f_get_is_derived_qty_unit(pc_to_qty_unit_id);
      if (vc_is_from_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_form_qty_unit_id,
               vn_from_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_from_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      if (vc_is_to_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_to_qty_unit_id,
               vn_to_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_to_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      select ucm.multiplication_factor
        into vn_conv_factor
        from ucm_unit_conversion_master ucm
       where ucm.from_qty_unit_id = vc_base_form_qty_unit_id
         and ucm.to_qty_unit_id = vc_base_to_qty_unit_id;
      vn_converted_qty := round(vn_from_der_to_base_conv /
                                vn_to_der_to_base_conv * vn_conv_factor *
                                pn_qty_to_be_converted,
                                15);
      return vn_converted_qty;
    exception
      when no_data_found then
        return - 1;
      when others then
        return - 1;
    end;
  end;

  procedure sp_forward_cur_exchange_rate
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Janna
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
  begin
    --Package modeified to by assuming from currency as Any currency other than Base corporate Currency
    -- To Currency is always the Base currency
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_currency_forward_quotes cfq
         where cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_to_cur_id
           and cfq.quote_cur_id = pc_from_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.prompt_date < pc_maturity_date
             and cfq.base_cur_id = pc_to_cur_id
             and cfq.quote_cur_id = pc_from_cur_id;
        exception
          when no_data_found then
            null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.prompt_date > pc_maturity_date
             and cfq.base_cur_id = pc_to_cur_id
             and cfq.quote_cur_id = pc_from_cur_id;
        exception
          when no_data_found then
            null;
        end;
        vn_lower_date_diff := abs(pc_maturity_date - vd_lower_date);
        vn_upper_date_diff := abs(pc_maturity_date - vd_upper_date);
        if vn_lower_date_diff < vn_upper_date_diff then
          vd_maturity_date := vd_lower_date;
        else
          vd_maturity_date := vd_upper_date;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select row_number() over(partition by cfq.trade_date order by cfq.trade_date desc) seq,
                        cfq.rate settlement_price, -- it's included with spot and forward now
                       0 sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.trade_date <= pd_trade_date
                   and cfq.prompt_date = vd_maturity_date
                   and cfq.base_cur_id = pc_to_cur_id
                   and cfq.quote_cur_id = pc_from_cur_id) t
         where seq = 1;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
  exception
    when no_data_found then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
    when others then
      dbms_output.put_line(sqlerrm);
  end;

  function f_get_base_cur_id(pc_cur_id varchar2) return varchar2 is
    /**************************************************************************************************
    Function Name                       : f_get_base_cur_id
    Author                              : Janna
    Created Date                        : 9th Mar 2009
    Purpose                             : To get the base currency for a given currency
    
    Parameters                          :
    
    pc_cur_id                           : Sub Currency or Main Currency
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
    vc_base_cur_id varchar2(15);
  begin
    select (case
             when cm.is_sub_cur = 'Y' then
              scd.cur_id
             else
              cm.cur_id
           end) base_currency_id
      into vc_base_cur_id
      from cm_currency_master      cm,
           scd_sub_currency_detail scd,
           cm_currency_master      cm_1
     where cm.cur_id = pc_cur_id
       and cm.cur_id = scd.sub_cur_id(+)
       and scd.cur_id = cm_1.cur_id(+);
    return vc_base_cur_id;
  end;

  procedure sp_get_base_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number) is
    --------------------------------------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_get_base_cur_detail
    --        Author                                    : Janna
    --        Created Date                              : 31st Mar 2009
    --        Purpose                                   : Get Base currency details for a sub currency
    --
    --        Parameters
    --        pc_cur_id                                 : Sub Currency ID ID
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------------------------------------
  begin
    select (case
             when cm.is_sub_cur = 'Y' then
              scd.cur_id
             else
              cm.cur_id
           end) base_currency_id,
           (case
             when cm.is_sub_cur = 'Y' then
              cm_1.cur_code
             else
              cm.cur_code
           end) cur_code,
           nvl(scd.factor, 1) factor
      into pc_base_cur_id,
           pc_base_cur_code,
           pn_sub_cur_id_factor
      from cm_currency_master      cm,
           scd_sub_currency_detail scd,
           cm_currency_master      cm_1
     where cm.cur_id = pc_cur_id
       and cm.cur_id = scd.sub_cur_id(+)
       and scd.cur_id = cm_1.cur_id(+);
  exception
    when no_data_found then
      pn_sub_cur_id_factor := 1;
      pc_base_cur_id       := pc_cur_id;
      select cm.cur_code
        into pc_base_cur_code
        from cm_currency_master cm
       where cm.cur_id = pc_cur_id;
  end;

  procedure sp_get_main_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number,
                                   pn_base_cur_decimals out number) is
    --------------------------------------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_get_main_cur_detail
    --        Author                                    : Janna
    --        Created Date                              : 31st Mar 2009
    --        Purpose                                   : Get Base currency details for a sub currency
    --
    --        Parameters
    --        pc_cur_id                                 : Sub Currency ID ID
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------------------------------------
  begin
    --write_log(null,'pc_cur_id'||pc_cur_id);
    select (case
             when cm.is_sub_cur = 'Y' then
              scd.cur_id
             else
              cm.cur_id
           end) base_currency_id,
           (case
             when cm.is_sub_cur = 'Y' then
              cm_1.cur_code
             else
              cm.cur_code
           end) cur_code,
           nvl(scd.factor, 1) factor,
           (case
             when cm.is_sub_cur = 'Y' then
              cm_1.decimals
             else
              cm.decimals
           end)
      into pc_base_cur_id,
           pc_base_cur_code,
           pn_sub_cur_id_factor,
           pn_base_cur_decimals
      from cm_currency_master      cm,
           scd_sub_currency_detail scd,
           cm_currency_master      cm_1
     where cm.cur_id = pc_cur_id
       and cm.cur_id = scd.sub_cur_id(+)
       and scd.cur_id = cm_1.cur_id(+);
    --write_log(null,'sp_get_main_cur_detail'); 
  exception
    when no_data_found then
      dbms_output.put_line('pc_cur_id' || pc_cur_id);
      --   pn_sub_cur_id_factor := 1;
    --    pc_base_cur_id       := pc_cur_id;
  
    when others then
      pn_sub_cur_id_factor := 1;
      pc_base_cur_id       := pc_cur_id;
      select cm.cur_code
        into pc_base_cur_code
        from cm_currency_master cm
       where cm.cur_id = pc_cur_id;
      --write_log(null,'sp_get_main_cur_detail'); 
  end;

  procedure sp_spot_cur_exchange_rate
  /**************************************************************************************************
    Function Name                       : sp_spot_cur_exchange
    Author                              : Lalit
    Created Date                        : 16 Sep 2009
    Purpose                             : To get Spot rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
  begin
    if pc_from_cur_id = pc_to_cur_id then
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    else
      begin
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select cfq.rate settlement_price,
                       nvl(cfq.forward_point, 0) sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.trade_date = pd_trade_date
                   and cfq.is_spot = 'Y'
                   and cfq.base_cur_id = pc_from_cur_id
                   and cfq.quote_cur_id = pc_to_cur_id) t;
      exception
        when no_data_found then
          select decode(nvl(t.settlement_price, 0),
                        0,
                        0,
                        1 / t.settlement_price),
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_currency_forward_quotes cfq
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date = pd_trade_date
                     and cfq.is_spot = 'Y'
                     and cfq.base_cur_id = pc_to_cur_id
                     and cfq.quote_cur_id = pc_from_cur_id) t;
      end;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_ltst_spot_cur_exchange_rate
  /**************************************************************************************************
    Function Name                       : sp_spot_cur_exchange
    Author                              : Lalit
    Created Date                        : 16 Sep 2009
    Purpose                             : To get Spot rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
  begin
    if pc_from_cur_id = pc_to_cur_id then
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    else
      begin
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select cfq.rate settlement_price,
                       nvl(cfq.forward_point, 0) sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.trade_date <= pd_trade_date
                   and cfq.is_spot = 'Y'
                   and cfq.base_cur_id = pc_from_cur_id
                   and cfq.quote_cur_id = pc_to_cur_id
                 order by cfq.trade_date desc) t
         where rownum = 1;
      exception
        when no_data_found then
          select decode(nvl(t.settlement_price, 0),
                        0,
                        0,
                        1 / t.settlement_price),
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_currency_forward_quotes cfq
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date <= pd_trade_date
                     and cfq.is_spot = 'Y'
                     and cfq.base_cur_id = pc_to_cur_id
                     and cfq.quote_cur_id = pc_from_cur_id
                   order by cfq.trade_date desc) t
           where rownum = 1;
      end;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_forward_cur_exchange_new
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Suresh Gottipati
    Created Date                        : 03rd Feb 2012
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
    --vc_base_cur_id               varchar2(30);
    --pc_settlement_price_from     number;
    --pc_sum_of_forward_point_from number;
    --pc_settlement_price_to number;
    --pc_sum_of_forward_point_to   number;
    vc_insturment_id varchar2(15);
    vd_valid_quote_date date;
  begin
  
  begin
         select cci.instrument_id,
                cdim.valid_quote_date
           into vc_insturment_id,
                vd_valid_quote_date
           from cci_corp_currency_instrument cci,
                cdim_corporate_dim           cdim,
                dim_der_instrument_master    dim,
                pdd_product_derivative_def   pdd,
                pdm_productmaster            pdm
          where cci.corporate_id = pc_corporate_id
            and cci.instrument_id = cdim.instrument_id
            and dim.instrument_id = cdim.instrument_id
            and dim.product_derivative_id = pdd.derivative_def_id
            and pdd.product_id = pdm.product_id
            and pdm.base_cur_id = pc_from_cur_id
            and pdm.quote_cur_id = pc_to_cur_id
            and cci.is_deleted = 'N'
            and cdim.is_active = 'Y'
            and pdm.is_active='Y'
            and pdd.is_active='Y'
            and dim.is_active='Y';
       exception
         when no_data_found then
           select cci.instrument_id,
                  cdim.valid_quote_date
             into vc_insturment_id,
                  vd_valid_quote_date
             from cci_corp_currency_instrument cci,
                  cdim_corporate_dim           cdim,
                  dim_der_instrument_master    dim,
                  pdd_product_derivative_def   pdd,
                  pdm_productmaster            pdm
            where cci.corporate_id = pc_corporate_id
              and cci.instrument_id = cdim.instrument_id
              and dim.instrument_id = cdim.instrument_id
              and dim.product_derivative_id = pdd.derivative_def_id
              and pdd.product_id = pdm.product_id
              and pdm.base_cur_id = pc_to_cur_id
              and pdm.quote_cur_id = pc_from_cur_id
              and cci.is_deleted = 'N'
              and cdim.is_active = 'Y'
              and dim.is_active='Y'
              and pdd.is_active='Y'
              and pdm.is_active='Y';
       end;
  
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_cci_cur_forward_quotes cfq,
               div_der_instrument_valuation  div
         where cfq.corporate_id = pc_corporate_id
           and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
           and cfq.instrument_id=div.instrument_id
           and cfq.price_source_id=div.price_source_id
           and div.is_deleted='N'
           and cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_from_cur_id
           and cfq.quote_cur_id = pc_to_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation  div
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
             and cfq.instrument_id=div.instrument_id
             and cfq.price_source_id=div.price_source_id
             and div.is_deleted='N'
             and cfq.prompt_date <= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_lower_date := null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation  div
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
             and cfq.instrument_id=div.instrument_id
             and cfq.price_source_id=div.price_source_id
             and div.is_deleted='N'
             and cfq.prompt_date >= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --Lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_upper_date := null;
        end;
        vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                  999);
        vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                  999);
        if vd_lower_date is null and vd_upper_date is null then
          vd_maturity_date    := null;
          pc_settlement_price := 0;
        else
          if vn_lower_date_diff <= vn_upper_date_diff then
            vd_maturity_date := vd_lower_date;
          else
            vd_maturity_date := vd_upper_date;
          end if;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        begin
          select t.settlement_price,
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_cci_cur_forward_quotes cfq,
                         div_der_instrument_valuation  div                    
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
                     and cfq.instrument_id=div.instrument_id
                     and cfq.price_source_id=div.price_source_id
                     and div.is_deleted='N'
                     and cfq.prompt_date = vd_maturity_date
                     and cfq.base_cur_id = pc_from_cur_id
                     and cfq.quote_cur_id = pc_to_cur_id) t;
        exception
          when no_data_found then
            pc_settlement_price     := 0;
            pc_sum_of_forward_point := 0;
        end;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
      if pc_settlement_price = 0 then
        -- its likely that the pair is not configured.
        --try reverse pair 
        begin
          select max(cfq.prompt_date)
            into vd_maturity_date
            from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation  div
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
             and cfq.prompt_date = pc_maturity_date
             and cfq.instrument_id=div.instrument_id
             and cfq.price_source_id=div.price_source_id
             and div.is_deleted='N'
             and cfq.base_cur_id = pc_to_cur_id
             and cfq.quote_cur_id = pc_from_cur_id;
        exception
          when no_data_found then
            vd_maturity_date := null;
        end;
      
        if vd_maturity_date is null then
          begin
            select max(cfq.prompt_date)
              into vd_lower_date
              from mv_cfq_cci_cur_forward_quotes cfq,
                   div_der_instrument_valuation  div
             where cfq.corporate_id = pc_corporate_id
               and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
               and cfq.prompt_date <= pc_maturity_date
               and cfq.instrument_id=div.instrument_id
               and cfq.price_source_id=div.price_source_id
               and div.is_deleted='N'
               and abs(pc_maturity_date - cfq.prompt_date) <=
                   pc_max_deviation --lalit
               and cfq.base_cur_id = pc_to_cur_id
               and cfq.quote_cur_id = pc_from_cur_id;
          exception
            when no_data_found then
              vd_lower_date := null;
          end;
          begin
            select min(cfq.prompt_date)
              into vd_upper_date
              from mv_cfq_cci_cur_forward_quotes cfq,
                   div_der_instrument_valuation  div
             where cfq.corporate_id = pc_corporate_id
               and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
               and cfq.instrument_id=div.instrument_id
               and cfq.price_source_id=div.price_source_id
               and div.is_deleted='N'
               and cfq.prompt_date >= pc_maturity_date
               and abs(pc_maturity_date - cfq.prompt_date) <=
                   pc_max_deviation --Lalit
               and cfq.base_cur_id = pc_to_cur_id
               and cfq.quote_cur_id = pc_from_cur_id;
          exception
            when no_data_found then
              vd_upper_date := null;
          end;
          vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                    999);
          vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                    999);
          if vd_lower_date is null and vd_upper_date is null then
            vd_maturity_date    := null;
            pc_settlement_price := 0;
          else
            if vn_lower_date_diff <= vn_upper_date_diff then
              vd_maturity_date := vd_lower_date;
            else
              vd_maturity_date := vd_upper_date;
            end if;
          end if;
        end if;
      
        if vd_maturity_date is not null then
          begin
            select 1 / t.settlement_price,
                   t.sum_forward_point
              into pc_settlement_price,
                   pc_sum_of_forward_point
              from (select cfq.rate settlement_price,
                           nvl(cfq.forward_point, 0) sum_forward_point
                      from mv_cfq_cci_cur_forward_quotes cfq,
                           div_der_instrument_valuation  div
                     where cfq.corporate_id = pc_corporate_id
                       and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
                       and cfq.instrument_id=div.instrument_id
                       and cfq.price_source_id=div.price_source_id
                       and div.is_deleted='N'
                       and cfq.prompt_date = vd_maturity_date
                       and cfq.base_cur_id = pc_to_cur_id
                       and cfq.quote_cur_id = pc_from_cur_id) t;
          exception
            when no_data_found then
              pc_settlement_price     := 0;
              pc_sum_of_forward_point := 0;
          end;
        else
          pc_settlement_price     := 0;
          pc_sum_of_forward_point := 0;
        end if;
      end if;
      pc_settlement_price := round(nvl(pc_settlement_price, 0), 10);
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_forward_cur_exchange_old
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Janna
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date                date;
    vd_upper_date                date;
    vd_maturity_date             date;
    vn_lower_date_diff           number;
    vn_upper_date_diff           number;
    vc_base_cur_id               varchar2(30);
    pc_settlement_price_from     number;
    pc_sum_of_forward_point_from number;
    pc_settlement_price_to       number;
    pc_sum_of_forward_point_to   number;
  begin
    begin
      select akc.base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
    
    end;
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_currency_forward_quotes cfq
         where cfq.corporate_id = pc_corporate_id
           and cfq.trade_date = pd_trade_date
           and cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_from_cur_id
           and cfq.quote_cur_id = pc_to_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date <= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_lower_date := null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date >= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --Lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_upper_date := null;
        end;
        vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                  999);
        vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                  999);
        if vd_lower_date is null and vd_upper_date is null then
          vd_maturity_date    := null;
          pc_settlement_price := 0;
        else
          if vn_lower_date_diff <= vn_upper_date_diff then
            vd_maturity_date := vd_lower_date;
          else
            vd_maturity_date := vd_upper_date;
          end if;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        begin
          select t.settlement_price,
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_currency_forward_quotes cfq
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date = pd_trade_date
                     and cfq.prompt_date = vd_maturity_date
                     and cfq.base_cur_id = pc_from_cur_id
                     and cfq.quote_cur_id = pc_to_cur_id) t;
        exception
          when no_data_found then
            pc_settlement_price     := 0;
            pc_sum_of_forward_point := 0;
        end;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
      if vd_lower_date is null and vd_upper_date is null and
         pc_settlement_price = 0 then
        -- its likely that the pair is not configured.
        --try reverse pair 
        if pc_from_cur_id != vc_base_cur_id then
          sp_forward_cur_exchange_sub(pc_corporate_id,
                                      pd_trade_date,
                                      pc_maturity_date,
                                      pc_from_cur_id,
                                      vc_base_cur_id,
                                      pc_max_deviation,
                                      pc_settlement_price_from,
                                      pc_sum_of_forward_point_from);
        else
          pc_settlement_price_from     := 1;
          pc_sum_of_forward_point_from := 0;
        end if;
        if pc_to_cur_id != vc_base_cur_id then
          sp_forward_cur_exchange_sub(pc_corporate_id,
                                      pd_trade_date,
                                      pc_maturity_date,
                                      pc_to_cur_id,
                                      vc_base_cur_id,
                                      pc_max_deviation,
                                      pc_settlement_price_to,
                                      pc_sum_of_forward_point_to);
        else
          pc_settlement_price_to     := 1;
          pc_sum_of_forward_point_to := 0;
        end if;
        if nvl(pc_settlement_price_from, 0) <> 0 and
           nvl(pc_settlement_price_to, 0) <> 0 then
          pc_settlement_price     := pc_settlement_price_from /
                                     pc_settlement_price_to;
          pc_sum_of_forward_point := pc_sum_of_forward_point_from; --Fix for automation-- /pc_sum_of_forward_point_to;
        else
          sp_forward_cur_exchange_sub(pc_corporate_id,
                                      pd_trade_date,
                                      pc_maturity_date,
                                      pc_to_cur_id,
                                      pc_from_cur_id,
                                      pc_max_deviation,
                                      pc_settlement_price,
                                      pc_sum_of_forward_point);
          if nvl(pc_settlement_price, 0) = 0 then
            if pc_to_cur_id != vc_base_cur_id then
              sp_forward_cur_exchange_sub(pc_corporate_id,
                                          pd_trade_date,
                                          pc_maturity_date,
                                          pc_to_cur_id,
                                          vc_base_cur_id,
                                          pc_max_deviation,
                                          pc_settlement_price_from,
                                          pc_sum_of_forward_point_from);
            else
              pc_settlement_price_from     := 1;
              pc_sum_of_forward_point_from := 0;
            end if;
            if pc_from_cur_id != vc_base_cur_id then
              sp_forward_cur_exchange_sub(pc_corporate_id,
                                          pd_trade_date,
                                          pc_maturity_date,
                                          pc_from_cur_id,
                                          vc_base_cur_id,
                                          pc_max_deviation,
                                          pc_settlement_price_to,
                                          pc_sum_of_forward_point_to);
            else
              pc_settlement_price_to     := 1;
              pc_sum_of_forward_point_to := 0;
            end if;
            if nvl(pc_settlement_price_from, 0) <> 0 and
               nvl(pc_settlement_price_to, 0) <> 0 then
              pc_settlement_price     := pc_settlement_price_from /
                                         pc_settlement_price_to;
              pc_sum_of_forward_point := pc_sum_of_forward_point_from; --fix for automation --/pc_sum_of_forward_point_to;
            else
              pc_settlement_price     := 0;
              pc_sum_of_forward_point := 0;
            end if;
          end if;
        end if;
      end if;
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
    --pc_settlement_price     := 1;
    --pc_sum_of_forward_point := 0;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_forward_cur_exchange_sub
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Janna
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
    vc_base_cur_id     varchar2(30);
    --pc_settlement_price_from     NUMBER;
    --pc_sum_of_forward_point_from NUMBER;
    --pc_settlement_price_to       NUMBER;
    --pc_sum_of_forward_point_to   NUMBER;
  begin
    begin
      select akc.base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
    end;
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_currency_forward_quotes cfq
         where cfq.corporate_id = pc_corporate_id
              --AND    cfq.groupid = akc.groupid preeti
           and cfq.trade_date = pd_trade_date
           and cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_from_cur_id
           and cfq.quote_cur_id = pc_to_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
                --AND    cfq.groupid = akc.groupid preeti
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date <= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_lower_date := null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date >= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --Lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_upper_date := null;
        end;
        vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                  999);
        vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                  999);
        if vd_lower_date is null and vd_upper_date is null then
          vd_maturity_date    := null;
          pc_settlement_price := 0;
        else
          if vn_lower_date_diff <= vn_upper_date_diff then
            vd_maturity_date := vd_lower_date;
          else
            vd_maturity_date := vd_upper_date;
          end if;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select cfq.rate settlement_price,
                       nvl(cfq.forward_point, 0) sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                      --AND    cfq.groupid = akc.groupid preeti
                   and cfq.trade_date = pd_trade_date
                   and cfq.prompt_date = vd_maturity_date
                   and cfq.base_cur_id = pc_from_cur_id
                   and cfq.quote_cur_id = pc_to_cur_id) t;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  function fn_forward_interest_rate
  /**************************************************************************************************
    Function Name                       : sp_forward_Interest_rate
    Author                              : LALIT
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward Interest rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id      in varchar2,
   pd_trade_date        in date,
   pc_payment_due_date  in date,
   pc_ir_id             in varchar2,
   pc_interest_curve_id in varchar2) return number is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
    vn_interest_rate   number;
  begin
    begin
      select max(icd.maturity_date)
        into vd_lower_date
        from ich_interest_curve_header@eka_appdb ich,
             icd_interest_curve_detail@eka_appdb icd
       where icd.maturity_date < pc_payment_due_date
         and icd.ir_id = ich.ir_id
         and ich.interest_curve_id = pc_interest_curve_id
         and icd.ir_id = pc_ir_id
         and ich.trade_date = pd_trade_date;
    end;
    begin
      select min(icd.maturity_date)
        into vd_lower_date
        from ich_interest_curve_header@eka_appdb ich,
             icd_interest_curve_detail@eka_appdb icd
       where icd.maturity_date > pc_payment_due_date
         and icd.ir_id = ich.ir_id
         and ich.interest_curve_id = pc_interest_curve_id
         and icd.ir_id = pc_ir_id
         and ich.trade_date = pd_trade_date;
    end;
    vn_lower_date_diff := abs(pc_payment_due_date - vd_lower_date);
    vn_upper_date_diff := abs(pc_payment_due_date - vd_upper_date);
    if vn_lower_date_diff < vn_upper_date_diff then
      vd_maturity_date := vd_lower_date;
    else
      vd_maturity_date := vd_upper_date;
    end if;
    select icd.market_rate
      into vn_interest_rate
      from ich_interest_curve_header@eka_appdb ich,
           icd_interest_curve_detail@eka_appdb icd
     where icd.maturity_date = vd_maturity_date
       and icd.ir_id = ich.ir_id
       and ich.interest_curve_id = pc_interest_curve_id
       and icd.ir_id = pc_ir_id
       and ich.trade_date = pd_trade_date;
    return(vn_interest_rate);
  end;

  function f_get_currency_pair(pc_corporate_id  varchar2,
                               pc_from_cur_id   in varchar2,
                               pc_from_cur_code in varchar2,
                               pc_to_cur_id     in varchar2,
                               pc_to_cur_code   in varchar2) return varchar2 is
    vc_result        varchar2(100);
    vc_base_cur_id   varchar2(15);
    vc_base_cur_code varchar2(15);
    vc_result1       varchar2(50);
    vc_result2       varchar2(50);
  begin
    select cm.cur_id,
           cm.cur_code
      into vc_base_cur_id,
           vc_base_cur_code
      from ak_corporate       akc,
           cm_currency_master cm
     where akc.corporate_id = pc_corporate_id
       and akc.base_currency_name = cm.cur_code;
    if pc_from_cur_id <> pc_to_cur_id then
      --
      -- Check the to currency in the currency pair
      -- If it is Base currency then we need to get the exchange rate directly
      --
      if pc_to_cur_id = vc_base_cur_id then
        vc_result := pc_from_cur_code || '/' || pc_to_cur_code;
      else
        -- Get Exchange Rate from 'From Currency ID' to Base Currency ID = X
        -- Get Exchange Rate from 'To Currency ID' to Base Currency ID = Y
        -- Exchange Rate and Forward Point = X/Y
        if pc_from_cur_id <> vc_base_cur_id then
          vc_result1 := pc_from_cur_code || '/' || vc_base_cur_code;
        else
          vc_result1 := '';
        end if;
        if pc_to_cur_id <> vc_base_cur_id then
          vc_result2 := pc_to_cur_code || '/' || vc_base_cur_code;
        else
          vc_result2 := '';
        end if;
        if vc_result1 is not null and vc_result2 is not null then
          vc_result := vc_result1 || ', ' || vc_result2;
        elsif vc_result1 is null and vc_result2 is not null then
          vc_result := vc_result2;
        elsif vc_result1 is not null and vc_result2 is null then
          vc_result := vc_result1;
        else
          vc_result := '';
        end if;
      end if;
    else
      vc_result := '';
    end if;
    return(vc_result);
  exception
    when no_data_found then
      vc_result := '';
      return(vc_result);
    when others then
      vc_result := '';
      return(vc_result);
  end;

  function f_get_currency_pair_decimals(pc_from_cur_id in varchar2,
                                        pc_to_cur_id   in varchar2)
    return number is
    vn_cur_decimal number;
  begin
    begin
      vn_cur_decimal := 8;
      /* SELECT nvl(fcm.factor, 8)
       INTO vn_cur_decimal
       FROM fcm_forex_conversion_master fcm
      WHERE fcm.from_cur_unit_id = pc_from_cur_id
        AND fcm.to_cur_unit_id = pc_to_cur_id;*/
    exception
      when no_data_found then
        vn_cur_decimal := 8;
      when others then
        vn_cur_decimal := 8;
    end;
    return(vn_cur_decimal);
  end;
  function fn_mass_volume_qty_conversion(
                                         
                                         pc_product_id                 in varchar2,
                                         pc_from_qty_unit_id           in varchar2,
                                         pc_to_qty_unit_id             in varchar2,
                                         pn_qty_to_be_converted        in number,
                                         pn_gravity                    in number,
                                         pc_gravity_type               in varchar2,
                                         pc_density_mass_qty_unit_id   in varchar2,
                                         pc_density_volume_qty_unit_id in varchar2)
    return number is
    vn_conv_factor            number;
    vn_converted_qty          number;
    vc_is_same_classification varchar2(1);
    vn_gravity_to_use         number;
    vn_api_gravity_dividend   number(20, 5) := 141.5;
    vn_api_gravity_add        number(20, 5) := 131.5;
    vn_temp_result            number;
  begin
  
    vc_is_same_classification := f_get_is_same_classification(pc_from_qty_unit_id,
                                                              pc_to_qty_unit_id);
  
    if (vc_is_same_classification = 'Y') then
    
      vn_conv_factor   := f_get_conv_factor(pc_from_qty_unit_id,
                                            pc_to_qty_unit_id,
                                            pc_product_id);
      vn_converted_qty := pn_qty_to_be_converted * vn_conv_factor;
    
    else
      if (pc_gravity_type = 'SG') then
        vn_gravity_to_use := pn_gravity;
      else
        vn_gravity_to_use := vn_api_gravity_dividend /
                             (pn_gravity + vn_api_gravity_add);
      end if;
    
      vc_is_same_classification := f_get_is_same_classification(pc_from_qty_unit_id,
                                                                pc_density_mass_qty_unit_id);
      if (vc_is_same_classification = 'Y') then
        vn_conv_factor   := f_get_conv_factor(pc_from_qty_unit_id,
                                              pc_density_mass_qty_unit_id,
                                              pc_product_id);
        vn_temp_result   := pn_qty_to_be_converted * vn_conv_factor;
        vn_temp_result   := vn_temp_result / vn_gravity_to_use;
        vn_converted_qty := vn_temp_result *
                            f_get_conv_factor(pc_density_volume_qty_unit_id,
                                              pc_to_qty_unit_id,
                                              pc_product_id);
      else
        vn_conv_factor   := f_get_conv_factor(pc_from_qty_unit_id,
                                              pc_density_volume_qty_unit_id,
                                              pc_product_id);
        vn_temp_result   := pn_qty_to_be_converted * vn_conv_factor;
        vn_temp_result   := vn_temp_result * vn_gravity_to_use;
        vn_converted_qty := vn_temp_result *
                            f_get_conv_factor(pc_density_mass_qty_unit_id,
                                              pc_to_qty_unit_id,
                                              pc_product_id);
      end if;
    
    end if;
  
    return vn_converted_qty;
  
  exception
    when no_data_found then
      return - 1;
    when others then
      return - 1;
    
  end;

  procedure sp_bank_fx_rate
 /**************************************************************************************************
   Function Name                       : sp_bank_fx_rate
   Author                              : Suresh Gottipati
   Created Date                        : 03rd Feb 2012
   Purpose                             : To get forward exchange rates
   
   Parameters                          :
   
   Returns                             :
   
   Number                              : Converted Qty
   
   Modification History
   
   Modified Date  :
   Modified By  :
   Modify Description :
   ***************************************************************************************************/
 (pc_corporate_id         in varchar2,
  pd_trade_date           in date,
  pd_maturity_date        in date,
  pc_from_cur_id          in varchar2,
  pc_to_cur_id            in varchar2,
  pc_max_deviation        in number,
  pc_from_where           in varchar2,
  pc_process              in varchar2,
  pc_settlement_price     out number,
  pc_sum_of_forward_point out number) is
   vd_lower_date       date;
   vd_upper_date       date;
   vd_maturity_date    date;
   vn_lower_date_diff  number;
   vn_upper_date_diff  number;
   vobj_error_log      tableofpelerrorlog := tableofpelerrorlog();
   vn_eel_error_count  number := 1;
   vc_from_cur_code    varchar2(15);
   vc_to_cur_code      varchar2(15);
   vc_insturment_id    varchar2(15);
   vd_valid_quote_date date;
 begin
   if pc_from_cur_id = pc_to_cur_id then
     pc_settlement_price     := 1;
     pc_sum_of_forward_point := 0;
   else
     begin
       select cm.cur_code
         into vc_from_cur_code
         from cm_currency_master cm
        where cm.cur_id = pc_from_cur_id;
       select cm.cur_code
         into vc_to_cur_code
         from cm_currency_master cm
        where cm.cur_id = pc_to_cur_id;
       begin
         select cci.instrument_id,
                cdim.valid_quote_date
           into vc_insturment_id,
                vd_valid_quote_date
           from cci_corp_currency_instrument cci,
                cdim_corporate_dim           cdim,
                dim_der_instrument_master    dim,
                pdd_product_derivative_def   pdd,
                pdm_productmaster            pdm
          where cci.corporate_id = pc_corporate_id
            and cci.instrument_id = cdim.instrument_id
            and dim.instrument_id = cdim.instrument_id
            and dim.product_derivative_id = pdd.derivative_def_id
            and pdd.product_id = pdm.product_id
            and pdm.base_cur_id = pc_from_cur_id
            and pdm.quote_cur_id = pc_to_cur_id
            and cci.is_deleted = 'N'
            and cdim.is_active = 'Y'
            and pdm.is_active='Y'
            and pdd.is_active='Y'
            and dim.is_active='Y';
       exception
         when no_data_found then
           select cci.instrument_id,
                  cdim.valid_quote_date
             into vc_insturment_id,
                  vd_valid_quote_date
             from cci_corp_currency_instrument cci,
                  cdim_corporate_dim           cdim,
                  dim_der_instrument_master    dim,
                  pdd_product_derivative_def   pdd,
                  pdm_productmaster            pdm
            where cci.corporate_id = pc_corporate_id
              and cci.instrument_id = cdim.instrument_id
              and dim.instrument_id = cdim.instrument_id
              and dim.product_derivative_id = pdd.derivative_def_id
              and pdd.product_id = pdm.product_id
              and pdm.base_cur_id = pc_to_cur_id
              and pdm.quote_cur_id = pc_from_cur_id
              and cci.is_deleted = 'N'
              and cdim.is_active = 'Y'
              and dim.is_active='Y'
              and pdd.is_active='Y'
              and pdm.is_active='Y';
       end;
     
       if pc_from_cur_id <> pc_to_cur_id then
         begin
           select max(cfq.prompt_date)
             into vd_maturity_date
             from mv_cfq_cci_cur_forward_quotes cfq,
             div_der_instrument_valuation div
            where cfq.corporate_id = pc_corporate_id
              and cfq.instrument_id = vc_insturment_id
              and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
              and cfq.prompt_date = pd_maturity_date
              and cfq.base_cur_id = pc_from_cur_id
              and cfq.quote_cur_id = pc_to_cur_id
              and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N' ;
         exception
           when no_data_found then
             vd_maturity_date := null;
         end;
         if vd_maturity_date is null then
           begin
             select max(cfq.prompt_date)
               into vd_lower_date
               from mv_cfq_cci_cur_forward_quotes cfq,
               div_der_instrument_valuation div
              where cfq.corporate_id = pc_corporate_id
                and cfq.instrument_id = vc_insturment_id
                and cfq.trade_date =
                    nvl(vd_valid_quote_date, pd_trade_date)
                and cfq.prompt_date <= pd_maturity_date
                and abs(pd_maturity_date - cfq.prompt_date) <=
                    pc_max_deviation --lalit
                and cfq.base_cur_id = pc_from_cur_id
                and cfq.quote_cur_id = pc_to_cur_id
                and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N';
           exception
             when no_data_found then
               vd_lower_date := null;
           end;
           begin
             select min(cfq.prompt_date)
               into vd_upper_date
               from mv_cfq_cci_cur_forward_quotes cfq,
               div_der_instrument_valuation div
              where cfq.corporate_id = pc_corporate_id
                and cfq.instrument_id = vc_insturment_id
                and cfq.trade_date =
                    nvl(vd_valid_quote_date, pd_trade_date)
                and cfq.prompt_date >= pd_maturity_date
                and abs(pd_maturity_date - cfq.prompt_date) <=
                    pc_max_deviation --Lalit
                and cfq.base_cur_id = pc_from_cur_id
                and cfq.quote_cur_id = pc_to_cur_id
                and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N';
           exception
             when no_data_found then
               vd_upper_date := null;
           end;
           vn_lower_date_diff := nvl(abs(pd_maturity_date - vd_lower_date),
                                     999);
           vn_upper_date_diff := nvl(abs(pd_maturity_date - vd_upper_date),
                                     999);
           if vd_lower_date is null and vd_upper_date is null then
             vd_maturity_date    := null;
             pc_settlement_price := 0;
           else
             if vn_lower_date_diff <= vn_upper_date_diff then
               vd_maturity_date := vd_lower_date;
             else
               vd_maturity_date := vd_upper_date;
             end if;
           end if;
         end if;
         --If the maturity date is configured for the currency pair get the exchange rate
         if vd_maturity_date is not null then
           begin
             select t.settlement_price,
                    t.sum_forward_point
               into pc_settlement_price,
                    pc_sum_of_forward_point
               from (select cfq.rate settlement_price,
                            nvl(cfq.forward_point, 0) sum_forward_point
                       from mv_cfq_cci_cur_forward_quotes cfq,
                       div_der_instrument_valuation div
                      where cfq.corporate_id = pc_corporate_id
                        and cfq.instrument_id = vc_insturment_id
                        and cfq.trade_date =
                            nvl(vd_valid_quote_date, pd_trade_date)
                        and cfq.prompt_date = vd_maturity_date
                        and cfq.base_cur_id = pc_from_cur_id
                        and cfq.quote_cur_id = pc_to_cur_id
                        and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N'
                        ) t;
           exception
             when no_data_found then
               pc_settlement_price     := 0;
               pc_sum_of_forward_point := 0;
           end;
         else
           pc_settlement_price     := 0;
           pc_sum_of_forward_point := 0;
         end if;
         if pc_settlement_price = 0 then
           -- its likely that the pair is not configured.
           --try reverse pair 
           begin
             select max(cfq.prompt_date)
               into vd_maturity_date
               from mv_cfq_currency_forward_quotes cfq,
               div_der_instrument_valuation div
              where cfq.corporate_id = pc_corporate_id
                and cfq.instrument_id = vc_insturment_id
                and cfq.trade_date =
                    nvl(vd_valid_quote_date, pd_trade_date)
                and cfq.prompt_date = pd_maturity_date
                and cfq.base_cur_id = pc_to_cur_id
                and cfq.quote_cur_id = pc_from_cur_id
                and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N';
           exception
             when no_data_found then
               vd_maturity_date := null;
           end;
         
           if vd_maturity_date is null then
             begin
               select max(cfq.prompt_date)
                 into vd_lower_date
                 from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation div
                where cfq.corporate_id = pc_corporate_id
                  and cfq.instrument_id = vc_insturment_id
                  and cfq.trade_date =
                      nvl(vd_valid_quote_date, pd_trade_date)
                  and cfq.prompt_date <= pd_maturity_date
                  and abs(pd_maturity_date - cfq.prompt_date) <=
                      pc_max_deviation --lalit
                  and cfq.base_cur_id = pc_to_cur_id
                  and cfq.quote_cur_id = pc_from_cur_id
                  and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N';
             exception
               when no_data_found then
                 vd_lower_date := null;
             end;
             begin
               select min(cfq.prompt_date)
                 into vd_upper_date
                 from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation div
                where cfq.corporate_id = pc_corporate_id
                  and cfq.instrument_id = vc_insturment_id
                  and cfq.trade_date =
                      nvl(vd_valid_quote_date, pd_trade_date)
                  and cfq.prompt_date >= pd_maturity_date
                  and abs(pd_maturity_date - cfq.prompt_date) <=
                      pc_max_deviation --Lalit
                  and cfq.base_cur_id = pc_to_cur_id
                  and cfq.quote_cur_id = pc_from_cur_id
                  and cfq.instrument_id = div.instrument_id
              and cfq.price_source_id = div.price_source_id
              and div.is_deleted ='N';
             exception
               when no_data_found then
                 vd_upper_date := null;
             end;
             vn_lower_date_diff := nvl(abs(pd_maturity_date - vd_lower_date),
                                       999);
             vn_upper_date_diff := nvl(abs(pd_maturity_date - vd_upper_date),
                                       999);
             if vd_lower_date is null and vd_upper_date is null then
               vd_maturity_date    := null;
               pc_settlement_price := 0;
             else
               if vn_lower_date_diff <= vn_upper_date_diff then
                 vd_maturity_date := vd_lower_date;
               else
                 vd_maturity_date := vd_upper_date;
               end if;
             end if;
           end if;
         
           if vd_maturity_date is not null then
             begin
               select 1 / t.settlement_price,
                      t.sum_forward_point
                 into pc_settlement_price,
                      pc_sum_of_forward_point
                 from (select cfq.rate settlement_price,
                              nvl(cfq.forward_point, 0) sum_forward_point
                         from mv_cfq_cci_cur_forward_quotes cfq,
                         div_der_instrument_valuation div
                        where cfq.corporate_id = pc_corporate_id
                          and cfq.instrument_id = vc_insturment_id
                          and cfq.trade_date =
                              nvl(vd_valid_quote_date, pd_trade_date)
                          and cfq.prompt_date = vd_maturity_date
                          and cfq.base_cur_id = pc_to_cur_id
                          and cfq.quote_cur_id = pc_from_cur_id
                          and cfq.instrument_id = div.instrument_id
                          and cfq.price_source_id = div.price_source_id
                          and div.is_deleted ='N') t;
             exception
               when no_data_found then
                 pc_settlement_price     := 0;
                 pc_sum_of_forward_point := 0;
             end;
           else
             pc_settlement_price     := 0;
             pc_sum_of_forward_point := 0;
           end if;
         end if;
       else
         pc_settlement_price     := 1;
         pc_sum_of_forward_point := 0;
       end if;
     exception
       when others then
         pc_settlement_price     := 0;
         pc_sum_of_forward_point := 0;
     end;
   end if;
   pc_settlement_price := round(nvl(pc_settlement_price, 0), 10);
 
   if pc_settlement_price = 0 or pc_settlement_price is null then
     vobj_error_log.extend;
     vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                          pc_from_where,
                                                          'PHY-005',
                                                          vc_from_cur_code ||
                                                          ' to ' ||
                                                          vc_to_cur_code || ' (' ||
                                                          to_char(pd_maturity_date,
                                                                  'dd-Mon-yyyy') || ') ' ||
                                                          'Trade date:' || ' ' ||
                                                          to_char(vd_valid_quote_date,
                                                                  'dd-Mon-yyyy'),
                                                          '', -- trade_ref_no
                                                          pc_process,
                                                          null, -- pc_user_id,
                                                          sysdate,
                                                          pd_trade_date);
     sp_insert_error_log(vobj_error_log);
   end if;
 end;
 
function fn_get_next_month_prompt_date(pc_promp_del_cal_id varchar2,
                                         pd_trade_date       date)
    return date is
    cursor cr_monthly_prompt_rule is
      select mpc.*
        from mpc_monthly_prompt_calendar mpc
       where mpc.prompt_delivery_calendar_id = pc_promp_del_cal_id;
  
    cursor cr_applicable_months is
      select mpcm.*
        from mpcm_monthly_prompt_cal_month mpcm,
             mnm_month_name_master         mnm
       where mpcm.prompt_delivery_calendar_id = pc_promp_del_cal_id
         and mpcm.applicable_month = mnm.month_name_id
       order by mnm.display_order;
  
    pc_pdc_period_type_id      varchar2(15);
    pc_month_prompt_start_date date;
    pc_equ_period_type         number;
    cr_monthly_prompt_rule_rec cr_monthly_prompt_rule%rowtype;
    pc_period_to               number;
    pc_start_date              date;
    pc_end_date                date;
    pc_month                   varchar2(15);
    pc_year                    number;
    pn_month_count             number(5);
    vc_prompt_date             date;
  begin
    pc_month_prompt_start_date := pd_trade_date;
    pn_month_count             := 0;
    begin
      select pm.period_type_id
        into pc_pdc_period_type_id
        from pm_period_master pm
       where pm.period_type_name = 'Month';
    end;
  
    open cr_monthly_prompt_rule;
  
    fetch cr_monthly_prompt_rule
      into cr_monthly_prompt_rule_rec;
  
    pc_period_to := cr_monthly_prompt_rule_rec.period_for; --no of forward months required
  
    begin
      select pm.equivalent_days
        into pc_equ_period_type
        from pm_period_master pm
       where pm.period_type_id = cr_monthly_prompt_rule_rec.period_type_id;
    end;
    pc_start_date := pc_month_prompt_start_date;
    pc_end_date   := pc_month_prompt_start_date +
                     (pc_period_to * pc_equ_period_type);
    for cr_applicable_months_rec in cr_applicable_months
    loop
      pc_month_prompt_start_date := to_date(('01-' ||
                                            cr_applicable_months_rec.applicable_month || '-' ||
                                            to_char(pc_start_date, 'YYYY')),
                                            'dd/mm/yyyy');
      --------------------
      dbms_output.put_line('pc_month_prompt_start_date ' ||
                           pc_month_prompt_start_date);
      if (pc_month_prompt_start_date >=
         to_date(('01-' || to_char(pc_start_date, 'Mon-YYYY')),
                  'dd/mm/yyyy') and
         pc_month_prompt_start_date <= pc_end_date) then
        pn_month_count := pn_month_count + 1;
        if pn_month_count = 1 then
          pc_month := to_char(pc_month_prompt_start_date, 'Mon');
          pc_year  := to_char(pc_month_prompt_start_date, 'YYYY');
        end if;
      end if;
      exit when pn_month_count > 1;
      dbms_output.put_line('pc_month pc_year ' || pc_month || '-' ||
                           pc_year);
      ---------------
    end loop;
    close cr_monthly_prompt_rule;
    if pc_month is not null and pc_year is not null then
      vc_prompt_date := to_date('01-' || pc_month || '-' || pc_year,
                                'dd-Mon-yyyy');
    end if;
    return vc_prompt_date;
  end;

end; 
/
declare
  cursor c1 is
    select ct.internal_treasury_ref_no,
           ct.strategy_id,
           css.strategy_name
      from ct_currency_trade            ct,
           css_corporate_strategy_setup css
     where ct.strategy_id = css.strategy_id
     group by ct.internal_treasury_ref_no,
              ct.strategy_id,
              css.strategy_name;
begin
  for c1_rows in c1
  loop
    update cpd_currency_pnl_daily cpd
       set cpd.strategy_id   = c1_rows.strategy_id,
           cpd.strategy_name = c1_rows.strategy_name
     where cpd.ct_internal_ref_no = c1_rows.internal_treasury_ref_no
     and cpd.strategy_id is null;
  end loop;
commit;  
end;
/
create or replace package "PKG_CDC_DERIVATIVES_PROCESS" is

  gvc_previous_process_id varchar2(15);

  gvc_dbd_id varchar2(15);

  gvc_previous_process_date date;

  procedure sp_process_run(pc_corporate_id varchar2,
                           pd_trade_date   date,
                           pc_process_id   varchar2,
                           pc_user_id      varchar2,
                           pc_process      varchar2,
                           pc_dbd_id       varchar2);

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date,
                               pc_process      varchar2,
                               pc_dbd_id       varchar2);

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2);

  procedure sp_cdc_rebuild_stats;

  procedure sp_calc_future_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2);

  procedure sp_calc_future_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2);

  procedure sp_calc_forward_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2,
                                           pc_dbd_id       varchar2);

  procedure sp_calc_forward_realized_pnl(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2,
                                         pc_dbd_id       varchar2);

  procedure sp_calc_option_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2);

  procedure sp_calc_option_unr_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2);

  procedure sp_calc_swap_unrealized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2);

  procedure sp_calc_option_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2);

  procedure sp_calc_option_rea_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_dbd_id       varchar2);

  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2;

  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number;

  function f_get_converted_currency_amt(pc_corporate_id        in varchar2,
                                        pc_from_cur_id         in varchar2,
                                        pc_to_cur_id           in varchar2,
                                        pd_cur_date            in date,
                                        pn_amt_to_be_converted in number)
    return number;

  function f_currency_exchange_rate(pd_trade_date   date,
                                    pc_corporate_id varchar2,
                                    pd_prompt_date  varchar2,
                                    pc_from_cur_id  varchar2,
                                    pc_to_cur_id    varchar2) return number;

  function f_get_converted_price_pum(pc_corporate_id       varchar2,
                                     pn_price              number,
                                     pc_from_price_unit_id varchar2,
                                     pc_to_price_unit_id   varchar2,
                                     pd_trade_date         date,
                                     pc_product_id         varchar2)
    return number;

  function f_get_next_day(p_date     in date,
                          p_day      in varchar2,
                          p_position in number) return date;

  function f_is_day_holiday(pc_instrumentid in varchar2,
                            pc_trade_date   date) return boolean;

  procedure sp_calc_daily_initial_margin(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2);

  /*   PROCEDURE sp_calc_future_accounts(
  pc_corporate_id VARCHAR2,
  pd_trade_date   DATE,
  pc_process_id   VARCHAR2,
  pc_user_id      VARCHAR2,
  pc_process      VARCHAR2);*/
  procedure sp_mark_realized_derivatives(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2);

  procedure sp_mark_new_derivative_trades(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2);

  procedure sp_calc_undo_closeout(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2);

  procedure sp_calc_undo_settled(pc_corporate_id varchar2,
                                 pd_trade_date   date,
                                 pc_process_id   varchar2,
                                 pc_user_id      varchar2,
                                 pc_process      varchar2);

  procedure sp_calc_clearer_summary(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2);

  procedure recordfxpnl(p_corporateid varchar2,
                        p_tradedate   date,
                        p_process_id  varchar2,
                        p_userid      varchar2,
                        p_prcoess     varchar2);

  --below added for early delivery/cancellation fx trades                        
  procedure sp_recordfxpnl_edcd(p_corporateid varchar2,
                                p_tradedate   date,
                                p_process_id  varchar2,
                                p_userid      varchar2,
                                p_prcoess     varchar2);

  procedure sp_calc_price_exposure(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_process      varchar2,
                                   pc_user_id      varchar2);

  procedure sp_calc_average_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_process      varchar2,
                                           pc_user_id      varchar2,
                                           pc_dbd_id       varchar2);

  procedure sp_calc_pnl_summary(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_user_id      varchar2);

  procedure sp_calc_daily_trade_pnl(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2);

  procedure sp_update_new_trade(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_process      varchar2);

  --Added by Siddharth 10-Apr-2012
  procedure sp_calc_future_unreal_pnl_attr(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2);

  procedure sp_calc_broker_margin_util(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_process      varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2);

end;
/
create or replace package body "PKG_CDC_DERIVATIVES_PROCESS" is

  procedure sp_process_run(pc_corporate_id varchar2,
                           pd_trade_date   date,
                           pc_process_id   varchar2,
                           pc_user_id      varchar2,
                           pc_process      varchar2,
                           pc_dbd_id       varchar2 --eod or eom
                           ----------------------------------------------------------------------
                           --        procedure name                            : sp_process_run
                           --        author                                    :
                           --        created date                              : 10 th jan 2011
                           --        purpose                                   : calls all procedures for eod
                           --        parameters
                           --        pc_corporate_id                           : corporate id
                           --        pd_trade_date                             : trade date
                           --        pc_process_id                             : eod/eom reference no
                           --        modification history
                           --        modified date                             :
                           --        modified by                               :
                           --        modify description                        :
                           --------------------------------------------------------------------------------------------------------------------------
                           ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 0;
    vc_prev_process_id varchar2(15);
    vd_prev_eod_date   date;
    --vn_err             varchar2(50);
  begin
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'EOD/EOM process Started ....');
    -- mark eod
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_process_id := null;
        vd_prev_eod_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      gvc_previous_process_id   := vc_prev_process_id;
      gvc_previous_process_date := vd_prev_eod_date;
    end if;
    /*IF pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' THEN
      GOTO cancel_process;
    END IF;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_process_id');
    sp_mark_process_id(pc_corporate_id,
                       pc_process_id,
                       pc_user_id,
                       pd_trade_date,
                       pc_process,
                       pc_dbd_id       );*/
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_cdc_rebuild_stats');
    sp_cdc_rebuild_stats;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_update_new_trade');
    sp_update_new_trade(pc_corporate_id,
                        pd_trade_date,
                        pc_process_id,
                        pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_future_unrealized_pnl');
    sp_calc_future_unrealized_pnl(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id,
                                  pc_process,
                                  pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_realized_derivatives');
    sp_mark_realized_derivatives(pc_corporate_id,
                                 pd_trade_date,
                                 pc_process_id,
                                 pc_user_id,
                                 pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_future_realized_pnl');
    sp_calc_future_realized_pnl(pc_corporate_id,
                                pd_trade_date,
                                pc_process_id,
                                pc_user_id,
                                pc_process,
                                pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_forward_unrealized_pnl');
    sp_calc_forward_unrealized_pnl(pc_corporate_id,
                                   pd_trade_date,
                                   pc_process_id,
                                   pc_user_id,
                                   pc_process,
                                   pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_forward_realized_pnl');
    sp_calc_forward_realized_pnl(pc_corporate_id,
                                 pd_trade_date,
                                 pc_process_id,
                                 pc_user_id,
                                 pc_process,
                                 pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_swap_unrealized_pnl');
    sp_calc_swap_unrealized_pnl(pc_corporate_id,
                                pd_trade_date,
                                pc_process_id,
                                pc_user_id,
                                pc_process,
                                pc_dbd_id);
    /*    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_unrealized_pnl');
    sp_calc_option_unrealized_pnl(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id,
                                  pc_process);*/
    --
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_unr_ext_pnl');
    sp_calc_option_unr_ext_pnl(pc_corporate_id,
                               pd_trade_date,
                               pc_process_id,
                               pc_user_id,
                               pc_process);
    ----                                                                    
    /*   if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_realized_pnl');
    sp_calc_option_realized_pnl(pc_corporate_id,
                                pd_trade_date,
                                pc_process_id,
                                pc_user_id,
                                pc_process,
                                pc_dbd_id);*/
    ----
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_rea_ext_pnl');
    sp_calc_option_rea_ext_pnl(pc_corporate_id,
                               pd_trade_date,
                               pc_process_id,
                               pc_user_id,
                               pc_process,
                               pc_dbd_id);
    -----                                                                  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_daily_initial_margin');
    sp_calc_daily_initial_margin(pc_corporate_id,
                                 pd_trade_date,
                                 pc_process_id,
                                 pc_user_id,
                                 pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_new_derivative_trades');
    sp_mark_new_derivative_trades(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id,
                                  pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_undo_closeout');
    sp_calc_undo_closeout(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          pc_user_id,
                          pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_undo_settled');
    sp_calc_undo_settled(pc_corporate_id,
                         pd_trade_date,
                         pc_process_id,
                         pc_user_id,
                         pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_clearer_summary');
    sp_calc_clearer_summary(pc_corporate_id,
                            pd_trade_date,
                            pc_process_id,
                            pc_user_id,
                            pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'recordfxpnl');
    recordfxpnl(pc_corporate_id,
                pd_trade_date,
                pc_process_id,
                pc_user_id,
                pc_process);
    ------newly added for Fx trade early delivery/cancellation
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'recordfxpnl');
    sp_recordfxpnl_edcd(pc_corporate_id,
                        pd_trade_date,
                        pc_process_id,
                        pc_user_id,
                        pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_price_exposure');
    sp_calc_price_exposure(pc_corporate_id,
                           pd_trade_date,
                           pc_process_id,
                           pc_process,
                           pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_average_unrealized_pnl');
    sp_calc_average_unrealized_pnl(pc_corporate_id,
                                   pd_trade_date,
                                   pc_process_id,
                                   pc_process,
                                   pc_user_id,
                                   pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_pnl_summary');
    sp_calc_pnl_summary(pc_corporate_id,
                        pd_trade_date,
                        pc_process_id,
                        pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_daily_trade_pnl');
    sp_calc_daily_trade_pnl(pc_corporate_id,
                            pd_trade_date,
                            pc_process_id,
                            pc_user_id,
                            pc_process);
    --Added by Siddharth
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_future_unreal_pnl_attr');
    sp_calc_future_unreal_pnl_attr(pc_corporate_id,
                                   pd_trade_date,
                                   pc_process_id,
                                   pc_user_id,
                                   pc_process);
    --Ends here
    --Brokerage_Margin_Utilization Changes start
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_broker_margin_util');
    sp_calc_broker_margin_util(pc_corporate_id,
                               pd_trade_date,
                               pc_process_id,
                               pc_process,
                               pc_user_id,
                               pc_dbd_id);
    --Brokerage_Margin_Utilization Changes end                                  
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while pnl calculation');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_process_run',
                                                           'M2M-013',
                                                           'code:' ||
                                                           sqlcode ||
                                                           'message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date,
                               pc_process      varchar2,
                               pc_dbd_id       varchar2
                               --------------------------------------------------------------------------------------------------------------------------
                               --        procedure name                            : sp_mark_process_id
                               --        author                                    : siva
                               --        created date                              : 20th jan 2009
                               --        purpose                                   : to mark the eod refernce numbers
                               --
                               --        parameters
                               --        pc_corporate_id                           : corporate id
                               --        pd_trade_date                             : trade date
                               --        pc_process_id                             : eod reference no
                               --
                               --        modification history
                               --        modified date                             :
                               --        modified by                               :
                               --        modify description                        :
                               --------------------------------------------------------------------------------------------------------------------------
                               ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    --start marking
    update dat_derivative_aggregate_trade agd
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update crtd_cur_trade_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update dam_derivative_action_amapping
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update dt_derivative_trade
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    /*update dcoh_der_closeout_header
    set process_id=pc_process_id
     WHERE process_id IS NULL
       AND dbd_id = pc_dbd_id;
    
    update dcod_der_closeout_detail
    set process_id=pc_process_id
     WHERE process_id IS NULL
       AND dbd_id = pc_dbd_id;*/
    update dcoh_der_closeout_header
       set process_id = pc_process_id
     where process_id is null
       and corporate_id = pc_corporate_id
       and close_out_date <= pd_trade_date
       and dbd_id in (select dbd.dbd_id
                        from dbd_database_dump dbd
                       where dbd.corporate_id = pc_corporate_id
                         and dbd.process = pc_process
                         and dbd.trade_date <= pd_trade_date);
    update dcod_der_closeout_detail dcod
       set process_id = pc_process_id
     where dcod.internal_close_out_ref_no in
           (select internal_close_out_ref_no
              from dcoh_der_closeout_header
             where process_id = pc_process_id)
       and dcod.dbd_id in
           (select dbd.dbd_id
              from dbd_database_dump dbd
             where dbd.corporate_id = pc_corporate_id
               and dbd.process = pc_process
               and dbd.trade_date <= pd_trade_date);
    update ct_currency_trade
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update dt_fbi
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update fsh_fin_settlement_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    --HDL_FX_settlement change start
    update fxs_fx_settlement
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    --HDL_FX_settlement change end  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_mark_process_id',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2)
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_process_rollback
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : rollback eod
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
   is
    -- vc_process_id      VARCHAR2(15);
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    delete from dtul_derivative_trade_ul where dbd_id = pc_dbd_id;
    delete from crtdul_cur_trade_details_ul where dbd_id = pc_dbd_id;
    delete from ctul_currency_trade_ul where dbd_id = pc_dbd_id;
    --delete from eodeom_derivative_quote_detail where dbd_id = pc_dbd_id;
    delete from dt_derivative_trade where dbd_id = pc_dbd_id;
    delete from dt_fbi where dbd_id = pc_dbd_id;
    delete from crtd_cur_trade_details where dbd_id = pc_dbd_id;
    delete from ct_currency_trade where dbd_id = pc_dbd_id;
    delete from dpd_derivative_pnl_daily where process_id = pc_process_id;
    delete from dim_daily_initial_margin where process_id = pc_process_id;
    delete from dat_derivative_aggregate_trade where dbd_id = pc_dbd_id;
    delete from dam_derivative_action_amapping where dbd_id = pc_dbd_id;
    delete from cpd_currency_pnl_daily where process_id = pc_process_id;
    delete from dtp_derivative_trade_pnl where process_id = pc_process_id;
    --DELETE FROM ct_currency_trade WHERE dbd_id = pc_dbd_id;
    delete from dcoh_der_closeout_header where dbd_id = pc_dbd_id;
    delete from dcod_der_closeout_detail where dbd_id = pc_dbd_id;
    delete from fsh_fin_settlement_header where dbd_id = pc_dbd_id;
    delete from spc_summary_position_clearer
     where process_id = pc_process_id;
    update dcoh_der_closeout_header dcoh --10-jan-2011
       set dcoh.is_rolled_back       = 'N',
           dcoh.roll_back_date       = null,
           dcoh.undo_closeout_dbd_id = null
     where dcoh.undo_closeout_dbd_id = pc_dbd_id;
    update dcoh_der_closeout_header
       set process_id = null
     where process_id = pc_process_id;
    update dcod_der_closeout_detail
       set process_id = null
     where process_id = pc_process_id;
    delete from dped_drt_price_exp_details
     where process_id = pc_process_id;
    delete from dpe_derivative_price_exposure
     where process_id = pc_process_id;
    --HDL_FX_settlement change start
    delete from fxs_fx_settlement where dbd_id = pc_dbd_id;
    --HDL_FX_settlement change end
    --Brokerage_Margin_Utilization Changes start
    delete from bmu_broker_margin_utilization
     where process_id = pc_process_id;
    --Brokerage_Margin_Utilization Changes start end
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_process_rollback',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           null, --pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_cdc_rebuild_stats is
  begin
    sp_gather_stats('dpd_derivative_pnl_daily');
    sp_gather_stats('dim_daily_initial_margin');
    sp_gather_stats('dps_derivative_pnl_summary');
  end;

  procedure sp_calc_future_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_future_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_futures is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             pdd.lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             div_der_instrument_valuation   div,
             apm_available_price_master     apm,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = apm.available_price_id
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
            --         and apm.available_price_name = 'Settlement'
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and irm.instrument_type = 'Future'
         and nvl(dt.traded_on, 'Exchange') = 'Exchange'
         and upper(dt.status) = 'VERIFIED'
         and dtm.deal_type_display_name not like '%Swap%'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.open_quantity > 0
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_trade_qty_exch_unit         number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
    --Added by Siddharth---
    vn_qty_in_base_unit         number;
    vn_trade_price_in_base_cur  number;
    vn_market_price_in_base_cur number;
    --Ends here---
  begin
    for cur_futures_rows in cur_futures
    loop
      -- Trade Qty in Exchange Weight Unit
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_futures_rows.quantity_unit_id,
                                                                     cur_futures_rows.lot_size_unit_id,
                                                                     cur_futures_rows.open_quantity);
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.broker_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.clearer_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)*/
      /* commented code since from and to is reveresed 18-jul-2009
      vn_qty_in_trade_wt_unit      := f_get_converted_quantity(null, --product id
                                                                           cur_futures_rows.weight_unit_id,
                                                                           cur_futures_rows.trade_qty_unit_id,
                                                                           cur_futures_rows.trade_qty); */
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_futures_rows.quantity_unit_id,
                                                          cur_futures_rows.trade_weight_unit_id,
                                                          cur_futures_rows.open_quantity
                                                          -- this we added for drt changes. bhairu
                                                          --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                          );
      --preeti fix for open lots
      --vn_market_price_in_trade_cur := cur_futures_rows.settlement_price;
      if cur_futures_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  cur_futures_rows.trade_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                                   cur_futures_rows.settlement_weight_unit_id,
                                                                                   cur_futures_rows.trade_weight_unit_id,
                                                                                   1,
                                                                                   cur_futures_rows.gravity,
                                                                                   cur_futures_rows.gravity_type,
                                                                                   cur_futures_rows.density_mass_qty_unit_id,
                                                                                   cur_futures_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  cur_futures_rows.trade_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_futures_rows.product_id,
                                                                              cur_futures_rows.settlement_weight_unit_id,
                                                                              cur_futures_rows.trade_weight_unit_id,
                                                                              1));
      end if;
      /* he units will be the same since its defaulted in the screen
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                            cur_futures_row(i).weight /
                                            (cur_futures_rows(i).ppu_dq_weight *
                                            pkg_general.f_get_converted_quantity(null,
                                                                                  cur_futures_rows.ppu_dq_weight_unit_id,
                                                                                  cur_futures_rows.weight_unit_id,
                                                                                  1));
       */
      pkg_general.sp_get_main_cur_detail(cur_futures_rows.trade_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_futures_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_futures_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := cur_futures_rows.trade_price /
                                        nvl(cur_futures_rows.trade_weight,
                                            1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_futures_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      vn_total_trade_value_base_cur  := vn_trade_to_base_exch_rate *
                                        vn_total_trade_value_trade_cur;
      vn_total_market_value_base_cur := vn_trade_to_base_exch_rate *
                                        vn_total_market_val_trade_cur;
      ---Added by Siddharth---
      vn_qty_in_base_unit := f_get_converted_quantity(null, --product id
                                                      cur_futures_rows.quantity_unit_id,
                                                      cur_futures_rows.base_qty_unit_id,
                                                      cur_futures_rows.open_quantity
                                                      -- this we added for drt changes. bhairu
                                                      --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                      );
      if vn_qty_in_base_unit <> 0 then
        vn_trade_price_in_base_cur := vn_total_trade_value_base_cur /
                                      vn_qty_in_base_unit;
      else
        vn_trade_price_in_base_cur := 0;
      end if;
      if vn_qty_in_base_unit <> 0 then
        vn_market_price_in_base_cur := vn_total_market_value_base_cur /
                                       vn_qty_in_base_unit;
      else
        vn_market_price_in_base_cur := 0;
      end if;
      --Ends here
      /* 18-jul-2009 . commented this and replaced this with above code
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.weight_unit_id,
                                                                            cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate; */
      vn_broker_comm_in_base_cur := cur_futures_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_futures_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0);
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      --  all this check should be removed later
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur,
         open_quantity_in_base,
         trade_price_in_base,
         sett_price_in_base)
      values
        (cur_futures_rows.internal_derivative_ref_no,
         cur_futures_rows.derivative_ref_no,
         cur_futures_rows.eod_trade_date,
         cur_futures_rows.trade_date,
         cur_futures_rows.corporate_id,
         cur_futures_rows.corporate_name,
         cur_futures_rows.trader_id,
         cur_futures_rows.tradername,
         cur_futures_rows.profit_center_id,
         cur_futures_rows.profit_center_name,
         cur_futures_rows.profit_center_short_name,
         cur_futures_rows.dr_id,
         cur_futures_rows.instrument_id,
         cur_futures_rows.instrument_name,
         cur_futures_rows.instrument_symbol,
         cur_futures_rows.instrument_type_id,
         cur_futures_rows.instrument_type,
         cur_futures_rows.instrument_display_name,
         cur_futures_rows.instrument_sub_type_id,
         cur_futures_rows.instrument_sub_type,
         cur_futures_rows.derivative_def_id,
         cur_futures_rows.derivative_def_name,
         cur_futures_rows.traded_on,
         cur_futures_rows.product_id,
         cur_futures_rows.product_desc,
         cur_futures_rows.exchange_id,
         cur_futures_rows.exchange_name,
         cur_futures_rows.exchange_code,
         cur_futures_rows.lot_size,
         cur_futures_rows.lot_size_unit_id,
         cur_futures_rows.lot_size_qty_unit,
         cur_futures_rows.price_point_id,
         cur_futures_rows.price_point_name,
         cur_futures_rows.period_type_id,
         cur_futures_rows.period_type_name,
         cur_futures_rows.period_type_display_name,
         cur_futures_rows.period_month,
         cur_futures_rows.period_year,
         cur_futures_rows.period_date,
         cur_futures_rows.prompt_date,
         cur_futures_rows.dr_id_name,
         cur_futures_rows.trade_type,
         cur_futures_rows.deal_type_id,
         cur_futures_rows.deal_type_name,
         cur_futures_rows.deal_type_display_name,
         cur_futures_rows.is_multiple_leg_involved,
         cur_futures_rows.deal_category,
         cur_futures_rows.deal_sub_category,
         cur_futures_rows.strategy_id,
         cur_futures_rows.strategy_name,
         cur_futures_rows.description,
         cur_futures_rows.strategy_def_name,
         cur_futures_rows.groupid,
         cur_futures_rows.groupname,
         cur_futures_rows.purpose_id,
         cur_futures_rows.purpose_name,
         cur_futures_rows.purpose_display_name,
         cur_futures_rows.external_ref_no,
         cur_futures_rows.cp_profile_id,
         cur_futures_rows.cp_name,
         cur_futures_rows.master_contract_id,
         cur_futures_rows.broker_profile_id,
         cur_futures_rows.broker_name,
         cur_futures_rows.broker_account_id,
         cur_futures_rows.broker_account_name,
         cur_futures_rows.broker_account_type,
         cur_futures_rows.broker_comm_type_id,
         cur_futures_rows.broker_comm_amt,
         cur_futures_rows.broker_comm_cur_id,
         cur_futures_rows.broker_cur_code,
         cur_futures_rows.clearer_profile_id,
         cur_futures_rows.clearer_name,
         cur_futures_rows.clearer_account_id,
         cur_futures_rows.clearer_account_name,
         cur_futures_rows.clearer_account_type,
         cur_futures_rows.clearer_comm_type_id,
         cur_futures_rows.clearer_comm_amt,
         cur_futures_rows.clearer_comm_cur_id,
         cur_futures_rows.clearer_cur_code,
         cur_futures_rows.product,
         cur_futures_rows.productdesc,
         cur_futures_rows.quality_id,
         cur_futures_rows.quality_name,
         cur_futures_rows.quantity_unit_id,
         cur_futures_rows.quantityname,
         cur_futures_rows.open_lots, -- total_lots,--siva
         cur_futures_rows.open_quantity, -- .total_quantity,--siva
         cur_futures_rows.open_lots,
         cur_futures_rows.open_quantity,
         cur_futures_rows.exercised_lots,
         cur_futures_rows.exercised_quantity,
         cur_futures_rows.expired_lots,
         cur_futures_rows.expired_quantity,
         cur_futures_rows.trade_price_type_id,
         cur_futures_rows.trade_price,
         cur_futures_rows.trade_price_unit_id,
         cur_futures_rows.trade_cur_id,
         cur_futures_rows.trade_cur_code,
         cur_futures_rows.trade_weight,
         cur_futures_rows.trade_weight_unit_id,
         cur_futures_rows.trade_qty_unit,
         cur_futures_rows.formula_id,
         cur_futures_rows.formula_name,
         cur_futures_rows.formula_display,
         cur_futures_rows.index_instrument_id,
         cur_futures_rows.index_instrument_name,
         cur_futures_rows.strike_price,
         cur_futures_rows.strike_price_unit_id,
         cur_futures_rows.strike_cur_id,
         cur_futures_rows.strike_cur_code,
         cur_futures_rows.strike_weight,
         cur_futures_rows.strike_weight_unit_id,
         cur_futures_rows.strike_qty_unit,
         cur_futures_rows.premium_discount,
         cur_futures_rows.premium_discount_price_unit_id,
         cur_futures_rows.pd_cur_id,
         cur_futures_rows.pd_cur_code,
         cur_futures_rows.pd_weight,
         cur_futures_rows.pd_weight_unit_id,
         cur_futures_rows.pd_qty_unit,
         cur_futures_rows.premium_due_date,
         cur_futures_rows.nominee_profile_id,
         cur_futures_rows.nominee_name,
         cur_futures_rows.leg_no,
         cur_futures_rows.option_expiry_date,
         cur_futures_rows.parent_int_derivative_ref_no,
         cur_futures_rows.market_location_country,
         cur_futures_rows.market_location_state,
         cur_futures_rows.market_location_city,
         cur_futures_rows.is_what_if,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_due_date,
         cur_futures_rows.closed_lots,
         cur_futures_rows.closed_quantity,
         cur_futures_rows.is_new_trade_date,
         cur_futures_rows.status,
         cur_futures_rows.settlement_cur_id,
         cur_futures_rows.settlement_cur_code,
         cur_futures_rows.in_out_at_money_status,
         cur_futures_rows.in_out_at_money_value,
         cur_futures_rows.exercise_date,
         cur_futures_rows.expiry_date,
         cur_futures_rows.group_cur_id,
         cur_futures_rows.group_cur_code,
         cur_futures_rows.group_qty_unit_id,
         cur_futures_rows.gcd_qty_unit,
         cur_futures_rows.base_qty_unit_id,
         cur_futures_rows.base_qty_unit,
         cur_futures_rows.internal_close_out_ref_no,
         cur_futures_rows.close_out_ref_no,
         cur_futures_rows.close_out_date,
         cur_futures_rows.settlement_price,
         cur_futures_rows.settlement_price_unit_id,
         cur_futures_rows.settlement_price_cur_id,
         cur_futures_rows.settlemet_price_cur_code,
         cur_futures_rows.settlement_price_weight,
         cur_futures_rows.settlement_weight_unit_id,
         cur_futures_rows.settlement_weight_unit,
         cur_futures_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_futures_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_futures_rows.base_cur_id,
         cur_futures_rows.base_cur_code,
         cur_futures_rows.underlying_future_dr_id,
         cur_futures_rows.underlying_future_dr_id_name,
         cur_futures_rows.underlying_future_expiry_date,
         cur_futures_rows.underlying_future_quote_price,
         cur_futures_rows.underlying_fut_price_unit_id,
         cur_futures_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_futures_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur,
         vn_qty_in_base_unit,
         vn_trade_price_in_base_cur,
         vn_market_price_in_base_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type,
                                --Added by Siddharth
                                dpd_prev_day.open_quantity_in_base,
                                dpd_prev_day.base_qty_unit_id,
                                dpd_prev_day.trade_price_in_base,
                                dpd_prev_day.trade_price_unit_id,
                                dpd_prev_day.sett_price_in_base,
                                dpd_prev_day.sett_price_unit_id,
                                dpd_prev_day.broker_comm_in_base,
                                dpd_prev_day.clearer_comm_in_base,
                                dpd_prev_day.trade_cur_to_base_exch_rate,
                                dpd_prev_day.clearer_exch_rate,
                                dpd_prev_day.broker_exch_rate,
                                dpd_prev_day.pnl_in_trade_cur,
                                dpd_prev_day.settlement_price,
                                dpd_prev_day.trade_price
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur,
               dpd_today.prev_open_quantity_in_base    = cur_update.open_quantity_in_base,
               dpd_today.prev_quantity_unit_id         = cur_update.base_qty_unit_id,
               dpd_today.prev_trade_price_in_base      = cur_update.trade_price_in_base,
               dpd_today.prev_trade_price_unit_id      = cur_update.trade_price_unit_id,
               dpd_today.prev_sett_price_in_base       = cur_update.sett_price_in_base,
               dpd_today.prev_sett_price_unit_id       = cur_update.sett_price_unit_id,
               dpd_today.prev_clearer_comm_amt_in_base = cur_update.clearer_comm_in_base,
               dpd_today.prev_broker_comm_amt_in_base  = cur_update.broker_comm_in_base,
               dpd_today.prev_trade_cur_to_base_rate   = cur_update.trade_cur_to_base_exch_rate,
               dpd_today.prev_broker_exch_rate         = cur_update.broker_exch_rate,
               dpd_today.prev_clearer_exch_rate        = cur_update.clearer_exch_rate,
               dpd_today.prev_pnl_in_trade_cur         = cur_update.pnl_in_trade_cur,
               dpd_today.prev_settlement_price         = cur_update.settlement_price,
               dpd_today.prev_trade_price              = cur_update.trade_price,
               dpd_today.cont_unr_status               = 'EXISTING_TRADE'
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      --Added by Siddharth--
      -- mark the trades came as new in this eod/eom
      begin
        update dpd_derivative_pnl_daily dpd
           set dpd.cont_unr_status = 'NEW_TRADE'
         where dpd.cont_unr_status is null
           and dpd.process_id = pc_process_id
           and dpd.corporate_id = pc_corporate_id;
      exception
        when others then
          dbms_output.put_line('SQLERRM-2' || sqlerrm);
      end;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_future_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_future_realized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the realized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    cursor cur_futures is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             pdd.lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dcod.broker_comm_type_id,
             (case
               when bct_broker.settlement_type = 'RoundTurn' then
                (dt.broker_comm_amt / dt.total_lots) * dcod.lots_closed
               else
                dcod.broker_comm_amt
             end) broker_comm_amt,
             --dcod.broker_comm_amt,
             dcod.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dcod.clearer_comm_type_id,
             (case
               when bct_clearer.settlement_type = 'RoundTurn' then
                (dt.clearer_comm_amt / dt.total_lots) * dcod.lots_closed
               else
                dcod.clearer_comm_amt
             end) clearer_comm_amt,
             -- dcod.clearer_comm_amt,--
             dcod.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             dcod.lots_closed,
             dcod.quantity_closed,
             dcod.quantity_unit_id as dcod_quantity_unit_id,
             dcoh.internal_close_out_ref_no,
             dcoh.close_out_ref_no,
             dcoh.close_out_date,
             dcoh.valid_closeout_date,
             --edq.price settlement_price,
             --edq.price_unit_id settlement_price_unit_id,
             --pum_settle.cur_id settlement_price_cur_id,
             --cm_settle.cur_code settlemet_price_cur_code,
             --pum_settle.weight settlement_price_weight,
             --pum_settle.weight_unit_id settlement_weight_unit_id,
             --qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             div_der_instrument_valuation   div,
             apm_available_price_master     apm,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             dcoh_der_closeout_header       dcoh,
             dcod_der_closeout_detail       dcod,
             bct_broker_commission_types    bct_clearer,
             bct_broker_commission_types    bct_broker
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and div.available_price_id = apm.available_price_id
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dcod.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dcod.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
            --and dt.process_id=edq.process_id
            --AND dt.dr_id = edq.dr_id(+)
            --AND edq.price_unit_id = pum_settle.price_unit_id(+)
            --AND pum_settle.cur_id = cm_settle.cur_id(+)
            --AND pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dcoh.internal_close_out_ref_no =
             dcod.internal_close_out_ref_no
         and dcod.process_id = dcoh.process_id
         and dcoh.process_id = pc_process_id
         and dt.internal_derivative_ref_no =
             dcod.internal_derivative_ref_no
         and irm.instrument_type in ('Future', 'Forward')
            -- AND UPPER(dt.status) in ('closed', 'settled')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dcoh.is_rolled_back = 'N'
         and dt.clearer_comm_type_id = bct_clearer.commission_type_id(+)
         and dt.broker_comm_type_id = bct_broker.commission_type_id(+);
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clearer_comm_in_base_cur    number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    --vn_bank_fees_exch_rate         number;
    --vn_bank_fees                   number;
    --vn_bank_fees_in_base_cur       number;
    vn_trade_qty_exch_unit         number;
    vn_settlemet_price             number;
    vc_settlement_price_unit_id    varchar2(15);
    vc_settlement_cur_id           varchar2(15);
    vc_settlement_cur_code         varchar2(15);
    vc_settlement_weight           number(7, 2);
    vc_settlement_weight_unit_id   varchar2(15);
    vc_settlement_weight_unit      varchar2(15);
    vn_logno                       number := 0;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    --update drt
    /*
    update drt_derivative_trade drt
    set    (drt.close_out_ref_no, drt.close_out_date) = (select dcoh.close_out_ref_no,
                                                                dcoh.close_out_date
                                                         from   dcoh_der_closeout_header dcoh,
                                                                dcod_der_closeout_detail dcod
                                                         where  dcoh.internal_close_out_ref_no =
                                                                dcod.internal_close_out_ref_no
                                                         and    dcod.process_id =
                                                                dcoh.process_id
                                                         and    dcoh.process_id =
                                                                pc_process_id
                                                         and    dcod.internal_derivative_ref_no =
                                                                drt.internal_derivative_ref_no)
    where  drt.process_id = pc_process_id;
    */
    for cur_futures_rows in cur_futures
    loop
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_futures_rows.trade_qty_unit_id,
                                                                     cur_futures_rows.lot_size_unit_id,
                                                                     cur_futures_rows.quantity_closed);
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      if cur_futures_rows.broker_comm_cur_id <>
         cur_futures_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_out_date,
                                                                   pc_corporate_id,
                                                                   cur_futures_rows.prompt_date,
                                                                   cur_futures_rows.broker_comm_cur_id,
                                                                   cur_futures_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_futures_rows.clearer_comm_cur_id <>
         cur_futures_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_out_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.clearer_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      /*      IF cur_futures_rows.bank_fee_cur_id IS NOT NULL AND
         cur_futures_rows.bank_fee_cur_id <> cur_futures_rows.base_cur_id THEN
        vn_bank_fees_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_date,
                                                                                   pc_corporate_id,
                                                                                   cur_futures_rows.prompt_date,
                                                                                   cur_futures_rows.bank_fee_cur_id,
                                                                                   cur_futures_rows.base_cur_id);
      ELSE
        vn_bank_fees_exch_rate := 1;
      END IF;*/
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      --vn_qty_in_trade_wt_unit      := f_get_converted_quantity(null, --product id
      --                                                                     cur_futures_rows.weight_unit_id,
      --                                                                     cur_futures_rows.trade_qty_unit_id,
      --                                                                     cur_futures_rows.trade_qty);
      --we should be getting the closed quantity
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_futures_rows.trade_qty_unit_id,
                                                          cur_futures_rows.trade_weight_unit_id,
                                                          cur_futures_rows.quantity_closed);
      ---    vn_market_price_in_trade_cur := cur_futures_rows.settlement_price;
      begin
        select dqd.price,
               dqd.price_unit_id,
               pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vn_settlemet_price,
               vc_settlement_price_unit_id,
               vc_settlement_cur_id,
               vc_settlement_cur_code,
               vc_settlement_weight,
               vc_settlement_weight_unit_id,
               vc_settlement_weight_unit
          from dq_derivative_quotes        dq,
               dqd_derivative_quote_detail dqd,
               apm_available_price_master  apm,
               pum_price_unit_master       pum,
               cm_currency_master          cm,
               qum_quantity_unit_master    qum
         where dq.dq_id = dqd.dq_id
           and dq.dbd_id = dqd.dbd_id
           and dqd.price_unit_id = pum.price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id
           and dq.trade_date = cur_futures_rows.valid_closeout_date
           and dqd.price <> 0
           and dqd.dr_id = cur_futures_rows.dr_id
           and dq.corporate_id = pc_corporate_id
           and upper(dq.entry_type) = upper(cur_futures_rows.traded_on)
           and dq.instrument_id = cur_futures_rows.instrument_id
           and dqd.available_price_id = apm.available_price_id
           and dqd.available_price_id = cur_futures_rows.available_price_id
           and dqd.price_unit_id = cur_futures_rows.price_unit_id
              --  and apm.available_price_name = 'Settlement'
           and dq.dbd_id = pc_dbd_id;
      exception
        when no_data_found then
          vn_settlemet_price           := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
        when others then
          vn_settlemet_price           := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
      end;
      if nvl(vc_settlement_cur_id, 'NA') <> 'NA' and
         nvl(vc_settlement_weight_unit_id, 'NA') <> 'NA' then
        if cur_futures_rows.gravity is not null then
          vn_market_price_in_trade_cur := ((vn_settlemet_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_futures_rows.trade_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                                     vc_settlement_weight_unit_id,
                                                                                     cur_futures_rows.trade_weight_unit_id,
                                                                                     1,
                                                                                     cur_futures_rows.gravity,
                                                                                     cur_futures_rows.gravity_type,
                                                                                     cur_futures_rows.density_mass_qty_unit_id,
                                                                                     cur_futures_rows.density_volume_qty_unit_id));
        else
          vn_market_price_in_trade_cur := ((vn_settlemet_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_futures_rows.trade_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.f_get_converted_quantity(cur_futures_rows.product_id,
                                                                                vc_settlement_weight_unit_id,
                                                                                cur_futures_rows.trade_weight_unit_id,
                                                                                1));
        end if;
      else
        vn_market_price_in_trade_cur := 0;
      end if;
      /*
      market price in trade currency (dq_) needs to be converted into price unit currency of drt_
      
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                        cur_futures_rows.weight /
                                        (cur_futures_rows.ppu_dq_weight *
                                        pkg_general.f_get_converted_quantity(null,
                                                                              cur_futures_rows.ppu_dq_weight_unit_id,
                                                                              cur_futures_rows.weight_unit_id,
                                                                              1));
      */
      pkg_general.sp_get_main_cur_detail(cur_futures_rows.trade_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_futures_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_out_date,
                                                               pc_corporate_id,
                                                               cur_futures_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_futures_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := cur_futures_rows.trade_price /
                                        nvl(cur_futures_rows.trade_weight,
                                            1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_futures_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      -- calcualate trade pnl in trade currency ends here
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      /*
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.quantity_unit_id,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.quantity_closed ) *
                                                                            --cur_futures_rows.weight_unit_id,
                                                                            --cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate;
      */
      vn_broker_comm_in_base_cur  := cur_futures_rows.broker_comm_amt *
                                     vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur := cur_futures_rows.clearer_comm_amt *
                                     vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur    := vn_pnl_value_in_trade_cur *
                                     vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur      := vn_pnl_value_in_base_cur -
                                     nvl(vn_broker_comm_in_base_cur, 0) -
                                     nvl(vn_clearer_comm_in_base_cur, 0);
      /* -NVL(vn_bank_fees_in_base_cur, 0);*/
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_futures_rows.internal_derivative_ref_no,
         cur_futures_rows.derivative_ref_no,
         cur_futures_rows.eod_trade_date,
         cur_futures_rows.trade_date,
         cur_futures_rows.corporate_id,
         cur_futures_rows.corporate_name,
         cur_futures_rows.trader_id,
         cur_futures_rows.tradername,
         cur_futures_rows.profit_center_id,
         cur_futures_rows.profit_center_name,
         cur_futures_rows.profit_center_short_name,
         cur_futures_rows.dr_id,
         cur_futures_rows.instrument_id,
         cur_futures_rows.instrument_name,
         cur_futures_rows.instrument_symbol,
         cur_futures_rows.instrument_type_id,
         cur_futures_rows.instrument_type,
         cur_futures_rows.instrument_display_name,
         cur_futures_rows.instrument_sub_type_id,
         cur_futures_rows.instrument_sub_type,
         cur_futures_rows.derivative_def_id,
         cur_futures_rows.derivative_def_name,
         cur_futures_rows.traded_on,
         cur_futures_rows.product_id,
         cur_futures_rows.product_desc,
         cur_futures_rows.exchange_id,
         cur_futures_rows.exchange_name,
         cur_futures_rows.exchange_code,
         cur_futures_rows.lot_size,
         cur_futures_rows.lot_size_unit_id,
         cur_futures_rows.lot_size_qty_unit,
         cur_futures_rows.price_point_id,
         cur_futures_rows.price_point_name,
         cur_futures_rows.period_type_id,
         cur_futures_rows.period_type_name,
         cur_futures_rows.period_type_display_name,
         cur_futures_rows.period_month,
         cur_futures_rows.period_year,
         cur_futures_rows.period_date,
         cur_futures_rows.prompt_date,
         cur_futures_rows.dr_id_name,
         cur_futures_rows.trade_type,
         cur_futures_rows.deal_type_id,
         cur_futures_rows.deal_type_name,
         cur_futures_rows.deal_type_display_name,
         cur_futures_rows.is_multiple_leg_involved,
         cur_futures_rows.deal_category,
         cur_futures_rows.deal_sub_category,
         cur_futures_rows.strategy_id,
         cur_futures_rows.strategy_name,
         cur_futures_rows.description,
         cur_futures_rows.strategy_def_name,
         cur_futures_rows.groupid,
         cur_futures_rows.groupname,
         cur_futures_rows.purpose_id,
         cur_futures_rows.purpose_name,
         cur_futures_rows.purpose_display_name,
         cur_futures_rows.external_ref_no,
         cur_futures_rows.cp_profile_id,
         cur_futures_rows.cp_name,
         cur_futures_rows.master_contract_id,
         cur_futures_rows.broker_profile_id,
         cur_futures_rows.broker_name,
         cur_futures_rows.broker_account_id,
         cur_futures_rows.broker_account_name,
         cur_futures_rows.broker_account_type,
         cur_futures_rows.broker_comm_type_id,
         cur_futures_rows.broker_comm_amt,
         cur_futures_rows.broker_comm_cur_id,
         cur_futures_rows.broker_cur_code,
         cur_futures_rows.clearer_profile_id,
         cur_futures_rows.clearer_name,
         cur_futures_rows.clearer_account_id,
         cur_futures_rows.clearer_account_name,
         cur_futures_rows.clearer_account_type,
         cur_futures_rows.clearer_comm_type_id,
         cur_futures_rows.clearer_comm_amt,
         cur_futures_rows.clearer_comm_cur_id,
         cur_futures_rows.clearer_cur_code,
         cur_futures_rows.product,
         cur_futures_rows.productdesc,
         cur_futures_rows.quality_id,
         cur_futures_rows.quality_name,
         cur_futures_rows.trade_qty_unit_id,
         cur_futures_rows.quantityname,
         cur_futures_rows.lots_closed, --siva total_lots,
         cur_futures_rows.quantity_closed, -- total_quantity,
         cur_futures_rows.open_lots,
         cur_futures_rows.open_quantity,
         cur_futures_rows.exercised_lots,
         cur_futures_rows.exercised_quantity,
         cur_futures_rows.expired_lots,
         cur_futures_rows.expired_quantity,
         cur_futures_rows.trade_price_type_id,
         cur_futures_rows.trade_price,
         cur_futures_rows.trade_price_unit_id,
         cur_futures_rows.trade_cur_id,
         cur_futures_rows.trade_cur_code,
         cur_futures_rows.trade_weight,
         cur_futures_rows.trade_weight_unit_id,
         cur_futures_rows.trade_qty_unit,
         cur_futures_rows.formula_id,
         cur_futures_rows.formula_name,
         cur_futures_rows.formula_display,
         cur_futures_rows.index_instrument_id,
         cur_futures_rows.index_instrument_name,
         cur_futures_rows.strike_price,
         cur_futures_rows.strike_price_unit_id,
         cur_futures_rows.strike_cur_id,
         cur_futures_rows.strike_cur_code,
         cur_futures_rows.strike_weight,
         cur_futures_rows.strike_weight_unit_id,
         cur_futures_rows.strike_qty_unit,
         cur_futures_rows.premium_discount,
         cur_futures_rows.premium_discount_price_unit_id,
         cur_futures_rows.pd_cur_id,
         cur_futures_rows.pd_cur_code,
         cur_futures_rows.pd_weight,
         cur_futures_rows.pd_weight_unit_id,
         cur_futures_rows.pd_qty_unit,
         cur_futures_rows.premium_due_date,
         cur_futures_rows.nominee_profile_id,
         cur_futures_rows.nominee_name,
         cur_futures_rows.leg_no,
         cur_futures_rows.option_expiry_date,
         cur_futures_rows.parent_int_derivative_ref_no,
         cur_futures_rows.market_location_country,
         cur_futures_rows.market_location_state,
         cur_futures_rows.market_location_city,
         cur_futures_rows.is_what_if,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_due_date,
         cur_futures_rows.closed_lots,
         cur_futures_rows.closed_quantity,
         cur_futures_rows.is_new_trade_date,
         cur_futures_rows.status,
         cur_futures_rows.settlement_cur_id,
         cur_futures_rows.settlement_cur_code,
         cur_futures_rows.in_out_at_money_status,
         cur_futures_rows.in_out_at_money_value,
         cur_futures_rows.exercise_date,
         cur_futures_rows.expiry_date,
         cur_futures_rows.group_cur_id,
         cur_futures_rows.group_cur_code,
         cur_futures_rows.group_qty_unit_id,
         cur_futures_rows.gcd_qty_unit,
         cur_futures_rows.base_qty_unit_id,
         cur_futures_rows.base_qty_unit,
         cur_futures_rows.internal_close_out_ref_no,
         cur_futures_rows.close_out_ref_no,
         cur_futures_rows.close_out_date,
         vn_market_price_in_trade_cur,
         vc_settlement_price_unit_id,
         vc_settlement_cur_id,
         vc_settlement_cur_code,
         vc_settlement_weight,
         vc_settlement_weight_unit_id,
         vc_settlement_weight_unit,
         cur_futures_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_futures_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_futures_rows.base_cur_id,
         cur_futures_rows.base_cur_code,
         cur_futures_rows.underlying_future_dr_id,
         cur_futures_rows.underlying_future_dr_id_name,
         cur_futures_rows.underlying_future_expiry_date,
         cur_futures_rows.underlying_future_quote_price,
         cur_futures_rows.underlying_fut_price_unit_id,
         cur_futures_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_futures_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_forward_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2,
                                           pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_future_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_futures is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                (case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end) else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             pum_trade.price_unit_name trade_price_unit_name,
             cm_trade.cur_code trade_price_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_weight_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             apm_available_price_master     apm,
             div_der_instrument_valuation   div,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and edq.available_price_id = apm.available_price_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
            --   and apm.available_price_name = 'Settlement'
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and irm.instrument_type in ('Forward', 'Future')
         and upper(dt.status) = 'VERIFIED'
         and dt.traded_on = 'OTC'
         and dtm.deal_type_display_name not like '%Swap%'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.open_quantity > 0
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_trade_qty_exch_unit         number;
    vn_trade_price                 number;
    vc_trade_price_unit_id         varchar2(15);
    vt_tbl_frm_setup               fb_tbl_setup;
    vt_tbl_frm_instrument          fb_tbl_instrument_data;
    vt_tbl_frm_instrument_out      fb_tbl_instrument_data;
    vt_tbl_frm_setup_out           fb_tbl_setup;
    vt_fb_tbl_frm_error_out        fb_tbl_error;
    vt_tbl_ind_setup               fb_tbl_setup;
    vt_tbl_ind_instrument          fb_tbl_instrument_data;
    vt_tbl_ind_instrument_out      fb_tbl_instrument_data;
    vt_tbl_ind_setup_out           fb_tbl_setup;
    vt_fb_tbl_ind_error_out        fb_tbl_error;
    vn_cur_row_cnt                 number;
    vn_fb_order_sq                 number := 1;
    vc_trade_price_cur_id          varchar2(15);
    vc_trade_price_cur_code        varchar2(15);
    vc_trade_price_unit_name       varchar2(50);
    vn_trade_price_weight          number(7, 2);
    vc_trade_price_weight_unit_id  varchar2(15);
    vc_trade_price_weight_unit     varchar2(15);
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
  begin
    for cur_futures_rows in cur_futures
    loop
      vt_tbl_frm_setup          := fb_tbl_setup();
      vt_tbl_frm_instrument     := fb_tbl_instrument_data();
      vt_tbl_frm_instrument_out := fb_tbl_instrument_data();
      vt_tbl_frm_setup_out      := fb_tbl_setup();
      vt_fb_tbl_frm_error_out   := fb_tbl_error();
      vt_tbl_ind_setup          := fb_tbl_setup();
      vt_tbl_ind_instrument     := fb_tbl_instrument_data();
      vt_tbl_ind_instrument_out := fb_tbl_instrument_data();
      vt_tbl_ind_setup_out      := fb_tbl_setup();
      vt_fb_tbl_ind_error_out   := fb_tbl_error();
      -- dbms_output.put_line('refno '|| cur_futures_rows.derivative_ref_no || ' price type '|| cur_futures_rows.trade_price_type_id);
      vn_trade_price                := null;
      vc_trade_price_unit_id        := null;
      vc_trade_price_cur_id         := null;
      vc_trade_price_cur_code       := null;
      vn_trade_price_weight         := null;
      vc_trade_price_weight_unit_id := null;
      vc_trade_price_weight_unit    := null;
      if cur_futures_rows.trade_price_type_id = 'Fixed' then
        vn_trade_price                := cur_futures_rows.trade_price;
        vc_trade_price_unit_id        := cur_futures_rows.trade_price_unit_id;
        vc_trade_price_unit_name      := cur_futures_rows.trade_price_unit_name;
        vc_trade_price_cur_id         := cur_futures_rows.trade_cur_id;
        vn_trade_price_weight         := cur_futures_rows.trade_weight;
        vc_trade_price_weight_unit_id := cur_futures_rows.trade_weight_unit_id;
        vc_trade_price_cur_code       := cur_futures_rows.trade_price_cur_code;
        vc_trade_price_weight_unit    := cur_futures_rows.trade_weight_unit;
      elsif cur_futures_rows.trade_price_type_id = 'Formula' then
        vn_fb_order_sq := 1;
        vn_cur_row_cnt := 1;
        for cc in (select fbs.formula_internal,
                          fbs.formula_display,
                          fbs.formula_name,
                          fbs.formula_id,
                          fbs.price_unit_id
                     from fbs_formula_builder_setup fbs
                    where fbs.formula_id = cur_futures_rows.formula_id)
        loop
          vt_tbl_frm_setup.extend;
          vt_tbl_frm_setup(1) := fb_typ_setup(cc.formula_id,
                                              pc_corporate_id,
                                              cc.formula_name,
                                              cc.formula_display,
                                              cc.formula_internal,
                                              cc.price_unit_id,
                                              pd_trade_date,
                                              null,
                                              null,
                                              null,
                                              null);
        end loop;
        for cc1 in (select dtfbi.instrument_id,
                           dtfbi.price_source_id,
                           dtfbi.price_point_id,
                           dtfbi.available_price_id,
                           dtfbi.fb_period_type,
                           dtfbi.fb_period_sub_type,
                           dtfbi.period_month,
                           dtfbi.period_year,
                           dtfbi.period_from_date,
                           dtfbi.period_to_date,
                           dtfbi.no_of_months,
                           dtfbi.no_of_days,
                           dtfbi.period_type_id,
                           dtfbi.delivery_period_id,
                           dtfbi.off_day_price,
                           dtfbi.basis,
                           dtfbi.basis_price_unit_id,
                           dtfbi.fx_rate_type,
                           dtfbi.fx_rate_
                      from dt_fbi dtfbi
                     where dtfbi.internal_derivative_ref_no =
                           cur_futures_rows.internal_derivative_ref_no
                       and dtfbi.is_deleted = 'N'
                       and dtfbi.process_id = pc_process_id)
        loop
          vn_fb_order_sq := 1;
          vt_tbl_frm_instrument.extend;
          vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                          cur_futures_rows.formula_id,
                                                                          cc1.instrument_id,
                                                                          cc1.price_source_id,
                                                                          cc1.price_point_id,
                                                                          cc1.available_price_id,
                                                                          cc1.fb_period_type,
                                                                          cc1.fb_period_sub_type,
                                                                          cc1.period_month,
                                                                          cc1.period_year,
                                                                          cc1.period_from_date,
                                                                          cc1.period_to_date,
                                                                          cc1.no_of_months,
                                                                          cc1.no_of_days,
                                                                          cc1.period_type_id,
                                                                          cc1.delivery_period_id,
                                                                          cc1.off_day_price,
                                                                          cc1.basis,
                                                                          cc1.basis_price_unit_id,
                                                                          cc1.fx_rate_type,
                                                                          cc1.fx_rate_,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null);
          vn_fb_order_sq := vn_fb_order_sq + 1;
          vn_cur_row_cnt := vn_cur_row_cnt + 1;
        end loop;
        pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                   vt_tbl_frm_instrument,
                                                   vt_tbl_frm_setup_out,
                                                   vt_tbl_frm_instrument_out,
                                                   vt_fb_tbl_frm_error_out,
                                                   pc_dbd_id,
                                                   cur_futures_rows.derivative_ref_no);
        for i in vt_tbl_frm_setup_out.first .. vt_tbl_frm_setup_out.last
        loop
          vn_trade_price         := vt_tbl_frm_setup_out(i).fb_price;
          vc_trade_price_unit_id := vt_tbl_frm_setup_out(i).price_unit_id;
          /*dbms_output.put_line('vn_trade_price ' || vn_trade_price);
          dbms_output.put_line('vc_trade_price_unit_id ' ||
                               vc_trade_price_unit_id);*/
        end loop;
      elsif cur_futures_rows.trade_price_type_id = 'Index' then
        vn_fb_order_sq := 1;
        vn_cur_row_cnt := 1;
        for cc1 in (select dtfbi.instrument_id,
                           dtfbi.price_source_id,
                           dtfbi.price_point_id,
                           dtfbi.available_price_id,
                           dtfbi.fb_period_type,
                           dtfbi.fb_period_sub_type,
                           dtfbi.period_month,
                           dtfbi.period_year,
                           dtfbi.period_from_date,
                           dtfbi.period_to_date,
                           dtfbi.no_of_months,
                           dtfbi.no_of_days,
                           dtfbi.period_type_id,
                           dtfbi.delivery_period_id,
                           dtfbi.off_day_price,
                           dtfbi.basis,
                           dtfbi.basis_price_unit_id,
                           dtfbi.fx_rate_type,
                           dtfbi.fx_rate_
                      from dt_fbi dtfbi
                     where dtfbi.internal_derivative_ref_no =
                           cur_futures_rows.internal_derivative_ref_no
                       and dtfbi.is_deleted = 'N'
                       and dtfbi.process_id = pc_process_id)
        loop
          vt_tbl_ind_setup.extend;
          vt_tbl_ind_setup(1) := fb_typ_setup(cc1.instrument_id,
                                              pc_corporate_id,
                                              'index',
                                              'index',
                                              '$' || cc1.instrument_id || '$',
                                              cc1.basis_price_unit_id,
                                              pd_trade_date,
                                              null,
                                              null,
                                              null,
                                              null);
          vt_tbl_ind_instrument.extend;
          vt_tbl_ind_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                          cc1.instrument_id,
                                                                          cc1.instrument_id,
                                                                          cc1.price_source_id,
                                                                          cc1.price_point_id,
                                                                          cc1.available_price_id,
                                                                          cc1.fb_period_type,
                                                                          cc1.fb_period_sub_type,
                                                                          cc1.period_month,
                                                                          cc1.period_year,
                                                                          cc1.period_from_date,
                                                                          cc1.period_to_date,
                                                                          cc1.no_of_months,
                                                                          cc1.no_of_days,
                                                                          cc1.period_type_id,
                                                                          cc1.delivery_period_id,
                                                                          cc1.off_day_price,
                                                                          cc1.basis,
                                                                          cc1.basis_price_unit_id,
                                                                          cc1.fx_rate_type,
                                                                          cc1.fx_rate_,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null);
          vn_fb_order_sq := vn_fb_order_sq + 1;
          vn_cur_row_cnt := vn_cur_row_cnt + 1;
        end loop;
        pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind_setup,
                                                   vt_tbl_ind_instrument,
                                                   vt_tbl_ind_setup_out,
                                                   vt_tbl_ind_instrument_out,
                                                   vt_fb_tbl_ind_error_out,
                                                   pc_dbd_id,
                                                   cur_futures_rows.derivative_ref_no);
        for i in vt_tbl_ind_setup_out.first .. vt_tbl_ind_setup_out.last
        loop
          vn_trade_price         := vt_tbl_ind_setup_out(i).fb_price;
          vc_trade_price_unit_id := vt_tbl_ind_setup_out(i).price_unit_id;
          /*
          dbms_output.put_line('vn_trade_price ' || vn_trade_price);
          dbms_output.put_line('vc_trade_price_unit_id ' ||
                               vc_trade_price_unit_id);*/
        end loop;
      else
        vn_trade_price         := 0;
        vc_trade_price_unit_id := null;
      end if;
      if cur_futures_rows.trade_price_type_id <> 'Fixed' then
        begin
          select pum.price_unit_name,
                 pum.cur_id,
                 pum.weight,
                 pum.weight_unit_id,
                 cm.cur_code,
                 qum.qty_unit
            into vc_trade_price_unit_name,
                 vc_trade_price_cur_id,
                 vn_trade_price_weight,
                 vc_trade_price_weight_unit_id,
                 vc_trade_price_cur_code,
                 vc_trade_price_weight_unit
            from v_ppu_pum                pum,
                 cm_currency_master       cm,
                 qum_quantity_unit_master qum
           where pum.product_price_unit_id = vc_trade_price_unit_id
             and pum.cur_id = cm.cur_id
             and pum.weight_unit_id = qum.qty_unit_id;
        exception
          when no_data_found then
            vc_trade_price_cur_id         := null;
            vc_trade_price_unit_name      := null;
            vn_trade_price_weight         := null;
            vc_trade_price_weight_unit_id := null;
            vc_trade_price_cur_code       := null;
            vc_trade_price_weight_unit    := null;
        end;
      end if;
      /*dbms_output.put_line('vc_trade_price_unit_name' ||
      vc_trade_price_unit_name || '- ' ||
      vc_trade_price_weight_unit_id);*/
      -- Trade Qty in Exchange Weight Unit
      if cur_futures_rows.gravity is not null then
        if cur_futures_rows.quantity_unit_id <>
           cur_futures_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                              cur_futures_rows.quantity_unit_id,
                                                                              cur_futures_rows.lot_size_unit_id,
                                                                              cur_futures_rows.open_quantity,
                                                                              cur_futures_rows.gravity,
                                                                              cur_futures_rows.gravity_type,
                                                                              cur_futures_rows.density_mass_qty_unit_id,
                                                                              cur_futures_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_futures_rows.quantity_unit_id,
                                                                         cur_futures_rows.lot_size_unit_id,
                                                                         cur_futures_rows.open_quantity);
        end if;
      end if;
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.broker_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.clearer_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)*/
      /* commented code since from and to is reveresed 18-jul-2009
      vn_qty_in_trade_wt_unit      := f_get_converted_quantity(null, --product id
                                                                           cur_futures_rows.weight_unit_id,
                                                                           cur_futures_rows.trade_qty_unit_id,
                                                                           cur_futures_rows.trade_qty); */
      if cur_futures_rows.gravity is not null then
        vn_qty_in_trade_wt_unit := pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                             cur_futures_rows.quantity_unit_id,
                                                                             vc_trade_price_weight_unit_id,
                                                                             cur_futures_rows.open_quantity,
                                                                             cur_futures_rows.gravity,
                                                                             cur_futures_rows.gravity_type,
                                                                             cur_futures_rows.density_mass_qty_unit_id,
                                                                             cur_futures_rows.density_volume_qty_unit_id);
      else
        vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                            cur_futures_rows.quantity_unit_id,
                                                            vc_trade_price_weight_unit_id,
                                                            cur_futures_rows.open_quantity
                                                            -- this we added for drt changes. bhairu
                                                            --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                            );
      end if;
      --preeti fix for open lots
      -- vn_market_price_in_trade_cur := cur_futures_rows.settlement_price;
      if cur_futures_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  vc_trade_price_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                                   cur_futures_rows.settlement_weight_unit_id,
                                                                                   vc_trade_price_weight_unit_id,
                                                                                   1,
                                                                                   cur_futures_rows.gravity,
                                                                                   cur_futures_rows.gravity_type,
                                                                                   cur_futures_rows.density_mass_qty_unit_id,
                                                                                   cur_futures_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  vc_trade_price_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_futures_rows.product_id,
                                                                              cur_futures_rows.settlement_weight_unit_id,
                                                                              vc_trade_price_weight_unit_id,
                                                                              1));
      end if;
      /* he units will be the same since its defaulted in the screen
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                            cur_futures_row(i).weight /
                                            (cur_futures_rows(i).ppu_dq_weight *
                                            pkg_general.f_get_converted_quantity(null,
                                                                                  cur_futures_rows.ppu_dq_weight_unit_id,
                                                                                  cur_futures_rows.weight_unit_id,
                                                                                  1));
       */
      pkg_general.sp_get_main_cur_detail(vc_trade_price_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_futures_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_futures_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := vn_trade_price /
                                        nvl(vn_trade_price_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_futures_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      vn_total_trade_value_base_cur  := vn_trade_to_base_exch_rate *
                                        vn_total_trade_value_trade_cur;
      vn_total_market_value_base_cur := vn_trade_to_base_exch_rate *
                                        vn_total_market_val_trade_cur;
      /* 18-jul-2009 . commented this and replaced this with above code
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.weight_unit_id,
                                                                            cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate; */
      vn_broker_comm_in_base_cur := cur_futures_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_futures_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0);
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --  all this check should be removed later
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur)
      values
        (cur_futures_rows.internal_derivative_ref_no,
         cur_futures_rows.derivative_ref_no,
         cur_futures_rows.eod_trade_date,
         cur_futures_rows.trade_date,
         cur_futures_rows.corporate_id,
         cur_futures_rows.corporate_name,
         cur_futures_rows.trader_id,
         cur_futures_rows.tradername,
         cur_futures_rows.profit_center_id,
         cur_futures_rows.profit_center_name,
         cur_futures_rows.profit_center_short_name,
         cur_futures_rows.dr_id,
         cur_futures_rows.instrument_id,
         cur_futures_rows.instrument_name,
         cur_futures_rows.instrument_symbol,
         cur_futures_rows.instrument_type_id,
         cur_futures_rows.instrument_type,
         cur_futures_rows.instrument_display_name,
         cur_futures_rows.instrument_sub_type_id,
         cur_futures_rows.instrument_sub_type,
         cur_futures_rows.derivative_def_id,
         cur_futures_rows.derivative_def_name,
         cur_futures_rows.traded_on,
         cur_futures_rows.product_id,
         cur_futures_rows.product_desc,
         cur_futures_rows.exchange_id,
         cur_futures_rows.exchange_name,
         cur_futures_rows.exchange_code,
         cur_futures_rows.lot_size,
         cur_futures_rows.lot_size_unit_id,
         cur_futures_rows.lot_size_qty_unit,
         cur_futures_rows.price_point_id,
         cur_futures_rows.price_point_name,
         cur_futures_rows.period_type_id,
         cur_futures_rows.period_type_name,
         cur_futures_rows.period_type_display_name,
         cur_futures_rows.period_month,
         cur_futures_rows.period_year,
         cur_futures_rows.period_date,
         cur_futures_rows.prompt_date,
         cur_futures_rows.dr_id_name,
         cur_futures_rows.trade_type,
         cur_futures_rows.deal_type_id,
         cur_futures_rows.deal_type_name,
         cur_futures_rows.deal_type_display_name,
         cur_futures_rows.is_multiple_leg_involved,
         cur_futures_rows.deal_category,
         cur_futures_rows.deal_sub_category,
         cur_futures_rows.strategy_id,
         cur_futures_rows.strategy_name,
         cur_futures_rows.description,
         cur_futures_rows.strategy_def_name,
         cur_futures_rows.groupid,
         cur_futures_rows.groupname,
         cur_futures_rows.purpose_id,
         cur_futures_rows.purpose_name,
         cur_futures_rows.purpose_display_name,
         cur_futures_rows.external_ref_no,
         cur_futures_rows.cp_profile_id,
         cur_futures_rows.cp_name,
         cur_futures_rows.master_contract_id,
         cur_futures_rows.broker_profile_id,
         cur_futures_rows.broker_name,
         cur_futures_rows.broker_account_id,
         cur_futures_rows.broker_account_name,
         cur_futures_rows.broker_account_type,
         cur_futures_rows.broker_comm_type_id,
         cur_futures_rows.broker_comm_amt,
         cur_futures_rows.broker_comm_cur_id,
         cur_futures_rows.broker_cur_code,
         cur_futures_rows.clearer_profile_id,
         cur_futures_rows.clearer_name,
         cur_futures_rows.clearer_account_id,
         cur_futures_rows.clearer_account_name,
         cur_futures_rows.clearer_account_type,
         cur_futures_rows.clearer_comm_type_id,
         cur_futures_rows.clearer_comm_amt,
         cur_futures_rows.clearer_comm_cur_id,
         cur_futures_rows.clearer_cur_code,
         cur_futures_rows.product,
         cur_futures_rows.productdesc,
         cur_futures_rows.quality_id,
         cur_futures_rows.quality_name,
         cur_futures_rows.quantity_unit_id,
         cur_futures_rows.quantityname,
         cur_futures_rows.open_lots, -- total_lots,--siva
         cur_futures_rows.open_quantity, -- .total_quantity,--siva
         cur_futures_rows.open_lots,
         cur_futures_rows.open_quantity,
         cur_futures_rows.exercised_lots,
         cur_futures_rows.exercised_quantity,
         cur_futures_rows.expired_lots,
         cur_futures_rows.expired_quantity,
         cur_futures_rows.trade_price_type_id,
         vn_trade_price,
         vc_trade_price_unit_id,
         vc_trade_price_cur_id,
         vc_trade_price_cur_code,
         vn_trade_price_weight,
         vc_trade_price_weight_unit_id,
         vc_trade_price_weight_unit,
         cur_futures_rows.formula_id,
         cur_futures_rows.formula_name,
         cur_futures_rows.formula_display,
         cur_futures_rows.index_instrument_id,
         cur_futures_rows.index_instrument_name,
         cur_futures_rows.strike_price,
         cur_futures_rows.strike_price_unit_id,
         cur_futures_rows.strike_cur_id,
         cur_futures_rows.strike_cur_code,
         cur_futures_rows.strike_weight,
         cur_futures_rows.strike_weight_unit_id,
         cur_futures_rows.strike_qty_unit,
         cur_futures_rows.premium_discount,
         cur_futures_rows.premium_discount_price_unit_id,
         cur_futures_rows.pd_cur_id,
         cur_futures_rows.pd_cur_code,
         cur_futures_rows.pd_weight,
         cur_futures_rows.pd_weight_unit_id,
         cur_futures_rows.pd_qty_unit,
         cur_futures_rows.premium_due_date,
         cur_futures_rows.nominee_profile_id,
         cur_futures_rows.nominee_name,
         cur_futures_rows.leg_no,
         cur_futures_rows.option_expiry_date,
         cur_futures_rows.parent_int_derivative_ref_no,
         cur_futures_rows.market_location_country,
         cur_futures_rows.market_location_state,
         cur_futures_rows.market_location_city,
         cur_futures_rows.is_what_if,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_due_date,
         cur_futures_rows.closed_lots,
         cur_futures_rows.closed_quantity,
         cur_futures_rows.is_new_trade_date,
         cur_futures_rows.status,
         cur_futures_rows.settlement_cur_id,
         cur_futures_rows.settlement_cur_code,
         cur_futures_rows.in_out_at_money_status,
         cur_futures_rows.in_out_at_money_value,
         cur_futures_rows.exercise_date,
         cur_futures_rows.expiry_date,
         cur_futures_rows.group_cur_id,
         cur_futures_rows.group_cur_code,
         cur_futures_rows.group_qty_unit_id,
         cur_futures_rows.gcd_qty_unit,
         cur_futures_rows.base_qty_unit_id,
         cur_futures_rows.base_qty_unit,
         cur_futures_rows.internal_close_out_ref_no,
         cur_futures_rows.close_out_ref_no,
         cur_futures_rows.close_out_date,
         cur_futures_rows.settlement_price,
         cur_futures_rows.settlement_price_unit_id,
         cur_futures_rows.settlement_price_cur_id,
         cur_futures_rows.settlemet_price_cur_code,
         cur_futures_rows.settlement_price_weight,
         cur_futures_rows.settlement_weight_unit_id,
         cur_futures_rows.settlement_weight_unit,
         cur_futures_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_futures_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_futures_rows.base_cur_id,
         cur_futures_rows.base_cur_code,
         cur_futures_rows.underlying_future_dr_id,
         cur_futures_rows.underlying_future_dr_id_name,
         cur_futures_rows.underlying_future_expiry_date,
         cur_futures_rows.underlying_future_quote_price,
         cur_futures_rows.underlying_fut_price_unit_id,
         cur_futures_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_futures_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_forward_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_forward_realized_pnl(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2,
                                         pc_dbd_id       varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_forwards is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             'Settled' status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             fsh.settlement_ref_no,
             fsh.fsh_id,
             fsh.settlement_date,
             fsh.contract_price,
             fsh.contract_price_unit_id,
             fsh.market_price,
             fsh.market_price_unit_id,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             fsh_fin_settlement_header      fsh
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dt.internal_derivative_ref_no = fsh.internal_derivative_ref_no
         and fsh.process_id = pc_process_id
         and fsh.is_settled = 'Y'
         and fsh.is_deleted = 'N'
         and irm.instrument_type in ('Forward', 'Future')
            -- AND UPPER(dt.status) in ('closed', 'settled')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_trade_qty_exch_unit         number;
    vn_trade_to_base_exch_rate     number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vc_trade_price_cur_id          varchar2(15);
    vc_trade_price_cur_code        varchar2(15);
    vn_trade_price_weight          number(7, 2);
    vc_trade_price_weight_unit_id  varchar2(15);
    vc_trade_price_qty_unit        varchar2(15);
    vc_market_price_cur_id         varchar2(15);
    vc_market_price_cur_code       varchar2(15);
    vn_market_price_weight         number(7, 2);
    vc_market_price_weight_unit_id varchar2(15);
    vc_market_price_qty_unit       varchar2(15);
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_pnl_value_in_trade_cur      number;
    vn_total_trade_value_base_cur  number;
    vn_broker_comm_in_base_cur     number;
    vn_clearer_comm_in_base_cur    number;
    vn_pnl_value_in_base_cur       number;
    vn_net_pnl_in_base_cur         number;
    vn_market_contract_price       number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    for cur_forwards_rows in cur_forwards
    loop
      begin
        select pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vc_trade_price_cur_id,
               vc_trade_price_cur_code,
               vn_trade_price_weight,
               vc_trade_price_weight_unit_id,
               vc_trade_price_qty_unit
          from pum_price_unit_master    pum,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where pum.price_unit_id = cur_forwards_rows.contract_price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          select pum.cur_id,
                 cm.cur_code,
                 pum.weight,
                 pum.weight_unit_id,
                 qum.qty_unit
            into vc_trade_price_cur_id,
                 vc_trade_price_cur_code,
                 vn_trade_price_weight,
                 vc_trade_price_weight_unit_id,
                 vc_trade_price_qty_unit
            from v_ppu_pum                pum,
                 cm_currency_master       cm,
                 qum_quantity_unit_master qum
           where pum.product_price_unit_id =
                 cur_forwards_rows.contract_price_unit_id
             and pum.cur_id = cm.cur_id
             and pum.weight_unit_id = qum.qty_unit_id;
      end;
      -- Trade Qty in Exchange Weight Unit
      if cur_forwards_rows.gravity is not null then
        vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_forwards_rows.product_id,
                                                                            cur_forwards_rows.quantity_unit_id,
                                                                            cur_forwards_rows.lot_size_unit_id,
                                                                            cur_forwards_rows.open_quantity,
                                                                            cur_forwards_rows.gravity,
                                                                            cur_forwards_rows.gravity_type,
                                                                            cur_forwards_rows.density_mass_qty_unit_id,
                                                                            cur_forwards_rows.density_volume_qty_unit_id);
      else
        vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                       cur_forwards_rows.quantity_unit_id,
                                                                       cur_forwards_rows.lot_size_unit_id,
                                                                       cur_forwards_rows.open_quantity);
      end if;
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      if cur_forwards_rows.broker_comm_cur_id <>
         cur_forwards_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                   pc_corporate_id,
                                                                   cur_forwards_rows.prompt_date,
                                                                   cur_forwards_rows.broker_comm_cur_id,
                                                                   cur_forwards_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_forwards_rows.clearer_comm_cur_id <>
         cur_forwards_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_forwards_rows.prompt_date,
                                                                 cur_forwards_rows.clearer_comm_cur_id,
                                                                 cur_forwards_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      begin
        select pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vc_market_price_cur_id,
               vc_market_price_cur_code,
               vn_market_price_weight,
               vc_market_price_weight_unit_id,
               vc_market_price_qty_unit
          from pum_price_unit_master    pum,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where pum.price_unit_id = cur_forwards_rows.market_price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          select pum.cur_id,
                 cm.cur_code,
                 pum.weight,
                 pum.weight_unit_id,
                 qum.qty_unit
            into vc_market_price_cur_id,
                 vc_market_price_cur_code,
                 vn_market_price_weight,
                 vc_market_price_weight_unit_id,
                 vc_market_price_qty_unit
            from v_ppu_pum                pum,
                 cm_currency_master       cm,
                 qum_quantity_unit_master qum
           where pum.product_price_unit_id =
                 cur_forwards_rows.market_price_unit_id
             and pum.cur_id = cm.cur_id
             and pum.weight_unit_id = qum.qty_unit_id;
      end;
      pkg_general.sp_get_main_cur_detail(vc_trade_price_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_forwards_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                               pc_corporate_id,
                                                               cur_forwards_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_forwards_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      if cur_forwards_rows.gravity is not null then
        vn_total_trade_value_trade_cur := ((cur_forwards_rows.contract_price /
                                          nvl(vn_trade_price_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_trade_price_cur_id,
                                                                                    cur_forwards_rows.settlement_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) *
                                          (pkg_general.fn_mass_volume_qty_conversion(cur_forwards_rows.product_id,
                                                                                     cur_forwards_rows.quantity_unit_id,
                                                                                     vc_trade_price_weight_unit_id,
                                                                                     cur_forwards_rows.open_quantity,
                                                                                     cur_forwards_rows.gravity,
                                                                                     cur_forwards_rows.gravity_type,
                                                                                     cur_forwards_rows.density_mass_qty_unit_id,
                                                                                     cur_forwards_rows.density_volume_qty_unit_id)) *
                                          vn_trade_sub_cur_id_factor;
      else
        vn_total_trade_value_trade_cur := ((cur_forwards_rows.contract_price /
                                          nvl(vn_trade_price_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_trade_price_cur_id,
                                                                                    cur_forwards_rows.settlement_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) *
                                          (pkg_general.f_get_converted_quantity(cur_forwards_rows.product_id,
                                                                                cur_forwards_rows.quantity_unit_id,
                                                                                vc_trade_price_weight_unit_id,
                                                                                cur_forwards_rows.open_quantity)) *
                                          vn_trade_sub_cur_id_factor;
      end if;
      if cur_forwards_rows.gravity is not null then
        vn_total_market_val_trade_cur := ((cur_forwards_rows.market_price /
                                         nvl(vn_market_price_weight, 1)) *
                                         pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                   vc_market_price_cur_id,
                                                                                   cur_forwards_rows.settlement_cur_id,
                                                                                   pd_trade_date,
                                                                                   1)) *
                                         (pkg_general.fn_mass_volume_qty_conversion(cur_forwards_rows.product_id,
                                                                                    cur_forwards_rows.quantity_unit_id,
                                                                                    vc_market_price_weight_unit_id,
                                                                                    cur_forwards_rows.open_quantity,
                                                                                    cur_forwards_rows.gravity,
                                                                                    cur_forwards_rows.gravity_type,
                                                                                    cur_forwards_rows.density_mass_qty_unit_id,
                                                                                    cur_forwards_rows.density_volume_qty_unit_id)) *
                                         vn_trade_sub_cur_id_factor;
      else
        vn_total_market_val_trade_cur := ((cur_forwards_rows.market_price /
                                         nvl(vn_market_price_weight, 1)) *
                                         pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                   vc_market_price_cur_id,
                                                                                   cur_forwards_rows.settlement_cur_id,
                                                                                   pd_trade_date,
                                                                                   1)) *
                                         (pkg_general.f_get_converted_quantity(cur_forwards_rows.product_id,
                                                                               cur_forwards_rows.quantity_unit_id,
                                                                               vc_market_price_weight_unit_id,
                                                                               cur_forwards_rows.open_quantity)) *
                                         vn_trade_sub_cur_id_factor;
      end if;
      if cur_forwards_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_broker_comm_in_base_cur     := cur_forwards_rows.broker_comm_amt *
                                        vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur    := cur_forwards_rows.clearer_comm_amt *
                                        vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur       := vn_pnl_value_in_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur         := vn_pnl_value_in_base_cur -
                                        nvl(vn_broker_comm_in_base_cur, 0) -
                                        nvl(vn_clearer_comm_in_base_cur, 0);
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         --internal_close_out_ref_no,
         --close_out_ref_no,
         -- close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         settlement_ref_no,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_forwards_rows.internal_derivative_ref_no,
         cur_forwards_rows.derivative_ref_no,
         cur_forwards_rows.eod_trade_date,
         cur_forwards_rows.trade_date,
         cur_forwards_rows.corporate_id,
         cur_forwards_rows.corporate_name,
         cur_forwards_rows.trader_id,
         cur_forwards_rows.tradername,
         cur_forwards_rows.profit_center_id,
         cur_forwards_rows.profit_center_name,
         cur_forwards_rows.profit_center_short_name,
         cur_forwards_rows.dr_id,
         cur_forwards_rows.instrument_id,
         cur_forwards_rows.instrument_name,
         cur_forwards_rows.instrument_symbol,
         cur_forwards_rows.instrument_type_id,
         cur_forwards_rows.instrument_type,
         cur_forwards_rows.instrument_display_name,
         cur_forwards_rows.instrument_sub_type_id,
         cur_forwards_rows.instrument_sub_type,
         cur_forwards_rows.derivative_def_id,
         cur_forwards_rows.derivative_def_name,
         cur_forwards_rows.traded_on,
         cur_forwards_rows.product_id,
         cur_forwards_rows.product_desc,
         cur_forwards_rows.exchange_id,
         cur_forwards_rows.exchange_name,
         cur_forwards_rows.exchange_code,
         cur_forwards_rows.lot_size,
         cur_forwards_rows.lot_size_unit_id,
         cur_forwards_rows.lot_size_qty_unit,
         cur_forwards_rows.price_point_id,
         cur_forwards_rows.price_point_name,
         cur_forwards_rows.period_type_id,
         cur_forwards_rows.period_type_name,
         cur_forwards_rows.period_type_display_name,
         cur_forwards_rows.period_month,
         cur_forwards_rows.period_year,
         cur_forwards_rows.period_date,
         cur_forwards_rows.prompt_date,
         cur_forwards_rows.dr_id_name,
         cur_forwards_rows.trade_type,
         cur_forwards_rows.deal_type_id,
         cur_forwards_rows.deal_type_name,
         cur_forwards_rows.deal_type_display_name,
         cur_forwards_rows.is_multiple_leg_involved,
         cur_forwards_rows.deal_category,
         cur_forwards_rows.deal_sub_category,
         cur_forwards_rows.strategy_id,
         cur_forwards_rows.strategy_name,
         cur_forwards_rows.description,
         cur_forwards_rows.strategy_def_name,
         cur_forwards_rows.groupid,
         cur_forwards_rows.groupname,
         cur_forwards_rows.purpose_id,
         cur_forwards_rows.purpose_name,
         cur_forwards_rows.purpose_display_name,
         cur_forwards_rows.external_ref_no,
         cur_forwards_rows.cp_profile_id,
         cur_forwards_rows.cp_name,
         cur_forwards_rows.master_contract_id,
         cur_forwards_rows.broker_profile_id,
         cur_forwards_rows.broker_name,
         cur_forwards_rows.broker_account_id,
         cur_forwards_rows.broker_account_name,
         cur_forwards_rows.broker_account_type,
         cur_forwards_rows.broker_comm_type_id,
         cur_forwards_rows.broker_comm_amt,
         cur_forwards_rows.broker_comm_cur_id,
         cur_forwards_rows.broker_cur_code,
         cur_forwards_rows.clearer_profile_id,
         cur_forwards_rows.clearer_name,
         cur_forwards_rows.clearer_account_id,
         cur_forwards_rows.clearer_account_name,
         cur_forwards_rows.clearer_account_type,
         cur_forwards_rows.clearer_comm_type_id,
         cur_forwards_rows.clearer_comm_amt,
         cur_forwards_rows.clearer_comm_cur_id,
         cur_forwards_rows.clearer_cur_code,
         cur_forwards_rows.product,
         cur_forwards_rows.productdesc,
         cur_forwards_rows.quality_id,
         cur_forwards_rows.quality_name,
         cur_forwards_rows.quantity_unit_id,
         cur_forwards_rows.quantityname,
         cur_forwards_rows.total_lots,
         cur_forwards_rows.total_quantity,
         cur_forwards_rows.open_lots,
         cur_forwards_rows.open_quantity,
         cur_forwards_rows.exercised_lots,
         cur_forwards_rows.exercised_quantity,
         cur_forwards_rows.expired_lots,
         cur_forwards_rows.expired_quantity,
         cur_forwards_rows.trade_price_type_id,
         cur_forwards_rows.contract_price,
         cur_forwards_rows.contract_price_unit_id,
         vc_trade_price_cur_id,
         vc_trade_price_cur_code,
         vn_trade_price_weight,
         vc_trade_price_weight_unit_id,
         vc_trade_price_qty_unit,
         cur_forwards_rows.formula_id,
         cur_forwards_rows.formula_name,
         cur_forwards_rows.formula_display,
         cur_forwards_rows.index_instrument_id,
         cur_forwards_rows.index_instrument_name,
         cur_forwards_rows.strike_price,
         cur_forwards_rows.strike_price_unit_id,
         cur_forwards_rows.strike_cur_id,
         cur_forwards_rows.strike_cur_code,
         cur_forwards_rows.strike_weight,
         cur_forwards_rows.strike_weight_unit_id,
         cur_forwards_rows.strike_qty_unit,
         cur_forwards_rows.premium_discount,
         cur_forwards_rows.premium_discount_price_unit_id,
         cur_forwards_rows.pd_cur_id,
         cur_forwards_rows.pd_cur_code,
         cur_forwards_rows.pd_weight,
         cur_forwards_rows.pd_weight_unit_id,
         cur_forwards_rows.pd_qty_unit,
         cur_forwards_rows.premium_due_date,
         cur_forwards_rows.nominee_profile_id,
         cur_forwards_rows.nominee_name,
         cur_forwards_rows.leg_no,
         cur_forwards_rows.option_expiry_date,
         cur_forwards_rows.parent_int_derivative_ref_no,
         cur_forwards_rows.market_location_country,
         cur_forwards_rows.market_location_state,
         cur_forwards_rows.market_location_city,
         cur_forwards_rows.is_what_if,
         cur_forwards_rows.payment_term,
         cur_forwards_rows.payment_term,
         cur_forwards_rows.payment_due_date,
         cur_forwards_rows.closed_lots,
         cur_forwards_rows.closed_quantity,
         cur_forwards_rows.is_new_trade_date,
         cur_forwards_rows.status,
         cur_forwards_rows.settlement_cur_id,
         cur_forwards_rows.settlement_cur_code,
         cur_forwards_rows.in_out_at_money_status,
         cur_forwards_rows.in_out_at_money_value,
         cur_forwards_rows.exercise_date,
         cur_forwards_rows.expiry_date,
         cur_forwards_rows.group_cur_id,
         cur_forwards_rows.group_cur_code,
         cur_forwards_rows.group_qty_unit_id,
         cur_forwards_rows.gcd_qty_unit,
         cur_forwards_rows.base_qty_unit_id,
         cur_forwards_rows.base_qty_unit,
         --cur_forwards_rows.internal_close_out_ref_no,
         -- cur_forwards_rows.close_out_ref_no,
         --cur_forwards_rows.close_out_date,
         cur_forwards_rows.market_price,
         cur_forwards_rows.market_price_unit_id,
         vc_market_price_cur_id,
         vc_market_price_cur_code,
         vn_market_price_weight,
         vc_market_price_weight_unit_id,
         vc_market_price_qty_unit,
         cur_forwards_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_forwards_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_forwards_rows.base_cur_id,
         cur_forwards_rows.base_cur_code,
         cur_forwards_rows.underlying_future_dr_id,
         cur_forwards_rows.underlying_future_dr_id_name,
         cur_forwards_rows.underlying_future_expiry_date,
         cur_forwards_rows.underlying_future_quote_price,
         cur_forwards_rows.underlying_fut_price_unit_id,
         cur_forwards_rows.process_id,
         vn_trade_qty_exch_unit,
         cur_forwards_rows.settlement_ref_no,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_forwards_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_forward_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_swap_unrealized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_swap_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_swaps is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             'Unrealized' as pnl_type,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             dt.int_trade_parent_der_ref_no,
             dt.is_internal_trade,
             dt.available_price_id,
             dt.average_from_date,
             dt.average_to_date,
             dt.swap_type_1,
             dt.swap_trade_price_type_1,
             dt.swap_float_type_1,
             dt.swap_trade_price_1,
             dt.swap_trade_price_unit_id_1,
             pum_swap.price_unit_name swap_trade_price_unit_1,
             dt.swap_index_instrument_id_1,
             dt.swap_formula_id_1,
             dt.swap_type_2,
             dt.swap_trade_price_type_2,
             dt.swap_float_type_2,
             dt.swap_trade_price_2,
             dt.swap_trade_price_unit_id_2,
             pum_swap1.price_unit_id swap_trade_price_unit_2,
             dt.swap_index_instrument_id_2,
             dt.swap_formula_id_2,
             dt.swap_product1,
             dt.swap_product_quality1,
             dt.swap_product2,
             dt.swap_product_quality2,
             dt.pricing_invoicing_status,
             dt.approval_status,
             dt.trading_fee,
             dt.clearing_fee,
             dt.trading_clearing_fee,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             pum_price_unit_master          pum_swap,
             pum_price_unit_master          pum_swap1
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and dt.swap_trade_price_unit_id_1 = pum_swap.price_unit_id(+)
         and dt.swap_trade_price_unit_id_2 = pum_swap1.price_unit_id(+)
            --AND irm.instrument_type in ('Future', 'Forward')
         and dtm.deal_type_display_name like '%Swap%'
         and upper(dt.status) = 'VERIFIED'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.open_quantity > 0
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    --vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_sett_cur number;
    --vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    --vn_qty_in_trade_wt_unit        number;
    --vn_market_price_in_trade_cur   number;
    --vn_total_market_val_trade_cur  number;
    --vn_trade_price_in_trade_cur    number;
    --vn_total_trade_value_trade_cur number;
    vn_trade_qty_exch_unit         number;
    vn_settle_to_base_exch_rate    number;
    vn_total_value_in_leg1_set_cur number;
    vn_total_value_in_leg2_set_cur number;
    vt_tbl_frm1_setup              fb_tbl_setup;
    vt_tbl_frm1_instrument         fb_tbl_instrument_data;
    vt_tbl_frm1_instrument_out     fb_tbl_instrument_data;
    vt_tbl_frm1_setup_out          fb_tbl_setup;
    vt_fb_tbl_frm1_error_out       fb_tbl_error;
    vt_tbl_frm2_setup              fb_tbl_setup;
    vt_tbl_frm2_instrument         fb_tbl_instrument_data;
    vt_tbl_frm2_instrument_out     fb_tbl_instrument_data;
    vt_tbl_frm2_setup_out          fb_tbl_setup;
    vt_fb_tbl_frm2_error_out       fb_tbl_error;
    vt_tbl_ind1_setup              fb_tbl_setup;
    vt_tbl_ind1_instrument         fb_tbl_instrument_data;
    vt_tbl_ind1_instrument_out     fb_tbl_instrument_data;
    vt_tbl_ind1_setup_out          fb_tbl_setup;
    vt_fb_tbl_ind1_error_out       fb_tbl_error;
    vt_tbl_ind2_setup              fb_tbl_setup;
    vt_tbl_ind2_instrument         fb_tbl_instrument_data;
    vt_tbl_ind2_instrument_out     fb_tbl_instrument_data;
    vt_tbl_ind2_setup_out          fb_tbl_setup;
    vt_fb_tbl_ind2_error_out       fb_tbl_error;
    vn_cur_row_cnt                 number;
    vn_fb_order_sq                 number := 1;
    vn_leg1_formula_price          number;
    vc_leg1_formula_price_unit_id  varchar2(15);
    vn_leg2_formula_price          number;
    vc_leg2_formula_price_unit_id  varchar2(15);
    vc_leg1_cur_id                 varchar2(15);
    vc_leg1_price_unit_name        varchar2(50);
    vn_leg1_weight                 number(7, 2);
    vc_leg1_qty_unit_id            varchar2(15);
    vc_leg1_weight_unit_id         varchar2(15);
    vc_leg2_cur_id                 varchar2(15);
    vc_leg2_price_unit_name        varchar2(50);
    vn_leg2_weight                 number(7, 2);
    vc_leg2_weight_unit_id         varchar2(15);
    vc_leg2_qty_unit_id            varchar2(15);
    vc_test_str                    varchar2(100);
    vc_leg_2                       varchar2(1);
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
  begin
    for cur_swaps_rows in cur_swaps
    loop
      vt_tbl_frm1_setup          := fb_tbl_setup();
      vt_tbl_frm1_instrument     := fb_tbl_instrument_data();
      vt_tbl_frm1_instrument_out := fb_tbl_instrument_data();
      vt_tbl_frm1_setup_out      := fb_tbl_setup();
      vt_fb_tbl_frm1_error_out   := fb_tbl_error();
      vt_tbl_frm2_setup          := fb_tbl_setup();
      vt_tbl_frm2_instrument     := fb_tbl_instrument_data();
      vt_tbl_frm2_instrument_out := fb_tbl_instrument_data();
      vt_tbl_frm2_setup_out      := fb_tbl_setup();
      vt_fb_tbl_frm2_error_out   := fb_tbl_error();
      vt_tbl_ind1_setup          := fb_tbl_setup();
      vt_tbl_ind1_instrument     := fb_tbl_instrument_data();
      vt_tbl_ind1_instrument_out := fb_tbl_instrument_data();
      vt_tbl_ind1_setup_out      := fb_tbl_setup();
      vt_fb_tbl_ind1_error_out   := fb_tbl_error();
      vt_tbl_ind2_setup          := fb_tbl_setup();
      vt_tbl_ind2_instrument     := fb_tbl_instrument_data();
      vt_tbl_ind2_instrument_out := fb_tbl_instrument_data();
      vt_tbl_ind2_setup_out      := fb_tbl_setup();
      vt_fb_tbl_ind2_error_out   := fb_tbl_error();
      if cur_swaps_rows.swap_trade_price_type_1 = 'Fixed' then
        begin
          select ppu.product_price_unit_id
            into vc_leg1_formula_price_unit_id
            from v_ppu_pum ppu
           where ppu.price_unit_id =
                 cur_swaps_rows.swap_trade_price_unit_id_1
             and ppu.product_id = cur_swaps_rows.product_id;
          vn_leg1_formula_price := cur_swaps_rows.swap_trade_price_1;
        exception
          when no_data_found then
            vc_leg1_formula_price_unit_id := cur_swaps_rows.swap_trade_price_unit_id_1; --TODO
        end;
      elsif cur_swaps_rows.swap_trade_price_type_1 = 'Floating' then
        if cur_swaps_rows.swap_float_type_1 = 'Formula' then
          vn_cur_row_cnt := 1;
          vn_fb_order_sq := 1;
          vc_test_str    := cur_swaps_rows.internal_derivative_ref_no ||
                            ' leg 1 ' ||
                            cur_swaps_rows.swap_trade_price_type_1 || ' - ' ||
                            cur_swaps_rows.swap_float_type_1;
          for cc in (select fbs.formula_internal,
                            fbs.formula_display,
                            fbs.formula_name,
                            fbs.formula_id,
                            fbs.price_unit_id
                       from fbs_formula_builder_setup fbs
                      where fbs.formula_id =
                            cur_swaps_rows.swap_formula_id_1)
          loop
            vt_tbl_frm1_setup.extend;
            vt_tbl_frm1_setup(1) := fb_typ_setup(cc.formula_id,
                                                 pc_corporate_id,
                                                 cc.formula_name,
                                                 cc.formula_display,
                                                 cc.formula_internal,
                                                 cc.price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          vn_cur_row_cnt := 1;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = '1')
          loop
            vn_fb_order_sq := 1;
            vt_tbl_frm1_instrument.extend;
            vt_tbl_frm1_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cur_swaps_rows.swap_formula_id_1,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm1_setup,
                                                     vt_tbl_frm1_instrument,
                                                     vt_tbl_frm1_setup_out,
                                                     vt_tbl_frm1_instrument_out,
                                                     vt_fb_tbl_frm1_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_frm1_setup_out.first .. vt_tbl_frm1_setup_out.last
          loop
            vn_leg1_formula_price         := vt_tbl_frm1_setup_out(i)
                                            .fb_price;
            vc_leg1_formula_price_unit_id := vt_tbl_frm1_setup_out(i)
                                            .price_unit_id;
          end loop;
        elsif cur_swaps_rows.swap_float_type_1 = 'Index' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          vc_test_str    := cur_swaps_rows.internal_derivative_ref_no ||
                            ' leg 1 ' ||
                            cur_swaps_rows.swap_trade_price_type_1 || ' - ' ||
                            cur_swaps_rows.swap_float_type_1;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = '1')
          loop
            vt_tbl_ind1_setup.extend;
            vt_tbl_ind1_setup(1) := fb_typ_setup(cc1.instrument_id,
                                                 pc_corporate_id,
                                                 'index',
                                                 'index',
                                                 '$' || cc1.instrument_id || '$',
                                                 cc1.basis_price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vt_tbl_ind1_instrument.extend;
            vt_tbl_ind1_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cc1.instrument_id,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind1_setup,
                                                     vt_tbl_ind1_instrument,
                                                     vt_tbl_ind1_setup_out,
                                                     vt_tbl_ind1_instrument_out,
                                                     vt_fb_tbl_ind1_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_ind1_setup_out.first .. vt_tbl_ind1_setup_out.last
          loop
            vn_leg1_formula_price         := vt_tbl_ind1_setup_out(i)
                                            .fb_price;
            vc_leg1_formula_price_unit_id := vt_tbl_ind1_setup_out(i)
                                            .price_unit_id;
          end loop;
        end if;
      else
        vn_leg1_formula_price         := 0;
        vc_leg1_formula_price_unit_id := null;
      end if;
      if cur_swaps_rows.swap_trade_price_type_2 = 'Fixed' then
        vc_test_str := cur_swaps_rows.internal_derivative_ref_no ||
                       ' leg 2 ' || cur_swaps_rows.swap_trade_price_type_2 ||
                       ' - ' || cur_swaps_rows.swap_float_type_2;
        begin
          select ppu.product_price_unit_id
            into vc_leg2_formula_price_unit_id
            from v_ppu_pum ppu
           where ppu.price_unit_id =
                 cur_swaps_rows.swap_trade_price_unit_id_2
             and ppu.product_id = cur_swaps_rows.product_id;
          vn_leg2_formula_price := cur_swaps_rows.swap_trade_price_2;
        exception
          when no_data_found then
            vc_leg1_formula_price_unit_id := cur_swaps_rows.swap_trade_price_unit_id_2; --TODO
        end;
      elsif cur_swaps_rows.swap_trade_price_type_2 = 'Floating' then
        if cur_swaps_rows.swap_float_type_2 = 'Formula' then
          /*if cur_swaps_rows.swap_float_type_1 = 'Formula' then
            if nvl(cur_swaps_rows.swap_formula_id_1, 1) =
               nvl(cur_swaps_rows.swap_formula_id_2, 1) then
              vc_leg_2 := 1;
            else
              vc_leg_2 := 1;
            end if;
          else
            vc_leg_2 := 1;
          end if;*/
          vc_leg_2       := 2;
          vc_test_str    := cur_swaps_rows.internal_derivative_ref_no ||
                            ' leg 2 ' ||
                            cur_swaps_rows.swap_trade_price_type_2 || ' - ' ||
                            cur_swaps_rows.swap_float_type_2;
          vn_cur_row_cnt := 1;
          for cc in (select fbs.formula_internal,
                            fbs.formula_display,
                            fbs.formula_name,
                            fbs.formula_id,
                            fbs.price_unit_id
                       from fbs_formula_builder_setup fbs
                      where fbs.formula_id =
                            cur_swaps_rows.swap_formula_id_2)
          loop
            vt_tbl_frm2_setup.extend;
            vt_tbl_frm2_setup(1) := fb_typ_setup(cc.formula_id,
                                                 pc_corporate_id,
                                                 cc.formula_name,
                                                 cc.formula_display,
                                                 cc.formula_internal,
                                                 cc.price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          vn_cur_row_cnt := 1;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = vc_leg_2)
          loop
            vn_fb_order_sq := 1;
            vt_tbl_frm2_instrument.extend;
            vt_tbl_frm2_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cur_swaps_rows.swap_formula_id_2,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm2_setup,
                                                     vt_tbl_frm2_instrument,
                                                     vt_tbl_frm2_setup_out,
                                                     vt_tbl_frm2_instrument_out,
                                                     vt_fb_tbl_frm2_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_frm2_setup_out.first .. vt_tbl_frm2_setup_out.last
          loop
            vn_leg2_formula_price         := vt_tbl_frm2_setup_out(i)
                                            .fb_price;
            vc_leg2_formula_price_unit_id := vt_tbl_frm2_setup_out(i)
                                            .price_unit_id;
          end loop;
        elsif cur_swaps_rows.swap_float_type_2 = 'Index' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          /*  if cur_swaps_rows.swap_float_type_1 = 'Index' then
            if nvl(cur_swaps_rows.swap_index_instrument_id_1, 1) =
               nvl(cur_swaps_rows.swap_index_instrument_id_2, 1) then
              vc_leg_2 := 1;
            else
              vc_leg_2 := 2;
            end if;
          else
            vc_leg_2 := 1;
          end if;*/
          vc_leg_2    := 2;
          vc_test_str := cur_swaps_rows.internal_derivative_ref_no ||
                         ' leg 2 ' ||
                         cur_swaps_rows.swap_trade_price_type_2 || ' - ' ||
                         cur_swaps_rows.swap_float_type_2;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = vc_leg_2)
          loop
            vt_tbl_ind2_setup.extend;
            vt_tbl_ind2_setup(1) := fb_typ_setup(cc1.instrument_id,
                                                 pc_corporate_id,
                                                 'index',
                                                 'index',
                                                 '$' || cc1.instrument_id || '$',
                                                 cc1.basis_price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vt_tbl_ind2_instrument.extend;
            vt_tbl_ind2_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cc1.instrument_id,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind2_setup,
                                                     vt_tbl_ind2_instrument,
                                                     vt_tbl_ind2_setup_out,
                                                     vt_tbl_ind2_instrument_out,
                                                     vt_fb_tbl_ind2_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_ind2_setup_out.first .. vt_tbl_ind2_setup_out.last
          loop
            vn_leg2_formula_price         := vt_tbl_ind2_setup_out(i)
                                            .fb_price;
            vc_leg2_formula_price_unit_id := vt_tbl_ind2_setup_out(i)
                                            .price_unit_id;
          end loop;
        end if;
      else
        vn_leg2_formula_price         := 0;
        vc_leg2_formula_price_unit_id := null;
      end if;
      vc_test_str := 's1';
      -- Trade Qty in Exchange Weight Unit
      if cur_swaps_rows.gravity is not null then
        if cur_swaps_rows.quantity_unit_id <>
           cur_swaps_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_swaps_rows.product_id,
                                                                              cur_swaps_rows.quantity_unit_id,
                                                                              cur_swaps_rows.lot_size_unit_id,
                                                                              cur_swaps_rows.open_quantity,
                                                                              cur_swaps_rows.gravity,
                                                                              cur_swaps_rows.gravity_type,
                                                                              cur_swaps_rows.density_mass_qty_unit_id,
                                                                              cur_swaps_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_swaps_rows.quantity_unit_id,
                                                                         cur_swaps_rows.lot_size_unit_id,
                                                                         cur_swaps_rows.open_quantity);
        end if;
      end if;
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vc_test_str := 's2';
      if cur_swaps_rows.settlement_cur_id is not null then
        vn_settle_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                pc_corporate_id,
                                                                cur_swaps_rows.prompt_date,
                                                                cur_swaps_rows.settlement_cur_id,
                                                                cur_swaps_rows.base_cur_id);
      else
        vn_settle_to_base_exch_rate := 0;
      end if;
      vc_test_str := 's3';
      if cur_swaps_rows.broker_comm_cur_id is not null then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                   pc_corporate_id,
                                                                   cur_swaps_rows.prompt_date,
                                                                   cur_swaps_rows.broker_comm_cur_id,
                                                                   cur_swaps_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 0;
      end if;
      vc_test_str := 's4';
      if cur_swaps_rows.clearer_comm_cur_id is not null then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_swaps_rows.prompt_date,
                                                                 cur_swaps_rows.clearer_comm_cur_id,
                                                                 cur_swaps_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 0;
      end if;
      vc_test_str := 's5';
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)*/
      vc_test_str := 's6';
      begin
        select pum.cur_id,
               pum.price_unit_name,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit_id
          into vc_leg1_cur_id,
               vc_leg1_price_unit_name,
               vn_leg1_weight,
               vc_leg1_weight_unit_id,
               vc_leg1_qty_unit_id
          from v_ppu_pum                pum,
               qum_quantity_unit_master qum
         where pum.product_price_unit_id = vc_leg1_formula_price_unit_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          vc_leg1_cur_id          := null;
          vc_leg1_price_unit_name := null;
          vn_leg1_weight          := 0;
          vc_leg1_weight_unit_id  := null;
          vc_leg1_qty_unit_id     := null;
      end;
      vc_test_str := 's7';
      if nvl(vn_leg1_formula_price, 0) = 0 then
        vn_total_value_in_leg1_set_cur := 0;
      else
        if nvl(vc_leg1_cur_id, 'NA') <> 'NA' and
           nvl(cur_swaps_rows.settlement_cur_id, 'NA') <> 'NA' then
          if cur_swaps_rows.gravity is not null then
            vn_total_value_in_leg1_set_cur := ((vn_leg1_formula_price /
                                              nvl(vn_leg1_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg1_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.fn_mass_volume_qty_conversion(cur_swaps_rows.product_id,
                                                                                         cur_swaps_rows.quantity_unit_id,
                                                                                         vc_leg1_qty_unit_id,
                                                                                         cur_swaps_rows.open_quantity,
                                                                                         cur_swaps_rows.gravity,
                                                                                         cur_swaps_rows.gravity_type,
                                                                                         cur_swaps_rows.density_mass_qty_unit_id,
                                                                                         cur_swaps_rows.density_volume_qty_unit_id));
          else
            vn_total_value_in_leg1_set_cur := ((vn_leg1_formula_price /
                                              nvl(vn_leg1_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg1_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.f_get_converted_quantity(cur_swaps_rows.product_id,
                                                                                    cur_swaps_rows.quantity_unit_id,
                                                                                    vc_leg1_qty_unit_id,
                                                                                    cur_swaps_rows.open_quantity));
          end if;
        else
          vn_total_value_in_leg1_set_cur := 0;
        end if;
      end if;
      begin
        select pum.cur_id,
               pum.price_unit_name,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit_id
          into vc_leg2_cur_id,
               vc_leg2_price_unit_name,
               vn_leg2_weight,
               vc_leg2_weight_unit_id,
               vc_leg2_qty_unit_id
          from v_ppu_pum                pum,
               qum_quantity_unit_master qum
         where pum.product_price_unit_id = vc_leg2_formula_price_unit_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          vc_leg2_cur_id          := null;
          vc_leg2_price_unit_name := null;
          vn_leg2_weight          := 0;
          vc_leg2_weight_unit_id  := null;
          vc_leg2_qty_unit_id     := null;
      end;
      vc_test_str := 's8';
      if nvl(vn_leg2_formula_price, 0) = 0 then
        vn_total_value_in_leg2_set_cur := 0;
      else
        if nvl(vc_leg2_cur_id, 'NA') <> 'NA' and
           nvl(cur_swaps_rows.settlement_cur_id, 'NA') <> 'NA' then
          if cur_swaps_rows.gravity is not null then
            vn_total_value_in_leg2_set_cur := ((vn_leg2_formula_price /
                                              nvl(vn_leg2_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg2_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.fn_mass_volume_qty_conversion(cur_swaps_rows.product_id,
                                                                                         cur_swaps_rows.quantity_unit_id,
                                                                                         vc_leg2_qty_unit_id,
                                                                                         cur_swaps_rows.open_quantity,
                                                                                         cur_swaps_rows.gravity,
                                                                                         cur_swaps_rows.gravity_type,
                                                                                         cur_swaps_rows.density_mass_qty_unit_id,
                                                                                         cur_swaps_rows.density_volume_qty_unit_id));
          else
            vn_total_value_in_leg2_set_cur := ((vn_leg2_formula_price /
                                              nvl(vn_leg2_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg2_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.f_get_converted_quantity(cur_swaps_rows.product_id,
                                                                                    cur_swaps_rows.quantity_unit_id,
                                                                                    vc_leg2_qty_unit_id,
                                                                                    cur_swaps_rows.open_quantity));
          end if;
        else
          vn_total_value_in_leg2_set_cur := 0;
        end if;
      end if;
      vc_test_str := 's9';
      /*---Change based on Raja's input */
      /*IF cur_swaps_rows.trade_type = 'Buy' THEN
          vn_pnl_value_in_sett_cur := vn_total_value_in_leg1_set_cur -
                                      vn_total_value_in_leg2_set_cur;
      ELSE
          vn_pnl_value_in_sett_cur := vn_total_value_in_leg2_set_cur -
                                      vn_total_value_in_leg1_set_cur;
      END IF;*/
      if cur_swaps_rows.swap_type_1 = 'Receive' and
         cur_swaps_rows.swap_type_2 = 'Pay' then
        ---Pay  --Receive
        vn_pnl_value_in_sett_cur := vn_total_value_in_leg1_set_cur -
                                    vn_total_value_in_leg2_set_cur;
      elsif cur_swaps_rows.swap_type_1 = 'Pay' and
            cur_swaps_rows.swap_type_2 = 'Receive' then
        ---Pay  --Receive
        vn_pnl_value_in_sett_cur := vn_total_value_in_leg2_set_cur -
                                    vn_total_value_in_leg1_set_cur;
        --vn_total_value_in_leg2_set_cur;
      end if;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      
      IF cur_swaps_rows.trade_type = 'Buy' THEN
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      ELSE
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      END IF;
      
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      /*vn_total_trade_value_base_cur := vn_trade_to_base_exch_rate *
      vn_total_trade_value_trade_cur;*/
      /* 18-jul-2009 . commented this and replaced this with above code
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.weight_unit_id,
                                                                            cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate; */
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_swaps_rows.prompt_date,
                                                              cur_swaps_rows.base_cur_id,
                                                              cur_swaps_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_swaps_rows.prompt_date,
                                                              cur_swaps_rows.base_cur_id,
                                                              cur_swaps_rows.group_cur_id);
      ---ends here
      vn_broker_comm_in_base_cur := cur_swaps_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_swaps_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_sett_cur *
                                    vn_settle_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0);
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      --  all this check should be removed later
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_sett_cur is null then
        vn_pnl_value_in_sett_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         status,
         settlement_cur_id,
         settlement_cur_code,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         process_id,
         trade_qty_in_exch_unit,
         int_trade_parent_der_ref_no,
         is_internal_trade,
         available_price_id,
         average_from_date,
         average_to_date,
         swap_type_1,
         swap_trade_price_type_1,
         swap_float_type_1,
         swap_trade_price_1,
         swap_trade_price_unit_id_1,
         swap_trade_price_unit_1,
         swap_index_instrument_id_1,
         swap_formula_id_1,
         swap_type_2,
         swap_trade_price_type_2,
         swap_float_type_2,
         swap_trade_price_2,
         swap_trade_price_unit_id_2,
         swap_trade_price_unit_2,
         swap_index_instrument_id_2,
         swap_formula_id_2,
         swap_product1,
         swap_product_quality1,
         swap_product2,
         swap_product_quality2,
         pricing_invoicing_status,
         approval_status,
         trading_fee,
         clearing_fee,
         trading_clearing_fee,
         pnl_in_sett_cur,
         trade_value_in_base,
         market_value_in_base,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur)
      values
        (cur_swaps_rows.internal_derivative_ref_no,
         cur_swaps_rows.derivative_ref_no,
         cur_swaps_rows.eod_trade_date,
         cur_swaps_rows.trade_date,
         cur_swaps_rows.corporate_id,
         cur_swaps_rows.corporate_name,
         cur_swaps_rows.trader_id,
         cur_swaps_rows.tradername,
         cur_swaps_rows.profit_center_id,
         cur_swaps_rows.profit_center_name,
         cur_swaps_rows.profit_center_short_name,
         cur_swaps_rows.dr_id,
         cur_swaps_rows.instrument_id,
         cur_swaps_rows.instrument_name,
         cur_swaps_rows.instrument_symbol,
         cur_swaps_rows.instrument_type_id,
         cur_swaps_rows.instrument_type,
         cur_swaps_rows.instrument_display_name,
         cur_swaps_rows.instrument_sub_type_id,
         cur_swaps_rows.instrument_sub_type,
         cur_swaps_rows.derivative_def_id,
         cur_swaps_rows.derivative_def_name,
         cur_swaps_rows.traded_on,
         cur_swaps_rows.product_id,
         cur_swaps_rows.product_desc,
         cur_swaps_rows.exchange_id,
         cur_swaps_rows.exchange_name,
         cur_swaps_rows.exchange_code,
         cur_swaps_rows.lot_size,
         cur_swaps_rows.lot_size_unit_id,
         cur_swaps_rows.lot_size_qty_unit,
         cur_swaps_rows.price_point_id,
         cur_swaps_rows.price_point_name,
         cur_swaps_rows.period_type_id,
         cur_swaps_rows.period_type_name,
         cur_swaps_rows.period_type_display_name,
         cur_swaps_rows.period_month,
         cur_swaps_rows.period_year,
         cur_swaps_rows.period_date,
         cur_swaps_rows.prompt_date,
         cur_swaps_rows.dr_id_name,
         cur_swaps_rows.trade_type,
         cur_swaps_rows.deal_type_id,
         cur_swaps_rows.deal_type_name,
         cur_swaps_rows.deal_type_display_name,
         cur_swaps_rows.is_multiple_leg_involved,
         cur_swaps_rows.strategy_id,
         cur_swaps_rows.strategy_name,
         cur_swaps_rows.description,
         cur_swaps_rows.strategy_def_name,
         cur_swaps_rows.groupid,
         cur_swaps_rows.groupname,
         cur_swaps_rows.purpose_id,
         cur_swaps_rows.purpose_name,
         cur_swaps_rows.purpose_display_name,
         cur_swaps_rows.external_ref_no,
         cur_swaps_rows.cp_profile_id,
         cur_swaps_rows.cp_name,
         cur_swaps_rows.master_contract_id,
         cur_swaps_rows.broker_profile_id,
         cur_swaps_rows.broker_name,
         cur_swaps_rows.broker_account_id,
         cur_swaps_rows.broker_account_name,
         cur_swaps_rows.broker_account_type,
         cur_swaps_rows.broker_comm_type_id,
         cur_swaps_rows.broker_comm_amt,
         cur_swaps_rows.broker_comm_cur_id,
         cur_swaps_rows.broker_cur_code,
         cur_swaps_rows.clearer_profile_id,
         cur_swaps_rows.clearer_name,
         cur_swaps_rows.clearer_account_id,
         cur_swaps_rows.clearer_account_name,
         cur_swaps_rows.clearer_account_type,
         cur_swaps_rows.clearer_comm_type_id,
         cur_swaps_rows.clearer_comm_amt,
         cur_swaps_rows.clearer_comm_cur_id,
         cur_swaps_rows.clearer_cur_code,
         cur_swaps_rows.product,
         cur_swaps_rows.productdesc,
         cur_swaps_rows.quality_id,
         cur_swaps_rows.quality_name,
         cur_swaps_rows.quantity_unit_id,
         cur_swaps_rows.quantityname,
         cur_swaps_rows.open_lots, -- total_lots,--siva
         cur_swaps_rows.open_quantity, -- .total_quantity,--siva
         cur_swaps_rows.open_lots,
         cur_swaps_rows.open_quantity,
         cur_swaps_rows.exercised_lots,
         cur_swaps_rows.exercised_quantity,
         cur_swaps_rows.expired_lots,
         cur_swaps_rows.expired_quantity,
         cur_swaps_rows.trade_price_type_id,
         cur_swaps_rows.trade_price,
         cur_swaps_rows.trade_price_unit_id,
         cur_swaps_rows.trade_cur_id,
         cur_swaps_rows.trade_cur_code,
         cur_swaps_rows.trade_weight,
         cur_swaps_rows.trade_weight_unit_id,
         cur_swaps_rows.trade_qty_unit,
         cur_swaps_rows.formula_id,
         cur_swaps_rows.formula_name,
         cur_swaps_rows.formula_display,
         cur_swaps_rows.index_instrument_id,
         cur_swaps_rows.index_instrument_name,
         cur_swaps_rows.strike_price,
         cur_swaps_rows.strike_price_unit_id,
         cur_swaps_rows.strike_cur_id,
         cur_swaps_rows.strike_cur_code,
         cur_swaps_rows.strike_weight,
         cur_swaps_rows.strike_weight_unit_id,
         cur_swaps_rows.strike_qty_unit,
         cur_swaps_rows.premium_discount,
         cur_swaps_rows.premium_discount_price_unit_id,
         cur_swaps_rows.pd_cur_id,
         cur_swaps_rows.pd_cur_code,
         cur_swaps_rows.pd_weight,
         cur_swaps_rows.pd_weight_unit_id,
         cur_swaps_rows.pd_qty_unit,
         cur_swaps_rows.premium_due_date,
         cur_swaps_rows.nominee_profile_id,
         cur_swaps_rows.nominee_name,
         cur_swaps_rows.leg_no,
         cur_swaps_rows.option_expiry_date,
         cur_swaps_rows.parent_int_derivative_ref_no,
         cur_swaps_rows.market_location_country,
         cur_swaps_rows.market_location_state,
         cur_swaps_rows.market_location_city,
         cur_swaps_rows.is_what_if,
         cur_swaps_rows.payment_term,
         cur_swaps_rows.payment_term,
         cur_swaps_rows.payment_due_date,
         cur_swaps_rows.closed_lots,
         cur_swaps_rows.closed_quantity,
         cur_swaps_rows.status,
         cur_swaps_rows.settlement_cur_id,
         cur_swaps_rows.settlement_cur_code,
         cur_swaps_rows.group_cur_id,
         cur_swaps_rows.group_cur_code,
         cur_swaps_rows.group_qty_unit_id,
         cur_swaps_rows.gcd_qty_unit,
         cur_swaps_rows.base_qty_unit_id,
         cur_swaps_rows.base_qty_unit,
         cur_swaps_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_settle_to_base_exch_rate,
         cur_swaps_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_sett_cur,
         cur_swaps_rows.base_cur_id,
         cur_swaps_rows.base_cur_code,
         cur_swaps_rows.process_id,
         vn_trade_qty_exch_unit,
         cur_swaps_rows.int_trade_parent_der_ref_no,
         cur_swaps_rows.is_internal_trade,
         cur_swaps_rows.available_price_id,
         cur_swaps_rows.average_from_date,
         cur_swaps_rows.average_to_date,
         cur_swaps_rows.swap_type_1,
         cur_swaps_rows.swap_trade_price_type_1,
         cur_swaps_rows.swap_float_type_1,
         vn_leg1_formula_price,
         vc_leg1_formula_price_unit_id,
         vc_leg1_price_unit_name,
         cur_swaps_rows.swap_index_instrument_id_1,
         cur_swaps_rows.swap_formula_id_1,
         cur_swaps_rows.swap_type_2,
         cur_swaps_rows.swap_trade_price_type_2,
         cur_swaps_rows.swap_float_type_2,
         vn_leg2_formula_price,
         vc_leg2_formula_price_unit_id,
         vc_leg2_price_unit_name,
         cur_swaps_rows.swap_index_instrument_id_2,
         cur_swaps_rows.swap_formula_id_2,
         cur_swaps_rows.swap_product1,
         cur_swaps_rows.swap_product_quality1,
         cur_swaps_rows.swap_product2,
         cur_swaps_rows.swap_product_quality2,
         cur_swaps_rows.pricing_invoicing_status,
         cur_swaps_rows.approval_status,
         cur_swaps_rows.trading_fee,
         cur_swaps_rows.clearing_fee,
         cur_swaps_rows.trading_clearing_fee,
         vn_pnl_value_in_sett_cur,
         vn_total_value_in_leg1_set_cur,
         vn_total_value_in_leg2_set_cur,
         cur_swaps_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace ||
                           ' at ' || vc_test_str);
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_swap_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm || ' at ' ||
                                                           vc_test_str,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for options as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             apm_available_price_master     apm,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du,
             div_der_instrument_valuation   div
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and edq.available_price_id = apm.available_price_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
            --         and apm.available_price_name = 'Settlement'
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and irm.instrument_type in ('Option Put', 'Option Call')
         and upper(dt.status) = 'VERIFIED' -- comented by siva, as issue in app, for partial exercise of lots, status updated with Exerciced 
         and dt.is_what_if = 'N'
         and dt.open_quantity > 0
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dt.traded_on = 'OTC';
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vn_strike_settlement_price     number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vn_underlying_quote_price      number;
    vc_underlying_price_unit_id    varchar2(20);
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
    --Added by Siddharth---
    vn_qty_in_base_unit         number;
    vn_trade_price_in_base_cur  number;
    vn_market_price_in_base_cur number;
    --Ends here---
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      if cur_option_rows.gravity is not null then
        if cur_option_rows.quantity_unit_id <>
           cur_option_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                              cur_option_rows.quantity_unit_id,
                                                                              cur_option_rows.lot_size_unit_id,
                                                                              cur_option_rows.open_quantity,
                                                                              cur_option_rows.gravity,
                                                                              cur_option_rows.gravity_type,
                                                                              cur_option_rows.density_mass_qty_unit_id,
                                                                              cur_option_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_option_rows.quantity_unit_id,
                                                                         cur_option_rows.lot_size_unit_id,
                                                                         cur_option_rows.open_quantity);
        end if;
      end if;
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.broker_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      if cur_option_rows.gravity is not null then
        vn_qty_in_trade_wt_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                             cur_option_rows.quantity_unit_id,
                                                                             cur_option_rows.pd_weight_unit_id,
                                                                             cur_option_rows.open_quantity,
                                                                             cur_option_rows.gravity,
                                                                             cur_option_rows.gravity_type,
                                                                             cur_option_rows.density_mass_qty_unit_id,
                                                                             cur_option_rows.density_volume_qty_unit_id);
      else
        vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                            cur_option_rows.quantity_unit_id,
                                                            cur_option_rows.pd_weight_unit_id,
                                                            cur_option_rows.open_quantity);
      end if;
      --preeti fix for open qty
      --vn_market_price_in_trade_cur := cur_option_rows.settlement_price;
      if cur_option_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                   cur_option_rows.settlement_weight_unit_id,
                                                                                   cur_option_rows.pd_weight_unit_id,
                                                                                   1,
                                                                                   cur_option_rows.gravity,
                                                                                   cur_option_rows.gravity_type,
                                                                                   cur_option_rows.density_mass_qty_unit_id,
                                                                                   cur_option_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                              cur_option_rows.settlement_weight_unit_id,
                                                                              cur_option_rows.pd_weight_unit_id,
                                                                              1));
      end if;
      /*
      market price in trade currency (dq_) needs to be converted into price unit currency of drt_
      
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                        cur_option_rows.weight /
                                        (cur_option_rows.ppu_dq_weight *
                                        f_get_converted_quantity(null,
                                                                              cur_option_rows.ppu_dq_weight_unit_id,
                                                                              cur_option_rows.weight_unit_id,
                                                                              1));
      */
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_option_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_option_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      -- calcualate trade pnl in trade currency ends here
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
      
      vn_total_trade_value_base_cur := f_get_converted_quantity(null,
                                                                            cur_option_rows.trade_qty_unit_id,
                                                                            cur_option_rows.weight_unit_id,
                                                                            cur_option_rows.trade_qty) *
                                       cur_option_rows.trade_price *
                                       vn_trade_to_base_exch_rate;
      */
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      ---Added by Siddharth---
      vn_qty_in_base_unit := f_get_converted_quantity(null, --product id
                                                      cur_option_rows.quantity_unit_id,
                                                      cur_option_rows.base_qty_unit_id,
                                                      vn_qty_in_trade_wt_unit
                                                      -- this we added for drt changes. bhairu
                                                      --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                      );
      if vn_qty_in_base_unit <> 0 then
        vn_trade_price_in_base_cur := vn_total_trade_value_base_cur /
                                      vn_qty_in_base_unit;
      else
        vn_trade_price_in_base_cur := 0;
      end if;
      if vn_qty_in_base_unit <> 0 then
        vn_market_price_in_base_cur := vn_total_market_value_base_cur /
                                       vn_qty_in_base_unit;
      else
        vn_market_price_in_base_cur := 0;
      end if;
      --Ends here
      vn_broker_comm_in_base_cur := cur_option_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_option_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0)  ;
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      /*      if cur_option_rows.gravity is not null then
        vn_strike_settlement_price := (cur_option_rows.strike_price /
                                      nvl(cur_option_rows.strike_weight, 1)) *
                                      pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                               cur_option_rows.strike_cur_id,
                                                                               cur_option_rows.settlement_price_cur_id,
                                                                               pd_trade_date,
                                                                               1) *
                                      (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                 cur_option_rows.strike_weight_unit_id,
                                                                                 cur_option_rows.settlement_weight_unit_id,
                                                                                 1,
                                                                                 cur_option_rows.gravity,
                                                                                 cur_option_rows.gravity_type,
                                                                                 cur_option_rows.density_mass_qty_unit_id,
                                                                                 cur_option_rows.density_volume_qty_unit_id));
      
      else
        vn_strike_settlement_price := (cur_option_rows.strike_price /
                                      nvl(cur_option_rows.strike_weight, 1)) *
                                      pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                               cur_option_rows.strike_cur_id,
                                                                               cur_option_rows.settlement_price_cur_id,
                                                                               pd_trade_date,
                                                                               1) *
                                      (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                            cur_option_rows.strike_weight_unit_id,
                                                                            cur_option_rows.settlement_weight_unit_id,
                                                                            1));
      
      end if;
      if cur_option_rows.instrument_type = 'Option Put' then
        vn_in_out_at_money_value := (nvl(vn_strike_settlement_price, 0) -
                                    nvl(cur_option_rows.settlement_price,
                                         0));
      else
      
        vn_in_out_at_money_value := (nvl(cur_option_rows.settlement_price,
                                         0) -
                                    nvl(vn_strike_settlement_price, 0));
      end if;
      
      if (vn_in_out_at_money_value > 0) then
        vc_in_out_at_money_status := 'In the Money';
      elsif (vn_in_out_at_money_value < 0) then
        vc_in_out_at_money_status := 'Out of the Money';
      else
        vc_in_out_at_money_status := 'At the Money';
      end if;*/
      /*
      calcualte the in/out/at money status and value
      
      if cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy OTC Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell Call Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.strike_price,
                                           0) - nvl(cur_option_rows.settlement_price,
                                                     0));
      elsif cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell OTC Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy Call Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.settlement_price,
                                           0) - nvl(cur_option_rows.strike_price,
                                                     0));
      end if;
      if (vn_in_out_at_money_value > 0) then
          vc_in_out_at_money_status := 'In the Money';
      elsif (vn_in_out_at_money_value < 0) then
          vc_in_out_at_money_status := 'Out of the Money';
      else
          vc_in_out_at_money_status := 'At the Money';
      end if;
      */
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur,
         open_quantity_in_base,
         trade_price_in_base,
         sett_price_in_base)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.quantity_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.open_lots, --.total_lots,
         cur_option_rows.open_quantity, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.closed_lots,
         cur_option_rows.closed_quantity,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         vc_in_out_at_money_status,
         vn_in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         cur_option_rows.settlement_price,
         cur_option_rows.settlement_price_unit_id,
         cur_option_rows.settlement_price_cur_id,
         cur_option_rows.settlemet_price_cur_code,
         cur_option_rows.settlement_price_weight,
         cur_option_rows.settlement_weight_unit_id,
         cur_option_rows.settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur,
         vn_qty_in_base_unit,
         vn_trade_price_in_base_cur,
         vn_market_price_in_base_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type,
                                --Added by Siddharth
                                dpd_prev_day.open_quantity_in_base,
                                dpd_prev_day.base_qty_unit_id,
                                dpd_prev_day.trade_price_in_base, --pd
                                dpd_prev_day.trade_price_unit_id,
                                dpd_prev_day.sett_price_in_base,
                                dpd_prev_day.sett_price_unit_id,
                                dpd_prev_day.broker_comm_in_base,
                                dpd_prev_day.clearer_comm_in_base,
                                dpd_prev_day.trade_cur_to_base_exch_rate,
                                dpd_prev_day.clearer_exch_rate,
                                dpd_prev_day.broker_exch_rate,
                                dpd_prev_day.pnl_in_trade_cur,
                                dpd_prev_day.settlement_price,
                                dpd_prev_day.trade_price
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur,
               dpd_today.prev_open_quantity_in_base    = cur_update.open_quantity_in_base,
               dpd_today.prev_quantity_unit_id         = cur_update.base_qty_unit_id,
               dpd_today.prev_trade_price_in_base      = cur_update.trade_price_in_base,
               dpd_today.prev_trade_price_unit_id      = cur_update.trade_price_unit_id,
               dpd_today.prev_sett_price_in_base       = cur_update.sett_price_in_base,
               dpd_today.prev_sett_price_unit_id       = cur_update.sett_price_unit_id,
               dpd_today.prev_clearer_comm_amt_in_base = cur_update.clearer_comm_in_base,
               dpd_today.prev_broker_comm_amt_in_base  = cur_update.broker_comm_in_base,
               dpd_today.prev_trade_cur_to_base_rate   = cur_update.trade_cur_to_base_exch_rate,
               dpd_today.prev_broker_exch_rate         = cur_update.broker_exch_rate,
               dpd_today.prev_clearer_exch_rate        = cur_update.clearer_exch_rate,
               dpd_today.prev_pnl_in_trade_cur         = cur_update.pnl_in_trade_cur,
               dpd_today.prev_settlement_price         = cur_update.settlement_price,
               dpd_today.prev_trade_price              = cur_update.trade_price,
               dpd_today.cont_unr_status               = 'EXISTING_TRADE'
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      --Added by Siddharth--
      -- mark the trades came as new in this eod/eom
      begin
        update dpd_derivative_pnl_daily dpd
           set dpd.cont_unr_status = 'NEW_TRADE'
         where dpd.cont_unr_status is null
           and dpd.process_id = pc_process_id
           and dpd.corporate_id = pc_corporate_id;
      exception
        when others then
          dbms_output.put_line('SQLERRM-2' || sqlerrm);
      end;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_unr_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for options as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             apm_available_price_master     apm,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du,
             div_der_instrument_valuation   div
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and edq.available_price_id = apm.available_price_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
            --and irm.instrument_type in ('Option Put', 'Option Call')
         and irm.instrument_type in ('Option Put', 'Option Call',
              'OTC Put Option', 'OTC Call Option')
            --   and upper(dt.status) = 'VERIFIED' -- comented by siva, as issue in app, for partial exercise of lots, status updated with Exerciced 
         and dt.is_what_if = 'N'
         and dt.open_quantity > 0
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
      --  and dt.traded_on='Exchange'
      --and nvl(dt.is_new_trade, 'N') = 'N'
      ;
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vn_strike_settlement_price     number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vn_underlying_quote_price      number;
    vc_underlying_price_unit_id    varchar2(20);
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
    --Added by Siddharth---
    vn_qty_in_base_unit         number;
    vn_trade_price_in_base_cur  number;
    vn_market_price_in_base_cur number;
    --Ends here---
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      if cur_option_rows.gravity is not null then
        if cur_option_rows.quantity_unit_id <>
           cur_option_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                              cur_option_rows.quantity_unit_id,
                                                                              cur_option_rows.lot_size_unit_id,
                                                                              cur_option_rows.open_quantity,
                                                                              cur_option_rows.gravity,
                                                                              cur_option_rows.gravity_type,
                                                                              cur_option_rows.density_mass_qty_unit_id,
                                                                              cur_option_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_option_rows.quantity_unit_id,
                                                                         cur_option_rows.lot_size_unit_id,
                                                                         cur_option_rows.open_quantity);
        end if;
      end if;
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.broker_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      if cur_option_rows.gravity is not null then
        vn_qty_in_trade_wt_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                             cur_option_rows.quantity_unit_id,
                                                                             cur_option_rows.pd_weight_unit_id,
                                                                             cur_option_rows.open_quantity,
                                                                             cur_option_rows.gravity,
                                                                             cur_option_rows.gravity_type,
                                                                             cur_option_rows.density_mass_qty_unit_id,
                                                                             cur_option_rows.density_volume_qty_unit_id);
      else
        vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                            cur_option_rows.quantity_unit_id,
                                                            cur_option_rows.pd_weight_unit_id,
                                                            cur_option_rows.open_quantity);
      end if;
      if cur_option_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                   cur_option_rows.settlement_weight_unit_id,
                                                                                   cur_option_rows.pd_weight_unit_id,
                                                                                   1,
                                                                                   cur_option_rows.gravity,
                                                                                   cur_option_rows.gravity_type,
                                                                                   cur_option_rows.density_mass_qty_unit_id,
                                                                                   cur_option_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                              cur_option_rows.settlement_weight_unit_id,
                                                                              cur_option_rows.pd_weight_unit_id,
                                                                              1));
      end if;
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_option_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_option_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur := vn_market_price_in_trade_cur *
                                       vn_qty_in_trade_wt_unit *
                                       vn_trade_sub_cur_id_factor;
      ----------------                                   
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*   if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;*/
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur;
      else
        vn_pnl_value_in_trade_cur := (-1) * vn_total_market_val_trade_cur;
      end if;
      --------------------- 
      /* vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
      vn_trade_to_base_exch_rate;*/
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      ---Added by Siddharth---
      vn_qty_in_base_unit := f_get_converted_quantity(null, --product id
                                                      cur_option_rows.quantity_unit_id,
                                                      cur_option_rows.base_qty_unit_id,
                                                      vn_qty_in_trade_wt_unit
                                                      -- this we added for drt changes. bhairu
                                                      --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                      );
      if vn_qty_in_base_unit <> 0 then
        vn_trade_price_in_base_cur := vn_total_trade_value_base_cur /
                                      vn_qty_in_base_unit;
      else
        vn_trade_price_in_base_cur := 0;
      end if;
      if vn_qty_in_base_unit <> 0 then
        vn_market_price_in_base_cur := vn_total_market_value_base_cur /
                                       vn_qty_in_base_unit;
      else
        vn_market_price_in_base_cur := 0;
      end if;
      --Ends here
      vn_broker_comm_in_base_cur := cur_option_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_option_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0)  ;
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---      
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur,
         open_quantity_in_base,
         trade_price_in_base,
         sett_price_in_base)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.quantity_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.open_lots, --.total_lots,
         cur_option_rows.open_quantity, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.closed_lots,
         cur_option_rows.closed_quantity,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         vc_in_out_at_money_status,
         vn_in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         cur_option_rows.settlement_price,
         cur_option_rows.settlement_price_unit_id,
         cur_option_rows.settlement_price_cur_id,
         cur_option_rows.settlemet_price_cur_code,
         cur_option_rows.settlement_price_weight,
         cur_option_rows.settlement_weight_unit_id,
         cur_option_rows.settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur,
         vn_qty_in_base_unit,
         vn_trade_price_in_base_cur,
         vn_market_price_in_base_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type,
                                --Added by Siddharth
                                dpd_prev_day.open_quantity_in_base,
                                dpd_prev_day.base_qty_unit_id,
                                dpd_prev_day.trade_price_in_base, --pd
                                dpd_prev_day.trade_price_unit_id,
                                dpd_prev_day.sett_price_in_base,
                                dpd_prev_day.sett_price_unit_id,
                                dpd_prev_day.broker_comm_in_base,
                                dpd_prev_day.clearer_comm_in_base,
                                dpd_prev_day.trade_cur_to_base_exch_rate,
                                dpd_prev_day.clearer_exch_rate,
                                dpd_prev_day.broker_exch_rate,
                                dpd_prev_day.pnl_in_trade_cur,
                                dpd_prev_day.settlement_price,
                                dpd_prev_day.trade_price
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur,
               dpd_today.prev_open_quantity_in_base    = cur_update.open_quantity_in_base,
               dpd_today.prev_quantity_unit_id         = cur_update.base_qty_unit_id,
               dpd_today.prev_trade_price_in_base      = cur_update.trade_price_in_base,
               dpd_today.prev_trade_price_unit_id      = cur_update.trade_price_unit_id,
               dpd_today.prev_sett_price_in_base       = cur_update.sett_price_in_base,
               dpd_today.prev_sett_price_unit_id       = cur_update.sett_price_unit_id,
               dpd_today.prev_clearer_comm_amt_in_base = cur_update.clearer_comm_in_base,
               dpd_today.prev_broker_comm_amt_in_base  = cur_update.broker_comm_in_base,
               dpd_today.prev_trade_cur_to_base_rate   = cur_update.trade_cur_to_base_exch_rate,
               dpd_today.prev_broker_exch_rate         = cur_update.broker_exch_rate,
               dpd_today.prev_clearer_exch_rate        = cur_update.clearer_exch_rate,
               dpd_today.prev_pnl_in_trade_cur         = cur_update.pnl_in_trade_cur,
               dpd_today.prev_settlement_price         = cur_update.settlement_price,
               dpd_today.prev_trade_price              = cur_update.trade_price,
               dpd_today.cont_unr_status               = 'EXISTING_TRADE'
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      --Added by Siddharth--
      -- mark the trades came as new in this eod/eom
      begin
        update dpd_derivative_pnl_daily dpd
           set dpd.cont_unr_status = 'NEW_TRADE'
         where dpd.cont_unr_status is null
           and dpd.process_id = pc_process_id
           and dpd.corporate_id = pc_corporate_id;
      exception
        when others then
          dbms_output.put_line('SQLERRM-2' || sqlerrm);
      end;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_realized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the realized pnl for options as on eod date
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             0 broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             0 clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             decode(dt.status,
                    'Expired',
                    dt.expired_quantity,
                    dt.exercised_quantity) quantity_closed,
             decode(dt.status,
                    'Expired',
                    dt.expired_lots,
                    dt.exercised_lots) lots_closed,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             drm.expiry_date as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             drm.expiry_date close_out_date,
             drm.expiry_date valid_closeout_date,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             div_der_instrument_valuation   div,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and drm.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and irm.instrument_type in ('Option Put', 'Option Call')
         and upper(dt.status) in ('EXERCISED', 'EXPIRED')
         and dt.is_what_if = 'N'
         and dt.is_realized_today = 'Y'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dt.traded_on = 'OTC'
      union
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             nvl(dcod.broker_comm_amt, 0) as broker_comm_amt,
             dcod.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dcod.clearer_comm_amt,
             dcod.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dcod.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dcod.quantity_closed,
             dcod.lots_closed,
             null as is_new_trade_date,
             'Settled' status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             drm.expiry_date as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             dcoh.internal_close_out_ref_no,
             dcoh.close_out_ref_no,
             dcoh.close_out_date,
             dcoh.valid_closeout_date,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             div_der_instrument_valuation   div,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             dcoh_der_closeout_header       dcoh,
             dcod_der_closeout_detail       dcod,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dcoh.internal_close_out_ref_no =
             dcod.internal_close_out_ref_no
         and dcod.process_id = dcoh.process_id
         and dcoh.process_id = pc_process_id
         and dt.internal_derivative_ref_no =
             dcod.internal_derivative_ref_no
         and irm.instrument_type in ('Option Put', 'Option Call')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dcoh.is_rolled_back = 'N'
         and dt.traded_on = 'OTC';
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_clearer_comm_in_base_cur    number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vc_settlement_price_unit_id    varchar2(15);
    vc_settlement_cur_id           varchar2(15);
    vc_settlement_cur_code         varchar2(15);
    vc_settlement_weight           number(7, 2);
    vc_settlement_weight_unit_id   varchar2(15);
    vc_settlement_weight_unit      varchar2(15);
    vn_settlement_price            number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_option_rows.trade_qty_unit_id,
                                                                     cur_option_rows.lot_size_unit_id,
                                                                     cur_option_rows.quantity_closed);
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      if cur_option_rows.broker_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_option_rows.close_out_date,
                                                                   pc_corporate_id,
                                                                   cur_option_rows.prompt_date,
                                                                   cur_option_rows.broker_comm_cur_id,
                                                                   cur_option_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_option_rows.clearer_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_option_rows.close_out_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      /* calcualate trade pnl in trade currency
          1. convert trade qty from trade price unit weight unit to trade weight unit
          2. get the market price in trade currency
          3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
          4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
          5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      /*  vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
      cur_option_rows.trade_qty_unit_id,
      cur_option_rows.trade_weight_unit_id,
      cur_option_rows.quantity_closed); */
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_option_rows.trade_qty_unit_id,
                                                          cur_option_rows.pd_weight_unit_id,
                                                          cur_option_rows.quantity_closed);
      --vn_market_price_in_trade_cur := cur_option_rows.settlement_price;
      begin
        select dqd.price,
               dqd.price_unit_id,
               pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vn_settlement_price,
               vc_settlement_price_unit_id,
               vc_settlement_cur_id,
               vc_settlement_cur_code,
               vc_settlement_weight,
               vc_settlement_weight_unit_id,
               vc_settlement_weight_unit
          from dq_derivative_quotes        dq,
               dqd_derivative_quote_detail dqd,
               apm_available_price_master  apm,
               pum_price_unit_master       pum,
               cm_currency_master          cm,
               qum_quantity_unit_master    qum
         where dq.dq_id = dqd.dq_id
           and dq.dbd_id = dqd.dbd_id
           and dqd.price_unit_id = pum.price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id
           and dq.trade_date = cur_option_rows.valid_closeout_date
           and dqd.price <> 0
           and dqd.dr_id = cur_option_rows.dr_id
           and dq.corporate_id = pc_corporate_id
           and upper(dq.entry_type) = upper(cur_option_rows.traded_on)
           and dq.instrument_id = cur_option_rows.instrument_id
           and dqd.available_price_id = apm.available_price_id
           and dqd.available_price_id = cur_option_rows.available_price_id
           and dqd.price_unit_id = cur_option_rows.price_unit_id
              -- and apm.available_price_name = 'Settlement'
           and dq.dbd_id = pc_dbd_id;
      exception
        when no_data_found then
          vn_settlement_price          := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
        when others then
          vn_settlement_price          := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
      end;
      /*
      market price in trade currency (dq_) needs to be converted into price unit currency of drt_
      
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                        cur_option_rows.weight /
                                        (cur_option_rows.ppu_dq_weight *
                                        pkg_general.f_get_converted_quantity(null,
                                                                              cur_option_rows.ppu_dq_weight_unit_id,
                                                                              cur_option_rows.weight_unit_id,
                                                                              1));
      
      */
      if nvl(vc_settlement_cur_id, 'NA') <> 'NA' and
         nvl(vc_settlement_weight_unit_id, 'NA') <> 'NA' then
        if cur_option_rows.gravity is not null then
          vn_market_price_in_trade_cur := ((vn_settlement_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_option_rows.pd_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                     vc_settlement_weight_unit_id,
                                                                                     cur_option_rows.pd_weight_unit_id,
                                                                                     1,
                                                                                     cur_option_rows.gravity,
                                                                                     cur_option_rows.gravity_type,
                                                                                     cur_option_rows.density_mass_qty_unit_id,
                                                                                     cur_option_rows.density_volume_qty_unit_id));
        else
          vn_market_price_in_trade_cur := ((vn_settlement_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_option_rows.pd_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                                vc_settlement_weight_unit_id,
                                                                                cur_option_rows.pd_weight_unit_id,
                                                                                1));
        end if;
      else
        vn_market_price_in_trade_cur := 0;
      end if;
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_option_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(cur_option_rows.close_out_date,
                                                               pc_corporate_id,
                                                               cur_option_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_option_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      if cur_option_rows.status in ('Exercised', 'Expired') then
        vn_total_market_val_trade_cur := 0;
      else
        vn_total_market_val_trade_cur := vn_market_price_in_trade_cur *
                                         vn_qty_in_trade_wt_unit *
                                         vn_trade_sub_cur_id_factor;
      end if;
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      -- calcualate trade pnl in trade currency ends here
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
      
      vn_total_trade_value_base_cur := f_get_converted_quantity(null,
                                                                            cur_option_rows.trade_qty_unit_id,
                                                                            cur_option_rows.weight_unit_id,
                                                                            cur_option_rows.trade_qty) *
                                       cur_option_rows.trade_price *
                                       vn_trade_to_base_exch_rate;
      
      */
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_broker_comm_in_base_cur     := cur_option_rows.broker_comm_amt *
                                        vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur    := cur_option_rows.clearer_comm_amt *
                                        vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur       := vn_pnl_value_in_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur         := vn_pnl_value_in_base_cur -
                                        nvl(vn_broker_comm_in_base_cur, 0) -
                                        nvl(vn_clearer_comm_in_base_cur, 0);
      /*
      if cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy OTC Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell Call Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.strike_price,
                                           0) - nvl(cur_option_rows.settlement_price,
                                                     0));
      elsif cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell OTC Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy Call Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.settlement_price,
                                           0) - nvl(cur_option_rows.strike_price,
                                                     0));
      end if;
      
      if (vn_in_out_at_money_value > 0) then
          vc_in_out_at_money_status := 'In the Money';
      elsif (vn_in_out_at_money_value < 0) then
          vc_in_out_at_money_status := 'Out of the Money';
      else
          vc_in_out_at_money_status := 'At the Money';
      end if;
      */
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.trade_qty_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.lots_closed, --total_lots,
         cur_option_rows.quantity_closed, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.lots_closed,
         cur_option_rows.quantity_closed,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         cur_option_rows.in_out_at_money_status,
         cur_option_rows.in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         vn_market_price_in_trade_cur,
         vc_settlement_price_unit_id,
         vc_settlement_cur_id,
         vc_settlement_cur_code,
         vc_settlement_weight,
         vc_settlement_weight_unit_id,
         vc_settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_rea_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_realized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the realized pnl for options as on eod date
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             --0 broker_comm_amt,     
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             --0 clearer_comm_amt,             
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.total_lots open_lots,
             dt.total_quantity open_quantity,
             0 exercised_lots,
             0 exercised_quantity,
             0 expired_lots,
             0 expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             null quantity_closed,
             null lots_closed,
             /*decode(dt.status,
                                                                                                                                                                                                                                                         'Expired',
                                                                                                                                                                                                                                                         dt.expired_quantity,
                                                                                                                                                                                                                                                         dt.exercised_quantity) quantity_closed,
                                                                                                                                                                                                                                                  decode(dt.status,
                                                                                                                                                                                                                                                         'Expired',
                                                                                                                                                                                                                                                         dt.expired_lots,
                                                                                                                                                                                                                                                         dt.exercised_lots) lots_closed,  */
             null is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             drm.expiry_date as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             drm.expiry_date close_out_date,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             div_der_instrument_valuation   div,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and drm.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and irm.instrument_type in ('Option Put', 'Option Call',
              'OTC Put Option', 'OTC Call Option')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dt.is_new_trade = 'Y';
    --         and dt.traded_on='Exchange';
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_clearer_comm_in_base_cur    number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vc_settlement_price_unit_id    varchar2(15);
    vc_settlement_cur_id           varchar2(15);
    vc_settlement_cur_code         varchar2(15);
    vc_settlement_weight           number(7, 2);
    vc_settlement_weight_unit_id   varchar2(15);
    vc_settlement_weight_unit      varchar2(15);
    vn_settlement_price            number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_option_rows.trade_qty_unit_id,
                                                                     cur_option_rows.lot_size_unit_id,
                                                                     cur_option_rows.total_quantity);
      if cur_option_rows.broker_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                   pc_corporate_id,
                                                                   cur_option_rows.prompt_date,
                                                                   cur_option_rows.broker_comm_cur_id,
                                                                   cur_option_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_option_rows.clearer_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_option_rows.trade_qty_unit_id,
                                                          cur_option_rows.pd_weight_unit_id,
                                                          cur_option_rows.open_quantity);
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_option_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                               pc_corporate_id,
                                                               cur_option_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_option_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := (-1) * vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur;
      end if;
      vn_total_trade_value_base_cur := vn_total_trade_value_trade_cur *
                                       vn_trade_to_base_exch_rate;
      vn_broker_comm_in_base_cur    := cur_option_rows.broker_comm_amt *
                                       vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur   := cur_option_rows.clearer_comm_amt *
                                       vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur      := vn_pnl_value_in_trade_cur *
                                       vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
                                       nvl(vn_broker_comm_in_base_cur, 0) -
                                       nvl(vn_clearer_comm_in_base_cur, 0);
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.trade_qty_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.open_lots, --total_lots,
         cur_option_rows.open_quantity, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.lots_closed,
         cur_option_rows.quantity_closed,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         cur_option_rows.in_out_at_money_status,
         cur_option_rows.in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         vn_market_price_in_trade_cur,
         vc_settlement_price_unit_id,
         vc_settlement_cur_id,
         vc_settlement_cur_code,
         vc_settlement_weight,
         vc_settlement_weight_unit_id,
         vc_settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  --Brokerage_Margin_Utilization Changes start
  procedure sp_calc_broker_margin_util(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_process      varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2) as
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_count           number := 0;
    vn_brkmar_rec      bmu_broker_margin_utilization%rowtype;
    cursor c_trades is
      select t.process_id,
             t.corporate_id,
             t.corporate_name,
             t.broker_profile_id,
             t.broker_name,
             t.instrument_id,
             t.instrument_name,
             t.exchange_id,
             t.exchange_name,
             t.derivative_def_id,
             t.derivative_def_name,
             t.gross_lots,
             t.net_lots,
             t.lot_size,
             t.lot_size_unit_id,
             t.lot_size_unit,
             t.trade_value_in_base,
             t.market_value_in_base,
             t.pnl_in_base_cur,
             t.base_cur_id,
             t.base_cur_code,
             broker_limts.brk_mar_cur_id,
             broker_limts.brk_mar_cur_code,
             broker_limts.intial_margin_limit,
             broker_limts.variation_margin_limit,
             broker_limts.current_credit_limit,
             broker_limts.maintenance_margin,
             broker_limts.margin_cal_method,
             ims.future_outright,
             ims.future_outright_cur_id,
             ims.future_outright_cur_code
        from (select dpd.process_id,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.broker_profile_id,
                     dpd.broker_name,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.product_id,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     sum(dpd.open_lots) gross_lots,
                     sum(dpd.open_lots * (case
                           when dpd.trade_type = 'Sell' then
                            -1
                           else
                            1
                         end)) net_lots,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.lot_size_unit,
                     sum(dpd.trade_value_in_base) trade_value_in_base,
                     sum(dpd.market_value_in_base) market_value_in_base,
                     sum(dpd.pnl_in_base_cur) pnl_in_base_cur,
                     dpd.base_cur_id,
                     dpd.base_cur_code
                from dpd_derivative_pnl_daily dpd
               where dpd.instrument_type = 'Future'
                 and dpd.broker_profile_id is not null
                 and dpd.pnl_type = 'Unrealized'
                 and dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
               group by dpd.process_id,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.broker_profile_id,
                        dpd.broker_name,
                        dpd.product_id,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.lot_size_unit,
                        dpd.base_cur_id,
                        dpd.base_cur_code) t,
             (select brkmm.broker_margin_id,
                     brkmm.broker_profile_id,
                     brkmd.broker_margin_detail_id,
                     brkmd.instrument_id,
                     brkmd.currency_id brk_mar_cur_id,
                     cm.cur_code brk_mar_cur_code,
                     brkmd.intial_margin_limit,
                     brkmd.variation_margin_limit,
                     brkmd.current_credit_limit,
                     brkmd.maintenance_margin,
                     decode(brkmd.margin_calculation_id,
                            'NET_LOTS',
                            'Net Lots',
                            'GROSS_LOTS',
                            'Gross Lots',
                            'Net Lots') margin_cal_method
                from brkmm_broker_margin_master brkmm,
                     brkmd_broker_margin_detail brkmd,
                     cm_currency_master         cm
               where brkmm.broker_margin_id = brkmd.broker_margin_id
                 and brkmd.currency_id = cm.cur_id
                 and brkmm.is_deleted = 'N'
                 and brkmd.is_deleted = 'N') broker_limts,
             (select ims.product_id,
                     ims.derivative_def_id,
                     ims.corporate_id,
                     ims.future_outright,
                     ims.future_outright_cur_id,
                     cm.cur_code future_outright_cur_code
                from ims_initial_margin_setup ims,
                     cm_currency_master       cm
               where ims.is_deleted = 'N'
                 and ims.future_outright_cur_id = cm.cur_id) ims
       where t.broker_profile_id = broker_limts.broker_profile_id(+)
         and t.instrument_id = broker_limts.instrument_id(+)
         and t.corporate_id = ims.corporate_id(+)
         and t.product_id = ims.product_id(+)
         and t.derivative_def_id = ims.derivative_def_id(+);
  begin
    dbms_output.put_line('inside sp_calc_broker_margin_util');
    for c_trades_rec in c_trades
    loop
      vn_count := 0;
      dbms_output.put_line('inside c_trades_rec sp_calc_broker_margin_util' ||
                           c_trades_rec.broker_profile_id || ' - ' ||
                           c_trades_rec.instrument_id || ' - ' ||
                           c_trades_rec.exchange_id);
      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur := pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                               c_trades_rec.brk_mar_cur_id,
                                                                                               c_trades_rec.base_cur_id,
                                                                                               pd_trade_date,
                                                                                               1);
      --
      vn_brkmar_rec.initial_margin_limit_in_base   := c_trades_rec.intial_margin_limit *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      vn_brkmar_rec.current_credit_limit_in_base   := c_trades_rec.current_credit_limit *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      vn_brkmar_rec.variation_margin_limit_in_base := c_trades_rec.variation_margin_limit *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      vn_brkmar_rec.maintenance_margin_in_base     := c_trades_rec.maintenance_margin *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      if c_trades_rec.margin_cal_method = 'Gross Lots' then
        vn_brkmar_rec.no_of_lots := c_trades_rec.gross_lots;
      elsif c_trades_rec.margin_cal_method = 'Net Lots' then
        vn_brkmar_rec.no_of_lots := c_trades_rec.net_lots;
      end if;
      vn_brkmar_rec.initial_margin_requirement   := vn_brkmar_rec.no_of_lots *
                                                    c_trades_rec.future_outright;
      vn_brkmar_rec.fx_rate_imr_cur_to_base_cur  := pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                             c_trades_rec.future_outright_cur_id,
                                                                                             c_trades_rec.base_cur_id,
                                                                                             pd_trade_date,
                                                                                             1);
      vn_brkmar_rec.initial_margin_req_in_base   := vn_brkmar_rec.fx_rate_imr_cur_to_base_cur *
                                                    vn_brkmar_rec.initial_margin_requirement;
      vn_brkmar_rec.variation_margin_requirement := c_trades_rec.pnl_in_base_cur;
      /*c_trades_rec.market_value_in_base -
      c_trades_rec.trade_value_in_base;*/
      vn_brkmar_rec.under_over_utilized_im := vn_brkmar_rec.current_credit_limit_in_base -
                                              vn_brkmar_rec.initial_margin_requirement;
      vn_brkmar_rec.under_over_utilized_vm := c_trades_rec.pnl_in_base_cur +
                                              vn_brkmar_rec.variation_margin_limit_in_base;
      dbms_output.put_line('1');
      insert into bmu_broker_margin_utilization
        (process_id,
         eod_date,
         corporate_id,
         corporate_name,
         broker_profile_id,
         broker_name,
         instrument_id,
         instrument_name,
         exchange_id,
         exchange_name,
         margin_cur_id,
         margin_cur_code,
         initial_margin_limit,
         current_credit_limit,
         variation_margin_limit,
         maintenance_margin,
         margin_calculation_method,
         base_cur_id,
         base_cur_code,
         fx_rate_margin_cur_to_base_cur,
         initial_margin_limit_in_base,
         current_credit_limit_in_base,
         variation_margin_limit_in_base,
         maintenance_margin_in_base,
         no_of_lots,
         net_no_of_lots,
         gross_no_of_lots,
         initial_margin_rate_cur_id,
         initial_margin_rate_cur_code,
         initial_margin_rate,
         initial_margin_requirement,
         fx_rate_imr_cur_to_base_cur,
         initial_margin_req_in_base,
         under_over_utilized_im
         --,UNDER_OVER_UTILIZED_IM_FLAG
        ,
         trade_value_in_base,
         market_value_in_base,
         open_no_of_lots,
         lot_size,
         lot_size_unit,
         variation_margin_requirement,
         under_over_utilized_vm
         --,UNDER_OVER_UTILIZED_VM_FLAG
         )
      values
        (pc_process_id,
         pd_trade_date,
         pc_corporate_id,
         c_trades_rec.corporate_name,
         c_trades_rec.broker_profile_id,
         c_trades_rec.broker_name,
         c_trades_rec.instrument_id,
         c_trades_rec.instrument_name,
         c_trades_rec.exchange_id,
         c_trades_rec.exchange_name,
         c_trades_rec.brk_mar_cur_id,
         c_trades_rec.brk_mar_cur_code,
         c_trades_rec.intial_margin_limit,
         c_trades_rec.current_credit_limit,
         c_trades_rec.variation_margin_limit,
         c_trades_rec.maintenance_margin,
         c_trades_rec.margin_cal_method,
         c_trades_rec.base_cur_id,
         c_trades_rec.base_cur_code,
         vn_brkmar_rec.fx_rate_margin_cur_to_base_cur,
         vn_brkmar_rec.initial_margin_limit_in_base,
         vn_brkmar_rec.current_credit_limit_in_base,
         vn_brkmar_rec.variation_margin_limit_in_base,
         vn_brkmar_rec.maintenance_margin_in_base,
         vn_brkmar_rec.no_of_lots,
         c_trades_rec.net_lots,
         c_trades_rec.gross_lots,
         c_trades_rec.future_outright_cur_id,
         c_trades_rec.future_outright_cur_code,
         c_trades_rec.future_outright,
         vn_brkmar_rec.initial_margin_requirement,
         vn_brkmar_rec.fx_rate_imr_cur_to_base_cur,
         vn_brkmar_rec.initial_margin_req_in_base,
         vn_brkmar_rec.under_over_utilized_im
         --,UNDER_OVER_UTILIZED_IM_FLAG
        ,
         c_trades_rec.trade_value_in_base,
         c_trades_rec.market_value_in_base,
         c_trades_rec.gross_lots,
         c_trades_rec.lot_size,
         c_trades_rec.lot_size_unit_id,
         vn_brkmar_rec.variation_margin_requirement,
         vn_brkmar_rec.under_over_utilized_vm
         --,UNDER_OVER_UTILIZED_VM_FLAG
         );
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      dbms_output.put_line(dbms_utility.format_error_stack);
      dbms_output.put_line(dbms_utility.format_error_backtrace);
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_broker_margin_util',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  --Brokerage_Margin_Utilization Changes end
  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2 is
    vc_is_derived_unit varchar2(1);
  begin
    select qum.is_derrived
      into vc_is_derived_unit
      from qum_quantity_unit_master qum
     where qum.qty_unit_id = pc_qty_unit_id;
    return vc_is_derived_unit;
  end;

  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number is
    vn_conv_factor             number;
    vn_converted_qty           number;
    vc_is_from_der_qty_unit_id varchar2(1);
    vc_is_to_der_qty_unit_id   varchar2(1);
    vc_base_form_qty_unit_id   varchar2(15) := pc_from_qty_unit_id;
    vn_from_der_to_base_conv   number(20, 5) := 1;
    vc_base_to_qty_unit_id     varchar2(15) := pc_to_qty_unit_id;
    vn_to_der_to_base_conv     number(20, 5) := 1;
  begin
    begin
      vc_is_from_der_qty_unit_id := f_get_is_derived_qty_unit(pc_from_qty_unit_id);
      vc_is_to_der_qty_unit_id   := f_get_is_derived_qty_unit(pc_to_qty_unit_id);
      if (vc_is_from_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_form_qty_unit_id,
               vn_from_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_from_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      if (vc_is_to_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_to_qty_unit_id,
               vn_to_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_to_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      select ucm.multiplication_factor
        into vn_conv_factor
        from ucm_unit_conversion_master ucm
       where ucm.from_qty_unit_id = vc_base_form_qty_unit_id
         and ucm.to_qty_unit_id = vc_base_to_qty_unit_id;
      vn_converted_qty := round(vn_from_der_to_base_conv /
                                vn_to_der_to_base_conv * vn_conv_factor *
                                pn_qty_to_be_converted,
                                15);
      return vn_converted_qty;
    exception
      when no_data_found then
        return - 1;
      when others then
        return - 1;
    end;
  end;

  function f_get_converted_currency_amt
  /**************************************************************************************************
    Function Name                       : f_get_converted_currency_amt
    Author                              : Janna
    Created Date                        : 19th Aug 2008
    Purpose                             : To convert a given amount between two currencies as on a given date
    Parameters                          :
    pc_corporate_id                     : Corporate ID
    pc_from_cur_id                      : From Currency
    pc_to_cur_id                        : To Currency
    pd_cur_date                         : Currency Date
    pn_amt_to_be_converted              : Amount to be converted
    Returns                             :
    Number                              : Converted amount
    Modification History
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id        in varchar2,
   pc_from_cur_id         in varchar2,
   pc_to_cur_id           in varchar2,
   pd_cur_date            in date,
   pn_amt_to_be_converted in number) return number is
    vn_result                    number;
    vc_base_cur_id               varchar2(30);
    vc_from_main_cur_id          varchar2(30);
    vc_to_main_cur_id            varchar2(30);
    vn_from_rate                 number;
    vn_from_main_currency_factor number := 1;
    vn_to_main_currency_factor   number := 1;
    vn_to_rate                   number;
  begin
    vn_from_rate        := 1;
    vn_to_rate          := 1;
    vc_from_main_cur_id := pc_from_cur_id;
    vc_to_main_cur_id   := pc_to_cur_id;
    -- Get the Base Currency ID of the corporate
    -- This is used to determine if one of the currencies given is the base currency itself
    -- Since AK_CORPORATE is not having Currency ID column and we are not changing it now
    -- We are joining CUR_CODE of CM with BASE_CURRENCY_NAME of AK_CORPORATE
    -- When AK_CORPORATE table is revamped change this code
    begin
      select akc.base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
      --  AND cm.cur_code = akc.base_currency_name;
    exception
      when no_data_found then
        return - 1;
    end;
    -- Check if the currency passed is a sub-currency if yes take into account
    -- the sub currency factor...
    begin
      select scd.cur_id,
             scd.factor
        into vc_from_main_cur_id,
             vn_from_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_from_cur_id;
    exception
      when no_data_found then
        vn_from_main_currency_factor := 1;
        vc_from_main_cur_id          := pc_from_cur_id;
    end;
    begin
      select scd.cur_id,
             scd.factor
        into vc_to_main_cur_id,
             vn_to_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_to_cur_id;
    exception
      when no_data_found then
        vn_to_main_currency_factor := 1;
        vc_to_main_cur_id          := pc_to_cur_id;
    end;
    if vc_base_cur_id = vc_from_main_cur_id and
       vc_base_cur_id = vc_to_main_cur_id then
      vn_from_rate := 1;
      vn_to_rate   := 1;
    else
      begin
        -- Get the From Currency Exchange rate
        if pc_to_cur_id = pc_from_cur_id then
          return(pn_amt_to_be_converted);
        else
          if vc_from_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_from_rate
              from cq_currency_quote cq
             where cq.cur_id = vc_from_main_cur_id
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = vc_from_main_cur_id
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
          -- Get the To Currency Exchange rate
          if vc_to_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_to_rate
              from cq_currency_quote cq
             where cq.cur_id = upper(vc_to_main_cur_id)
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = upper(vc_to_main_cur_id)
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
        end if;
      exception
        when no_data_found then
          return - 1;
      end;
    end if;
    vn_result := pn_amt_to_be_converted *
                 ((vn_to_rate / vn_to_main_currency_factor) /
                 (vn_from_rate / vn_from_main_currency_factor));
    return(vn_result);
  exception
    when no_data_found then
      return - 1;
  end;

  function f_currency_exchange_rate(pd_trade_date   date,
                                    pc_corporate_id varchar2,
                                    pd_prompt_date  varchar2,
                                    pc_from_cur_id  varchar2,
                                    pc_to_cur_id    varchar2) return number is
    vn_result number;
    /******************************************************************************************************************************************
    procedure name                            : f_currency_exchange_rate
    author                                    :
    created date                              :
    purpose                                   :
    parameters                                :
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
  begin
    vn_result := f_get_converted_currency_amt(pc_corporate_id,
                                              pc_from_cur_id,
                                              pc_to_cur_id,
                                              pd_trade_date,
                                              1);
    return vn_result;
  end;

  function f_get_converted_price_pum(pc_corporate_id       varchar2,
                                     pn_price              number,
                                     pc_from_price_unit_id varchar2,
                                     pc_to_price_unit_id   varchar2,
                                     pd_trade_date         date,
                                     pc_product_id         varchar2)
    return number is
    vn_result number;
  begin
    if pc_from_price_unit_id = pc_to_price_unit_id then
      return pn_price;
    else
      select nvl(round(nvl(pn_price, 0) *
                       f_get_converted_currency_amt(pc_corporate_id,
                                                    pum1.cur_id,
                                                    pum2.cur_id,
                                                    pd_trade_date,
                                                    1) *
                       f_get_converted_quantity(pc_product_id,
                                                pum1.weight_unit_id,
                                                pum2.weight_unit_id,
                                                1) * nvl(pum1.weight, 1) /
                       nvl(pum2.weight, 1),
                       5),
                 0)
        into vn_result
        from pum_price_unit_master pum1,
             pum_price_unit_master pum2
       where pum1.price_unit_id = pc_from_price_unit_id
         and pum2.price_unit_id = pc_to_price_unit_id
         and pum1.is_deleted = 'N'
         and pum2.is_deleted = 'N';
      return vn_result;
    end if;
  exception
    when others then
      return 0;
  end;

  function f_get_next_day(p_date     in date,
                          p_day      in varchar2,
                          p_position in number) return date is
    v_position_date      date;
    v_next_position      number;
    v_start_day          varchar2(10);
    v_first_day_position date;
  begin
    begin
      v_next_position := (p_position - 1) * 7;
      v_start_day     := to_char(to_date('01-' ||
                                         to_char(trunc(p_date), 'mon-yyyy'),
                                         'dd-mon-yyyy'),
                                 'dy');
      if upper(trim(v_start_day)) = upper(trim(p_day)) then
        v_first_day_position := to_date('01-' ||
                                        to_char(trunc(p_date), 'mon-yyyy'),
                                        'dd-mon-yyyy');
      else
        v_first_day_position := next_day(to_date('01-' ||
                                                 to_char(p_date, 'mon-yyyy'),
                                                 'dd-mon-yyyy'),
                                         trim(p_day));
      end if;
      if v_next_position <= 1 then
        v_position_date := trunc(v_first_day_position);
      else
        v_position_date := trunc(v_first_day_position) + v_next_position;
      end if;
    exception
      when no_data_found then
        return null;
      when others then
        return null;
    end;
    return v_position_date;
  end f_get_next_day;

  function f_is_day_holiday(pc_instrumentid in varchar2,
                            pc_trade_date   date) return boolean is
    pc_counter number(1);
    result_val boolean;
  begin
    --Checking the Week End Holiday List
    begin
      select count(*)
        into pc_counter
        from dual
       where to_char(pc_trade_date, 'Dy') in
             (select clwh.holiday
                from dim_der_instrument_master    dim,
                     clm_calendar_master          clm,
                     clwh_calendar_weekly_holiday clwh
               where dim.holiday_calender_id = clm.calendar_id
                 and clm.calendar_id = clwh.calendar_id
                 and dim.instrument_id = pc_instrumentid
                 and clm.is_deleted = 'N'
                 and clwh.is_deleted = 'N');
      if (pc_counter = 1) then
        result_val := true;
      else
        result_val := false;
      end if;
      if (result_val = false) then
        --Checking Other Holiday List
        select count(*)
          into pc_counter
          from dual
         where trim(pc_trade_date) in
               (select trim(hl.holiday_date)
                  from hm_holiday_master         hm,
                       hl_holiday_list           hl,
                       dim_der_instrument_master dim,
                       clm_calendar_master       clm
                 where hm.holiday_id = hl.holiday_id
                   and dim.holiday_calender_id = clm.calendar_id
                   and clm.calendar_id = hm.calendar_id
                   and dim.instrument_id = pc_instrumentid
                   and hm.is_deleted = 'N'
                   and hl.is_deleted = 'N');
        if (pc_counter = 1) then
          result_val := true;
        else
          result_val := false;
        end if;
      end if;
    end;
    return result_val;
  end f_is_day_holiday;

  procedure sp_calc_daily_initial_margin(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2) is
    /*******************************************************************************************************************************************
    Procedure Name                            : sp_calc_daily_initial_margin
    Author                                    : Janna
    Created Date                              : 10th Jan 2009
    Purpose                                   : Calculate the Tradewise daily initial margin as on EOD Date
    Parameters
    pc_corporate_id                           : Corporate ID
    pd_trade_date                             : EOD Date ID
    pc_process_id                             : EOD Reference No
    Modification History
    Modified Date                             :
    Modified By                               :
    Modify Description                        :
    ******************************************************************************************************************************************/
    vc_base_cur_code varchar2(15);
    vc_base_cur_id   varchar2(15);
    --vn_sp_margin_amt_per_lot    number(25, 5) := 0;
    --vc_sp_margin_cur_id         varchar2(15);
    --vn_ot_margin_amt_per_lot    number(25, 5) := 0;
    --vc_ot_margin_cur_id         varchar2(15);
    --vn_op_margin_amt_per_lot    number(25, 5) := 0;
    --vc_op_margin_cur_id         varchar2(15);
    --vc_sp_margin_cur_code       varchar2(15);
    --vc_ot_margin_cur_code       varchar2(15);
    --vc_op_margin_cur_code       varchar2(15);
    vobj_error_log              tableofpelerrorlog := tableofpelerrorlog();
    vn_future_spread            number;
    vn_future_outright          number;
    vn_option_short             number;
    vc_future_spread_cur_id     varchar2(15);
    vc_future_outright_cur_id   varchar2(15);
    vc_option_short_cur_id      varchar2(15);
    vc_future_spread_cur_code   varchar2(15);
    vc_future_outright_cur_code varchar2(15);
    vc_option_short_cur_code    varchar2(15);
    vn_eel_error_count          number := 1;
    cursor cur_future is
      select corporate_id,
             corporate_name,
             clearer_profile_id,
             clearer_name,
             product_id,
             product_name,
             product_derivative_id,
             derivative_def_name,
             exchange_id,
             exchange_name,
             instrument_type,
             instrument_type_id,
             (case
               when buy_lots > sell_lots then
                sell_lots
               else
                buy_lots
             end) no_of_lots,
             buy_lots,
             sell_lots
        from (select t.corporate_id,
                     t.corporate_name,
                     t.clearer_profile_id,
                     t.clearer_name,
                     t.product_id,
                     t.product_name,
                     t.product_derivative_id,
                     t.derivative_def_name,
                     t.exchange_id,
                     t.exchange_name,
                     t.instrument_type,
                     t.instrument_type_id,
                     sum((case
                           when t.net_lots > 0 then
                            t.net_lots
                           else
                            0
                         end)) buy_lots,
                     sum((case
                           when t.net_lots < 0 then
                            abs(t.net_lots)
                           else
                            0
                         end)) sell_lots,
                     sum(t.net_lots) net_lots
                from (select dt.corporate_id,
                             akc.corporate_name,
                             dt.clearer_profile_id clearer_profile_id,
                             nvl(phd.company_long_name1, phd.companyname) clearer_name,
                             dim.product_derivative_id,
                             pdd.product_id,
                             pdm.product_desc product_name,
                             pdd.derivative_def_name,
                             pdd.exchange_id,
                             emt.exchange_name,
                             irm.instrument_type,
                             irm.instrument_type_id,
                             sum((case
                                   when dt.trade_type = 'Buy' then
                                    dt.open_lots
                                 --drt.no_of_lots
                                   else
                                    (-1) * dt.open_lots
                                 --drt.no_of_lots * (-1)
                                 end)) net_lots
                        from dt_derivative_trade        dt,
                             drm_derivative_master      drm,
                             dim_der_instrument_master  dim,
                             irm_instrument_type_master irm,
                             pdd_product_derivative_def pdd,
                             emt_exchangemaster         emt,
                             ak_corporate               akc,
                             phd_profileheaderdetails   phd,
                             pdm_productmaster          pdm
                       where dt.dr_id = drm.dr_id
                         and drm.instrument_id = dim.instrument_id
                         and pdd.derivative_def_id =
                             dim.product_derivative_id
                         and dt.process_id = pc_process_id
                         and irm.instrument_type_id = dim.instrument_type_id
                         and irm.instrument_type in ('Future', 'Forward')
                         and dt.status = 'Verified'
                         and dt.is_what_if = 'N'
                         and dt.corporate_id = pc_corporate_id
                         and dt.trade_date <= pd_trade_date
                         and pdd.exchange_id = emt.exchange_id
                         and dt.corporate_id = akc.corporate_id
                         and dt.clearer_profile_id = phd.profileid
                         and pdd.product_id = pdm.product_id
                       group by dt.corporate_id,
                                akc.corporate_name,
                                dt.clearer_profile_id,
                                nvl(phd.company_long_name1, phd.companyname),
                                dim.product_derivative_id,
                                pdd.product_id,
                                pdm.product_desc,
                                pdd.derivative_def_name,
                                pdd.exchange_id,
                                emt.exchange_name,
                                irm.instrument_type_id,
                                irm.instrument_type,
                                dt.trade_type,
                                dt.open_lots) t
               group by t.corporate_id,
                        t.corporate_name,
                        t.clearer_profile_id,
                        t.clearer_name,
                        t.product_id,
                        t.product_name,
                        t.product_derivative_id,
                        t.derivative_def_name,
                        t.exchange_id,
                        t.exchange_name,
                        t.instrument_type,
                        t.instrument_type_id);
    cursor cur_options is
      select corporate_id,
             corporate_name,
             clearer_profile_id,
             clearer_name,
             product_id,
             product_name,
             derivative_def_id,
             derivative_def_name,
             exchange_id,
             exchange_name,
             'Short' option_type,
             instrument_type,
             instrument_type_id,
             delivery_month,
             sum(delta_value) delta_value,
             no_of_lots
        from (select dt.corporate_id,
                     akc.corporate_name,
                     dt.clearer_profile_id clearer_profile_id,
                     nvl(phd.company_long_name1, phd.companyname) clearer_name,
                     pdd.product_id,
                     pdm.product_desc product_name,
                     pdd.derivative_def_id derivative_def_id,
                     pdd.derivative_def_name derivative_def_name,
                     pdd.exchange_id,
                     emt.exchange_name,
                     irm.instrument_type,
                     irm.instrument_type_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        '01-' || drm.period_month || '-' || drm.period_year
                       else
                        to_char(drm.prompt_date, 'dd-Mon-yyyy')
                     end else to_char(drm.period_date, 'dd-Mon-yyyy') end) delivery_month,
                     /* (case
                                                                                                                                                                                                                                                                                                                                                                                         when pm.period_type_name in ('day', 'week') then
                                                                                                                                                                                                                                                                                                                                                                                          to_char(drm.period_date, 'dd-mon-yyyy')
                                                                                                                                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                                                                                                                                          '01-' || drm.period_month || '-' || drm.period_year
                                                                                                                                                                                                                                                                                                                                                                                       end) delivery_month,*/
                     --drt.strike_price,
                     sum(dt.open_lots) no_of_lots,
                     dqd.delta,
                     sum(dt.open_lots) * dqd.delta delta_value
                from dt_derivative_trade         dt,
                     dq_derivative_quotes        dq,
                     dqd_derivative_quote_detail dqd,
                     drm_derivative_master       drm,
                     pm_period_master            pm,
                     dim_der_instrument_master   dim,
                     irm_instrument_type_master  irm,
                     pdd_product_derivative_def  pdd,
                     emt_exchangemaster          emt,
                     ak_corporate                akc,
                     phd_profileheaderdetails    phd,
                     pdm_productmaster           pdm
               where dt.dr_id = drm.dr_id
                 and dt.dr_id = dqd.dr_id
                 and dq.dq_id = dqd.dq_id
                 and dq.corporate_id = dt.corporate_id
                 and dq.trade_date = pd_trade_date
                 and dq.process_id = pc_process_id
                 and dt.process_id = pc_process_id
                 and drm.instrument_id = dim.instrument_id
                 and drm.period_type_id = pm.period_type_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                 and dim.instrument_type_id = irm.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and dt.status = 'Verified'
                 and dt.is_what_if = 'N'
                 and dt.corporate_id = pc_corporate_id
                 and dt.trade_date <= pd_trade_date
                 and pdd.exchange_id = emt.exchange_id(+)
                 and dt.trade_type = 'Sell'
                    -- AND drt.strike_price = dq.strike_price(+) --???
                 and dt.corporate_id = akc.corporate_id
                 and dt.clearer_profile_id = phd.profileid
                 and pdd.product_id = pdm.product_id
               group by dt.corporate_id,
                        akc.corporate_name,
                        dt.clearer_profile_id,
                        nvl(phd.company_long_name1, phd.companyname),
                        pdd.product_id,
                        pdm.product_desc,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        pdd.exchange_id,
                        emt.exchange_name,
                        irm.instrument_type,
                        irm.instrument_type_id,
                        irm.instrument_type_id,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           '01-' || drm.period_month || '-' ||
                           drm.period_year
                          else
                           to_char(drm.prompt_date, 'dd-Mon-yyyy')
                        end else to_char(drm.period_date, 'dd-Mon-yyyy') end),
                        --drt.strike_price,
                        dqd.delta)
       group by corporate_id,
                corporate_name,
                clearer_profile_id,
                clearer_name,
                product_id,
                product_name,
                derivative_def_id,
                derivative_def_name,
                instrument_type,
                instrument_type_id,
                delivery_month,
                exchange_id,
                exchange_name,
                no_of_lots;
  begin
    --DBMS_OUTPUT.put_line('inside dim');
    select akc.base_currency_name,
           cm.cur_id
      into vc_base_cur_code,
           vc_base_cur_id
      from ak_corporate       akc,
           cm_currency_master cm
     where akc.corporate_id = pc_corporate_id
       and cm.cur_code = akc.base_currency_name;
    -- DBMS_OUTPUT.put_line('Before loop');
    for cur_future_rows in cur_future
    loop
      /*To Record the Futures Margin */
      -- DBMS_OUTPUT.put_line('inside loop');
      begin
        select future_spread,
               future_outright,
               option_short,
               future_spread_cur_id,
               future_outright_cur_id,
               option_short_cur_id,
               cm_spread.cur_code,
               cm_outright.cur_code,
               cm_option.cur_code
          into vn_future_spread,
               vn_future_outright,
               vn_option_short,
               vc_future_spread_cur_id,
               vc_future_outright_cur_id,
               vc_option_short_cur_id,
               vc_future_spread_cur_code,
               vc_future_outright_cur_code,
               vc_option_short_cur_code
          from ims_initial_margin_setup ims,
               cm_currency_master cm_spread,
               cm_currency_master cm_outright,
               cm_currency_master cm_option,
               (select ims1.corporate_id,
                       ims1.derivative_def_id,
                       ims1.product_id
                  from ims_initial_margin_setup ims1
                 where ims1.validity_to_date >= pd_trade_date
                   and ims1.validity_from_date <= pd_trade_date
                   and ims1.corporate_id = pc_corporate_id
                   and ims1.is_deleted = 'N'
                 group by ims1.corporate_id,
                          ims1.derivative_def_id,
                          ims1.product_id) ims2
         where ims.derivative_def_id =
               cur_future_rows.product_derivative_id
           and ims.corporate_id = pc_corporate_id
           and ims.product_id = cur_future_rows.product_id
           and ims.future_spread_cur_id = cm_spread.cur_id
           and ims.future_outright_cur_id = cm_outright.cur_id
           and ims.option_short_cur_id = cm_option.cur_id
           and ims.validity_to_date >= pd_trade_date
           and ims.validity_from_date <= pd_trade_date
           and ims.corporate_id = ims2.corporate_id
           and ims.derivative_def_id = ims2.derivative_def_id
           and ims.product_id = ims2.product_id
           and ims.is_deleted = 'N';
        --preeti add logic to pick up latest valid ones
        --DBMS_OUTPUT.put_line('got values without error');
      exception
        when no_data_found then
          vn_future_spread            := 0;
          vn_future_outright          := 0;
          vn_option_short             := 0;
          vc_future_spread_cur_id     := null;
          vc_future_outright_cur_id   := null;
          vc_option_short_cur_id      := null;
          vc_future_spread_cur_code   := null;
          vc_future_outright_cur_code := null;
          vc_option_short_cur_code    := null;
      end;
      --DBMS_OUTPUT.put_line('before insert');
      insert into dim_daily_initial_margin
        (corporate_id,
         corporate_name,
         process_id,
         trade_date,
         clearer_profile_id,
         clearer_name,
         product_id,
         product_name,
         exch_id,
         exch_name,
         derivative_def_id,
         derivative_def_name,
         instrument_type,
         margin_type,
         spread_margin_per_lot,
         spread_margin_cur_id,
         spread_margin_cur_code,
         outright_margin_per_lot,
         outright_margin_cur_id,
         outright_margin_cur_code,
         no_of_lots,
         long_lots,
         short_lots,
         base_cur_id,
         base_cur_code,
         exch_rate,
         option_margin_rate)
      values
        (cur_future_rows.corporate_id,
         cur_future_rows.corporate_name,
         pc_process_id,
         pd_trade_date,
         cur_future_rows.clearer_profile_id,
         cur_future_rows.clearer_name,
         cur_future_rows.product_id,
         cur_future_rows.product_name,
         cur_future_rows.exchange_id,
         cur_future_rows.exchange_name,
         cur_future_rows.product_derivative_id,
         cur_future_rows.derivative_def_name,
         cur_future_rows.instrument_type,
         'Futures',
         vn_future_spread,
         vc_future_spread_cur_id,
         vc_future_spread_cur_code,
         vn_future_outright,
         vc_future_outright_cur_id,
         vc_future_outright_cur_code,
         cur_future_rows.no_of_lots,
         cur_future_rows.buy_lots,
         cur_future_rows.sell_lots,
         vc_base_cur_id,
         vc_base_cur_code,
         f_get_converted_currency_amt(pc_corporate_id,
                                      vc_future_spread_cur_id,
                                      vc_base_cur_id,
                                      pd_trade_date,
                                      1),
         vn_option_short);
      dbms_output.put_line('after insert' || sql%rowcount);
    end loop;
    --DBMS_OUTPUT.put_line('after futures');
    /*   To Record the Options   */
    for cur_option_rows in cur_options
    loop
      -- DBMS_OUTPUT.put_line('in options');
      begin
        select future_spread,
               future_outright,
               option_short,
               future_spread_cur_id,
               future_outright_cur_id,
               option_short_cur_id,
               cm_spread.cur_code,
               cm_outright.cur_code,
               cm_option.cur_code
          into vn_future_spread,
               vn_future_outright,
               vn_option_short,
               vc_future_spread_cur_id,
               vc_future_outright_cur_id,
               vc_option_short_cur_id,
               vc_future_spread_cur_code,
               vc_future_outright_cur_code,
               vc_option_short_cur_code
          from ims_initial_margin_setup@eka_appdb ims,
               cm_currency_master cm_spread,
               cm_currency_master cm_outright,
               cm_currency_master cm_option,
               (select ims1.corporate_id,
                       ims1.derivative_def_id,
                       ims1.product_id
                  from ims_initial_margin_setup ims1
                 where ims1.validity_to_date >= pd_trade_date
                   and ims1.validity_from_date <= pd_trade_date
                   and ims1.corporate_id = pc_corporate_id
                   and ims1.is_deleted = 'N'
                 group by ims1.corporate_id,
                          ims1.derivative_def_id,
                          ims1.product_id) ims2
         where ims.derivative_def_id = cur_option_rows.derivative_def_id
           and ims.corporate_id = pc_corporate_id
           and ims.product_id = cur_option_rows.product_id
           and ims.future_spread_cur_id = cm_spread.cur_id
           and ims.future_outright_cur_id = cm_outright.cur_id
           and ims.option_short_cur_id = cm_option.cur_id
           and ims.validity_to_date >= pd_trade_date
           and ims.validity_from_date <= pd_trade_date
           and ims.corporate_id = ims2.corporate_id
           and ims.derivative_def_id = ims2.derivative_def_id
           and ims.product_id = ims2.product_id
           and ims.is_deleted = 'N';
        --preeti add logic to pick up latest valid ones
        -- DBMS_OUTPUT.put_line('after select in otiosn');
      exception
        when no_data_found then
          vn_future_spread            := 0;
          vn_future_outright          := 0;
          vn_option_short             := 0;
          vc_future_spread_cur_id     := null;
          vc_future_outright_cur_id   := null;
          vc_option_short_cur_id      := null;
          vc_future_spread_cur_code   := null;
          vc_future_outright_cur_code := null;
          vc_option_short_cur_code    := null;
      end;
      -- DBMS_OUTPUT.put_line('before insert n options');
      insert into dim_daily_initial_margin
        (corporate_id,
         corporate_name,
         process_id,
         trade_date,
         clearer_profile_id,
         clearer_name,
         product_id,
         product_name,
         exch_id,
         exch_name,
         derivative_def_id,
         derivative_def_name,
         instrument_type,
         margin_type,
         spread_margin_per_lot,
         spread_margin_cur_id,
         spread_margin_cur_code,
         outright_margin_per_lot,
         outright_margin_cur_id,
         outright_margin_cur_code,
         no_of_lots,
         long_lots,
         short_lots,
         base_cur_id,
         base_cur_code,
         exch_rate,
         option_margin_rate)
      values
        (cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         pc_process_id,
         --pd_trade_date,
         cur_option_rows.delivery_month,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.product_id,
         cur_option_rows.product_name,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.instrument_type,
         'Options',
         vn_future_spread,
         vc_future_spread_cur_id,
         vc_future_spread_cur_code,
         null,
         null,
         null,
         cur_option_rows.no_of_lots,
         null,
         null,
         vc_base_cur_id,
         vc_base_cur_code,
         f_get_converted_currency_amt(pc_corporate_id,
                                      vc_future_spread_cur_id,
                                      vc_base_cur_id,
                                      pd_trade_date,
                                      1),
         vn_option_short);
    end loop;
    --DBMS_OUTPUT.put_line('after options');
    /* preeti . These are not required for AWB
    --To Record the Long Options, long Options are premium paid trades,
    
    /*INSERT INTO dim_daily_initial_margin
        (corporate_id,
         corporate_name,
         process_id,
         trade_date,
         clearer_profile_id,
         clearer_name,
         product_id,
         product_name,
         exch_id,
         exch_name,
         derivative_def_id,
         derivative_def_name,
         instrument_type,
         margin_type,
         spread_margin_amt_per_lot,
         spread_margin_cur_id,
         spread_margin_cur_code,
         no_of_lots,
         total_margin_amt,
         margin_amt_in_base_cur,
         base_cur_id,
         base_cur_code)
        SELECT t.corporate_id,
               t.corporate_name,
               pc_process_id,
               pd_trade_date,
               t.clearer_profile_id,
               t.clearer_name,
               t.product_id,
               t.product_name,
               t.exchange_id,
               t.exchange_name,
               t.derivative_def_id,
               t.derivative_def_name,
               t.instrument_type instrument_type,
               t.option_type margin_type,
               0 margin_amt_per_lot,
               t.cur_id,
               t.base_currency_name margin_cur_code,
               t.no_of_lots,
               t.premium_paid tot_margin_amt,
               t.premium_paid margin_amt_base,
               t.base_cur_id,
               t.base_currency_name base_currency
        FROM   (SELECT dt.corporate_id,
                       dt.clearer_profile_id clearer_profile_id,
                       pdd.product_id,
                       cm.cur_id,
                       pdd.exchange_id,
                       irm.instrument_type,
                       'Long' option_type,
                       SUM(dt.total_lots) no_of_lots,
                       SUM(dt.total_lots * pdd.lot_size *
                           pkg_general.f_get_converted_quantity(NULL,
                                                                pdd.lot_size_unit_id,
                                                                pum.weight_unit_id,
                                                                1) *
                           (dt.trade_price / nvl(pum.weight,
                                            1)) *
                           pkg_general.f_get_converted_currency_amt(dt.corporate_id,
                                                                    cm.cur_id,
                                                                    akc.base_currency_name,
                                                                    SYSDATE,
                                                                    1)) premium_paid,
                       akc.base_currency_name,
                       akc.corporate_name,
                       nvl(phd.company_long_name1,
                           phd.companyname) clearer_name,
                       pdm.product_desc product_name,
                       pdd.derivative_def_id,
                       pdd.derivative_def_name,
                       emt.exchange_name,
                       cm_ak_currency.cur_id AS base_cur_id
                FROM   dt_derivative_trade                dt,
                       drm_derivative_master              drm,
                       dim_der_instrument_master          dim,
                       irm_instrument_type_master         irm,
                       pdd_product_derivative_def         pdd,
                       emt_exchangemaster                 emt,
                       ak_corporate                       akc,
                       phd_profileheaderdetails           phd,
                       pdm_productmaster                  pdm,
                       cm_currency_master                 cm,
                       cm_currency_master                 cm_ak_currency,
                       pum_price_unit_master              pum
                WHERE  dt.dr_id = drm.dr_id
                AND    drm.instrument_id = dim.instrument_id
                AND    pdd.derivative_def_id = dim.product_derivative_id
                AND    irm.instrument_type_id = dim.instrument_type_id
                AND    irm.instrument_type_id IN
                       ('IRMCO', 'IRMPO', 'IRMOTCO', 'IRMOTPO')
                AND    dt.status = 'Verified'
                AND    dt.corporate_id = pc_corporate_id
                AND    dt.trade_date <= pd_trade_date
                AND    pdd.exchange_id = emt.exchange_id(+)
                AND    dt.trade_type = 'Buy'
                AND    dt.corporate_id = akc.corporate_id
                AND    dt.clearer_profile_id = phd.profileid
                AND    pdd.product_id = pdm.product_id
                AND    dt.trade_price_unit_id = pum.price_unit_id
                AND    pum.cur_id = cm.cur_id
                AND    cm_ak_currency.cur_code = akc.base_currency_name
                GROUP  BY dt.corporate_id,
                          dt.clearer_profile_id,
                          pdd.product_id,
                          pdd.exchange_id,
                          irm.instrument_type,
                          akc.base_currency_name,
                          akc.corporate_name,
                          nvl(phd.company_long_name1,
                              phd.companyname),
                          pdm.product_desc,
                          pdd.derivative_def_id,
                          pdd.derivative_def_name,
                          emt.exchange_name,
                          cm.cur_id,
                          cm_ak_currency.cur_id) t; */
  exception
    when others then
      dbms_output.put_line('failing here ' || sqlerrm);
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_daily_initial_margin',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  /*procedure sp_calc_future_accounts(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into fad_future_account_daily
      (corporate_id,
       corporate_name,
       eod_trade_date,
       process_id,
       acc_type_id,
       acc_type_name,
       --acc_id,
       --acc_no,
       acc_qty,
       acc_qty_unit_id,
       acc_qty_in_lots,
       trade_date,
       exchange_id,
       exchange_name,
       period_month,
       period_year,
       period_date,
       instrument_type_id,
       instrument_type,
       instrument_id,
       instrument_name,
       order_type_id,
       order_type,
       dr_id,
       derivative_def_id,
       derivative_def_name,
       derivative_ref_no,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       future_month_name,
       buy_sell,
       no_of_lots,
       lot_size,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_cur_weight,
       strike_price_cur_wt_unit_id,
       strike_price_cur_weight_unit,
       settlement_price)
    --parent_instrument_type)
      select akc.corporate_id,
             akc.corporate_name,
             pd_trade_date,
             pc_process_id,
             satm.acc_type_id,
             satm.acc_type_name,
             --sa.acc_id,
             --sa.acc_no,
             sum(dsa.acc_qty),
             dsa.acc_qty_unit_id,
             sum(dsa.quantity_in_lots),
             dt.trade_date,
             emt.exchange_id,
             emt.exchange_name,
             drm.period_month,
             drm.period_year,
             to_date('01/' || drm.period_month || '-' || drm.period_year,
                     'dd-mon-yyyy'),
             irm.instrument_type_id,
             irm.instrument_type,
             dim.instrument_id,
             dim.instrument_name,
             dt.deal_type_id,
             dtm.deal_type_id,
             dt.dr_id,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             dt.derivative_ref_no,
             dt.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             drm.dr_id_name as future_month_name,
             dt.trade_type,
             dt.total_lots,
             pdd.lot_size,
             dt.strike_price,
             dt.strike_price_unit_id,
             cm_drt_strike.cur_id,
             cm_drt_strike.cur_code,
             pum_drt_strike.weight,
             pum_drt_strike.weight_unit_id,
             qum_drt_strike.qty_unit,
             dt.trade_price
      --irm.parent_instrument_type
        from satm_strategy_acc_type_master satm,
             --sa_strategy_account@eka_appdb                 sa,
             dsa_der_strategy_account    dsa,
             dt_derivative_trade         dt,
             ak_corporate@eka_appdb      akc,
             drm_derivative_master       drm,
             dim_der_instrument_master   dim,
             irm_instrument_type_master  irm,
             pdd_product_derivative_def  pdd,
             emt_exchangemaster          emt,
             dtm_deal_type_master        dtm,
             cpc_corporate_profit_center cpc,
             pum_price_unit_master       pum_drt_strike,
             cm_currency_master          cm_drt_strike,
             qum_quantity_unit_master    qum_drt_strike
       where
      --satm.acc_type_id = sa.acc_type_id
       satm.corporate_id = akc.corporate_id
      --and    sa.acc_id = dsa.acc_id
       and dsa.internal_derivative_ref_no = dt.internal_derivative_ref_no
       and dt.dr_id = drm.dr_id
       and drm.instrument_id = dim.instrument_id
       and dim.product_derivative_id = pdd.derivative_def_id
       and irm.instrument_type_id = dim.instrument_type_id
       and emt.exchange_id = pdd.exchange_id
       and dt.deal_type_id = dtm.deal_type_id
       and dt.profit_center_id = cpc.profit_center_id
       and dt.strike_price_unit_id = pum_drt_strike.price_unit_id(+)
       and pum_drt_strike.cur_id = cm_drt_strike.cur_id(+)
       and pum_drt_strike.weight_unit_id = qum_drt_strike.qty_unit_id(+)
       and akc.corporate_id = pc_corporate_id
       and dt.process_id = pc_process_id
       group by akc.corporate_id,
                akc.corporate_name,
                pd_trade_date,
                pc_process_id,
                satm.acc_type_id,
                satm.acc_type_name,
                --sa.acc_id,
                --sa.acc_no,
                dsa.acc_qty_unit_id,
                dt.trade_date,
                emt.exchange_id,
                emt.exchange_name,
                drm.period_month,
                drm.period_year,
                drm.prompt_date,
                irm.instrument_type_id,
                irm.instrument_type,
                dim.instrument_id,
                dim.instrument_name,
                dt.deal_type_id,
                dtm.deal_type_id,
                dt.dr_id,
                pdd.derivative_def_id,
                pdd.derivative_def_name,
                dt.derivative_ref_no,
                dt.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                drm.dr_id_name,
                dt.trade_type,
                dt.total_lots,
                pdd.lot_size,
                dt.strike_price,
                dt.strike_price_unit_id,
                cm_drt_strike.cur_id,
                cm_drt_strike.cur_code,
                pum_drt_strike.weight,
                pum_drt_strike.weight_unit_id,
                qum_drt_strike.qty_unit,
                dt.trade_price;
    --irm.parent_instrument_type;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_accounts',
                                                           'm2m-013',
                                                           'code:' ||
                                                           sqlcode ||
                                                           'message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;*/
  procedure sp_mark_realized_derivatives(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2) is
    vc_prev_proccess_id varchar2(15);
  begin
    begin
      select tdc.process_id
        into vc_prev_proccess_id
        from tdc_trade_date_closure tdc
       where tdc.corporate_id = pc_corporate_id
         and process = pc_process
         and tdc.trade_date =
             (select max(trade_date)
                from tdc_trade_date_closure
               where corporate_id = pc_corporate_id
                 and trade_date < pd_trade_date
                 and process = pc_process);
    end;
    update dt_derivative_trade dt
       set dt.is_realized_today = 'Y'
     where dt.process_id = pc_process_id
       and dt.corporate_id = pc_corporate_id
       and dt.status in ('Exercised', 'Expired')
       and exists (select *
              from dt_derivative_trade dt_prev
             where dt_prev.process_id = vc_prev_proccess_id
               and dt_prev.status = 'Verified'
               and dt_prev.internal_derivative_ref_no =
                   dt.internal_derivative_ref_no);
    update dt_derivative_trade dt
       set dt.is_realized_today = 'Y'
     where dt.process_id = pc_process_id
       and dt.corporate_id = pc_corporate_id
       and dt.status in ('Exercised', 'Expired')
       and not exists (select *
              from dt_derivative_trade dt_prev
             where dt_prev.process_id = vc_prev_proccess_id
               and dt_prev.internal_derivative_ref_no =
                   dt.internal_derivative_ref_no);
  end;

  procedure sp_mark_new_derivative_trades(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_mark_new_derivative_trades
    author                                    : janna
    created date                              : 13th apr 2009
    purpose                                   : to mark the new trades created between last eod and current eod.
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_refno         varchar2(20);
    vn_strike_price           number;
    vc_in_out_at_money_status varchar2(30);
  begin
    --write_log(null,'inside sp_mark_new_derivative_trades begin');
    begin
      select t1.process_id
        into vc_prev_eod_refno
        from tdc_trade_date_closure t1
       where t1.corporate_id = pc_corporate_id
         and t1.process = pc_process
         and t1.trade_date =
             (select max(t2.trade_date)
                from tdc_trade_date_closure t2
               where t2.corporate_id = pc_corporate_id
                 and t2.trade_date < pd_trade_date
                 and t2.process = pc_process);
    end;
    insert into dpd_derivative_pnl_daily
      (internal_derivative_ref_no,
       derivative_ref_no,
       eod_trade_date,
       trade_date,
       corporate_id,
       corporate_name,
       trader_id,
       trader_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       dr_id,
       instrument_id,
       instrument_name,
       instrument_symbol,
       instrument_type_id,
       instrument_type,
       instrument_type_name,
       instrument_sub_type_id,
       instrument_sub_type,
       derivative_def_id,
       derivative_def_name,
       derivative_traded_on,
       derivative_prodct_id,
       derivative_prodct_name,
       exchange_id,
       exchange_name,
       exchange_code,
       lot_size,
       lot_size_unit_id,
       lot_size_unit,
       price_point_id,
       price_point_name,
       period_type_id,
       period_type_name,
       period_type_display_name,
       period_month,
       period_year,
       period_date,
       prompt_date,
       dr_id_name,
       trade_type,
       deal_type_id,
       deal_type_name,
       deal_type_display_name,
       is_multiple_leg_involved,
       deal_category,
       deal_sub_category,
       strategy_id,
       strategy_name,
       strategy_desc,
       strategy_def_name,
       group_id,
       group_name,
       purpose_id,
       purpose_name,
       purpose_display_name,
       external_ref_no,
       cp_profile_id,
       cp_name,
       master_contract_id,
       broker_profile_id,
       broker_name,
       broker_account_id,
       broker_account_name,
       broker_account_type,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       broker_comm_cur_code,
       clearer_profile_id,
       clearer_name,
       clearer_account_id,
       clearer_account_name,
       clearer_account_type,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       clearer_comm_cur_code,
       product_id,
       product_name,
       quality_id,
       quality_name,
       quantity_unit_id,
       quantity_unit,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       trade_price_cur_id,
       trade_price_cur_code,
       trade_price_weight,
       trade_price_weight_unit_id,
       trade_price_weight_unit,
       formula_id,
       formula_name,
       formula_display,
       index_instrument_id,
       index_instrument_name,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_weight,
       strike_price_weight_unit_id,
       strike_price_weight_unit,
       premium_discount,
       premium_discount_price_unit_id,
       pd_price_cur_id,
       pd_price_cur_code,
       pd_price_weight,
       pd_price_weight_unit_id,
       pd_price_weight_unit,
       premium_due_date,
       nominee_profile_id,
       nominee_name,
       leg_no,
       option_expiry_date,
       parent_int_derivative_ref_no,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term_id,
       payment_term,
       payment_due_date,
       closed_lots,
       closed_quantity,
       is_new_trade,
       status,
       settlement_cur_id,
       settlement_cur_code,
       in_out_at_money_status,
       in_out_at_money_value,
       exercise_date,
       expiry_date,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       internal_close_out_ref_no,
       close_out_ref_no,
       close_out_date,
       settlement_price,
       sett_price_unit_id,
       sett_price_cur_id,
       sett_price_cur_code,
       sett_price_weight,
       sett_price_weight_unit_id,
       sett_price_weight_unit,
       parent_instrument_type,
       clearer_comm_in_base,
       broker_comm_in_base,
       clearer_exch_rate,
       broker_exch_rate,
       trade_cur_to_base_exch_rate,
       pnl_type,
       pnl_in_base_cur,
       pnl_in_trade_cur,
       base_cur_id,
       base_cur_code,
       underlying_future_dr_id,
       underlying_future_dr_id_name,
       underlying_future_expiry_date,
       underlying_future_quote_price,
       underlying_fut_price_unit_id,
       process_id,
       trade_qty_in_exch_unit,
       int_trade_parent_der_ref_no,
       is_internal_trade,
       available_price_id,
       average_from_date,
       average_to_date,
       swap_type_1,
       swap_trade_price_type_1,
       swap_float_type_1,
       swap_trade_price_1,
       swap_trade_price_unit_id_1,
       swap_trade_price_unit_1,
       swap_index_instrument_id_1,
       swap_formula_id_1,
       swap_type_2,
       swap_trade_price_type_2,
       swap_float_type_2,
       swap_trade_price_2,
       swap_trade_price_unit_id_2,
       swap_trade_price_unit_2,
       swap_index_instrument_id_2,
       swap_formula_id_2,
       swap_product1,
       swap_product_quality1,
       swap_product2,
       swap_product_quality2,
       pricing_invoicing_status,
       approval_status,
       trading_fee,
       clearing_fee,
       trading_clearing_fee,
       pnl_in_sett_cur,
       traded_on)
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             pdd.lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             (case
               when bct_broker.settlement_type in ('HalfTurn', 'LumpSum') then
                dt.broker_comm_amt
               else
                0
             end) broker_comm_amt,
             --dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             (case
               when bct_clearer.settlement_type in ('HalfTurn', 'LumpSum') then
                dt.clearer_comm_amt
               else
                0
             end) clearer_comm_amt,
             --dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             --   qat.gravity,
             --  gtm.gravity_type_name gravity_type,
             --  qat.density_mass_qty_unit_id,
             --  qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit,
             dt.total_lots,
             dt.total_quantity,
             dt.total_lots open_lots,
             dt.total_quantity open_quantity,
             0 exercised_lots,
             0 exercised_quantity,
             0 expired_lots,
             0 expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             0 closed_lots,
             0 closed_quantity,
             'Y' is_new_trade,
             'Verified' status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             drm.expiry_date exercise_date,
             drm.expiry_date expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             (case
               when bct_clearer.settlement_type in ('HalfTurn', 'LumpSum') then
                (case
               when nvl(dt.clearer_comm_amt, 0) <> 0 and
                    dt.clearer_comm_cur_id is not null then
                nvl(dt.clearer_comm_amt, 0) *
                pkg_cdc_derivatives_process.f_get_converted_currency_amt(dt.corporate_id,
                                                                         dt.clearer_comm_cur_id,
                                                                         cm_base.cur_id,
                                                                         dt.trade_date,
                                                                         1)
               else
                0
             end) else 0 end) clearer_comm_in_base,
             (case
               when bct_broker.settlement_type in ('HalfTurn', 'LumpSum') then
                (case
               when nvl(dt.broker_comm_amt, 0) <> 0 and
                    dt.broker_comm_cur_id is not null then
                nvl(dt.broker_comm_amt, 0) *
                pkg_cdc_derivatives_process.f_get_converted_currency_amt(dt.corporate_id,
                                                                         dt.broker_comm_cur_id,
                                                                         cm_base.cur_id,
                                                                         dt.trade_date,
                                                                         1)
               else
                0
             end) else 0 end) broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'New Trade' as pnl_type,
             0 pnl_in_base_cur,
             0 pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             0 trade_qty_in_exch_unit,
             dt.int_trade_parent_der_ref_no,
             dt.is_internal_trade,
             dt.available_price_id,
             dt.average_from_date,
             dt.average_to_date,
             dt.swap_type_1,
             dt.swap_trade_price_type_1,
             dt.swap_float_type_1,
             dt.swap_trade_price_1,
             dt.swap_trade_price_unit_id_1,
             pum_swap.price_unit_name swap_trade_price_unit_1,
             dt.swap_index_instrument_id_1,
             dt.swap_formula_id_1,
             dt.swap_type_2,
             dt.swap_trade_price_type_2,
             dt.swap_float_type_2,
             dt.swap_trade_price_2,
             dt.swap_trade_price_unit_id_2,
             pum_swap1.price_unit_id swap_trade_price_unit_2,
             dt.swap_index_instrument_id_2,
             dt.swap_formula_id_2,
             dt.swap_product1,
             dt.swap_product_quality1,
             dt.swap_product2,
             dt.swap_product_quality2,
             dt.pricing_invoicing_status,
             dt.approval_status,
             dt.trading_fee,
             dt.clearing_fee,
             dt.trading_clearing_fee,
             0,
             dt.traded_on
        from dt_derivative_trade dt,
             ak_corporate ak,
             ak_corporate_user aku,
             gab_globaladdressbook gab,
             cpc_corporate_profit_center cpc,
             drm_derivative_master drm,
             dim_der_instrument_master dim,
             irm_instrument_type_master irm,
             istm_instr_sub_type_master istm,
             pdd_product_derivative_def pdd,
             pdm_productmaster pdm,
             emt_exchangemaster emt,
             qum_quantity_unit_master qum,
             pp_price_point pp,
             pm_period_master pm,
             dtm_deal_type_master dtm,
             css_corporate_strategy_setup css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails gcd,
             dpm_derivative_purpose_master dpm,
             phd_profileheaderdetails phd_cp,
             phd_profileheaderdetails phd_broker,
             bca_broker_clearer_account bca_broker,
             cm_currency_master cm_broker_cur,
             phd_profileheaderdetails phd_clearer,
             bca_broker_clearer_account bca_clearer,
             cm_currency_master cm_clearer,
             qat_quality_attributes qat,
             gtm_gravity_type_master gtm,
             qum_quantity_unit_master qum_um,
             pum_price_unit_master pum_trade,
             cm_currency_master cm_trade,
             qum_quantity_unit_master qum_trade,
             fbs_formula_builder_setup fbs,
             dim_der_instrument_master dim_index,
             pum_price_unit_master pum_strike,
             cm_currency_master cm_strike,
             qum_quantity_unit_master qum_strike,
             pum_price_unit_master pum_pd,
             cm_currency_master cm_pd,
             qum_quantity_unit_master qum_pd,
             phd_profileheaderdetails phd_nominee,
             pym_payment_terms_master pym,
             cm_currency_master cm_settlement,
             gcd_groupcorporatedetails gcd_group,
             cm_currency_master cm_gcd,
             qum_quantity_unit_master qum_gcd,
             qum_quantity_unit_master qum_pdm,
             (select edq.*
                from eodeom_derivative_quote_detail edq,
                     div_der_instrument_valuation   div,
                     apm_available_price_master     apm
               where edq.available_price_id = apm.available_price_id
                 and apm.is_active = 'Y'
                 and apm.is_deleted = 'N'
                 and edq.process_id = pc_process_id
                 and edq.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and edq.available_price_id = div.available_price_id
                 and edq.price_unit_id = div.price_unit_id
              --and apm.available_price_name = 'Settlement'
              ) edq,
             pum_price_unit_master pum_settle,
             cm_currency_master cm_settle,
             qum_quantity_unit_master qum_settle,
             cm_currency_master cm_base,
             pum_price_unit_master pum_swap,
             pum_price_unit_master pum_swap1,
             bct_broker_commission_types bct_clearer,
             bct_broker_commission_types bct_broker
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id(+)
         and dt.dr_id = edq.dr_id(+)
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and dt.swap_trade_price_unit_id_1 = pum_swap.price_unit_id(+)
         and dt.swap_trade_price_unit_id_2 = pum_swap1.price_unit_id(+)
         and pdd.traded_on = 'Exchange'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
            -- and dt.dbd_id = '219'
         and dt.process_id = pc_process_id
         and dt.clearer_comm_type_id = bct_clearer.commission_type_id(+)
         and dt.broker_comm_type_id = bct_broker.commission_type_id(+)
         and not exists (select *
                from dt_derivative_trade dt_prev
               where dt_prev.internal_derivative_ref_no =
                     dt.internal_derivative_ref_no
                 and dt_prev.process_id = vc_prev_eod_refno
                 and dt_prev.corporate_id = pc_corporate_id
              --and dt_prev.dbd_id = '193'
              );
    /*
    update dpd_derivative_pnl_daily dpd
       set dpd.is_new_trade = 'Y'
     where not exists (select dpd1.corporate_id,
                   dpd1.derivative_ref_no
              from dpd_derivative_pnl_daily dpd1
             where dpd1.corporate_id = pc_corporate_id
               and dpd1.process_id = vc_prev_eod_refno
               and dpd1.derivative_ref_no = dpd.derivative_ref_no)
       and dpd.corporate_id = pc_corporate_id
       and dpd.process_id = pc_process_id
       and rownum <=1;*/
    --write_log(null,'inside sp_mark_new_derivative_trades end');
    --added by siva on 09-Mar-2011, to be removed after the correct entry calculated
    -- in the package for broker/clearer amount calculation.
    update dpd_derivative_pnl_daily dpd
       set dpd.clearer_comm_in_base = 0, dpd.broker_comm_in_base = 0
     where dpd.process_id = pc_process_id
       and nvl(dpd.is_new_trade, 'NA') <> 'Y'
       and dpd.pnl_type = 'Unrealized';
    for cc in (select dpd.corporate_id,
                      dpd.process_id,
                      dpd.product_id,
                      dpd.instrument_type,
                      dpd.strike_price,
                      dpd.strike_price_unit_id,
                      dpd.underlying_future_dr_id dr_id,
                      dq.price,
                      dq.price_unit_id,
                      dpd.internal_derivative_ref_no
                 from dpd_derivative_pnl_daily       dpd,
                      eodeom_derivative_quote_detail dq,
                      div_der_instrument_valuation   div,
                      apm_available_price_master     apm
                where dpd.underlying_future_dr_id is not null
                  and dpd.corporate_id = pc_corporate_id
                  and dpd.process_id = pc_process_id
                  and dpd.corporate_id = dq.corporate_id
                  and dpd.process_id = dq.process_id
                  and dpd.underlying_future_dr_id = dq.dr_id
                  and dq.instrument_id = div.instrument_id
                  and div.is_deleted = 'N'
                  and dq.available_price_id = apm.available_price_id
                  and dq.available_price_id = div.available_price_id
                  and dq.price_unit_id = div.price_unit_id
                     --                  and apm.available_price_name = 'Settlement'
                  and dpd.instrument_type in ('Option Call', 'Option Put'))
    loop
      vc_in_out_at_money_status := null;
      if cc.price is not null then
        vn_strike_price := f_get_converted_price_pum(pc_corporate_id,
                                                     cc.strike_price,
                                                     cc.strike_price_unit_id,
                                                     cc.price_unit_id,
                                                     pd_trade_date,
                                                     cc.product_id);
        if cc.instrument_type = 'Option Call' then
          if vn_strike_price = cc.price then
            vc_in_out_at_money_status := 'At the Money';
          elsif vn_strike_price < cc.price then
            vc_in_out_at_money_status := 'In the Money';
          else
            vc_in_out_at_money_status := 'Out of the Money';
          end if;
        else
          if vn_strike_price = cc.price then
            vc_in_out_at_money_status := 'At the Money';
          elsif cc.price < vn_strike_price then
            vc_in_out_at_money_status := 'In the Money';
          else
            vc_in_out_at_money_status := 'Out of the Money';
          end if;
        end if;
      end if;
      update dpd_derivative_pnl_daily dpd
         set dpd.underlying_future_quote_price = cc.price,
             dpd.underlying_fut_price_unit_id  = cc.price_unit_id,
             dpd.in_out_at_money_status        = vc_in_out_at_money_status
       where dpd.underlying_future_dr_id = cc.dr_id
         and dpd.internal_derivative_ref_no = cc.internal_derivative_ref_no
         and dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Call', 'Option Put');
      commit;
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_undo_closeout(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2) is
    v_dbd_id varchar2(15);
  begin
    select dbd.dbd_id
      into v_dbd_id
      from dbd_database_dump dbd
     where dbd.corporate_id = pc_corporate_id
       and dbd.trade_date = pd_trade_date
       and dbd.process = pc_process;
    insert into dpd_derivative_pnl_daily
      (internal_derivative_ref_no,
       derivative_ref_no,
       eod_trade_date,
       trade_date,
       corporate_id,
       corporate_name,
       trader_id,
       trader_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       dr_id,
       instrument_id,
       instrument_name,
       instrument_symbol,
       instrument_type_id,
       instrument_type,
       instrument_type_name,
       instrument_sub_type_id,
       instrument_sub_type,
       derivative_def_id,
       derivative_def_name,
       derivative_traded_on,
       derivative_prodct_id,
       derivative_prodct_name,
       exchange_id,
       exchange_name,
       exchange_code,
       lot_size,
       lot_size_unit_id,
       lot_size_unit,
       price_point_id,
       price_point_name,
       period_type_id,
       period_type_name,
       period_type_display_name,
       period_month,
       period_year,
       period_date,
       prompt_date,
       dr_id_name,
       trade_type,
       deal_type_id,
       deal_type_name,
       deal_type_display_name,
       is_multiple_leg_involved,
       deal_category,
       deal_sub_category,
       strategy_id,
       strategy_name,
       strategy_desc,
       strategy_def_name,
       group_id,
       group_name,
       purpose_id,
       purpose_name,
       purpose_display_name,
       external_ref_no,
       cp_profile_id,
       cp_name,
       master_contract_id,
       broker_profile_id,
       broker_name,
       broker_account_id,
       broker_account_name,
       broker_account_type,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       broker_comm_cur_code,
       clearer_profile_id,
       clearer_name,
       clearer_account_id,
       clearer_account_name,
       clearer_account_type,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       clearer_comm_cur_code,
       product_id,
       product_name,
       quality_id,
       quality_name,
       quantity_unit_id,
       quantity_unit,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       trade_price_cur_id,
       trade_price_cur_code,
       trade_price_weight,
       trade_price_weight_unit_id,
       trade_price_weight_unit,
       formula_id,
       formula_name,
       formula_display,
       index_instrument_id,
       index_instrument_name,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_weight,
       strike_price_weight_unit_id,
       strike_price_weight_unit,
       premium_discount,
       premium_discount_price_unit_id,
       pd_price_cur_id,
       pd_price_cur_code,
       pd_price_weight,
       pd_price_weight_unit_id,
       pd_price_weight_unit,
       premium_due_date,
       nominee_profile_id,
       nominee_name,
       leg_no,
       option_expiry_date,
       parent_int_derivative_ref_no,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term_id,
       payment_term,
       payment_due_date,
       closed_lots,
       closed_quantity,
       is_new_trade,
       status,
       settlement_cur_id,
       settlement_cur_code,
       in_out_at_money_status,
       in_out_at_money_value,
       exercise_date,
       expiry_date,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       internal_close_out_ref_no,
       close_out_ref_no,
       close_out_date,
       settlement_price,
       sett_price_unit_id,
       sett_price_cur_id,
       sett_price_cur_code,
       sett_price_weight,
       sett_price_weight_unit_id,
       sett_price_weight_unit,
       parent_instrument_type,
       clearer_comm_in_base,
       broker_comm_in_base,
       clearer_exch_rate,
       broker_exch_rate,
       trade_cur_to_base_exch_rate,
       pnl_type,
       pnl_in_base_cur,
       pnl_in_trade_cur,
       base_cur_id,
       base_cur_code,
       underlying_future_dr_id,
       underlying_future_dr_id_name,
       underlying_future_expiry_date,
       underlying_future_quote_price,
       underlying_fut_price_unit_id,
       process_id,
       traded_on)
      select internal_derivative_ref_no,
             derivative_ref_no,
             pd_trade_date,
             dpd.trade_date,
             dpd.corporate_id,
             corporate_name,
             trader_id,
             trader_name,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             dr_id,
             instrument_id,
             instrument_name,
             instrument_symbol,
             instrument_type_id,
             instrument_type,
             instrument_type_name,
             instrument_sub_type_id,
             instrument_sub_type,
             derivative_def_id,
             derivative_def_name,
             derivative_traded_on,
             derivative_prodct_id,
             derivative_prodct_name,
             exchange_id,
             exchange_name,
             exchange_code,
             lot_size,
             lot_size_unit_id,
             lot_size_unit,
             price_point_id,
             price_point_name,
             period_type_id,
             period_type_name,
             period_type_display_name,
             period_month,
             period_year,
             period_date,
             prompt_date,
             dr_id_name,
             trade_type,
             deal_type_id,
             deal_type_name,
             deal_type_display_name,
             is_multiple_leg_involved,
             deal_category,
             deal_sub_category,
             strategy_id,
             strategy_name,
             strategy_desc,
             strategy_def_name,
             group_id,
             group_name,
             purpose_id,
             purpose_name,
             purpose_display_name,
             external_ref_no,
             cp_profile_id,
             cp_name,
             master_contract_id,
             broker_profile_id,
             broker_name,
             broker_account_id,
             broker_account_name,
             broker_account_type,
             broker_comm_type_id,
             broker_comm_amt * -1,
             broker_comm_cur_id,
             broker_comm_cur_code,
             clearer_profile_id,
             clearer_name,
             clearer_account_id,
             clearer_account_name,
             clearer_account_type,
             clearer_comm_type_id,
             clearer_comm_amt * -1,
             clearer_comm_cur_id,
             clearer_comm_cur_code,
             product_id,
             product_name,
             quality_id,
             quality_name,
             quantity_unit_id,
             quantity_unit,
             total_lots,
             total_quantity,
             open_lots,
             open_quantity,
             exercised_lots,
             exercised_quantity,
             expired_lots,
             expired_quantity,
             trade_price_type_id,
             trade_price,
             trade_price_unit_id,
             trade_price_cur_id,
             trade_price_cur_code,
             trade_price_weight,
             trade_price_weight_unit_id,
             trade_price_weight_unit,
             formula_id,
             formula_name,
             formula_display,
             index_instrument_id,
             index_instrument_name,
             strike_price,
             strike_price_unit_id,
             strike_price_cur_id,
             strike_price_cur_code,
             strike_price_weight,
             strike_price_weight_unit_id,
             strike_price_weight_unit,
             premium_discount,
             premium_discount_price_unit_id,
             pd_price_cur_id,
             pd_price_cur_code,
             pd_price_weight,
             pd_price_weight_unit_id,
             pd_price_weight_unit,
             premium_due_date,
             nominee_profile_id,
             nominee_name,
             leg_no,
             option_expiry_date,
             parent_int_derivative_ref_no,
             market_location_country,
             market_location_state,
             market_location_city,
             is_what_if,
             payment_term_id,
             payment_term,
             payment_due_date,
             closed_lots,
             closed_quantity,
             is_new_trade,
             status,
             settlement_cur_id,
             settlement_cur_code,
             in_out_at_money_status,
             in_out_at_money_value,
             exercise_date,
             expiry_date,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             base_qty_unit_id,
             base_qty_unit,
             dpd.internal_close_out_ref_no,
             close_out_ref_no,
             close_out_date,
             settlement_price,
             sett_price_unit_id,
             sett_price_cur_id,
             sett_price_cur_code,
             sett_price_weight,
             sett_price_weight_unit_id,
             sett_price_weight_unit,
             parent_instrument_type,
             clearer_comm_in_base * -1,
             broker_comm_in_base * -1,
             clearer_exch_rate,
             broker_exch_rate,
             trade_cur_to_base_exch_rate,
             'Reverse Realized',
             pnl_in_base_cur * -1,
             pnl_in_trade_cur * -1,
             base_cur_id,
             base_cur_code,
             underlying_future_dr_id,
             underlying_future_dr_id_name,
             underlying_future_expiry_date,
             underlying_future_quote_price,
             underlying_fut_price_unit_id,
             pc_process_id,
             traded_on
        from dpd_derivative_pnl_daily dpd,
             tdc_trade_date_closure tdc,
             (select dpd.internal_close_out_ref_no,
                     max(dpd.eod_trade_date) realized_date
                from dpd_derivative_pnl_daily dpd,
                     tdc_trade_date_closure   tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.pnl_type = 'Realized'
                 and dpd.eod_trade_date < pd_trade_date
                 and dpd.eod_trade_date = tdc.trade_date
                 and tdc.process = pc_process
                 and exists
               (select 1
                        from dcoh_der_closeout_header dcoh
                       where dcoh.internal_close_out_ref_no =
                             dpd.internal_close_out_ref_no
                         and dcoh.is_rolled_back = 'Y'
                         and dcoh.undo_closeout_dbd_id = v_dbd_id
                         and dcoh.corporate_id = pc_corporate_id)
               group by dpd.internal_close_out_ref_no) max_eod
       where dpd.eod_trade_date = tdc.trade_date
         and tdc.trade_date = max_eod.realized_date
         and dpd.internal_close_out_ref_no =
             max_eod.internal_close_out_ref_no
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = pc_process
         and tdc.process_id = dpd.process_id;
  end;

  procedure sp_calc_undo_settled(pc_corporate_id varchar2,
                                 pd_trade_date   date,
                                 pc_process_id   varchar2,
                                 pc_user_id      varchar2,
                                 pc_process      varchar2) is
  begin
    insert into dpd_derivative_pnl_daily
      (internal_derivative_ref_no,
       derivative_ref_no,
       eod_trade_date,
       trade_date,
       corporate_id,
       corporate_name,
       trader_id,
       trader_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       dr_id,
       instrument_id,
       instrument_name,
       instrument_symbol,
       instrument_type_id,
       instrument_type,
       instrument_type_name,
       instrument_sub_type_id,
       instrument_sub_type,
       derivative_def_id,
       derivative_def_name,
       derivative_traded_on,
       derivative_prodct_id,
       derivative_prodct_name,
       exchange_id,
       exchange_name,
       exchange_code,
       lot_size,
       lot_size_unit_id,
       lot_size_unit,
       price_point_id,
       price_point_name,
       period_type_id,
       period_type_name,
       period_type_display_name,
       period_month,
       period_year,
       period_date,
       prompt_date,
       dr_id_name,
       trade_type,
       deal_type_id,
       deal_type_name,
       deal_type_display_name,
       is_multiple_leg_involved,
       deal_category,
       deal_sub_category,
       strategy_id,
       strategy_name,
       strategy_desc,
       strategy_def_name,
       group_id,
       group_name,
       purpose_id,
       purpose_name,
       purpose_display_name,
       external_ref_no,
       cp_profile_id,
       cp_name,
       master_contract_id,
       broker_profile_id,
       broker_name,
       broker_account_id,
       broker_account_name,
       broker_account_type,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       broker_comm_cur_code,
       clearer_profile_id,
       clearer_name,
       clearer_account_id,
       clearer_account_name,
       clearer_account_type,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       clearer_comm_cur_code,
       product_id,
       product_name,
       quality_id,
       quality_name,
       quantity_unit_id,
       quantity_unit,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       trade_price_cur_id,
       trade_price_cur_code,
       trade_price_weight,
       trade_price_weight_unit_id,
       trade_price_weight_unit,
       formula_id,
       formula_name,
       formula_display,
       index_instrument_id,
       index_instrument_name,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_weight,
       strike_price_weight_unit_id,
       strike_price_weight_unit,
       premium_discount,
       premium_discount_price_unit_id,
       pd_price_cur_id,
       pd_price_cur_code,
       pd_price_weight,
       pd_price_weight_unit_id,
       pd_price_weight_unit,
       premium_due_date,
       nominee_profile_id,
       nominee_name,
       leg_no,
       option_expiry_date,
       parent_int_derivative_ref_no,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term_id,
       payment_term,
       payment_due_date,
       closed_lots,
       closed_quantity,
       is_new_trade,
       status,
       settlement_cur_id,
       settlement_cur_code,
       in_out_at_money_status,
       in_out_at_money_value,
       exercise_date,
       expiry_date,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       settlement_price,
       sett_price_unit_id,
       sett_price_cur_id,
       sett_price_cur_code,
       sett_price_weight,
       sett_price_weight_unit_id,
       sett_price_weight_unit,
       parent_instrument_type,
       clearer_comm_in_base,
       broker_comm_in_base,
       clearer_exch_rate,
       broker_exch_rate,
       trade_cur_to_base_exch_rate,
       pnl_type,
       pnl_in_base_cur,
       pnl_in_trade_cur,
       base_cur_id,
       base_cur_code,
       underlying_future_dr_id,
       underlying_future_dr_id_name,
       underlying_future_expiry_date,
       underlying_future_quote_price,
       underlying_fut_price_unit_id,
       process_id,
       trade_qty_in_exch_unit,
       settlement_ref_no,
       traded_on)
      select dpd. internal_derivative_ref_no,
             derivative_ref_no,
             pd_trade_date,
             dpd.trade_date,
             dpd.corporate_id,
             corporate_name,
             trader_id,
             trader_name,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             dr_id,
             instrument_id,
             instrument_name,
             instrument_symbol,
             instrument_type_id,
             instrument_type,
             instrument_type_name,
             instrument_sub_type_id,
             instrument_sub_type,
             derivative_def_id,
             derivative_def_name,
             derivative_traded_on,
             derivative_prodct_id,
             derivative_prodct_name,
             exchange_id,
             exchange_name,
             exchange_code,
             lot_size,
             lot_size_unit_id,
             lot_size_unit,
             price_point_id,
             price_point_name,
             period_type_id,
             period_type_name,
             period_type_display_name,
             period_month,
             period_year,
             period_date,
             prompt_date,
             dr_id_name,
             trade_type,
             deal_type_id,
             deal_type_name,
             deal_type_display_name,
             is_multiple_leg_involved,
             deal_category,
             deal_sub_category,
             strategy_id,
             strategy_name,
             strategy_desc,
             strategy_def_name,
             group_id,
             group_name,
             purpose_id,
             purpose_name,
             purpose_display_name,
             external_ref_no,
             cp_profile_id,
             cp_name,
             master_contract_id,
             broker_profile_id,
             broker_name,
             broker_account_id,
             broker_account_name,
             broker_account_type,
             broker_comm_type_id,
             broker_comm_amt * -1,
             broker_comm_cur_id,
             broker_comm_cur_code,
             clearer_profile_id,
             clearer_name,
             clearer_account_id,
             clearer_account_name,
             clearer_account_type,
             clearer_comm_type_id,
             clearer_comm_amt * -1,
             clearer_comm_cur_id,
             clearer_comm_cur_code,
             product_id,
             product_id,
             quality_id,
             quality_name,
             quantity_unit_id,
             quantity_unit,
             total_lots,
             total_quantity,
             open_lots,
             open_quantity,
             exercised_lots,
             exercised_quantity,
             expired_lots,
             expired_quantity,
             trade_price_type_id,
             trade_price,
             trade_price_unit_id,
             trade_price_cur_id,
             trade_price_cur_code,
             trade_price_weight,
             trade_price_weight_unit_id,
             trade_price_weight_unit,
             formula_id,
             formula_name,
             formula_display,
             index_instrument_id,
             index_instrument_name,
             strike_price,
             strike_price_unit_id,
             strike_price_cur_id,
             strike_price_cur_code,
             strike_price_weight,
             strike_price_weight_unit_id,
             strike_price_weight_unit,
             premium_discount,
             premium_discount_price_unit_id,
             pd_price_cur_id,
             pd_price_cur_code,
             pd_price_weight,
             pd_price_weight_unit_id,
             pd_price_weight_unit,
             premium_due_date,
             nominee_profile_id,
             nominee_name,
             leg_no,
             option_expiry_date,
             parent_int_derivative_ref_no,
             market_location_country,
             market_location_state,
             market_location_city,
             is_what_if,
             payment_term,
             payment_term,
             payment_due_date,
             closed_lots,
             closed_quantity,
             is_new_trade,
             status,
             settlement_cur_id,
             settlement_cur_code,
             in_out_at_money_status,
             in_out_at_money_value,
             exercise_date,
             expiry_date,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             base_qty_unit_id,
             base_qty_unit,
             settlement_price,
             sett_price_unit_id,
             sett_price_cur_id,
             sett_price_cur_code,
             sett_price_weight,
             sett_price_weight_unit_id,
             sett_price_weight_unit,
             parent_instrument_type,
             clearer_comm_in_base * -1,
             broker_comm_in_base * -1,
             clearer_exch_rate,
             broker_exch_rate,
             trade_cur_to_base_exch_rate,
             'Reverse Realized',
             pnl_in_base_cur * -1,
             pnl_in_trade_cur * -1,
             base_cur_id,
             base_cur_code,
             underlying_future_dr_id,
             underlying_future_dr_id_name,
             underlying_future_expiry_date,
             underlying_future_quote_price,
             underlying_fut_price_unit_id,
             pc_process_id,
             trade_qty_in_exch_unit,
             dpd.settlement_ref_no,
             traded_on
        from dpd_derivative_pnl_daily dpd,
             tdc_trade_date_closure tdc,
             (select dpd.settlement_ref_no,
                     max(dpd.eod_trade_date) realized_date
                from dpd_derivative_pnl_daily dpd,
                     tdc_trade_date_closure   tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.pnl_type = 'Realized'
                 and dpd.eod_trade_date < pd_trade_date
                 and dpd.eod_trade_date = tdc.trade_date
                 and tdc.process = pc_process
               group by dpd.settlement_ref_no) max_eod
       where dpd.settlement_ref_no in
             (select fsh.settlement_ref_no
                from fsh_fin_settlement_header fsh
               where fsh.is_settled = 'N'
                 and fsh.undo_settlement_dbd_id =
                     (select dbd_id
                        from dbd_database_dump dbd
                       where dbd.corporate_id = pc_corporate_id
                         and dbd.trade_date = pd_trade_date
                         and dbd.process = pc_process))
         and dpd.eod_trade_date = tdc.trade_date
         and tdc.trade_date = max_eod.realized_date
         and dpd.settlement_ref_no = max_eod.settlement_ref_no
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = pc_process
         and tdc.process_id = dpd.process_id;
  end;

  procedure sp_calc_clearer_summary(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2) is
    vc_previous_process_id varchar2(15);
    vobj_error_log         tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count     number := 1;
  begin
    --
    -- Select Previous EOD or EOM Process ID
    --
    select tdc.process_id
      into vc_previous_process_id
      from tdc_trade_date_closure tdc
     where tdc.corporate_id = pc_corporate_id
       and process = pc_process
       and tdc.trade_date = (select max(trade_date)
                               from tdc_trade_date_closure
                              where corporate_id = pc_corporate_id
                                and trade_date < pd_trade_date
                                and process = pc_process);
    --
    -- Futures Section
    --
    insert into spc_summary_position_clearer
      (group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       corporate_id,
       corporate_name,
       base_cur_id,
       base_cur_code,
       process_id,
       process,
       process_date,
       product_id,
       product_name,
       base_qty_unit_id,
       base_qty_unit,
       instrument_id,
       instrument_name,
       derivative_def_id,
       derivative_def_name,
       instrument_type_id,
       instrument_type_name,
       exchange_id,
       exchange_name,
       dr_id,
       period_date,
       lot_size,
       lot_size_weight_unit_id,
       clearer_profile_id,
       clearer_name,
       order_type_id,
       order_type_name,
       trade_type_id,
       trade_type_name,
       trade_cur_id,
       trade_cur_code,
       initial_position_in_lots,
       buy_lots,
       sell_lots,
       closed_lots,
       unrealized_pnl_in_base_cur,
       unrealized_pnl_in_trade_cur,
       realized_pnl_in_base_cur,
       realized_pnl_in_trade_cur,
       net_open_lots,
       net_open_qty,
       buy_qty,
       sell_qty,
       closed_qty,
       initial_position_in_qty,
       cancelled_buy_lots,
       cancelled_buy_qty,
       cancelled_sell_lots,
       cancelled_sell_qty,
       close_diff_in_base_cur,
       close_diff_in_trade_cur)
      select group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             corporate_id,
             corporate_name,
             base_cur_id,
             base_cur_code,
             pc_process_id process_id,
             process,
             trade_date,
             product_id,
             product_desc,
             base_qty_unit_id,
             base_qty_unit,
             instrument_id,
             instrument_name,
             derivative_def_id,
             derivative_def_name,
             instrument_type_id,
             instrument_type,
             exchange_id,
             exchange_name,
             dr_id,
             period_date,
             lot_size,
             lot_size_unit_id,
             clearer_profile_id,
             clearer_name,
             deal_type_id,
             deal_type_name,
             trade_type_id,
             trade_type_name,
             trade_cur_id,
             trade_cur_code,
             sum(nvl(initial_position_lots, 0)),
             sum(nvl(buy_lots, 0)),
             sum(nvl(sell_lots, 0)),
             sum(nvl(closed_lots, 0)),
             sum(nvl(unrealized_pnl_in_base_cur, 0)),
             sum(nvl(unrealized_pnl_in_trade_cur, 0)),
             sum(nvl(realized_pnl_in_base_cur, 0)),
             sum(nvl(realized_pnl_in_trade_cur, 0)),
             sum(nvl(net_open_lots, 0)) as net_open_lots,
             sum(nvl(net_open_qty, 0)) as net_open_qty,
             sum(nvl(buy_qty, 0)),
             sum(nvl(sell_qty, 0)),
             sum(nvl(closed_qty, 0)),
             sum(nvl(initial_position_qty, 0)),
             sum(nvl(cancelled_buy_lots, 0)) cancelled_buy_lots,
             sum(nvl(cancelled_buy_qty, 0)) cancelled_buy_qty,
             sum(nvl(cancelled_sell_lots, 0)) cancelled_sell_lots,
             sum(nvl(cancelled_sell_qty, 0)) cancelled_sell_qty,
             sum(nvl(close_diff_in_base_cur, 0)) close_diff_in_base_cur,
             sum(nvl(close_diff_in_trade_cur, 0)) close_diff_in_trade_cur
        from (
              -- Initial Position
              select dpd_prev.group_id,
                      dpd_prev.group_name,
                      dpd_prev.group_cur_id,
                      dpd_prev.group_cur_code,
                      dpd_prev.group_qty_unit_id,
                      dpd_prev.group_qty_unit,
                      dpd_prev.corporate_id,
                      dpd_prev.corporate_name,
                      dpd_prev.base_cur_id,
                      dpd_prev.base_cur_code,
                      pc_process_id process_id,
                      pc_process process,
                      pd_trade_date trade_date,
                      pdd.product_id,
                      pdm.product_desc product_desc,
                      dpd_prev.base_qty_unit_id,
                      dpd_prev.base_qty_unit,
                      dpd_prev.instrument_id,
                      dpd_prev.instrument_name,
                      dpd_prev.derivative_def_id,
                      dpd_prev.derivative_def_name,
                      dpd_prev.instrument_type_id,
                      dpd_prev.instrument_type,
                      dpd_prev.exchange_id,
                      dpd_prev.exchange_name,
                      dpd_prev.dr_id,
                      dpd_prev.period_date,
                      dpd_prev.lot_size,
                      dpd_prev.lot_size_unit_id,
                      dpd_prev.clearer_profile_id,
                      phd.company_long_name1 clearer_name,
                      dpd_prev.deal_type_id,
                      dpd_prev.deal_type_name,
                      dpd_prev.instrument_type_id trade_type_id,
                      dpd_prev.instrument_name trade_type_name,
                      nvl(dpd_prev.trade_price_cur_id, dpd_prev.base_cur_id) trade_cur_id,
                      nvl(dpd_prev.trade_price_cur_code,
                          dpd_prev.broker_comm_cur_code) trade_cur_code,
                      sum(decode(dpd_prev.trade_type,
                                 'Buy',
                                 dpd_prev.total_lots,
                                 0) - decode(dpd_prev.trade_type,
                                             'Sell',
                                             dpd_prev.total_lots,
                                             0)) initial_position_lots,
                      -- trade_qty To TRADE_QTY_IN_EXCH_UNIT
                      sum(decode(dpd_prev.trade_type,
                                 'Buy',
                                 dpd_prev.trade_qty_in_exch_unit,
                                 0) - decode(dpd_prev.trade_type,
                                             'Sell',
                                             dpd_prev.trade_qty_in_exch_unit,
                                             0)) initial_position_qty,
                      0 buy_lots,
                      0 sell_lots,
                      0 closed_lots,
                      0 unrealized_pnl_in_base_cur,
                      0 unrealized_pnl_in_trade_cur,
                      0 realized_pnl_in_base_cur,
                      0 realized_pnl_in_trade_cur,
                      0 net_open_lots,
                      0 net_open_qty,
                      0 buy_qty,
                      0 sell_qty,
                      0 closed_qty,
                      0 cancelled_buy_lots,
                      0 cancelled_buy_qty,
                      0 cancelled_sell_lots,
                      0 cancelled_sell_qty,
                      0 close_diff_in_base_cur,
                      0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd_prev,
                      pdd_product_derivative_def pdd,
                      phd_profileheaderdetails   phd,
                      pdm_productmaster          pdm
               where dpd_prev.process_id = vc_previous_process_id --Previous EOD/EOM ID
                 and dpd_prev.corporate_id = pc_corporate_id
                 and dpd_prev.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd_prev.clearer_profile_id = phd.profileid
                 and dpd_prev.clearer_profile_id is not null
                 and dpd_prev.instrument_type in ('Future', 'Forward')
                    --AND dpd_prev.deal_type_id <> 'Internal Swap'
                 and dpd_prev.pnl_type = 'Unrealized'
               group by dpd_prev.group_id,
                         dpd_prev.group_name,
                         dpd_prev.group_cur_id,
                         dpd_prev.group_cur_code,
                         dpd_prev.group_qty_unit_id,
                         dpd_prev.group_qty_unit,
                         dpd_prev.corporate_id,
                         dpd_prev.corporate_name,
                         dpd_prev.base_cur_id,
                         dpd_prev.base_cur_code,
                         pdd.product_id,
                         pdm.product_desc,
                         dpd_prev.base_qty_unit_id,
                         dpd_prev.base_qty_unit,
                         dpd_prev.instrument_id,
                         dpd_prev.instrument_name,
                         dpd_prev.derivative_def_id,
                         dpd_prev.derivative_def_name,
                         dpd_prev.instrument_type_id,
                         dpd_prev.instrument_type,
                         dpd_prev.exchange_id,
                         dpd_prev.exchange_name,
                         dpd_prev.dr_id,
                         dpd_prev.period_date,
                         dpd_prev.period_month,
                         dpd_prev.period_year,
                         dpd_prev.lot_size,
                         dpd_prev.lot_size_unit_id,
                         dpd_prev.clearer_profile_id,
                         phd.company_long_name1,
                         dpd_prev.deal_type_id,
                         dpd_prev.deal_type_name,
                         dpd_prev.instrument_type_id,
                         dpd_prev.instrument_name,
                         nvl(dpd_prev.trade_price_cur_id, dpd_prev.base_cur_id),
                         nvl(dpd_prev.trade_price_cur_code,
                             dpd_prev.broker_comm_cur_code)
              union all
              -- New Trades in this EOD/EOM
              select gcd.groupid group_id,
                     gcd.groupname group_name,
                     cm_gcd.cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     qum_gcd.qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     drt.corporate_id,
                     akc.corporate_name,
                     cm_akc.cur_id base_cur_id,
                     cm_akc.cur_code base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm.qty_unit base_qty_unit,
                     dim.instrument_id,
                     dim.instrument_name,
                     pdd.derivative_def_id,
                     pdd.derivative_def_name,
                     dim.instrument_type_id,
                     irm.instrument_type,
                     pdd.exchange_id,
                     emt.exchange_name,
                     drt.dr_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        to_date('01-' || drm.period_month || '-' ||
                                drm.period_year,
                                'dd-Mon-yyyy')
                       else
                        drm.prompt_date
                     end else drm.period_date end) period_date,
                     pdd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     drt.clearer_profile_id,
                     phd_drt.company_long_name1 clearer_name,
                     drt.deal_type_id order_type_id,
                     drt.deal_type_id order_type,
                     dim.instrument_type_id trade_type_id,
                     dim.instrument_name trade_type_name,
                     nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
                     nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     nvl(sum(decode(drt.trade_type, 'Buy', drt.total_lots, 0)),
                         0) buy_lots,
                     nvl(sum(decode(drt.trade_type, 'Sell', drt.total_lots, 0)),
                         0) sell_lots,
                     0 closed_lots,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     nvl(sum(decode(drt.trade_type,
                                    'Buy',
                                    drt.total_quantity *
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         1),
                                    0)),
                         0) buy_qty,
                     nvl(sum(decode(drt.trade_type,
                                    'Sell',
                                    drt.total_quantity *
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         1),
                                    0)),
                         0) sell_qty,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dt_derivative_trade        drt,
                     ak_corporate               akc,
                     gcd_groupcorporatedetails  gcd,
                     qum_quantity_unit_master   qum_gcd,
                     cm_currency_master         cm_gcd,
                     cm_currency_master         cm_akc,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm,
                     qum_quantity_unit_master   qum_pdm,
                     irm_instrument_type_master irm,
                     emt_exchangemaster         emt,
                     phd_profileheaderdetails   phd_drt,
                     pum_price_unit_master      pum,
                     v_main_currency_details    vcur
               where drt.process_id = pc_process_id
                 and akc.corporate_id = drt.corporate_id
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and qum_pdm.qty_unit_id = pdm.base_quantity_unit
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Future', 'Forward')
                    --AND drt.is_new_trade = 'Y'
                    --AND drt.deal_type_id <> 'Internal Swap'
                 and pdd.exchange_id = emt.exchange_id
                 and phd_drt.profileid = drt.clearer_profile_id
                 and drt.clearer_profile_id is not null
                 and drt.trade_price_unit_id = pum.price_unit_id
                 and pum.cur_id = vcur.main_sub_cur_id
                 and not exists
               (select dt_pre.internal_derivative_ref_no
                        from dt_derivative_trade dt_pre
                       where dt_pre.internal_derivative_ref_no =
                             drt.internal_derivative_ref_no
                         and dt_pre.process_id = vc_previous_process_id)
               group by gcd.groupid,
                        gcd.groupname,
                        cm_gcd.cur_id,
                        cm_gcd.cur_code,
                        qum_gcd.qty_unit_id,
                        qum_gcd.qty_unit,
                        drt.corporate_id,
                        akc.corporate_name,
                        cm_akc.cur_id,
                        cm_akc.cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        pdm.base_quantity_unit,
                        qum_pdm.qty_unit,
                        dim.instrument_id,
                        dim.instrument_name,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        dim.instrument_type_id,
                        irm.instrument_type,
                        pdd.exchange_id,
                        emt.exchange_name,
                        drt.dr_id,
                        drm.period_month,
                        drm.period_year,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           to_date('01-' || drm.period_month || '-' ||
                                   drm.period_year,
                                   'dd-Mon-yyyy')
                          else
                           drm.prompt_date
                        end else drm.period_date end),
                        pdd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        drt.clearer_profile_id,
                        phd_drt.company_long_name1,
                        drt.deal_type_id,
                        drt.deal_type_id,
                        dim.instrument_type_id,
                        dim.instrument_name,
                        nvl(vcur.main_currency_id, cm_akc.cur_id),
                        nvl(vcur.main_cur_code, cm_akc.cur_code)
              union all
              -- Closed Position
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     nvl(sum(decode(dpd.trade_type, 'Buy', dpd.total_lots, 0)),
                         0) closed_lots,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     sum(dpd.pnl_in_base_cur) realized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_qty,
                     0 sell_qty,
                     nvl(sum(decode(dpd.trade_type,
                                    'Buy',
                                    nvl(dpd.total_quantity, 0),
                                    0) *
                             pkg_general.f_get_converted_quantity(null,
                                                                  dpd.quantity_unit_id,
                                                                  dpd.lot_size_unit_id,
                                                                  1)),
                         0) closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Future', 'Forward')
                 and dpd.clearer_profile_id is not null
                 and dpd.close_out_ref_no is not null --by siddharth
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Realized'
              --  AND dpd.status = 'Closed'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.period_date,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code)
              union all
              ---added by siddharth 19-jan-2011
              -- Closed Position by Settlement
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     nvl(sum(dpd.total_lots), 0) closed_lots,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     sum(dpd.pnl_in_base_cur) realized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_qty,
                     0 sell_qty,
                     --Issue 48001
                     nvl(sum(nvl(dpd.total_quantity, 0) *
                             pkg_general.f_get_converted_quantity(null,
                                                                  dpd.quantity_unit_id,
                                                                  dpd.lot_size_unit_id,
                                                                  1)),
                         0) closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Future', 'Forward')
                 and dpd.clearer_profile_id is not null
                    --AND    dpd.deal_type_id = 'External Swap'
                 and dpd.close_out_ref_no is null
                 and dpd.pnl_type = 'Realized'
              --  AND    dpd.status = 'Closed'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.period_date,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code)
              --ends here
              union all
              -- Open Position
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 closed_lots,
                     sum(dpd.pnl_in_base_cur) unrealized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.total_lots) net_open_lots,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.trade_qty_in_exch_unit) net_open_qty,
                     0 buy_qty,
                     0 sell_qty,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Future', 'Forward')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Unrealized'
              --  AND dpd.status = 'Open'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.period_date,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code))
       group by group_id,
                group_name,
                group_cur_id,
                group_cur_code,
                group_qty_unit_id,
                group_qty_unit,
                corporate_id,
                corporate_name,
                base_cur_id,
                base_cur_code,
                process_id,
                process,
                trade_date,
                product_id,
                product_desc,
                base_qty_unit_id,
                base_qty_unit,
                instrument_id,
                instrument_name,
                derivative_def_id,
                derivative_def_name,
                instrument_type_id,
                instrument_type,
                exchange_id,
                exchange_name,
                dr_id,
                period_date,
                lot_size,
                lot_size_unit_id,
                clearer_profile_id,
                clearer_name,
                deal_type_id,
                deal_type_name,
                trade_type_id,
                trade_type_name,
                trade_cur_id,
                trade_cur_code
      union all
      -- Cancelled Trades in this EOD/EOM
      select gcd.groupid group_id,
             gcd.groupname group_name,
             cm_gcd.cur_id group_cur_id,
             cm_gcd.cur_code group_cur_code,
             qum_gcd.qty_unit_id group_qty_unit_id,
             qum_gcd.qty_unit group_qty_unit,
             drt.corporate_id,
             akc.corporate_name,
             cm_akc.cur_id base_cur_id,
             cm_akc.cur_code base_cur_code,
             pc_process_id,
             pc_process,
             pd_trade_date,
             pdd.product_id,
             pdm.product_desc product_desc,
             pdm.base_quantity_unit base_qty_unit_id,
             qum_pdm.qty_unit base_qty_unit,
             dim.instrument_id,
             dim.instrument_name,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             dim.instrument_type_id,
             irm.instrument_type,
             pdd.exchange_id,
             emt.exchange_name,
             drt.dr_id,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             drt.clearer_profile_id,
             phd_drt.company_long_name1 clearer_name,
             drt.deal_type_id order_type_id,
             drt.deal_type_id order_type,
             dim.instrument_type_id trade_type_id,
             dim.instrument_name trade_type_name,
             nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
             nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
             0 initial_position_lots,
             0 initial_position_qty,
             0 buy_lots,
             0 sell_lots,
             0 closed_lots,
             0 unrealized_pnl_in_base_cur,
             0 unrealized_pnl_in_trade_cur,
             0 realized_pnl_in_base_cur,
             0 realized_pnl_in_trade_cur,
             0 net_open_lots,
             0 net_open_qty,
             0 buy_qty,
             0 sell_qty,
             0 closed_qty,
             nvl(sum(decode(drt.trade_type, 'Buy', drt.open_lots, 0)), 0) cancelled_buy_lots,
             nvl(sum(decode(drt.trade_type,
                            'Buy',
                            drt.open_quantity *
                            pkg_general.f_get_converted_quantity(null,
                                                                 drt.quantity_unit_id,
                                                                 nvl(pdd.lot_size_unit_id,
                                                                     pdm.base_quantity_unit),
                                                                 1),
                            0)),
                 0) cancelled_buy_qty,
             nvl(sum(decode(drt.trade_type, 'Sell', drt.open_lots, 0)), 0) cancelled_sell_lots,
             nvl(sum(decode(drt.trade_type,
                            'Sell',
                            drt.open_quantity *
                            pkg_general.f_get_converted_quantity(null,
                                                                 drt.quantity_unit_id,
                                                                 nvl(pdd.lot_size_unit_id,
                                                                     pdm.base_quantity_unit),
                                                                 1),
                            0)),
                 0) cancelled_sell_qty,
             0 close_diff_in_base_cur,
             0 close_diff_in_trade_cur
        from dt_derivative_trade        drt,
             ak_corporate               akc,
             gcd_groupcorporatedetails  gcd,
             qum_quantity_unit_master   qum_gcd,
             cm_currency_master         cm_gcd,
             cm_currency_master         cm_akc,
             drm_derivative_master      drm,
             dim_der_instrument_master  dim,
             pdd_product_derivative_def pdd,
             pdm_productmaster          pdm,
             qum_quantity_unit_master   qum_pdm,
             irm_instrument_type_master irm,
             emt_exchangemaster         emt,
             phd_profileheaderdetails   phd_drt,
             pum_price_unit_master      pum,
             v_main_currency_details    vcur
       where drt.process_id = vc_previous_process_id
         and akc.corporate_id = drt.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
         and akc.base_currency_name = cm_akc.cur_code
         and drt.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and irm.instrument_type_id = dim.instrument_type_id
         and irm.instrument_type in ('Future', 'Forward')
         and not exists
       (select dt.internal_derivative_ref_no
                from dt_derivative_trade dt
               where dt.internal_derivative_ref_no =
                     drt.internal_derivative_ref_no
                 and dt.process_id = pc_process_id)
         and drt.clearer_profile_id is not null
            --AND drt.is_deleted_today = 'Y'
            --AND drt.deal_type_id <> 'Internal Swap'
         and pdd.exchange_id = emt.exchange_id
         and drt.clearer_profile_id = phd_drt.profileid
         and drt.trade_price_unit_id = pum.price_unit_id(+)
         and pum.cur_id = vcur.main_sub_cur_id(+)
       group by gcd.groupid,
                gcd.groupname,
                cm_gcd.cur_id,
                cm_gcd.cur_code,
                qum_gcd.qty_unit_id,
                qum_gcd.qty_unit,
                drt.corporate_id,
                akc.corporate_name,
                cm_akc.cur_id,
                cm_akc.cur_code,
                pc_process_id,
                pc_process,
                pd_trade_date,
                pdd.product_id,
                pdm.product_desc,
                pdm.base_quantity_unit,
                qum_pdm.qty_unit,
                dim.instrument_id,
                dim.instrument_name,
                pdd.derivative_def_id,
                pdd.derivative_def_name,
                dim.instrument_type_id,
                irm.instrument_type,
                pdd.exchange_id,
                emt.exchange_name,
                drt.dr_id,
                drm.period_month,
                drm.period_year,
                (case
                  when drm.period_date is null then
                   case
                  when drm.period_month is not null and
                       drm.period_year is not null then
                   to_date('01-' || drm.period_month || '-' ||
                           drm.period_year,
                           'dd-Mon-yyyy')
                  else
                   drm.prompt_date
                end else drm.period_date end),
                pdd.lot_size,
                nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                drt.clearer_profile_id,
                phd_drt.company_long_name1,
                drt.deal_type_id,
                drt.deal_type_id,
                dim.instrument_type_id,
                dim.instrument_name,
                nvl(vcur.main_currency_id, cm_akc.cur_id),
                nvl(vcur.main_cur_code, cm_akc.cur_code);
    --Ends here
    --
    -- Options Section
    --
    insert into spc_summary_position_clearer
      (group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       corporate_id,
       corporate_name,
       base_cur_id,
       base_cur_code,
       process_id,
       process,
       process_date,
       product_id,
       product_name,
       base_qty_unit_id,
       base_qty_unit,
       instrument_id,
       instrument_name,
       derivative_def_id,
       derivative_def_name,
       instrument_type_id,
       instrument_type_name,
       exchange_id,
       exchange_name,
       dr_id,
       period_date,
       lot_size,
       lot_size_weight_unit_id,
       clearer_profile_id,
       clearer_name,
       order_type_id,
       order_type_name,
       trade_type_id,
       trade_type_name,
       trade_cur_id,
       trade_cur_code,
       initial_position_in_lots,
       buy_lots,
       sell_lots,
       buy_qty,
       sell_qty,
       closed_lots,
       unrealized_pnl_in_base_cur,
       unrealized_pnl_in_trade_cur,
       realized_pnl_in_base_cur,
       realized_pnl_in_trade_cur,
       net_open_lots,
       net_open_qty,
       buy_exercised_expired_lots,
       sell_exercised_expired_lots,
       buy_exercised_expired_qty,
       sell_exercised_expired_qty,
       buy_premium_month,
       sell_premium_month,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_cur_weight,
       strike_price_cur_wt_unit_id,
       strike_price_cur_weight_unit,
       closed_qty,
       initial_position_in_qty,
       cancelled_buy_lots,
       cancelled_buy_qty,
       cancelled_sell_lots,
       cancelled_sell_qty,
       close_diff_in_base_cur,
       close_diff_in_trade_cur)
      select group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             corporate_id,
             corporate_name,
             base_cur_id,
             base_cur_code,
             process_id,
             process,
             trade_date,
             product_id,
             product_desc,
             base_qty_unit_id,
             base_qty_unit,
             instrument_id,
             instrument_name,
             derivative_def_id,
             derivative_def_name,
             instrument_type_id,
             instrument_type_name,
             exchange_id,
             exchange_name,
             dr_id,
             period_date,
             lot_size,
             lot_size_unit_id,
             clearer_profile_id,
             clearer_name,
             deal_type_id,
             deal_type_name,
             trade_type_id,
             trade_type_name,
             trade_price_cur_id,
             trade_price_cur_code,
             sum(nvl(initial_position_lots, 0)),
             sum(nvl(buy_lots, 0)),
             sum(nvl(sell_lots, 0)),
             sum(nvl(buy_qty, 0)),
             sum(nvl(sell_qty, 0)),
             sum(nvl(lots_closed, 0)),
             sum(nvl(unrealized_pnl_in_base_cur, 0)),
             sum(nvl(unrealized_pnl_in_trade_cur, 0)),
             sum(nvl(realized_pnl_in_base_cur, 0)),
             sum(nvl(realized_pnl_in_trade_cur, 0)),
             sum(nvl(net_open_lots, 0)) net_open_lots,
             sum(nvl(net_open_qty, 0)) net_open_qty,
             sum(nvl(buy_exercised_expired_lots, 0)),
             sum(nvl(sell_exercised_expired_lots, 0)),
             sum(nvl(buy_exercised_expired_qty, 0)),
             sum(nvl(sell_exercised_expired_qty, 0)),
             sum(nvl(buy_premium_month, 0)),
             sum(nvl(sell_premium_month, 0)),
             strike_price,
             strike_price_unit_id,
             strike_price_cur_id,
             strike_price_cur_code,
             strike_price_weight,
             strike_price_weight_unit_id,
             strike_price_weight_unit,
             sum(nvl(closed_qty, 0)),
             sum(nvl(initial_position_qty, 0)),
             sum(nvl(cancelled_buy_lots, 0)) cancelled_buy_lots,
             sum(nvl(cancelled_buy_qty, 0)) cancelled_buy_qty,
             sum(nvl(cancelled_sell_lots, 0)) cancelled_sell_lots,
             sum(nvl(cancelled_sell_qty, 0)) cancelled_sell_qty,
             sum(nvl(close_diff_in_base_cur, 0)) close_diff_in_base_cur,
             sum(nvl(close_diff_in_trade_cur, 0)) close_diff_in_trade_cur
        from (
              --Initial Position for Options
              select dpd.group_id,
                      dpd.group_name,
                      dpd.group_cur_id,
                      dpd.group_cur_code,
                      dpd.group_qty_unit_id,
                      dpd.group_qty_unit,
                      dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.base_cur_id,
                      base_cur_code,
                      pc_process_id process_id,
                      pc_process process,
                      pd_trade_date trade_date,
                      pdd.product_id,
                      product_desc,
                      dpd.base_qty_unit_id,
                      dpd.base_qty_unit,
                      dpd.instrument_id,
                      dpd.instrument_name,
                      dpd.derivative_def_id,
                      dpd.derivative_def_name,
                      dpd.instrument_type_id,
                      irm.instrument_type instrument_type_name,
                      dpd.exchange_id,
                      dpd.exchange_name,
                      dpd.dr_id,
                      dpd.period_date,
                      dpd.lot_size,
                      dpd.lot_size_unit_id lot_size_unit_id,
                      dpd.clearer_profile_id,
                      phd.company_long_name1 clearer_name,
                      dpd.deal_type_id,
                      dpd.deal_type_name,
                      dpd.instrument_type_id trade_type_id,
                      dpd.instrument_name trade_type_name,
                      nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_price_cur_id,
                      nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_price_cur_code,
                      sum(decode(dpd.trade_type, 'Buy', dpd.total_lots, 0) -
                          decode(dpd.trade_type, 'Sell', dpd.total_lots, 0)) initial_position_lots,
                      sum(decode(dpd.trade_type,
                                 'Buy',
                                 dpd.trade_qty_in_exch_unit,
                                 0) - decode(dpd.trade_type,
                                             'Sell',
                                             dpd.trade_qty_in_exch_unit,
                                             0)) initial_position_qty,
                      0 buy_lots,
                      0 sell_lots,
                      0 buy_qty,
                      0 sell_qty,
                      0 lots_closed,
                      0 unrealized_pnl_in_base_cur,
                      0 unrealized_pnl_in_trade_cur,
                      0 realized_pnl_in_base_cur,
                      0 realized_pnl_in_trade_cur,
                      0 net_open_lots,
                      0 net_open_qty,
                      0 buy_exercised_expired_lots,
                      0 sell_exercised_expired_lots,
                      0 buy_exercised_expired_qty,
                      0 sell_exercised_expired_qty,
                      0 buy_premium_month,
                      0 sell_premium_month,
                      dpd.strike_price,
                      dpd.strike_price_unit_id,
                      dpd.strike_price_cur_id,
                      dpd.strike_price_cur_code,
                      dpd.strike_price_weight,
                      dpd.strike_price_weight_unit_id,
                      dpd.strike_price_weight_unit,
                      0 closed_qty,
                      0 cancelled_buy_lots,
                      0 cancelled_buy_qty,
                      0 cancelled_sell_lots,
                      0 cancelled_sell_qty,
                      0 close_diff_in_base_cur,
                      0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                      pdd_product_derivative_def pdd,
                      pdm_productmaster          pdm,
                      irm_instrument_type_master irm,
                      phd_profileheaderdetails   phd
               where dpd.derivative_def_id = pdd.derivative_def_id
                 and pdm.product_id = pdd.product_id
                 and dpd.instrument_type_id = irm.instrument_type_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                    -- AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Unrealized'
                 and dpd.clearer_profile_id = phd.profileid
                 and dpd.process_id = vc_previous_process_id
               group by dpd.group_id,
                         dpd.group_name,
                         group_cur_id,
                         group_cur_code,
                         group_qty_unit_id,
                         group_qty_unit,
                         dpd.corporate_id,
                         corporate_name,
                         dpd.base_cur_id,
                         base_cur_code,
                         process_id,
                         pc_process,
                         pd_trade_date,
                         pdd.product_id,
                         product_desc,
                         dpd.base_qty_unit_id,
                         dpd.base_qty_unit,
                         dpd.instrument_id,
                         dpd.instrument_name,
                         dpd.derivative_def_id,
                         dpd.derivative_def_name,
                         dpd.instrument_type_id,
                         irm.instrument_type,
                         dpd.exchange_id,
                         dpd.exchange_name,
                         dpd.dr_id,
                         dpd.period_date,
                         dpd.period_month,
                         dpd.period_year,
                         dpd.lot_size,
                         dpd.lot_size_unit_id,
                         dpd.clearer_profile_id,
                         phd.company_long_name1,
                         dpd.deal_type_id,
                         dpd.deal_type_name,
                         dpd.instrument_type_id,
                         irm.instrument_type,
                         nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                         nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                         dpd.strike_price,
                         dpd.strike_price_unit_id,
                         dpd.strike_price_cur_id,
                         dpd.strike_price_cur_code,
                         dpd.strike_price_weight,
                         dpd.strike_price_weight_unit_id,
                         dpd.strike_price_weight_unit
              -- New Trades in this EOD/EOM
              union all
              select gcd.groupid group_id,
                     gcd.groupname group_name,
                     cm_gcd.cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     qum_gcd.qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     drt.corporate_id,
                     akc.corporate_name,
                     cm_akc.cur_id base_cur_id,
                     cm_akc.cur_code base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm.qty_unit base_qty_unit,
                     dim.instrument_id,
                     dim.instrument_name,
                     pdd.derivative_def_id,
                     pdd.derivative_def_name,
                     dim.instrument_type_id,
                     irm.instrument_type,
                     pdd.exchange_id,
                     emt.exchange_name,
                     drt.dr_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        to_date('01-' || drm.period_month || '-' ||
                                drm.period_year,
                                'dd-Mon-yyyy')
                       else
                        drm.prompt_date
                     end else drm.period_date end) period_date,
                     pdd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     drt.clearer_profile_id,
                     phd_drt.company_long_name1 clearer_name,
                     drt.deal_type_id order_type_id,
                     drt.deal_type_id order_type,
                     dim.instrument_type_id trade_type_id,
                     dim.instrument_name trade_type_name,
                     nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
                     nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     nvl(sum(decode(drt.trade_type, 'Buy', drt.total_lots, 0)),
                         0) buy_lots,
                     nvl(sum(decode(drt.trade_type, 'Sell', drt.total_lots, 0)),
                         0) sell_lots,
                     nvl(sum(decode(drt.trade_type,
                                    'Buy',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) buy_qty,
                     nvl(sum(decode(drt.trade_type,
                                    'Sell',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     drt.strike_price,
                     drt.strike_price_unit_id,
                     cm_sp.cur_id,
                     cm_sp.cur_code,
                     pum_sp.weight,
                     qum_sp.qty_unit_id,
                     qum_sp.qty_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dt_derivative_trade        drt,
                     ak_corporate               akc,
                     gcd_groupcorporatedetails  gcd,
                     qum_quantity_unit_master   qum_gcd,
                     cm_currency_master         cm_gcd,
                     cm_currency_master         cm_akc,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm,
                     qum_quantity_unit_master   qum_pdm,
                     irm_instrument_type_master irm,
                     emt_exchangemaster         emt,
                     phd_profileheaderdetails   phd_drt,
                     pum_price_unit_master      pum,
                     pum_price_unit_master      pum_sp,
                     cm_currency_master         cm_sp,
                     qum_quantity_unit_master   qum_sp,
                     v_main_currency_details    vcur
               where drt.process_id = pc_process_id
                 and akc.corporate_id = drt.corporate_id
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and qum_pdm.qty_unit_id = pdm.base_quantity_unit
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and drt.is_what_if = 'N'
                    --AND drt.deal_type_id <> 'Internal Swap'
                    --AND drt.is_new_trade = 'Y'
                 and pdd.exchange_id = emt.exchange_id
                 and phd_drt.profileid = drt.clearer_profile_id
                 and drt.premium_discount_price_unit_id = pum.price_unit_id
                 and pum.cur_id = vcur.main_sub_cur_id
                 and drt.strike_price_unit_id = pum_sp.price_unit_id
                 and pum_sp.cur_id = cm_sp.cur_id
                 and pum_sp.weight_unit_id = qum_sp.qty_unit_id
                 and not exists
               (select dt_pre.internal_derivative_ref_no
                        from dt_derivative_trade dt_pre
                       where dt_pre.internal_derivative_ref_no =
                             drt.internal_derivative_ref_no
                         and dt_pre.process_id = vc_previous_process_id)
               group by gcd.groupid,
                        gcd.groupname,
                        cm_gcd.cur_id,
                        cm_gcd.cur_code,
                        qum_gcd.qty_unit_id,
                        qum_gcd.qty_unit,
                        drt.corporate_id,
                        akc.corporate_name,
                        cm_akc.cur_id,
                        cm_akc.cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        pdm.base_quantity_unit,
                        qum_pdm.qty_unit,
                        dim.instrument_id,
                        dim.instrument_name,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        dim.instrument_type_id,
                        irm.instrument_type,
                        pdd.exchange_id,
                        emt.exchange_name,
                        drt.dr_id,
                        drm.period_month,
                        drm.period_year,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           to_date('01-' || drm.period_month || '-' ||
                                   drm.period_year,
                                   'dd-Mon-yyyy')
                          else
                           drm.prompt_date
                        end else drm.period_date end),
                        pdd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        drt.clearer_profile_id,
                        phd_drt.company_long_name1,
                        drt.deal_type_id,
                        drt.deal_type_id,
                        dim.instrument_type_id,
                        dim.instrument_name,
                        nvl(vcur.main_currency_id, cm_akc.cur_id),
                        nvl(vcur.main_cur_code, cm_akc.cur_code),
                        drt.strike_price,
                        drt.strike_price_unit_id,
                        cm_sp.cur_id,
                        cm_sp.cur_code,
                        pum_sp.weight,
                        qum_sp.qty_unit_id,
                        qum_sp.qty_unit
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     sum(dpd.pnl_in_base_cur) realized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     nvl(sum(case
                               when dpd.trade_type = 'Buy' then
                                dpd.pnl_in_base_cur
                               else
                                0
                             end),
                         0) buy_premium_month,
                     nvl(sum(case
                               when dpd.trade_type = 'Sell' then
                                dpd.pnl_in_base_cur
                               else
                                0
                             end),
                         0) sell_premium_month,
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type in ('Realized')
              --   and dpd.status in ('Settled', 'Closed')
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              ---Positon from Closed out and pnl from option premium
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     nvl(sum(decode(dpd.trade_type, 'Buy', dpd.total_lots, 0)),
                         0) lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur, --48001
                     0 realized_pnl_in_trade_cur, --48001
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month, --48001
                     0 sell_premium_month, --48001
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     nvl(sum(decode(dpd.trade_type,
                                    'Buy',
                                    nvl(dpd.total_quantity, 0),
                                    0) *
                             pkg_general.f_get_converted_quantity(null,
                                                                  dpd.lot_size_unit_id,
                                                                  nvl(pdd.lot_size_unit_id,
                                                                      pdm.base_quantity_unit),
                                                                  1)),
                         0),
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type in ('Realized')
                 and dpd.status not in ('Expired', 'Exercised')
              --and dpd.status = 'Closed' 
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              -- Exercised / Expired Trades for getting Lots/Qty Exercised / Expired
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     dpd.base_cur_id trade_cur_id,
                     dpd.base_cur_code trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     nvl(sum(case
                               when dpd.trade_type = 'Buy' then
                                dpd.total_lots
                               else
                                0
                             end),
                         0) buy_exercised_expired_lots,
                     nvl(sum(case
                               when dpd.trade_type = 'Sell' then
                                dpd.total_lots
                               else
                                0
                             end),
                         0) sell_exercised_expired_lots,
                     nvl(sum(case
                               when dpd.trade_type = 'Buy' then
                                dpd.trade_qty_in_exch_unit
                               else
                                0
                             end),
                         0) buy_exercised_expired_qty,
                     nvl(sum(case
                               when dpd.trade_type = 'Sell' then
                                dpd.trade_qty_in_exch_unit
                               else
                                0
                             end),
                         0) sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Realized'
                    --and dpd.status = 'Closed'
                 and dpd.status in ('Expired', 'Exercised')
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        dpd.trade_price_cur_id,
                        dpd.trade_price_cur_code,
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              -- Open Position
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_price_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_price_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     sum(dpd.pnl_in_base_cur) unrealized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.total_lots) net_open_lots,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.trade_qty_in_exch_unit) net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Unrealized'
              --AND dpd.trade_status = 'Open'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              --13-March-2012 expired options change start
              union all
              select gcd.groupid group_id,
                     gcd.groupname group_name,
                     cm_gcd.cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     qum_gcd.qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     drt.corporate_id,
                     akc.corporate_name,
                     cm_akc.cur_id base_cur_id,
                     cm_akc.cur_code base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm.qty_unit base_qty_unit,
                     dim.instrument_id,
                     dim.instrument_name,
                     pdd.derivative_def_id,
                     pdd.derivative_def_name,
                     dim.instrument_type_id,
                     irm.instrument_type,
                     pdd.exchange_id,
                     emt.exchange_name,
                     drt.dr_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        to_date('01-' || drm.period_month || '-' ||
                                drm.period_year,
                                'dd-Mon-yyyy')
                       else
                        drm.prompt_date
                     end else drm.period_date end) period_date,
                     pdd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     drt.clearer_profile_id,
                     phd_drt.company_long_name1 clearer_name,
                     drt.deal_type_id order_type_id,
                     drt.deal_type_id order_type,
                     dim.instrument_type_id trade_type_id,
                     dim.instrument_name trade_type_name,
                     nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
                     nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     drt.strike_price,
                     drt.strike_price_unit_id,
                     cm_sp.cur_id,
                     cm_sp.cur_code,
                     pum_sp.weight,
                     qum_sp.qty_unit_id,
                     qum_sp.qty_unit,
                     0 closed_qty,
                     nvl(sum(decode(drt.trade_type, 'Buy', drt.total_lots, 0)),
                         0) cancelled_buy_lots,
                     nvl(sum(decode(drt.trade_type,
                                    'Buy',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) cancelled_buy_qty,
                     nvl(sum(decode(drt.trade_type, 'Sell', drt.total_lots, 0)),
                         0) cancelled_sell_lots,
                     nvl(sum(decode(drt.trade_type,
                                    'Sell',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dt_derivative_trade        drt,
                     ak_corporate               akc,
                     gcd_groupcorporatedetails  gcd,
                     qum_quantity_unit_master   qum_gcd,
                     cm_currency_master         cm_gcd,
                     cm_currency_master         cm_akc,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm,
                     qum_quantity_unit_master   qum_pdm,
                     irm_instrument_type_master irm,
                     emt_exchangemaster         emt,
                     phd_profileheaderdetails   phd_drt,
                     pum_price_unit_master      pum,
                     pum_price_unit_master      pum_sp,
                     cm_currency_master         cm_sp,
                     qum_quantity_unit_master   qum_sp,
                     v_main_currency_details    vcur
               where drt.process_id = vc_previous_process_id
                 and akc.corporate_id = drt.corporate_id
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and qum_pdm.qty_unit_id = pdm.base_quantity_unit
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and drt.is_what_if = 'N'
                 and pdd.exchange_id = emt.exchange_id
                 and phd_drt.profileid = drt.clearer_profile_id
                 and drt.premium_discount_price_unit_id = pum.price_unit_id
                 and pum.cur_id = vcur.main_sub_cur_id
                 and drt.strike_price_unit_id = pum_sp.price_unit_id
                 and pum_sp.cur_id = cm_sp.cur_id
                 and pum_sp.weight_unit_id = qum_sp.qty_unit_id
                 and not exists
               (select dt_pre.internal_derivative_ref_no
                        from dt_derivative_trade dt_pre
                       where dt_pre.internal_derivative_ref_no =
                             drt.internal_derivative_ref_no
                         and dt_pre.process_id = pc_process_id)
               group by gcd.groupid,
                        gcd.groupname,
                        cm_gcd.cur_id,
                        cm_gcd.cur_code,
                        qum_gcd.qty_unit_id,
                        qum_gcd.qty_unit,
                        drt.corporate_id,
                        akc.corporate_name,
                        cm_akc.cur_id,
                        cm_akc.cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        pdm.base_quantity_unit,
                        qum_pdm.qty_unit,
                        dim.instrument_id,
                        dim.instrument_name,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        dim.instrument_type_id,
                        irm.instrument_type,
                        pdd.exchange_id,
                        emt.exchange_name,
                        drt.dr_id,
                        drm.period_month,
                        drm.period_year,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           to_date('01-' || drm.period_month || '-' ||
                                   drm.period_year,
                                   'dd-Mon-yyyy')
                          else
                           drm.prompt_date
                        end else drm.period_date end),
                        pdd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        drt.clearer_profile_id,
                        phd_drt.company_long_name1,
                        drt.deal_type_id,
                        drt.deal_type_id,
                        dim.instrument_type_id,
                        dim.instrument_name,
                        nvl(vcur.main_currency_id, cm_akc.cur_id),
                        nvl(vcur.main_cur_code, cm_akc.cur_code),
                        drt.strike_price,
                        drt.strike_price_unit_id,
                        cm_sp.cur_id,
                        cm_sp.cur_code,
                        pum_sp.weight,
                        qum_sp.qty_unit_id,
                        qum_sp.qty_unit
              --13-March-2012 expired options change end                        
              )
       group by group_id,
                group_name,
                group_cur_id,
                group_cur_code,
                group_qty_unit_id,
                group_qty_unit,
                corporate_id,
                corporate_name,
                base_cur_id,
                base_cur_code,
                process_id,
                process,
                trade_date,
                product_id,
                product_desc,
                base_qty_unit_id,
                base_qty_unit,
                instrument_id,
                instrument_name,
                derivative_def_id,
                derivative_def_name,
                instrument_type_id,
                instrument_type_name,
                exchange_id,
                exchange_name,
                dr_id,
                period_date,
                lot_size,
                lot_size_unit_id,
                clearer_profile_id,
                clearer_name,
                deal_type_id,
                deal_type_name,
                trade_type_id,
                trade_type_name,
                trade_price_cur_id,
                trade_price_cur_code,
                strike_price,
                strike_price_unit_id,
                strike_price_cur_id,
                strike_price_cur_code,
                strike_price_weight,
                strike_price_weight_unit_id,
                strike_price_weight_unit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_clearer_summary',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  --recordfxpnl
  procedure recordfxpnl(p_corporateid varchar2,
                        p_tradedate   date,
                        p_process_id  varchar2,
                        p_userid      varchar2,
                        p_prcoess     varchar2) is
    cursor c_day_end_fx is
      select ct.internal_treasury_ref_no,
             ct.corporate_id,
             ak.corporate_name,
             ak.base_cur_id corp_base_cur_id,
             ak.base_currency_name corp_base_cur_name,
             ct.process_id,
             ct.trade_date,
             ct.treasury_ref_no ct_ref_no,
             ct.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             ct.dr_id ct_id,
             ct.payment_terms_id,
             dim.instrument_id instrument_id,
             irm.instrument_type instrument_type,
             pdd.derivative_def_id currency_def_id,
             pdd.derivative_def_name derivative_name,
             pdm.product_desc product_name,
             drm.prompt_date prompt_date,
             drm.prompt_date expiry_date,
             crtd_base.amount base_currency_amount,
             crtd_base.trade_type base_cur_buy_sell,
             ak.base_currency_name base_currency,
             round(1 / mv_cfq.rate, 8) market_exchange_rate,
             round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
             crtd_fx.cur_id fx_cur_id,
             crtd_base.cur_id base_cur_id,
             cm_base.cur_code base_cur_code,
             cm_fx.cur_code fx_cur_code,
             crtd_fx.amount fx_currency_amount,
             crtd_fx.trade_type fx_cur_buy_sell,
             oba.account_name,
             oba.account_no,
             phd.companyname bank_name,
             ct.bank_acc_id bank_account,
             ct.bank_charges bank_charges,
             ct.bank_charges_cur_id bank_cur_id,
             null as bank_charges_percent,
             ct.bank_charges_type,
             cm.cur_code bank_charges_currency,
             mv_cfq.dr_id cfq_id,
             mv_cfq.process_date,
             mv_cfq.prompt_date maturity_date,
             mv_cfq.is_spot,
             null as user_entered_fx,
             ct.strategy_id,
             css.strategy_name
        from ct_currency_trade              ct,
             ak_corporate                   ak,
             cpc_corporate_profit_center    cpc,
             eodeom_currency_forward_quotes mv_cfq,
             irm_instrument_type_master     irm,
             pdd_product_derivative_def     pdd,
             dim_der_instrument_master      dim,
             drm_derivative_master          drm,
             pdm_productmaster              pdm,
             crtd_cur_trade_details         crtd_base,
             crtd_cur_trade_details         crtd_fx,
             cm_currency_master             cm_base,
             cm_currency_master             cm,
             cm_currency_master             cm_fx,
             oba_our_bank_accounts          oba,
             phd_profileheaderdetails       phd,
             css_corporate_strategy_setup   css
       where ct.corporate_id = ak.corporate_id
         and ak.corporate_id = p_corporateid
         and ct.profit_center_id = cpc.profit_center_id
         and ct.corporate_id = mv_cfq.corporate_id
         and ct.dr_id = mv_cfq.dr_id
         and mv_cfq.process_id = p_process_id
            --AND mv_cfq.trade_date <= '08-FEB-2011'
            --   and mv_cfq.trade_date = least(drm.prompt_date, p_tradedate)
         and ct.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and dim.instrument_type_id = irm.instrument_type_id
         and ct.strategy_id = css.strategy_id(+)
         and ct.internal_treasury_ref_no =
             crtd_base.internal_treasury_ref_no
         and crtd_base.cur_id = cm_base.cur_id(+)
         and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
         and crtd_fx.cur_id = cm_fx.cur_id(+)
         and crtd_base.is_base = 'Y'
         and crtd_fx.is_base = 'N'
         and ct.bank_charges_cur_id = cm.cur_id(+)
         and ct.bank_id = phd.profileid(+)
         and ct.bank_id = oba.bank_id(+)
         and ct.bank_acc_id = oba.account_id(+)
         and upper(ct.status) = 'VERIFIED'
         and not exists (select 1
                from v_fxtrade_early_settled fxs
               where fxs.corporate_id = ct.corporate_id
                 and fxs.internal_treasury_ref_no =
                     ct.internal_treasury_ref_no)
         and not exists (select eci.ct_id
                from eci_expired_ct_id eci
               where eci.corporate_id = p_corporateid
                 and eci.process = p_prcoess
                 and eci.trade_date < p_tradedate
                 and eci.ct_id = drm.dr_id)
         and ct.process_id = p_process_id
         and crtd_base.process_id = p_process_id
         and crtd_fx.process_id = p_process_id;
    l_market_exchange_rate       number;
    l_ex_rate_bank_to_home_cur   number;
    l_market_value_in_home_cur   number;
    l_original_value_in_home_cur number;
    l_pnl_value_in_home_cur      number;
    l_bank_charges_in_home_cur   number;
    l_net_pnl_in_home_cur        number;
    l_ex_rate_home_to_corp_cur   number;
    l_pnl_value_in_corp_cur      number;
    l_net_pnl_in_corp_cur        number;
    l_pnl_type                   varchar2(15);
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
  begin
    dbms_output.put_line('currency section starts');
    for fx_rec_new in c_day_end_fx
    loop
      --since there is an outer join with cfq, a null in cfq_id indicates that there is no entry for forward quotes.
      if fx_rec_new.cfq_id is null then
        dbms_output.put_line('currency section entets if');
        vobj_error_log.extend;
        vobj_error_log(vn_eel_error_count) := pelerrorlogobj(p_corporateid,
                                                             'procedure recordfxpnl',
                                                             'M2M-027',
                                                             'Settlement Rate ',
                                                             null,
                                                             --fx_rec_new.ct_ref_no,
                                                             p_prcoess,
                                                             p_userid,
                                                             sysdate,
                                                             p_tradedate);
        sp_insert_error_log(vobj_error_log);
        dbms_output.put_line('Failed with exception');
      end if;
      /*
      if fx_rec_new.expiry_date <= p_tradedate then
        l_pnl_type := 'REALIZED';
      else
        l_pnl_type := 'UNREALIZED';
      end if;*/
      if fx_rec_new.maturity_date <= fx_rec_new.process_date then
        if fx_rec_new.is_spot = 'Y' then
          l_pnl_type := 'REALIZED';
        else
          l_pnl_type := 'UNREALIZED';
        end if;
      else
        l_pnl_type := 'UNREALIZED';
      end if;
      dbms_output.put_line('currency section l_market_exchange_rate');
      l_market_exchange_rate := fx_rec_new.market_exchange_rate;
      --if fx_rec_new.bank_charges_type ='Absolute' then
      if l_pnl_type = 'REALIZED' then
        if (fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id) then
          dbms_output.put_line('fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id');
          l_ex_rate_bank_to_home_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                                 fx_rec_new.bank_cur_id,
                                                                                 fx_rec_new.base_cur_id,
                                                                                 p_tradedate,
                                                                                 1);
          dbms_output.put_line('pkg_general.f_get_converted_currency_amt');
        else
          l_ex_rate_bank_to_home_cur := 1;
        end if;
        if upper(fx_rec_new.bank_charges_type) = 'ABSOLUTE' then
          l_bank_charges_in_home_cur := nvl(fx_rec_new.bank_charges, 0) *
                                        nvl(l_ex_rate_bank_to_home_cur, 0);
        else
          l_bank_charges_in_home_cur := (fx_rec_new.bank_charges / 100) *
                                        fx_rec_new.base_currency_amount;
          l_ex_rate_bank_to_home_cur := 1;
        end if;
      else
        l_bank_charges_in_home_cur := 0;
        l_ex_rate_bank_to_home_cur := 1;
      end if;
      --    l_market_value_in_home_cur   := l_market_exchange_rate *  fx_rec_new.base_currency_amount;
      --      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *  fx_rec_new.base_currency_amount;
      l_market_value_in_home_cur   := l_market_exchange_rate *
                                      fx_rec_new.fx_currency_amount;
      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *
                                      fx_rec_new.fx_currency_amount;
      if fx_rec_new.base_cur_buy_sell = 'Sell' then
        l_pnl_value_in_home_cur := l_market_value_in_home_cur -
                                   l_original_value_in_home_cur;
      else
        l_pnl_value_in_home_cur := -1 * (l_market_value_in_home_cur -
                                   l_original_value_in_home_cur);
      end if;
      l_net_pnl_in_home_cur      := l_pnl_value_in_home_cur -
                                    l_bank_charges_in_home_cur;
      l_ex_rate_home_to_corp_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                             fx_rec_new.base_cur_id,
                                                                             fx_rec_new.corp_base_cur_id,
                                                                             p_tradedate,
                                                                             1);
      l_pnl_value_in_corp_cur    := l_pnl_value_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      l_net_pnl_in_corp_cur      := l_net_pnl_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      dbms_output.put_line('insert into cpd_currency_pnl_daily');
      insert into cpd_currency_pnl_daily
        (ct_internal_ref_no,
         corporate_id,
         corporate_name,
         process_id,
         eod_trade_date,
         trade_date,
         ct_ref_no,
         profit_center_id,
         profit_center_name,
         strategy_id,
         strategy_name,
         ct_id,
         cfq_id,
         instrument_id,
         instrument_name,
         instrument_type,
         currency_def_id,
         derivative_name,
         product_name,
         prompt_date,
         expiry_date,
         pnl_type,
         home_currency_amount,
         home_cur_buy_sell,
         home_currency,
         home_cur_id,
         market_exchange_rate,
         original_exchange_rate,
         fx_cur_id,
         fx_currency,
         fx_currency_amount,
         fx_cur_buy_sell,
         bank_name,
         bank_account,
         account_no,
         account_name,
         bank_charges,
         bank_charges_currency,
         bank_charges_type,
         bank_charges_cur_id,
         bank_charges_percent,
         ex_rate_from_bank_to_home_cur,
         market_value_in_home_currency,
         original_value_in_home_curr,
         pnl_value_in_home_currency,
         bank_charges_in_home_currency,
         net_pnl_in_home_currency,
         user_entered_fx,
         profit_center_short_name,
         corp_cur_id,
         corp_currency,
         corp_fx_rate,
         pnl_in_corp_currency,
         net_pnl_in_corp_currency,
         payment_terms_id)
      values
        (fx_rec_new.internal_treasury_ref_no,
         fx_rec_new.corporate_id,
         fx_rec_new.corporate_name,
         fx_rec_new.process_id,
         p_tradedate,
         fx_rec_new.trade_date,
         fx_rec_new.ct_ref_no,
         fx_rec_new.profit_center_id,
         fx_rec_new.profit_center_name,
         fx_rec_new.strategy_id, --strategy_id
         fx_rec_new.strategy_name, --strategy_name
         fx_rec_new.ct_id,
         fx_rec_new.cfq_id,
         fx_rec_new.instrument_id,
         fx_rec_new.instrument_type, -- Instrument name
         fx_rec_new.instrument_type,
         fx_rec_new.currency_def_id,
         fx_rec_new.derivative_name, --derivative_name
         fx_rec_new.product_name,
         fx_rec_new.prompt_date, --prompt_date
         fx_rec_new.expiry_date,
         l_pnl_type, --pnl type
         fx_rec_new.base_currency_amount,
         fx_rec_new.base_cur_buy_sell,
         fx_rec_new.base_cur_code,
         fx_rec_new.base_cur_id,
         fx_rec_new.market_exchange_rate,
         fx_rec_new.original_exchange_rate,
         fx_rec_new.fx_cur_id,
         fx_rec_new.fx_cur_code,
         fx_rec_new.fx_currency_amount,
         fx_rec_new.fx_cur_buy_sell,
         fx_rec_new.bank_name,
         fx_rec_new.bank_account,
         fx_rec_new.account_no,
         fx_rec_new.account_name,
         fx_rec_new.bank_charges,
         fx_rec_new.bank_charges_currency,
         fx_rec_new.bank_charges_type,
         fx_rec_new.bank_cur_id,
         fx_rec_new.bank_charges_percent,
         l_ex_rate_bank_to_home_cur,
         l_market_value_in_home_cur,
         l_original_value_in_home_cur,
         l_pnl_value_in_home_cur,
         l_bank_charges_in_home_cur,
         l_net_pnl_in_home_cur,
         fx_rec_new.user_entered_fx,
         fx_rec_new.profit_center_short_name,
         fx_rec_new.corp_base_cur_id,
         fx_rec_new.corp_base_cur_name,
         l_ex_rate_home_to_corp_cur,
         l_pnl_value_in_corp_cur,
         l_net_pnl_in_corp_cur,
         fx_rec_new.payment_terms_id);
    end loop;
  exception
    when others then
      dbms_output.put_line('Error in currency section' || sqlerrm);
  end;

  ----added for early deilvery/cancellation fx trades---
  procedure sp_recordfxpnl_edcd(p_corporateid varchar2,
                                p_tradedate   date,
                                p_process_id  varchar2,
                                p_userid      varchar2,
                                p_prcoess     varchar2) is
    cursor c_day_end_fx is
      select ct.internal_treasury_ref_no,
             ct.corporate_id,
             ak.corporate_name,
             ak.base_cur_id corp_base_cur_id,
             ak.base_currency_name corp_base_cur_name,
             ct.process_id,
             ct.trade_date,
             ct.treasury_ref_no ct_ref_no,
             ct.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             ct.dr_id ct_id,
             ct.payment_terms_id,
             dim.instrument_id instrument_id,
             irm.instrument_type instrument_type,
             pdd.derivative_def_id currency_def_id,
             pdd.derivative_def_name derivative_name,
             pdm.product_desc product_name,
             drm.prompt_date prompt_date,
             drm.prompt_date expiry_date,
             crtd_base.amount base_currency_amount,
             crtd_base.trade_type base_cur_buy_sell,
             ak.base_currency_name base_currency,
             round(1 / mv_cfq.rate, 8) market_exchange_rate,
             round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
             crtd_fx.cur_id fx_cur_id,
             crtd_base.cur_id base_cur_id,
             cm_base.cur_code base_cur_code,
             cm_fx.cur_code fx_cur_code,
             crtd_fx.amount fx_currency_amount,
             crtd_fx.trade_type fx_cur_buy_sell,
             oba.account_name,
             oba.account_no,
             phd.companyname bank_name,
             ct.bank_acc_id bank_account,
             ct.bank_charges bank_charges,
             ct.bank_charges_cur_id bank_cur_id,
             null as bank_charges_percent,
             ct.bank_charges_type,
             cm.cur_code bank_charges_currency,
             mv_cfq.dr_id cfq_id,
             mv_cfq.process_date,
             mv_cfq.prompt_date maturity_date,
             mv_cfq.is_spot,
             null as user_entered_fx,
             ct.strategy_id,
             css.strategy_name,
             ----HDL_FX_settlement change start
             ct.outstanding_leg1_amt,
             ct.outstanding_leg2_amt,
             'UNREAL' real_unreal_flag
      --HDL_FX_settlement change end
        from ct_currency_trade              ct,
             ak_corporate                   ak,
             cpc_corporate_profit_center    cpc,
             eodeom_currency_forward_quotes mv_cfq,
             div_der_instrument_valuation   div, --HDL_FX_settlement changes
             irm_instrument_type_master     irm,
             pdd_product_derivative_def     pdd,
             dim_der_instrument_master      dim,
             drm_derivative_master          drm,
             pdm_productmaster              pdm,
             crtd_cur_trade_details         crtd_base,
             crtd_cur_trade_details         crtd_fx,
             cm_currency_master             cm_base,
             cm_currency_master             cm,
             cm_currency_master             cm_fx,
             oba_our_bank_accounts          oba,
             phd_profileheaderdetails       phd,
             css_corporate_strategy_setup   css
       where ct.corporate_id = ak.corporate_id
         and ak.corporate_id = p_corporateid
         and ct.profit_center_id = cpc.profit_center_id
         and ct.corporate_id = mv_cfq.corporate_id
         and ct.dr_id = mv_cfq.dr_id
         and mv_cfq.process_id = p_process_id
            --HDL_FX_settlement changes start
         and div.instrument_id = dim.instrument_id
         and mv_cfq.price_source_id = div.price_source_id
         and div.is_deleted = 'N'
            --HDL_FX_settlement changes end
            --AND mv_cfq.trade_date <= '08-FEB-2011'
            --   and mv_cfq.trade_date = least(drm.prompt_date, p_tradedate)
         and ct.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and dim.instrument_type_id = irm.instrument_type_id
         and ct.strategy_id = css.strategy_id(+)
         and ct.internal_treasury_ref_no =
             crtd_base.internal_treasury_ref_no
         and crtd_base.cur_id = cm_base.cur_id(+)
         and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
         and crtd_fx.cur_id = cm_fx.cur_id(+)
         and crtd_base.is_base = 'Y'
         and crtd_fx.is_base = 'N'
         and ct.bank_charges_cur_id = cm.cur_id(+)
         and ct.bank_id = phd.profileid(+)
         and ct.bank_id = oba.bank_id(+)
         and ct.bank_acc_id = oba.account_id(+)
         and upper(ct.status) = 'VERIFIED'
         and not exists (select eci.ct_id
                from eci_expired_ct_id eci
               where eci.corporate_id = p_corporateid
                 and eci.process = p_prcoess
                 and eci.trade_date < p_tradedate
                 and eci.ct_id = drm.dr_id)
         and ct.process_id = p_process_id
         and exists (select 1
                from v_fxtrade_early_settled /*fxs_fx_settlement*/ fxs
               where fxs.internal_treasury_ref_no =
                     ct.internal_treasury_ref_no
                 and fxs.corporate_id = ct.corporate_id)
            /* and exists ( select 1
                                                                                                                                        from v_fxtrade_early_settled fxs
                                                                                                                                       where fxs.corporate_id = ct.corporate_id
                                                                                                                                       and fxs.internal_treasury_ref_no = ct.internal_treasury_ref_no)*/
         and crtd_base.process_id = p_process_id
         and crtd_fx.process_id = p_process_id
      --HDL_FX_settlement start
      union
      select ct.internal_treasury_ref_no,
             ct.corporate_id,
             ak.corporate_name,
             ak.base_cur_id corp_base_cur_id,
             ak.base_currency_name corp_base_cur_name,
             ct.process_id,
             ct.trade_date,
             ct.treasury_ref_no ct_ref_no,
             ct.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             ct.dr_id ct_id,
             ct.payment_terms_id,
             dim.instrument_id instrument_id,
             irm.instrument_type instrument_type,
             pdd.derivative_def_id currency_def_id,
             pdd.derivative_def_name derivative_name,
             pdm.product_desc product_name,
             drm.prompt_date prompt_date,
             drm.prompt_date expiry_date,
             crtd_base.amount base_currency_amount,
             crtd_base.trade_type base_cur_buy_sell,
             ak.base_currency_name base_currency,
             round(1 / mv_cfq.rate, 8) market_exchange_rate,
             round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
             crtd_fx.cur_id fx_cur_id,
             crtd_base.cur_id base_cur_id,
             cm_base.cur_code base_cur_code,
             cm_fx.cur_code fx_cur_code,
             crtd_fx.amount fx_currency_amount,
             crtd_fx.trade_type fx_cur_buy_sell,
             oba.account_name,
             oba.account_no,
             phd.companyname bank_name,
             ct.bank_acc_id bank_account,
             ct.bank_charges bank_charges,
             ct.bank_charges_cur_id bank_cur_id,
             null as bank_charges_percent,
             ct.bank_charges_type,
             cm.cur_code bank_charges_currency,
             mv_cfq.dr_id cfq_id,
             mv_cfq.process_date,
             mv_cfq.prompt_date maturity_date,
             mv_cfq.is_spot,
             null as user_entered_fx,
             ct.strategy_id,
             css.strategy_name,
             crtd_base.amount - ct.outstanding_leg1_amt outstanding_leg1_amt,
             crtd_fx.amount - ct.outstanding_leg2_amt outstanding_leg2_amt,
             'REAL' real_unreal_flag
        from ct_currency_trade              ct,
             ak_corporate                   ak,
             cpc_corporate_profit_center    cpc,
             eodeom_currency_forward_quotes mv_cfq,
             div_der_instrument_valuation   div,
             irm_instrument_type_master     irm,
             pdd_product_derivative_def     pdd,
             dim_der_instrument_master      dim,
             drm_derivative_master          drm,
             pdm_productmaster              pdm,
             crtd_cur_trade_details         crtd_base,
             crtd_cur_trade_details         crtd_fx,
             cm_currency_master             cm_base,
             cm_currency_master             cm,
             cm_currency_master             cm_fx,
             oba_our_bank_accounts          oba,
             phd_profileheaderdetails       phd,
             css_corporate_strategy_setup   css
       where ct.corporate_id = ak.corporate_id
         and ak.corporate_id = p_corporateid
         and ct.profit_center_id = cpc.profit_center_id
         and ct.corporate_id = mv_cfq.corporate_id
         and ct.dr_id = mv_cfq.dr_id
         and mv_cfq.process_id = p_process_id
         and div.instrument_id = dim.instrument_id
         and mv_cfq.price_source_id = div.price_source_id
         and div.is_deleted = 'N'
         and ct.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and dim.instrument_type_id = irm.instrument_type_id
         and ct.strategy_id = css.strategy_id(+)
         and ct.internal_treasury_ref_no =
             crtd_base.internal_treasury_ref_no
         and crtd_base.cur_id = cm_base.cur_id(+)
         and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
         and crtd_fx.cur_id = cm_fx.cur_id(+)
         and crtd_base.is_base = 'Y'
         and crtd_fx.is_base = 'N'
         and ct.bank_charges_cur_id = cm.cur_id(+)
         and ct.bank_id = phd.profileid(+)
         and ct.bank_id = oba.bank_id(+)
         and ct.bank_acc_id = oba.account_id(+)
         and upper(ct.status) = 'VERIFIED'
         and not exists (select eci.ct_id
                from eci_expired_ct_id eci
               where eci.corporate_id = p_corporateid
                 and eci.process = p_prcoess
                 and eci.trade_date < p_tradedate
                 and eci.ct_id = drm.dr_id)
         and ct.process_id = p_process_id
         and crtd_base.process_id = p_process_id
         and crtd_fx.process_id = p_process_id
            --and ct.outstanding_leg1_amt <> crtd_base.amount
         and exists (select 1
                from fxs_fx_settlement     fxs,
                     ct_currency_trade     ct_mat,
                     drm_derivative_master drm_mat
               where fxs.main_trade_int_fx_ref_no =
                     ct.internal_treasury_ref_no
                 and fxs.corporate_id = ct.corporate_id
                 and ct_mat.internal_treasury_ref_no =
                     fxs.matched_trade_int_fx_ref_no
                 and ct_mat.dr_id = drm_mat.dr_id
                 and not exists
               (select eci.ct_id
                        from eci_expired_ct_id eci
                       where eci.corporate_id = p_corporateid
                         and eci.process = p_prcoess
                         and eci.trade_date < p_tradedate
                         and eci.ct_id = drm_mat.dr_id));
    --HDL_FX_settlement end
    --HDL_FX_settlement start
    cursor c_outstanding_amt is
      select crtd_main.internal_treasury_ref_no,
             crtd_main.amount - nvl(match.matched_amount, 0) outstanding_amt_base_cur,
             nvl(match.amount_matched_today, 0) amount_matched_today
        from (select ct.internal_treasury_ref_no,
                     sum(decode(crtd.internal_treasury_ref_no,
                                ct.internal_treasury_ref_no,
                                0,
                                1) * crtd.amount *
                         decode(crtd.is_base, 'Y', 1, 0)) matched_amount,
                     sum(decode(crtd.internal_treasury_ref_no,
                                ct.internal_treasury_ref_no,
                                0,
                                1) * crtd.amount *
                         decode(eci.ct_id, null, 1, 0) *
                         decode(crtd.is_base, 'Y', 1, 0)) amount_matched_today
                from ct_currency_trade      ct,
                     crtd_cur_trade_details crtd,
                     fxs_fx_settlement      fxs,
                     ct_currency_trade      ct_match,
                     drm_derivative_master  drm_match,
                     eci_expired_ct_id      eci
               where ct.internal_treasury_ref_no =
                     fxs.main_trade_int_fx_ref_no
                 and (ct.internal_treasury_ref_no =
                     crtd.internal_treasury_ref_no or
                     crtd.internal_treasury_ref_no =
                     fxs.matched_trade_int_fx_ref_no)
                 and ct_match.internal_treasury_ref_no =
                     fxs.matched_trade_int_fx_ref_no
                 and eci.ct_id(+) = drm_match.dr_id
                 and ct.process_id = p_process_id --'412'
                 and ct_match.process_id = ct.process_id
                 and crtd.process_id = ct.process_id
                 and ct_match.dr_id = drm_match.dr_id
                 and fxs.is_deleted = 'N'
                 and drm_match.prompt_date <= p_tradedate --'17-JAN-2011'
               group by ct.internal_treasury_ref_no) match,
             crtd_cur_trade_details crtd_main
       where crtd_main.process_id = p_process_id --'413'
         and crtd_main.is_base = 'Y'
         and crtd_main.internal_treasury_ref_no =
             match.internal_treasury_ref_no;
    --HDL_FX_settlement end     
    l_market_exchange_rate       number;
    l_ex_rate_bank_to_home_cur   number;
    l_market_value_in_home_cur   number;
    l_original_value_in_home_cur number;
    l_pnl_value_in_home_cur      number;
    l_bank_charges_in_home_cur   number;
    l_net_pnl_in_home_cur        number;
    l_ex_rate_home_to_corp_cur   number;
    l_pnl_value_in_corp_cur      number;
    l_net_pnl_in_corp_cur        number;
    l_pnl_type                   varchar2(15);
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
    --HDL_FX_settlement start
    type rec_fxs_txns is record(
      internal_treasury_ref_no varchar2(15 char),
      outstanding_amt_base_cur number(30, 6),
      amount_matched_today     number(30, 6)); --3-may
    type ty_fxs_txns is table of rec_fxs_txns index by ct_currency_trade.internal_treasury_ref_no%type;
    tb_fxs_txns ty_fxs_txns;
    --HDL_FX_settlement end
  begin
    dbms_output.put_line('currency section starts');
    --HDL_FX_settlement start
    begin
      for fx_rec_upd in c_outstanding_amt
      loop
        tb_fxs_txns(fx_rec_upd.internal_treasury_ref_no).internal_treasury_ref_no := fx_rec_upd.internal_treasury_ref_no;
        tb_fxs_txns(fx_rec_upd.internal_treasury_ref_no).outstanding_amt_base_cur := fx_rec_upd.outstanding_amt_base_cur;
        tb_fxs_txns(fx_rec_upd.internal_treasury_ref_no).amount_matched_today := fx_rec_upd.amount_matched_today;
        /*update ct_currency_trade ct
          set ct.outstanding_leg1_amt = fx_rec_upd.outstanding_amt_base_cur,
              ct.outstanding_leg2_amt = ct.fx_rate_base_to_foreign *
                                        fx_rec_upd.outstanding_amt_base_cur
        where ct.internal_treasury_ref_no =
              fx_rec_upd.internal_treasury_ref_no
          and ct.process_id = p_process_id;*/
      end loop;
      for fx_rec_new in c_day_end_fx
      loop
        --if fx_rec_new.real_unreal_flag <> 'REAL' then
        if tb_fxs_txns.exists(fx_rec_new.internal_treasury_ref_no) then
          update ct_currency_trade ct
             set ct.outstanding_leg1_amt = tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                          .outstanding_amt_base_cur,
                 ct.outstanding_leg2_amt = ct.fx_rate_base_to_foreign *
                                           tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                          .outstanding_amt_base_cur
           where ct.internal_treasury_ref_no =
                 fx_rec_new.internal_treasury_ref_no
             and ct.process_id = p_process_id;
        else
          update ct_currency_trade ct
             set ct.outstanding_leg1_amt = fx_rec_new.base_currency_amount,
                 ct.outstanding_leg2_amt = fx_rec_new.fx_currency_amount
           where ct.internal_treasury_ref_no =
                 fx_rec_new.internal_treasury_ref_no
             and ct.process_id = p_process_id;
        end if;
        --end if;
      end loop;
      --tb_fxs_txns.delete;
    end;
    --HDL_FX_settlement end
    for fx_rec_new in c_day_end_fx
    loop
      --since there is an outer join with cfq, a null in cfq_id indicates that there is no entry for forward quotes.
      if fx_rec_new.cfq_id is null then
        dbms_output.put_line('currency section entets if');
        vobj_error_log.extend;
        vobj_error_log(vn_eel_error_count) := pelerrorlogobj(p_corporateid,
                                                             'procedure recordfxpnl',
                                                             'M2M-027',
                                                             'Settlement Rate ',
                                                             null,
                                                             --fx_rec_new.ct_ref_no,
                                                             p_prcoess,
                                                             p_userid,
                                                             sysdate,
                                                             p_tradedate);
        sp_insert_error_log(vobj_error_log);
        dbms_output.put_line('Failed with exception');
      end if;
      /*
      if fx_rec_new.expiry_date <= p_tradedate then
        l_pnl_type := 'REALIZED';
      else
        l_pnl_type := 'UNREALIZED';
      end if;*/
      if fx_rec_new.maturity_date <= fx_rec_new.process_date then
        if fx_rec_new.is_spot = 'Y' then
          l_pnl_type := 'REALIZED';
        else
          l_pnl_type := 'UNREALIZED';
        end if;
      else
        --HDL_FX_settlement start
        if fx_rec_new.real_unreal_flag = 'REAL' then
          l_pnl_type := 'REALIZED';
        else
          --HDL_FX_settlement end     
          l_pnl_type := 'UNREALIZED';
        end if; --HDL_FX_settlement added
      end if;
      --3-may
      if tb_fxs_txns.exists(fx_rec_new.internal_treasury_ref_no) and
         l_pnl_type = 'REALIZED' and fx_rec_new.outstanding_leg1_amt <> 0 then
        fx_rec_new.outstanding_leg1_amt := tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                          .amount_matched_today;
        fx_rec_new.outstanding_leg2_amt := (tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                           .amount_matched_today /
                                            fx_rec_new.original_exchange_rate);
      end if;
      --3-may
      dbms_output.put_line('currency section l_market_exchange_rate');
      l_market_exchange_rate := fx_rec_new.market_exchange_rate;
      --if fx_rec_new.bank_charges_type ='Absolute' then
      if l_pnl_type = 'REALIZED' then
        if (fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id) then
          dbms_output.put_line('fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id');
          l_ex_rate_bank_to_home_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                                 fx_rec_new.bank_cur_id,
                                                                                 fx_rec_new.base_cur_id,
                                                                                 p_tradedate,
                                                                                 1);
          dbms_output.put_line('pkg_general.f_get_converted_currency_amt');
        else
          l_ex_rate_bank_to_home_cur := 1;
        end if;
        if upper(fx_rec_new.bank_charges_type) = 'ABSOLUTE' then
          l_bank_charges_in_home_cur := nvl(fx_rec_new.bank_charges, 0) *
                                        nvl(l_ex_rate_bank_to_home_cur, 0);
        else
          l_bank_charges_in_home_cur := (fx_rec_new.bank_charges / 100) *
                                        fx_rec_new.base_currency_amount;
          l_ex_rate_bank_to_home_cur := 1;
        end if;
      else
        l_bank_charges_in_home_cur := 0;
        l_ex_rate_bank_to_home_cur := 1;
      end if;
      --    l_market_value_in_home_cur   := l_market_exchange_rate *  fx_rec_new.base_currency_amount;
      --      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *  fx_rec_new.base_currency_amount;
      l_market_value_in_home_cur   := l_market_exchange_rate *
                                      fx_rec_new.outstanding_leg2_amt; --fx_rec_new.fx_currency_amount;--HDL_FX_settlement
      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *
                                      fx_rec_new.outstanding_leg2_amt; --fx_rec_new.fx_currency_amount;--HDL_FX_settlement
      if fx_rec_new.base_cur_buy_sell = 'Sell' then
        l_pnl_value_in_home_cur := l_market_value_in_home_cur -
                                   l_original_value_in_home_cur;
      else
        l_pnl_value_in_home_cur := -1 * (l_market_value_in_home_cur -
                                   l_original_value_in_home_cur);
      end if;
      l_net_pnl_in_home_cur      := l_pnl_value_in_home_cur -
                                    nvl(l_bank_charges_in_home_cur, 0); --l_bank_charges_in_home_cur;--HDL_FX_settlement fix
      l_ex_rate_home_to_corp_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                             fx_rec_new.base_cur_id,
                                                                             fx_rec_new.corp_base_cur_id,
                                                                             p_tradedate,
                                                                             1);
      l_pnl_value_in_corp_cur    := l_pnl_value_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      l_net_pnl_in_corp_cur      := l_net_pnl_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      dbms_output.put_line('insert into cpd_currency_pnl_daily');
      if l_net_pnl_in_home_cur <> 0 then
        insert into cpd_currency_pnl_daily
          (ct_internal_ref_no,
           corporate_id,
           corporate_name,
           process_id,
           eod_trade_date,
           trade_date,
           ct_ref_no,
           profit_center_id,
           profit_center_name,
           strategy_id,
           strategy_name,
           ct_id,
           cfq_id,
           instrument_id,
           instrument_name,
           instrument_type,
           currency_def_id,
           derivative_name,
           product_name,
           prompt_date,
           expiry_date,
           pnl_type,
           home_currency_amount,
           home_cur_buy_sell,
           home_currency,
           home_cur_id,
           market_exchange_rate,
           original_exchange_rate,
           fx_cur_id,
           fx_currency,
           fx_currency_amount,
           fx_cur_buy_sell,
           bank_name,
           bank_account,
           account_no,
           account_name,
           bank_charges,
           bank_charges_currency,
           bank_charges_type,
           bank_charges_cur_id,
           bank_charges_percent,
           ex_rate_from_bank_to_home_cur,
           market_value_in_home_currency,
           original_value_in_home_curr,
           pnl_value_in_home_currency,
           bank_charges_in_home_currency,
           net_pnl_in_home_currency,
           user_entered_fx,
           profit_center_short_name,
           corp_cur_id,
           corp_currency,
           corp_fx_rate,
           pnl_in_corp_currency,
           net_pnl_in_corp_currency,
           payment_terms_id)
        values
          (fx_rec_new.internal_treasury_ref_no,
           fx_rec_new.corporate_id,
           fx_rec_new.corporate_name,
           fx_rec_new.process_id,
           p_tradedate,
           fx_rec_new.trade_date,
           fx_rec_new.ct_ref_no,
           fx_rec_new.profit_center_id,
           fx_rec_new.profit_center_name,
           fx_rec_new.strategy_id, --strategy_id
           fx_rec_new.strategy_name, --strategy_name
           fx_rec_new.ct_id,
           fx_rec_new.cfq_id,
           fx_rec_new.instrument_id,
           fx_rec_new.instrument_type, -- Instrument name
           fx_rec_new.instrument_type,
           fx_rec_new.currency_def_id,
           fx_rec_new.derivative_name, --derivative_name
           fx_rec_new.product_name,
           fx_rec_new.prompt_date, --prompt_date
           fx_rec_new.expiry_date,
           l_pnl_type, --pnl type
           fx_rec_new.outstanding_leg1_amt, --fx_rec_new.base_currency_amount,--HDL_FX_settlement change
           fx_rec_new.base_cur_buy_sell,
           fx_rec_new.base_cur_code,
           fx_rec_new.base_cur_id,
           fx_rec_new.market_exchange_rate,
           fx_rec_new.original_exchange_rate,
           fx_rec_new.fx_cur_id,
           fx_rec_new.fx_cur_code,
           fx_rec_new.outstanding_leg2_amt, --fx_rec_new.fx_currency_amount,--HDL_FX_settlement change
           fx_rec_new.fx_cur_buy_sell,
           fx_rec_new.bank_name,
           fx_rec_new.bank_account,
           fx_rec_new.account_no,
           fx_rec_new.account_name,
           fx_rec_new.bank_charges,
           fx_rec_new.bank_charges_currency,
           fx_rec_new.bank_charges_type,
           fx_rec_new.bank_cur_id,
           fx_rec_new.bank_charges_percent,
           l_ex_rate_bank_to_home_cur,
           l_market_value_in_home_cur,
           l_original_value_in_home_cur,
           l_pnl_value_in_home_cur,
           nvl(l_bank_charges_in_home_cur, 0), --l_bank_charges_in_home_cur,--HDL_FX_settlement fix
           l_net_pnl_in_home_cur,
           fx_rec_new.user_entered_fx,
           fx_rec_new.profit_center_short_name,
           fx_rec_new.corp_base_cur_id,
           fx_rec_new.corp_base_cur_name,
           l_ex_rate_home_to_corp_cur,
           l_pnl_value_in_corp_cur,
           l_net_pnl_in_corp_cur,
           fx_rec_new.payment_terms_id);
      end if;
    end loop;
    tb_fxs_txns.delete;
  exception
    when others then
      dbms_output.put_line('Error in currency section' || sqlerrm);
  end;

  procedure sp_calc_price_exposure(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_process      varchar2,
                                   pc_user_id      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_derivative is
      select dpd.corporate_id,
             dpd.process_id process_id,
             dpd.eod_trade_date process_date,
             dpd.derivative_ref_no,
             dpd.internal_derivative_ref_no,
             dpd.trade_type,
             dpd.trade_price,
             dpd.trade_price_cur_code || '/' ||
             decode(nvl(dpd.trade_price_weight, 1),
                    1,
                    null,
                    dpd.trade_price_weight_unit) ||
             dpd.sett_price_weight_unit price_unit_name,
             dpd.trade_price_weight,
             dpd.trade_price_weight_unit,
             dpd.trade_price_weight_unit_id, --QUM-51
             dpd.trade_price_type_id price_type_id,
             dpd.trade_price_unit_id trade_price_unit_id,
             dpd.settlement_price,
             dpd.trade_price_cur_id,
             dpd.sett_price_unit_id sett_price_unit_id, --PUM-161
             dpd.sett_price_cur_code || '/' ||
             decode(nvl(dpd.sett_price_weight, 1),
                    1,
                    null,
                    dpd.sett_price_weight) || dpd.sett_price_weight_unit sett_price_unit,
             decode(nvl(dpd.trade_price_weight, 1),
                    1,
                    null,
                    dpd.trade_price_weight) || dpd.trade_price_weight_unit trade_price_unit,
             dpd.sett_price_weight_unit,
             dpd.sett_price_weight_unit_id,
             dpd.sett_price_cur_id,
             dpd.total_quantity,
             dpd.quantity_unit_id,
             dpd.sett_price_weight,
             dpd.quantity_unit,
             dpd.product_id,
             dpd.product_name,
             dpd.profit_center_id,
             dpd.profit_center_name,
             dpd.profit_center_short_name,
             dpd.base_qty_unit_id,
             dpd.base_qty_unit quantity,
             dpd.pnl_type,
             dpd.price_point_id,
             dpd.instrument_id,
             dpd.instrument_name,
             dpd.dr_id,
             dpd.dr_id_name,
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.index_instrument_id,
             dpd.index_instrument_name,
             dpd.formula_id,
             dpd.formula_name,
             dpd.formula_display,
             nvl(period_year, to_char(period_date, 'yyyy')) period_year,
             nvl(period_month, to_char(period_date, 'Mon')) period_month,
             dpd.period_date,
             dpd.leg_no,
             dpd.gravity,
             dpd.gravity_type,
             dpd.density_mass_qty_unit_id,
             dpd.density_volume_qty_unit_id
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.corporate_id = pc_corporate_id
         and dpd.instrument_type in ('Future', 'Forward')
         and dpd.process_id = pc_process_id;
    vn_contract_value     number(25, 4);
    vn_m2m_amount         number(25, 4);
    vt_tbl_setup          pe_tbl_setup;
    vt_tbl_instrument     pe_tbl_instrument;
    vn_cur_row_cnt        number;
    vn_fb_order_sq        number := 1;
    vt_tbl_instrument_out pe_tbl_instrument;
    vt_tbl_setup_out      pe_tbl_setup;
    vc_error_loc          varchar2(50);
    vc_error_number       number := 0;
  begin
    for cur_derivative_row in cur_derivative
    loop
      -- make one entry for valuation section as exposure type as 'Market' and price status as 'Floating'
      vn_contract_value := 0;
      vn_m2m_amount     := 0;
      vn_contract_value := 0;
      vn_m2m_amount     := round((cur_derivative_row.settlement_price /
                                 nvl(cur_derivative_row.sett_price_weight,
                                      1)) *
                                 pkg_general.f_get_converted_currency_amt(cur_derivative_row.corporate_id,
                                                                          cur_derivative_row.sett_price_cur_id,
                                                                          cur_derivative_row.base_cur_id,
                                                                          cur_derivative_row.process_date,
                                                                          1) *
                                 (pkg_general.fn_mass_volume_qty_conversion(cur_derivative_row.product_id,
                                                                            cur_derivative_row.base_qty_unit_id,
                                                                            cur_derivative_row.sett_price_weight_unit_id,
                                                                            cur_derivative_row.total_quantity,
                                                                            cur_derivative_row.gravity,
                                                                            cur_derivative_row.gravity_type,
                                                                            cur_derivative_row.density_mass_qty_unit_id,
                                                                            cur_derivative_row.density_volume_qty_unit_id)),
                                 4);
      vc_error_number   := 1;
      insert into dpe_derivative_price_exposure
        (corporate_id,
         process_id,
         process_date,
         internal_derivative_ref_no,
         derivative_ref_no,
         leg_no,
         trade_type,
         exposure_type,
         price_status,
         instrumnet_id,
         instrument_name,
         instrument_month_year,
         instrument_month_date,
         exposure_quantity,
         quantity_unit_id,
         quantity_unit,
         final_price,
         final_price_unit,
         final_price_unit_id,
         final_price_staus,
         final_price_qp_status,
         total_value,
         value_cur_id,
         value_cur_code,
         setup_remarks)
      values
        (cur_derivative_row.corporate_id,
         cur_derivative_row.process_id,
         cur_derivative_row.process_date,
         cur_derivative_row.internal_derivative_ref_no,
         cur_derivative_row.derivative_ref_no,
         cur_derivative_row.leg_no,
         decode(cur_derivative_row.trade_type, 'Sell', 'S', 'P'),
         'Market',
         'Floating',
         cur_derivative_row.instrument_id,
         cur_derivative_row.instrument_name,
         cur_derivative_row.period_month,
         '01-' || cur_derivative_row.period_month || '-' ||
         cur_derivative_row.period_year, --v_instrument_month_date
         cur_derivative_row.total_quantity,
         cur_derivative_row.quantity_unit_id,
         cur_derivative_row.quantity_unit,
         cur_derivative_row. settlement_price,
         cur_derivative_row.sett_price_unit, --   v_final_price_unit,
         cur_derivative_row.sett_price_unit_id,
         null, --final_price_staus,
         null, --final_price_qp_status
         vn_m2m_amount * (-1),
         cur_derivative_row.base_cur_id, -- v_value_cur_id,
         cur_derivative_row.base_cur_code, -- v_value_cur_code,
         null);
      vc_error_number := 2;
      /*for fixed price type*/
      if cur_derivative_row.price_type_id = 'Fixed' then
        --calculate the contract value
        vn_contract_value := round((cur_derivative_row.trade_price /
                                   nvl(cur_derivative_row.trade_price_weight,
                                        1)) *
                                   pkg_general.f_get_converted_currency_amt(cur_derivative_row.corporate_id,
                                                                            cur_derivative_row.trade_price_cur_id,
                                                                            cur_derivative_row.base_cur_id,
                                                                            cur_derivative_row.process_date,
                                                                            1) *
                                   (pkg_general.fn_mass_volume_qty_conversion(cur_derivative_row.product_id,
                                                                              cur_derivative_row.base_qty_unit_id,
                                                                              cur_derivative_row.trade_price_weight_unit_id,
                                                                              cur_derivative_row.total_quantity,
                                                                              cur_derivative_row.gravity,
                                                                              cur_derivative_row.gravity_type,
                                                                              cur_derivative_row.density_mass_qty_unit_id,
                                                                              cur_derivative_row.density_volume_qty_unit_id)),
                                   4);
        vc_error_number   := 3;
        --insert the values to the dpe_derivative_price_exposore
        insert into dpe_derivative_price_exposure
          (corporate_id,
           process_id,
           process_date,
           internal_derivative_ref_no,
           derivative_ref_no,
           leg_no,
           trade_type,
           exposure_type,
           price_status,
           instrumnet_id,
           instrument_name,
           instrument_month_year,
           instrument_month_date,
           exposure_quantity,
           quantity_unit_id,
           quantity_unit,
           final_price,
           final_price_unit,
           final_price_unit_id,
           final_price_staus,
           final_price_qp_status,
           total_value,
           value_cur_id,
           value_cur_code,
           setup_remarks)
        values
          (cur_derivative_row.corporate_id,
           cur_derivative_row.process_id,
           cur_derivative_row.process_date,
           cur_derivative_row.internal_derivative_ref_no,
           cur_derivative_row.derivative_ref_no,
           cur_derivative_row.leg_no,
           decode(cur_derivative_row.trade_type, 'Sell', 'S', 'P'),
           'Position',
           'Fixed',
           null, --cur_derivative_row.instrument_id,
           'Fixed Price', -- cur_derivative_row.instrument_name,
           'NA', --cur_derivative_row.period_month,
           null, --v_instrument_month_date,--not e
           cur_derivative_row.total_quantity,
           cur_derivative_row.quantity_unit_id,
           cur_derivative_row.quantity_unit,
           cur_derivative_row.trade_price,
           cur_derivative_row.trade_price_unit, --   v_final_price_unit,
           cur_derivative_row.trade_price_unit_id, --  v_final_price_unit_id,
           null, --v_final_price_staus,
           null, --v_final_price_qp_status,
           vn_contract_value,
           cur_derivative_row.base_cur_id, -- v_value_cur_id,
           cur_derivative_row.base_cur_code, -- v_value_cur_code,
           null); -- v_setup_remarks);
        vc_error_number := 4;
      end if;
      if cur_derivative_row.price_type_id in ('Index', 'Formula') then
        vt_tbl_setup          := pe_tbl_setup();
        vt_tbl_setup_out      := pe_tbl_setup();
        vt_tbl_instrument     := pe_tbl_instrument();
        vt_tbl_instrument_out := pe_tbl_instrument();
        vc_error_loc          := '1';
        if cur_derivative_row.price_type_id = 'Index' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          for cc1 in (select dt.instrument_id,
                             dt.price_source_id,
                             dt.price_point_id,
                             dt.available_price_id,
                             dt.period_type_id,
                             dt.period_month,
                             dt.period_year,
                             dt.period_from_date,
                             dt.period_to_date,
                             dt.no_of_months,
                             dt.no_of_days,
                             dt.fb_period_type,
                             dt.fb_period_sub_type,
                             dt.delivery_period_id,
                             dt.off_day_price,
                             dt.basis,
                             dt.basis_price_unit_id,
                             dt.fx_rate_type,
                             dt.fx_rate_
                        from dt_fbi dt
                       where dt.internal_derivative_ref_no =
                             cur_derivative_row.internal_derivative_ref_no)
          loop
            vc_error_loc := '2';
            vt_tbl_setup.extend;
            vt_tbl_setup(1) := pe_typ_setup(pc_corporate_id,
                                            cc1.instrument_id,
                                            'index',
                                            'index',
                                            '$' || cc1.instrument_id || '$',
                                            pd_trade_date,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            cur_derivative_row.base_cur_id, -- v_value_cur_id,
                                            cur_derivative_row.base_cur_code, --v_value_cur_code,
                                            cur_derivative_row.total_quantity,
                                            cur_derivative_row.base_qty_unit_id,
                                            null);
            vc_error_number := 5;
            vt_tbl_instrument.extend;
            vt_tbl_instrument(vn_cur_row_cnt) := pe_typ_instrument(vn_fb_order_sq,
                                                                   cc1.instrument_id, --index_id
                                                                   cc1.instrument_id,
                                                                   cc1.price_source_id,
                                                                   cc1.price_point_id,
                                                                   cc1.available_price_id,
                                                                   cc1.fb_period_type,
                                                                   cc1.fb_period_sub_type,
                                                                   cc1.period_month,
                                                                   cc1.period_year,
                                                                   cc1.period_from_date,
                                                                   cc1.period_to_date,
                                                                   cc1.no_of_months,
                                                                   cc1.no_of_days,
                                                                   cc1.period_type_id,
                                                                   cc1.delivery_period_id,
                                                                   cc1.off_day_price,
                                                                   cc1.basis,
                                                                   cc1.basis_price_unit_id,
                                                                   cc1.fx_rate_type,
                                                                   cc1.fx_rate_,
                                                                   null, -- avg_price
                                                                   null, --avg_price_unit_id
                                                                   null, --avg_fx_rate
                                                                   null, --avg_conv_price
                                                                   null, --avg_conv_price_wt_basis
                                                                   null, --price_status
                                                                   null, --price_qp_status
                                                                   cur_derivative_row.total_quantity,
                                                                   cur_derivative_row.base_qty_unit_id,
                                                                   null, --avg_value
                                                                   null, --avg_cur_id
                                                                   null, --avg_cur_code
                                                                   null, --price_details(nested obj)
                                                                   null --remarks
                                                                   );
            vc_error_number := 6;
          end loop;
        end if;
        /*for formula*/
        if cur_derivative_row.price_type_id = 'Formula' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          vc_error_loc   := '3';
          for cc in (select fbs.formula_internal,
                            fbs.formula_display,
                            fbs.formula_name,
                            fbs.formula_id,
                            fbs.price_unit_id
                       from fbs_formula_builder_setup fbs
                      where fbs.formula_id = cur_derivative_row.formula_id)
          loop
            /*constructin the set up type*/
            vc_error_loc := '4';
            vt_tbl_setup.extend;
            vt_tbl_setup(vn_cur_row_cnt) := pe_typ_setup(pc_corporate_id,
                                                         cur_derivative_row.formula_id,
                                                         cur_derivative_row.formula_name,
                                                         cur_derivative_row.formula_display,
                                                         null, --formula_internal
                                                         pd_trade_date,
                                                         null, --basics
                                                         null, --basics_price_unit_id
                                                         null, --final_price
                                                         null, --final_price_unit
                                                         null, --final_price_staus
                                                         null, --final_price_qp_status
                                                         null, --total_value
                                                         cur_derivative_row.base_cur_id,
                                                         cur_derivative_row.base_cur_code,
                                                         cur_derivative_row.total_quantity,
                                                         cur_derivative_row.base_qty_unit_id,
                                                         null --remarks
                                                         );
            vc_error_number := 7;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          vn_cur_row_cnt := 1;
          vn_fb_order_sq := 1;
          /*constructing the instrument type*/
          for cc1 in (select dt.instrument_id,
                             dt.formula_id,
                             dt.price_source_id,
                             dt.price_point_id,
                             dt.available_price_id,
                             dt.period_type_id,
                             dt.period_month,
                             dt.period_year,
                             dt.period_from_date,
                             dt.period_to_date,
                             dt.no_of_months,
                             dt.no_of_days,
                             dt.fb_period_type,
                             dt.fb_period_sub_type,
                             dt.delivery_period_id,
                             dt.off_day_price,
                             dt.basis,
                             dt.basis_price_unit_id,
                             dt.fx_rate_type,
                             dt.fx_rate_
                        from dt_fbi dt
                       where dt.internal_derivative_ref_no =
                             cur_derivative_row.internal_derivative_ref_no)
          loop
            vc_error_loc := '5';
            vt_tbl_instrument.extend;
            vt_tbl_instrument(vn_cur_row_cnt) := pe_typ_instrument(vn_fb_order_sq,
                                                                   cc1.formula_id, --index_id
                                                                   cc1.instrument_id,
                                                                   cc1.price_source_id,
                                                                   cc1.price_point_id,
                                                                   cc1.available_price_id,
                                                                   cc1.fb_period_type,
                                                                   cc1.fb_period_sub_type,
                                                                   cc1.period_month,
                                                                   cc1.period_year,
                                                                   cc1.period_from_date,
                                                                   cc1.period_to_date,
                                                                   cc1.no_of_months,
                                                                   cc1.no_of_days,
                                                                   cc1.period_type_id,
                                                                   cc1.delivery_period_id,
                                                                   cc1.off_day_price,
                                                                   cc1.basis,
                                                                   cc1.basis_price_unit_id,
                                                                   cc1.fx_rate_type,
                                                                   cc1.fx_rate_,
                                                                   null, --avg_price
                                                                   null, --avg_price_unit_id
                                                                   null, --avg_fx_rate
                                                                   null, --avg_conv_price
                                                                   null, --avg_conv_price_wt_basis
                                                                   null, --price_status
                                                                   null, --price_qp_status
                                                                   cur_derivative_row.total_quantity,
                                                                   cur_derivative_row.base_qty_unit_id,
                                                                   null, --avg_value
                                                                   null, --avg_cur_id
                                                                   null, --avg_cur_code
                                                                   null, --price_details(nested obj)
                                                                   null --remarks
                                                                   );
            vc_error_number := 8;
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
        end if;
        vt_tbl_instrument_out.extend;
        vt_tbl_setup_out.extend;
        dbms_output.put_line('The total no. of recordsin the instrument is  ' ||
                             vt_tbl_instrument.count);
        dbms_output.put_line('Tthe total np of records in the set up is ' ||
                             vt_tbl_setup.count);
        pkg_cdc_price_exposure.sp_calculate_price(vt_tbl_setup,
                                                  vt_tbl_instrument,
                                                  vt_tbl_setup_out,
                                                  vt_tbl_instrument_out,
                                                  cur_derivative_row.product_id,
                                                  cur_derivative_row.gravity,
                                                  cur_derivative_row.gravity_type,
                                                  cur_derivative_row.density_mass_qty_unit_id,
                                                  cur_derivative_row.density_volume_qty_unit_id,
                                                  pc_process_id);
        dbms_output.put_line('The total no. of recordsin the instrument is(After)  ' ||
                             vt_tbl_instrument.count);
        dbms_output.put_line('The total np of records in the set up is(After) ' ||
                             vt_tbl_setup.count);
        if vt_tbl_instrument(1).price_details is null then
          dbms_output.put_line('no data in the nested record');
        else
          dbms_output.put_line('Data is in the nested record ');
        end if;
        -- for cc in (select * from the (select * from cast (vt_tbl_instrument_out as pe_tbl_instrument) from dual) loop
        vc_error_loc := '6';
        for cc in (select *
                     from the (select cast(vt_tbl_instrument_out as
                                           pe_tbl_instrument)
                                 from dual))
        loop
          vc_error_loc := '7';
          if cc.price_details is not null then
            for cc_qp in (select *
                            from the (select cast(cc.price_details as
                                                  pe_tbl_price_exposure)
                                        from dual))
            loop
              vc_error_loc := '8';
              --insert to the DPED_DRT_PRICE_EXP_DETAILS table
              insert into dped_drt_price_exp_details
                (process_id,
                 internal_derivative_ref_no,
                 fb_order_seq,
                 instrument_id,
                 fb_period_type,
                 fb_period_sub_type,
                 fb_period_month,
                 fb_period_year,
                 fb_period_from_date,
                 fb_period_to_date,
                 fb_off_day_price,
                 price_date,
                 price_drid,
                 price_month,
                 price_month_date,
                 is_holiday,
                 price,
                 price_unit_id,
                 price_unit,
                 quotes_price_date,
                 avg_fx_rate,
                 price_exp_status,
                 exp_quantity,
                 exp_quantity_unit_id,
                 exp_quantity_unit,
                 exp_value,
                 exp_cur_id,
                 exp_cur_code,
                 inst_price_status,
                 inst_price_qp_status,
                 remarks)
              values
                (pc_process_id,
                 cur_derivative_row.internal_derivative_ref_no,
                 cc.fb_order_seq,
                 cc_qp.instrument_id,
                 cc.fb_period_type,
                 cc.fb_period_sub_type,
                 cc.period_month,
                 cc.period_year,
                 cc.period_from_date,
                 cc.period_to_date,
                 cc.off_day_price,
                 cc_qp.price_date,
                 cc_qp.price_drid,
                 cc_qp.price_month,
                 cc_qp.price_month_date,
                 trim(cc_qp.is_holiday),
                 cc_qp.price,
                 cc_qp.price_unit_id,
                 cc_qp.price_unit,
                 cc_qp.quotes_price_date,
                 cc_qp.avg_fx_rate,
                 cc_qp.price_exp_status,
                 cc_qp.exp_quantity,
                 cc_qp.exp_quantity_unit_id,
                 cc_qp.exp_quantity_unit,
                 cc_qp.exp_value,
                 cc_qp.exp_cur_id,
                 cc_qp.exp_cur_code,
                 cc.price_status,
                 cc.price_qp_status,
                 cc_qp.status_remarks);
              vc_error_number := 9;
            end loop;
          end if;
        end loop;
      end if;
    end loop;
    commit;
    /*insert into the dpe_derivative_price_exposure*/
    insert into dpe_derivative_price_exposure
      (corporate_id,
       process_id,
       process_date,
       internal_derivative_ref_no,
       derivative_ref_no,
       leg_no,
       trade_type,
       exposure_type,
       price_status,
       instrumnet_id,
       instrument_name,
       instrument_month_year,
       instrument_month_date,
       exposure_quantity,
       quantity_unit_id,
       quantity_unit,
       final_price,
       final_price_unit,
       final_price_unit_id,
       final_price_staus,
       final_price_qp_status,
       total_value,
       value_cur_id,
       value_cur_code,
       setup_remarks)
      select dt.corporate_id corporate_id,
             dped.process_id process_id,
             pd_trade_date process_date,
             dt.internal_derivative_ref_no internal_derivative_ref_no,
             dt.derivative_ref_no derivative_ref_no,
             dt.leg_no leg_no,
             decode(dt.trade_type, 'Sell', 'S', 'P') trade_type,
             'Position' exposure_type,
             dped.price_exp_status price_status,
             dped.instrument_id instrument_id,
             dim.instrument_name instrument_name,
             dped.price_month instrument_month_year,
             dped.price_month_date instrument_month_date,
             sum(dped.exp_quantity) exposure_quantity,
             dped.exp_quantity_unit_id quantity_unit_id,
             dped.exp_quantity_unit quantity_unit,
             (case
               when sum(dped.exp_quantity) <> 0 then
                sum(dped.exp_value) / sum(dped.exp_quantity)
               else
                null
             end) fina_price,
             dped.exp_cur_code || '/' || dped.exp_quantity_unit final_price_unit,
             ppu.internal_price_unit_id final_price_unit_id,
             dped.price_exp_status final_price_staus,
             null final_price_qp_status,
             sum(dped.exp_value) total_value,
             dped.exp_cur_id value_cur_id,
             dped.exp_cur_code value_cur_code,
             null remark
        from dped_drt_price_exp_details dped,
             dim_der_instrument_master  dim,
             dt_derivative_trade        dt,
             ppu_product_price_units    ppu,
             pum_price_unit_master      pum
       where dped.process_id = pc_process_id
         and dped.internal_derivative_ref_no =
             dt.internal_derivative_ref_no
         and dped.process_id = dt.process_id
         and dped.instrument_id = dim.instrument_id
         and dped.exp_cur_id = pum.cur_id
         and dped.exp_quantity_unit_id = pum.weight_unit_id
         and nvl(pum.weight, 1) = 1
         and ppu.product_id = dt.product_id
         and pum.is_active = 'Y'
         and pum.is_deleted = 'N'
         and ppu.is_active = 'Y'
         and ppu.is_deleted = 'N'
         and ppu.price_unit_id = pum.price_unit_id
       group by dt.corporate_id,
                dped.process_id,
                dt.internal_derivative_ref_no,
                dt.derivative_ref_no,
                dt.leg_no,
                dt.trade_type,
                dped.price_exp_status,
                dped.instrument_id,
                dim.instrument_name,
                dped.price_month,
                dped.price_month_date,
                dped.exp_quantity_unit_id,
                dped.exp_quantity_unit,
                dped.exp_cur_id,
                dped.price_unit_id,
                ppu.internal_price_unit_id,
                dped.exp_cur_code;
    vc_error_loc    := '9';
    vc_error_number := 10;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'sp_calc_price_exposure',
                                                           'M2M-013' ||
                                                           '  vc_error_number ' ||
                                                           vc_error_number,
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           vc_error_loc,
                                                           'DAte is  ' ||
                                                           pd_trade_date ||
                                                           'pc_process_id is ' ||
                                                           pc_process_id ||
                                                           'pc_process ' ||
                                                           pc_process ||
                                                           'pc_user_id ' ||
                                                           pc_user_id,
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end sp_calc_price_exposure;

  procedure sp_calc_average_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_process      varchar2,
                                           pc_user_id      varchar2,
                                           pc_dbd_id       varchar2) as
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_avg is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             dim.instrument_id,
             dim.underlying_instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             drm.period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             dt.quantity_unit_id,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.available_price_id,
             apm.available_price_name,
             dt.average_from_date,
             dt.average_to_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.price_source_id,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.price_source_id val_price_source_id,
             div.available_price_id val_available_price_id,
             div.price_unit_id val_price_unit_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             apm_available_price_master     apm,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             div_der_instrument_valuation   div
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.available_price_id = apm.available_price_id
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dim.underlying_instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and irm.instrument_type = 'Average'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_mk_premium_trade_prm_cur  number;
    vn_trade_premium_trade_cur   number;
    vn_total_market_value_pd_cur number;
    vn_total_trade_pre_trdae_cur number;
    vn_market_price_trade_cur    number;
    vn_market_premium            number;
    vc_market_pre_price_unit_id  varchar2(20);
    vn_qty_in_premium_wt_unit    number;
    vn_pnl_value_in_trade_cur    number;
    vn_premium_to_base_exch_rate number;
    vn_pnl_value_in_base_cur     number;
    vn_net_pnl_in_base_cur       number;
    vn_total_trade_pre_base_cur  number;
    vc_period                    varchar2(50);
    vc_premium_main_cur_id       varchar2(15);
    vc_premium_main_cur_code     varchar2(15);
    vc_cur_id_factor             number;
    vc_caluclate_set_dr_id       varchar2(15);
    vc_caluclate_val_dr_id       varchar2(15);
    vc_caluclate_mar_dr_id       varchar2(15);
    vn_caluclate_set_price       number;
    vn_caluclate_val_price       number;
    vc_cal_set_price_unit_id     varchar2(15);
    vc_cal_val_price_unit_id     varchar2(15);
    qp_startdate                 date;
    qp_enddate                   date;
    vn_count_set_qp              number;
    vn_total_set_price           number;
    vn_total_val_price           number;
    vn_count_val_qp              number;
    vd_3rd_wed_of_qp             varchar2(15);
    vc_is_valid_prompt_date      varchar2(10);
    vc_holiday                   char(1);
    vn_avg_set_price             number;
    vn_avg_val_price             number;
    vn_avg_contract_price        number;
    vn_market_price              number;
    vc_market_price_unit_id      varchar2(15);
    vn_total_market_price        number;
    vn_paid_premium              number;
    vn_total_trade_price         number;
    vn_trade_price_trade_cur     number;
    vc_error_message             varchar2(200);
    workings_days                number;
    vd_quotes_date               date;
  begin
    for cur_avg_rows in cur_avg
    loop
      vn_avg_contract_price       := null;
      vn_total_trade_price        := null;
      vn_market_premium           := null;
      vc_market_pre_price_unit_id := null;
      vn_market_price             := null;
      vc_market_price_unit_id     := null;
      vc_cal_set_price_unit_id    := null;
      if cur_avg_rows.eod_trade_date >= cur_avg_rows.average_from_date and
         cur_avg_rows.eod_trade_date <= cur_avg_rows.average_to_date then
        vc_period := 'During QP';
      elsif cur_avg_rows.eod_trade_date < cur_avg_rows.average_from_date and
            cur_avg_rows.eod_trade_date < cur_avg_rows.average_to_date then
        vc_period := 'Before QP';
      elsif cur_avg_rows.eod_trade_date > cur_avg_rows.average_from_date and
            cur_avg_rows.eod_trade_date > cur_avg_rows.average_to_date then
        vc_period := 'After QP';
      end if;
      vn_qty_in_premium_wt_unit := f_get_converted_quantity(cur_avg_rows.product_id,
                                                            cur_avg_rows.quantity_unit_id,
                                                            cur_avg_rows.pd_weight_unit_id,
                                                            cur_avg_rows.total_quantity);
      pkg_general.sp_get_base_cur_detail(cur_avg_rows.pd_cur_id,
                                         vc_premium_main_cur_id,
                                         vc_premium_main_cur_code,
                                         vc_cur_id_factor);
      vn_premium_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                               pc_corporate_id,
                                                               cur_avg_rows.prompt_date,
                                                               vc_premium_main_cur_id,
                                                               cur_avg_rows.base_cur_id);
      ---- finding Market premium
      begin
        select price,
               price_unit_id
          into vn_market_premium,
               vc_market_pre_price_unit_id
          from eodeom_derivative_quote_detail eod_dq,
               cdim_corporate_dim             cdim
         where eod_dq.dr_id = cur_avg_rows.dr_id
           and eod_dq.price_source_id = cur_avg_rows.price_source_id
           and eod_dq.available_price_id = cur_avg_rows.available_price_id
           and eod_dq.eodeom_trade_date = cdim.valid_quote_date
           and eod_dq.price_unit_id = cur_avg_rows.val_price_unit_id
           and eod_dq.process_id = pc_process_id
           and eod_dq.corporate_id = pc_corporate_id
           and cdim.corporate_id = pc_corporate_id
           and cdim.instrument_id = eod_dq.instrument_id;
      exception
        when no_data_found then
          vn_market_premium           := null;
          vc_market_pre_price_unit_id := null;
        when others then
          vc_error_message := 'Missing Data for Market Premium';
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_calc_avg_price',
                                                               'M2M-013',
                                                               vc_error_message ||
                                                               'Code:' ||
                                                               sqlcode ||
                                                               'Message:' ||
                                                               sqlerrm,
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
      end;
      vn_mk_premium_trade_prm_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                               vn_market_premium,
                                                               vc_market_pre_price_unit_id,
                                                               cur_avg_rows.premium_discount_price_unit_id,
                                                               pd_trade_date,
                                                               cur_avg_rows.product_id);
      --- finding market dr_id
      begin
        select drm.dr_id
          into vc_caluclate_mar_dr_id
          from drm_derivative_master drm
         where drm.instrument_id = cur_avg_rows.underlying_instrument_id
           and drm.prompt_date = cur_avg_rows.prompt_date
           and drm.price_point_id is null
           and rownum <= 1
           and drm.is_deleted = 'N';
      exception
        when no_data_found then
          vc_caluclate_mar_dr_id := null;
        when others then
          vc_error_message := 'Missing Data for Market DR-ID';
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_calc_avg_price',
                                                               'M2M-013',
                                                               vc_error_message ||
                                                               'Code:' ||
                                                               sqlcode ||
                                                               'Message:' ||
                                                               sqlerrm,
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
      end;
      --- finding market price
      begin
        select price,
               price_unit_id
          into vn_market_price,
               vc_market_price_unit_id
          from eodeom_derivative_quote_detail eod_dq
         where eod_dq.dr_id = vc_caluclate_mar_dr_id
           and eod_dq.price_source_id = cur_avg_rows.val_price_source_id
           and eod_dq.available_price_id =
               cur_avg_rows.val_available_price_id
           and eod_dq.price_unit_id = cur_avg_rows.val_price_unit_id
           and eod_dq.process_id = pc_process_id
           and eod_dq.corporate_id = pc_corporate_id;
      exception
        when no_data_found then
          vn_market_price         := 0;
          vc_market_price_unit_id := null;
        when others then
          vc_error_message := 'Missing Data for Market Price';
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_calc_avg_price',
                                                               'M2M-013',
                                                               vc_error_message ||
                                                               'Code:' ||
                                                               sqlcode ||
                                                               'Message:' ||
                                                               sqlerrm,
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
      end;
      vn_market_price_trade_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                             vn_market_price,
                                                             vc_market_price_unit_id,
                                                             cur_avg_rows.premium_discount_price_unit_id,
                                                             pd_trade_date,
                                                             cur_avg_rows.product_id);
      if vc_period = 'Before QP' then
        vn_total_market_value_pd_cur := vn_mk_premium_trade_prm_cur *
                                        vn_qty_in_premium_wt_unit *
                                        vc_cur_id_factor;
        vn_trade_premium_trade_cur   := cur_avg_rows.premium_discount;
        vn_total_trade_pre_trdae_cur := vn_trade_premium_trade_cur *
                                        vn_qty_in_premium_wt_unit *
                                        vc_cur_id_factor;
        if cur_avg_rows.trade_type = 'Buy' then
          vn_pnl_value_in_trade_cur := vn_total_market_value_pd_cur -
                                       vn_total_trade_pre_trdae_cur;
        else
          vn_pnl_value_in_trade_cur := vn_total_trade_pre_trdae_cur -
                                       vn_total_market_value_pd_cur;
        end if;
        vn_total_trade_pre_base_cur := vn_total_trade_pre_trdae_cur *
                                       vn_premium_to_base_exch_rate;
        vn_pnl_value_in_base_cur    := vn_pnl_value_in_trade_cur *
                                       vn_premium_to_base_exch_rate;
        vn_net_pnl_in_base_cur      := vn_pnl_value_in_base_cur;
        if vn_net_pnl_in_base_cur is null then
          vn_net_pnl_in_base_cur := 0;
        end if;
        if vn_pnl_value_in_trade_cur is null then
          vn_pnl_value_in_trade_cur := 0;
        end if;
      elsif vc_period = 'During QP' then
        qp_startdate       := cur_avg_rows.average_from_date;
        qp_enddate         := cur_avg_rows.average_to_date;
        vn_count_set_qp    := 0;
        vn_total_set_price := 0;
        --- finding settlement DR_ID
        begin
          select drm.dr_id
            into vc_caluclate_set_dr_id
            from drm_derivative_master drm
           where drm.instrument_id = cur_avg_rows.underlying_instrument_id
             and drm.price_point_id = cur_avg_rows.price_point_id
             and rownum <= 1
             and drm.is_deleted = 'N';
        exception
          when no_data_found then
            vc_caluclate_set_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Settlement DR-ID';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        while qp_startdate <= pd_trade_date
        loop
          ---- finding holidays
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              qp_startdate) then
            vc_holiday := 'Y';
          else
            vc_holiday := 'N';
          end if;
          --- Finding  settlement Price
          if vc_holiday = 'N' then
            begin
              select price,
                     price_unit_id
                into vn_caluclate_set_price,
                     vc_cal_set_price_unit_id
                from (select dqd.price,
                             dqd.price_unit_id,
                             rank() over(order by dq.trade_date desc nulls last) as td_rank
                        from dqd_derivative_quote_detail dqd,
                             dq_derivative_quotes        dq
                       where dqd.dq_id = dq.dq_id
                         and dqd.available_price_id =
                             cur_avg_rows.available_price_id
                         and dq.corporate_id = cur_avg_rows.corporate_id
                         and dq.trade_date <= qp_startdate
                         and dq.instrument_id =
                             cur_avg_rows.underlying_instrument_id
                         and dq.trade_date <= pd_trade_date
                         and dq.price_source_id =
                             cur_avg_rows.price_source_id
                         and dqd.dr_id = vc_caluclate_set_dr_id
                         and dqd.price_unit_id =
                             cur_avg_rows.val_price_unit_id
                         and dq.dbd_id = dqd.dbd_id
                         and dq.dbd_id = pc_dbd_id
                         and dq.is_deleted = 'N'
                         and dqd.is_deleted = 'N')
               where td_rank = 1;
            exception
              when no_data_found then
                vn_caluclate_set_price   := 0;
                vc_cal_set_price_unit_id := null;
              when others then
                vc_error_message := 'Missing Data for Settlement Price';
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_avg_price',
                                                                     'M2M-013',
                                                                     vc_error_message ||
                                                                     'Code:' ||
                                                                     sqlcode ||
                                                                     'Message:' ||
                                                                     sqlerrm,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
            end;
            vn_total_set_price := vn_total_set_price +
                                  vn_caluclate_set_price;
            vn_count_set_qp    := vn_count_set_qp + 1;
          end if;
          qp_startdate := qp_startdate + 1;
        end loop;
        ---- get third wednesday of after QP period
        --  If 3rd Wednesday of QP End date is not a prompt date, get the next valid prompt date
        vd_3rd_wed_of_qp := f_get_next_day(qp_enddate, 'Wed', 3);
        while true
        loop
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              vd_3rd_wed_of_qp) then
            vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
          else
            exit;
          end if;
        end loop;
        --- get 3rd wednesday  before QP period
        -- Get the quotation date = Trade Date +2 working Days
        if vd_3rd_wed_of_qp < pd_trade_date then
          workings_days  := 0;
          vd_quotes_date := pd_trade_date + 1;
          while workings_days <> 2
          loop
            if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                                vd_quotes_date) then
              vd_quotes_date := vd_quotes_date + 1;
            else
              workings_days := workings_days + 1;
              if workings_days <> 2 then
                vd_quotes_date := vd_quotes_date + 1;
              end if;
            end if;
          end loop;
          vd_3rd_wed_of_qp := vd_quotes_date;
        end if;
        --- finding  valuation dr_id
        begin
          select drm.dr_id
            into vc_caluclate_val_dr_id
            from drm_derivative_master drm
           where drm.instrument_id = cur_avg_rows.underlying_instrument_id
             and drm.prompt_date = vd_3rd_wed_of_qp
             and drm.price_point_id is null
             and rownum <= 1
             and drm.is_deleted = 'N';
        exception
          when no_data_found then
            vc_caluclate_val_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Valuation DR-ID';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        --- finding valuation price
        begin
          select dqd.price,
                 dqd.price_unit_id
            into vn_caluclate_val_price,
                 vc_cal_val_price_unit_id
            from dq_derivative_quotes        dq,
                 dqd_derivative_quote_detail dqd
           where dq.dq_id = dqd.dq_id
             and dqd.dr_id = vc_caluclate_val_dr_id
             and dq.dbd_id = dqd.dbd_id
             and dq.dbd_id = pc_dbd_id
             and dqd.available_price_id =
                 cur_avg_rows.val_available_price_id
             and dq.price_source_id = cur_avg_rows.val_price_source_id
             and dqd.price_unit_id = cur_avg_rows.val_price_unit_id
             and dq.trade_date = pd_trade_date
             and dq.is_deleted = 'N'
             and dqd.is_deleted = 'N';
        exception
          when no_data_found then
            vn_caluclate_val_price := 0;
            vc_caluclate_val_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Valuation Price';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        vn_total_val_price := 0;
        vn_count_val_qp    := 0;
        while qp_startdate <= qp_enddate
        loop
          ---- finding holidays
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              qp_startdate) then
            vc_holiday := 'Y';
          else
            vc_holiday := 'N';
          end if;
          if vc_holiday = 'N' then
            vn_total_val_price := vn_total_val_price +
                                  vn_caluclate_val_price;
            vn_count_val_qp    := vn_count_val_qp + 1;
          end if;
          qp_startdate := qp_startdate + 1;
        end loop;
        vn_total_trade_price     := (vn_total_set_price +
                                    vn_total_val_price) /
                                    (vn_count_set_qp + vn_count_val_qp);
        vn_trade_price_trade_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                              vn_total_trade_price,
                                                              vc_cal_val_price_unit_id,
                                                              cur_avg_rows.premium_discount_price_unit_id,
                                                              pd_trade_date,
                                                              cur_avg_rows.product_id);
        vn_paid_premium          := cur_avg_rows.premium_discount;
        vn_avg_contract_price    := (vn_trade_price_trade_cur +
                                    vn_paid_premium) * vc_cur_id_factor;
        vn_total_market_price    := vn_market_price_trade_cur +
                                    vn_mk_premium_trade_prm_cur *
                                    vc_cur_id_factor;
        if cur_avg_rows.trade_type = 'Buy' then
          vn_pnl_value_in_trade_cur := (vn_total_market_price -
                                       vn_avg_contract_price) *
                                       vn_qty_in_premium_wt_unit;
        else
          vn_pnl_value_in_trade_cur := (vn_avg_contract_price -
                                       vn_total_market_price) *
                                       vn_qty_in_premium_wt_unit;
        end if;
        vn_pnl_value_in_base_cur := vn_pnl_value_in_trade_cur *
                                    vn_premium_to_base_exch_rate;
        vn_net_pnl_in_base_cur   := vn_pnl_value_in_base_cur;
        if vn_net_pnl_in_base_cur is null then
          vn_net_pnl_in_base_cur := 0;
        end if;
        if vn_pnl_value_in_trade_cur is null then
          vn_pnl_value_in_trade_cur := 0;
        end if;
      elsif vc_period = 'After QP' then
        qp_startdate       := cur_avg_rows.average_from_date;
        qp_enddate         := cur_avg_rows.average_to_date;
        vn_total_set_price := 0;
        vn_count_set_qp    := 0;
        --- finding settlement DR_ID
        begin
          select drm.dr_id
            into vc_caluclate_set_dr_id
            from drm_derivative_master drm
           where drm.instrument_id = cur_avg_rows.underlying_instrument_id
             and drm.price_point_id = cur_avg_rows.price_point_id
             and rownum <= 1
             and drm.is_deleted = 'N';
        exception
          when no_data_found then
            vc_caluclate_set_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Settlement DR-ID';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        while qp_startdate <= qp_enddate
        loop
          ---- finding holidays
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              qp_startdate) then
            vc_holiday := 'Y';
          else
            vc_holiday := 'N';
          end if;
          --- Finding  settlement Price
          if vc_holiday = 'N' then
            begin
              select price,
                     price_unit_id
                into vn_caluclate_set_price,
                     vc_cal_set_price_unit_id
                from (select dqd.price,
                             dqd.price_unit_id,
                             rank() over(order by dq.trade_date desc nulls last) as td_rank
                        from dqd_derivative_quote_detail dqd,
                             dq_derivative_quotes        dq
                       where dqd.dq_id = dq.dq_id
                         and dqd.available_price_id =
                             cur_avg_rows.available_price_id
                         and dq.corporate_id = cur_avg_rows.corporate_id
                         and dq.trade_date <= qp_startdate
                         and dq.instrument_id =
                             cur_avg_rows.underlying_instrument_id
                         and dq.trade_date <= pd_trade_date
                         and dq.price_source_id =
                             cur_avg_rows.price_source_id
                         and dqd.dr_id = vc_caluclate_set_dr_id
                         and dqd.price_unit_id =
                             cur_avg_rows.val_price_unit_id
                         and dq.dbd_id = dqd.dbd_id
                         and dq.dbd_id = pc_dbd_id
                         and dq.is_deleted = 'N'
                         and dqd.is_deleted = 'N')
               where td_rank = 1;
            exception
              when no_data_found then
                vn_caluclate_set_price   := 0;
                vc_cal_set_price_unit_id := null;
              when others then
                vc_error_message := 'Missing Data for Settlement Price';
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_avg_price',
                                                                     'M2M-013',
                                                                     vc_error_message ||
                                                                     'Code:' ||
                                                                     sqlcode ||
                                                                     'Message:' ||
                                                                     sqlerrm,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
            end;
            vn_total_set_price := vn_total_set_price +
                                  vn_caluclate_set_price;
            vn_count_set_qp    := vn_count_set_qp + 1;
          end if;
          qp_startdate := qp_startdate + 1;
        end loop;
        vn_total_trade_price     := vn_total_set_price / vn_count_set_qp;
        vn_trade_price_trade_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                              vn_total_trade_price,
                                                              vc_cal_set_price_unit_id,
                                                              cur_avg_rows.premium_discount_price_unit_id,
                                                              pd_trade_date,
                                                              cur_avg_rows.product_id);
        vn_paid_premium          := cur_avg_rows.premium_discount;
        vn_avg_contract_price    := (vn_trade_price_trade_cur +
                                    vn_paid_premium) * vc_cur_id_factor;
        vn_total_market_price    := (vn_market_price_trade_cur +
                                    vn_mk_premium_trade_prm_cur) *
                                    vc_cur_id_factor;
        if cur_avg_rows.trade_type = 'Buy' then
          vn_pnl_value_in_trade_cur := (vn_total_market_price -
                                       vn_avg_contract_price) *
                                       vn_qty_in_premium_wt_unit;
        else
          vn_pnl_value_in_trade_cur := (vn_avg_contract_price -
                                       vn_total_market_price) *
                                       vn_qty_in_premium_wt_unit;
        end if;
        vn_pnl_value_in_base_cur := vn_pnl_value_in_trade_cur *
                                    vn_premium_to_base_exch_rate;
        vn_net_pnl_in_base_cur   := vn_pnl_value_in_base_cur;
        if vn_net_pnl_in_base_cur is null then
          vn_net_pnl_in_base_cur := 0;
        end if;
        if vn_pnl_value_in_trade_cur is null then
          vn_pnl_value_in_trade_cur := 0;
        end if;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quantity_unit_id,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         settlement_price,
         sett_price_unit_id,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         parent_instrument_type,
         --clearer_comm_in_base,
         --broker_comm_in_base,
         --clearer_exch_rate,
         --broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         average_from_date,
         average_to_date,
         market_premium,
         market_premium_price_unit_id,
         trade_main_cur_id,
         trade_main_cur_code,
         qp_period,
         avg_contract_price,
         avg_contract_price_unit_id,
         traded_on)
      values
        (cur_avg_rows.internal_derivative_ref_no,
         cur_avg_rows.derivative_ref_no,
         cur_avg_rows.eod_trade_date,
         cur_avg_rows.trade_date,
         cur_avg_rows.corporate_id,
         cur_avg_rows.corporate_name,
         cur_avg_rows.trader_id,
         cur_avg_rows.tradername,
         cur_avg_rows.profit_center_id,
         cur_avg_rows.profit_center_name,
         cur_avg_rows.profit_center_short_name,
         cur_avg_rows.dr_id,
         cur_avg_rows.instrument_id,
         cur_avg_rows.instrument_name,
         cur_avg_rows.instrument_symbol,
         cur_avg_rows.instrument_type_id,
         cur_avg_rows.instrument_type,
         cur_avg_rows.instrument_display_name,
         cur_avg_rows.instrument_sub_type_id,
         cur_avg_rows.instrument_sub_type,
         cur_avg_rows.derivative_def_id,
         cur_avg_rows.derivative_def_name,
         cur_avg_rows.traded_on,
         cur_avg_rows.product_id,
         cur_avg_rows.product_desc,
         cur_avg_rows.exchange_id,
         cur_avg_rows.exchange_name,
         cur_avg_rows.exchange_code,
         cur_avg_rows.lot_size,
         cur_avg_rows.lot_size_unit_id,
         cur_avg_rows.lot_size_qty_unit,
         cur_avg_rows.price_point_id,
         cur_avg_rows.price_point_name,
         cur_avg_rows.period_type_id,
         cur_avg_rows.period_type_name,
         cur_avg_rows.period_type_display_name,
         cur_avg_rows.period_month,
         cur_avg_rows.period_year,
         cur_avg_rows.period_date,
         cur_avg_rows.prompt_date,
         cur_avg_rows.dr_id_name,
         cur_avg_rows.trade_type,
         cur_avg_rows.deal_type_id,
         cur_avg_rows.deal_type_name,
         cur_avg_rows.deal_type_display_name,
         cur_avg_rows.is_multiple_leg_involved,
         cur_avg_rows.deal_category,
         cur_avg_rows.deal_sub_category,
         cur_avg_rows.strategy_id,
         cur_avg_rows.strategy_name,
         cur_avg_rows.description,
         cur_avg_rows.strategy_def_name,
         cur_avg_rows.groupid,
         cur_avg_rows.groupname,
         cur_avg_rows.purpose_id,
         cur_avg_rows.purpose_name,
         cur_avg_rows.purpose_display_name,
         cur_avg_rows.external_ref_no,
         cur_avg_rows.cp_profile_id,
         cur_avg_rows.cp_name,
         cur_avg_rows.master_contract_id,
         cur_avg_rows.broker_profile_id,
         cur_avg_rows.broker_name,
         cur_avg_rows.broker_account_id,
         cur_avg_rows.broker_account_name,
         cur_avg_rows.broker_account_type,
         cur_avg_rows.broker_comm_type_id,
         cur_avg_rows.broker_comm_amt,
         cur_avg_rows.broker_comm_cur_id,
         cur_avg_rows.broker_cur_code,
         cur_avg_rows.clearer_profile_id,
         cur_avg_rows.clearer_name,
         cur_avg_rows.clearer_account_id,
         cur_avg_rows.clearer_account_name,
         cur_avg_rows.clearer_account_type,
         cur_avg_rows.clearer_comm_type_id,
         cur_avg_rows.clearer_comm_amt,
         cur_avg_rows.clearer_comm_cur_id,
         cur_avg_rows.clearer_cur_code,
         cur_avg_rows.product,
         cur_avg_rows.productdesc,
         cur_avg_rows.quality_id,
         cur_avg_rows.quantity_unit_id,
         cur_avg_rows.total_lots,
         cur_avg_rows.total_quantity,
         cur_avg_rows.open_lots,
         cur_avg_rows.open_quantity,
         cur_avg_rows.exercised_lots,
         cur_avg_rows.exercised_quantity,
         cur_avg_rows.expired_lots,
         cur_avg_rows.expired_quantity,
         cur_avg_rows.trade_price_type_id,
         vn_total_trade_price, -- trade price
         vc_cal_set_price_unit_id, -- trade price unit id
         cur_avg_rows.premium_discount,
         cur_avg_rows.premium_discount_price_unit_id,
         cur_avg_rows.pd_cur_id,
         cur_avg_rows.pd_cur_code,
         cur_avg_rows.pd_weight,
         cur_avg_rows.pd_weight_unit_id,
         cur_avg_rows.pd_qty_unit,
         cur_avg_rows.premium_due_date,
         cur_avg_rows.nominee_profile_id,
         cur_avg_rows.nominee_name,
         cur_avg_rows.leg_no,
         cur_avg_rows.option_expiry_date,
         vn_market_price, --- market price
         vc_market_price_unit_id, --- Market price unit id
         cur_avg_rows.parent_int_derivative_ref_no,
         cur_avg_rows.market_location_country,
         cur_avg_rows.market_location_state,
         cur_avg_rows.market_location_city,
         cur_avg_rows.is_what_if,
         cur_avg_rows.payment_term,
         cur_avg_rows.payment_term,
         cur_avg_rows.payment_due_date,
         cur_avg_rows.closed_lots,
         cur_avg_rows.closed_quantity,
         cur_avg_rows.is_new_trade_date,
         cur_avg_rows.status,
         cur_avg_rows.settlement_cur_id,
         cur_avg_rows.settlement_cur_code,
         cur_avg_rows.in_out_at_money_status,
         cur_avg_rows.in_out_at_money_value,
         cur_avg_rows.exercise_date,
         cur_avg_rows.expiry_date,
         cur_avg_rows.group_cur_id,
         cur_avg_rows.group_cur_code,
         cur_avg_rows.group_qty_unit_id,
         cur_avg_rows.gcd_qty_unit,
         cur_avg_rows.base_qty_unit_id,
         cur_avg_rows.base_qty_unit,
         cur_avg_rows.parent_instrument_type,
         --vn_clearer_comm_in_base_cur,
         --vn_broker_comm_in_base_cur,
         --vn_clr_cur_to_base_exch_rate,
         --vn_brokr_cur_to_base_exch_rate,
         vn_premium_to_base_exch_rate,
         cur_avg_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_avg_rows.base_cur_id,
         cur_avg_rows.base_cur_code,
         cur_avg_rows.underlying_future_dr_id,
         cur_avg_rows.underlying_future_dr_id_name,
         cur_avg_rows.underlying_future_expiry_date,
         cur_avg_rows.underlying_future_quote_price,
         cur_avg_rows.underlying_fut_price_unit_id,
         cur_avg_rows.process_id,
         cur_avg_rows.average_from_date,
         cur_avg_rows.average_to_date,
         vn_market_premium, -- market premium
         vc_market_pre_price_unit_id, -- market premiun unit id
         vc_premium_main_cur_id,
         vc_premium_main_cur_code,
         vc_period,
         vn_avg_contract_price, ---contract price
         vc_cal_set_price_unit_id, -- contract price unit id
         cur_avg_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_avg_price',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_pnl_summary(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_user_id      varchar2
                                ----------------------------------------------------------------------------------
                                --        modification history
                                --        modified date                             :1-Mar-2012
                                --        modified by                               :
                                --        modify description                        :Dashboard changes
                                -----------------------------------------------------------------------------------
                                ) as
  begin
    --Dashboard changes 01-Mar-2012 old code comment start
    -- record currency - unrealized pnl
    /*insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Unrealized' sub_section,
             sum(cpd.pnl_value_in_home_currency) pnl,
             cpd.home_cur_id,
             cpd.home_currency
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'UNREALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.home_cur_id,
                cpd.home_currency;
    -- record currency - realized pnl
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Realized' sub_section,
             sum(cpd.pnl_value_in_home_currency) pnl,
             cpd.home_cur_id,
             cpd.home_currency
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'REALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.home_cur_id,
                cpd.home_currency;*/
    --Dashboard changes 01-Mar-2012 old code comment end            
    -- record currency - bank fees pnl
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Bank Fees' sub_section,
             sum(cpd.bank_charges_in_home_currency) pnl,
             cpd.home_cur_id,
             cpd.home_currency
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.home_cur_id,
                cpd.home_currency;
    --Dashboard changes 01-Mar-2012 start
    --inserting for currency PNL summary by instrument realized and unrealized
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       instrument_id,
       instrument_name)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Unrealized' sub_section,
             sum(cpd.pnl_in_corp_currency) pnl,
             cpd.corp_cur_id,
             cpd.corp_currency,
             cpd.currency_def_id,
             cpd.derivative_name
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'UNREALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.corp_cur_id,
                cpd.corp_currency,
                cpd.currency_def_id,
                cpd.derivative_name;
    --record currency - realized pnl                
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       instrument_id,
       instrument_name)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Realized' sub_section,
             sum(cpd.pnl_in_corp_currency) pnl,
             cpd.corp_cur_id,
             cpd.corp_currency,
             cpd.currency_def_id,
             cpd.derivative_name
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'REALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.corp_cur_id,
                cpd.corp_currency,
                cpd.currency_def_id,
                cpd.derivative_name;
    --Dashboard changes 01-Mar-2012 end  
    --Dashboard changes 01-Mar-2012 old code comment start         
    -- record derivatives - unrealized pnl
    /*insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Unrealized' as sub_section,
             'Futures' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Unrealized' as sub_section,
             'Forwards' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Unrealized' as sub_section,
             'Options' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Unrealized' as sub_section,
             'Average' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name;
    -- record derivatives - realized pnl
    insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Realized' as sub_section,
             'Futures' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Realized' as sub_section,
             'Forwards' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Realized' as sub_section,
             'Options' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Realized' as sub_section,
             'Average' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name;*/
    --Dashboard changes 01-Mar-2012 old code comment ends            
    --Dashboard changes 01-Mar-2012 start
    --derivative PNL summary by instrument realized and unrealized
    insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Unrealized' as sub_section,
             'Futures' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Unrealized' as sub_section,
             'Forwards' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Unrealized' as sub_section,
             'Options' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Unrealized' as sub_section,
             'Average' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name;
    -- record derivatives - realized pnl
    insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Realized' as sub_section,
             'Futures' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Realized' as sub_section,
             'Forwards' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Realized' as sub_section,
             'Options' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Realized' as sub_section,
             'Average' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name;
    --Dashboard changes 01-Mar-2012 end            
    -- record realized cost details
    insert into cps_cost_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       entity,
       cost_amt,
       cost_cur_id,
       cost_cur_code)
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_name,
             dpd.profit_center_short_name,
             'Commissions' main_section,
             'Broker Commission' sub_section,
             'Commissions' entity,
             sum(nvl(dpd.broker_comm_amt, 0) * nvl(dpd.broker_exch_rate, 1)),
             dpd.base_cur_id,
             dpd.base_cur_code
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and nvl(dpd.broker_comm_amt, 0) <> 0
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_name,
             dpd.profit_center_short_name,
             'Commissions' main_section,
             'Clearer Commission' sub_section,
             'Commissions' entity,
             sum(nvl(dpd.clearer_comm_amt, 0) *
                 nvl(dpd.clearer_exch_rate, 1)),
             dpd.base_cur_id,
             dpd.base_cur_code
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and nvl(dpd.clearer_comm_amt, 0) <> 0
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code
      union all
      select drt.corporate_id,
             akc.corporate_name,
             tdc.process_id,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             'Commissions' main_section,
             'Broker Commission' sub_section,
             'Commissions' entity,
             sum(nvl(nvl(drt.broker_comm_amt, 0) *
                     pkg_general.f_get_converted_currency_amt(drt.corporate_id,
                                                              drt.broker_comm_cur_id,
                                                              cm.cur_id,
                                                              tdc.trade_date,
                                                              1),
                     0)) pnl,
             cm.cur_id base_cur_id,
             cm.cur_code base_cur_code
        from dt_derivative_trade         drt,
             tdc_trade_date_closure      tdc,
             cpc_corporate_profit_center cpc,
             ak_corporate                akc,
             cm_currency_master          cm
       where drt.corporate_id = tdc.corporate_id
         and drt.corporate_id = akc.corporate_id
         and tdc.corporate_id = pc_corporate_id
         and drt.process_id = tdc.process_id
         and drt.profit_center_id = cpc.profit_center_id
         and akc.base_currency_name = cm.cur_code
         and tdc.process_id = pc_process_id
         and exists
       (select 1
                from dpd_derivative_pnl_daily dpd
               where dpd.process_id = pc_process_id
                 and dpd.derivative_ref_no = drt.derivative_ref_no
                 and dpd.is_new_trade = 'Y')
         and nvl(drt.broker_comm_amt, 0) <> 0
       group by drt.corporate_id,
                akc.corporate_name,
                tdc.process_id,
                cpc.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                cm.cur_id,
                cm.cur_code
      union all
      select drt.corporate_id,
             akc.corporate_name,
             tdc.process_id,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             'Commissions' main_section,
             'Clearer Commission' sub_section,
             'Commissions' entity,
             sum(nvl(nvl(drt.clearer_comm_amt, 0) *
                     pkg_general.f_get_converted_currency_amt(drt.corporate_id,
                                                              drt.clearer_comm_cur_id,
                                                              cm.cur_id,
                                                              tdc.trade_date,
                                                              1),
                     0)) pnl,
             cm.cur_id base_cur_id,
             cm.cur_code base_cur_code
        from dt_derivative_trade         drt,
             tdc_trade_date_closure      tdc,
             cpc_corporate_profit_center cpc,
             ak_corporate                akc,
             cm_currency_master          cm
       where drt.corporate_id = tdc.corporate_id
         and drt.corporate_id = akc.corporate_id
         and tdc.corporate_id = pc_corporate_id
         and drt.process_id = tdc.process_id
         and drt.profit_center_id = cpc.profit_center_id
         and akc.base_currency_name = cm.cur_code
         and tdc.process_id = pc_process_id
         and exists
       (select 1
                from dpd_derivative_pnl_daily dpd
               where dpd.process_id = pc_process_id
                 and dpd.derivative_ref_no = drt.derivative_ref_no
                 and dpd.is_new_trade = 'Y')
         and nvl(drt.clearer_comm_amt, 0) <> 0
       group by drt.corporate_id,
                akc.corporate_name,
                tdc.process_id,
                cpc.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                cm.cur_id,
                cm.cur_code;
  end;

  procedure sp_calc_daily_trade_pnl(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2
                                    ----------------------------------------------------------------------------------
                                    --        modification history
                                    --        modified date                             :1-Mar-2012
                                    --        modified by                               :
                                    --        modify description                        :Dashboard changes
                                    -----------------------------------------------------------------------------------                                    
                                    ) is
    vc_prev_process_id        varchar2(15);
    vd_prev_eod_date          date;
    vd_prev_eom_date          date;
    vd_acc_start_date         date;
    vc_prev_eom_ref_no        varchar2(15);
    vn_base_currency_decimals number;
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
  begin
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_process_id := null;
        vd_prev_eod_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select tdc.trade_date,
             tdc.process_id
        into vd_prev_eom_date,
             vc_prev_eom_ref_no
        from tdc_trade_date_closure tdc
       where tdc.trade_date = (select max(t.trade_date)
                                 from tdc_trade_date_closure t
                                where t.trade_date < pd_trade_date
                                  and t.corporate_id = pc_corporate_id
                                  and t.process = 'EOM')
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_ref_no := null;
        vd_prev_eom_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select start_date
        into vd_acc_start_date
        from cfy_corporate_financial_year@eka_appdb
       where pd_trade_date between start_date and end_date
         and corporateid = pc_corporate_id;
    exception
      when no_data_found then
        vd_acc_start_date := null;
    end;
    begin
      select nvl(decimals, 2)
        into vn_base_currency_decimals
        from ak_corporate       akc,
             cm_currency_master cm
       where akc.corporate_id = pc_corporate_id
         and akc.base_cur_id = cm.cur_id;
    exception
      when others then
        vn_base_currency_decimals := 2;
    end;
    --record unrealized currency contracts details-----------    
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when cps.process_id = vc_prev_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when cps.process_id = pc_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id in (vc_prev_process_id, pc_process_id)
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     sum(cps.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_process_id
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = prev_month_data.month_process_id
                 and cps.corporate_id = prev_month_data.corporate_id
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     sum(cps.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = vc_prev_eom_ref_no
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                main_section,
                sub_section,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                unrealized_section,
                is_pending_approval;
    -----record realized currency contracts details------------ 
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Currency' as main_section,
             'Realized' as sub_section,
             round(sum(prev_month) +
                   decode(pc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(pc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     0 prev_month,
                     sum(cps.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            cps.pnl
                           else
                            0
                         end)) today,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   tdc
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and cps.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                    --#43861
                    --and    tdc.trade_date > vd_prev_eod_date
                 and tdc.trade_date > vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     sum(cps.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     cps.pnl_cur_id,
                     cps.pnl_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   mec
               where cps.corporate_id = mec.corporate_id
                 and cps.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and cps.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit;
    -----record bank fees currency contracts details-------------   
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Currency' as main_section,
             'Bank Fees' as sub_section,
             round(sum(prev_month) +
                   decode(pc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(pc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Bank Fees' as sub_section,
                     0 prev_month,
                     sum(cps.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            cps.pnl
                           else
                            0
                         end)) today,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   tdc
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and cps.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                    --#43861
                    --and    tdc.trade_date > vd_prev_eod_date
                 and tdc.trade_date > vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Bank Fees'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Bank Fees' as sub_section,
                     sum(cps.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     cps.pnl_cur_id,
                     cps.pnl_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   mec
               where cps.corporate_id = mec.corporate_id
                 and cps.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and cps.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Bank Fees'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit;
    --Dashboard changes 01-Mar-2012 start
    --currency Unrelalized and realized PNL details by Instrument ID
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval,
             instrument_id,
             instrument_name
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when cps.process_id = vc_prev_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when cps.process_id = pc_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id in (vc_prev_process_id, pc_process_id)
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section,
                        cps.instrument_id,
                        cps.instrument_name
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     sum(cps.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_process_id
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = prev_month_data.month_process_id
                 and cps.corporate_id = prev_month_data.corporate_id
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section,
                        cps.instrument_id,
                        cps.instrument_name
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     sum(cps.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = vc_prev_eom_ref_no
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section,
                        cps.instrument_id,
                        cps.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                main_section,
                sub_section,
                t.base_cur_id,
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                unrealized_section,
                is_pending_approval,
                instrument_id,
                instrument_name;
    --record realized currency contracts details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Currency' as main_section,
             'Realized' as sub_section,
             round(sum(prev_month) +
                   decode(pc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(pc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval,
             instrument_id,
             instrument_name
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     0 prev_month,
                     sum(cps.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            cps.pnl
                           else
                            0
                         end)) today,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   tdc
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and cps.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.instrument_id,
                        cps.instrument_name
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     sum(cps.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     cps.pnl_cur_id,
                     cps.pnl_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   mec
               where cps.corporate_id = mec.corporate_id
                 and cps.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and cps.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and cps.instrument_id is not null
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.instrument_id,
                        cps.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id,
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                instrument_id,
                instrument_name;
    --Dashboard changes 01-Mar-2012 end  
    ------Record Futures Unrealized derivative details-------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t1.corporate_id,
             t1.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             ytd_pnl,
             previous_month_pnl,
             mtd_pnl,
             today_pnl,
             t1.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             exchange_id,
             exchange_name
        from (select corporate_id,
                     corporate_name,
                     pc_process_id,
                     profit_center_id,
                     profit_center_name,
                     profit_center_short_name,
                     main_section,
                     sub_section,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) ytd_pnl,
                     round(nvl(sum(prev_eom_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) previous_month_pnl,
                     decode(pc_process,
                            'EOM',
                            0,
                            round(nvl(sum(today_pnl), 0) -
                                  nvl(sum(prev_eom_pnl), 0),
                                  vn_base_currency_decimals)) mtd_pnl,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(decode(pc_process,
                                      'EOM',
                                      0,
                                      sum(prev_eod_pnl)),
                               0),
                           vn_base_currency_decimals) today_pnl,
                     base_cur_id,
                     base_cur_code,
                     unrealized_section,
                     is_pending_approval,
                     exchange_id,
                     exchange_name
                from (select dpd.corporate_id,
                             dpd.corporate_name,
                             dpd.profit_center_id,
                             dpd.profit_center_name,
                             profit_center_short_name,
                             dpd.main_section main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             0 prev_eom_pnl,
                             sum(case
                                   when dpd.process_id = vc_prev_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) prev_eod_pnl,
                             sum(case
                                   when dpd.process_id = pc_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) today_pnl,
                             dpd.pnl_cur_id base_cur_id,
                             dpd.pnl_cur_code base_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpd.exchange_id,
                             dpd.exchange_name
                        from dps_derivative_pnl_summary dpd
                       where dpd.corporate_id = pc_corporate_id
                         and dpd.process_id in
                             (pc_process_id, vc_prev_process_id)
                         and dpd.main_section = 'Futures'
                         and dpd.sub_section = 'Unrealized'
                         and dpd.entity = 'Futures'
                       group by dpd.corporate_id,
                                dpd.corporate_name,
                                dpd.profit_center_id,
                                dpd.profit_center_name,
                                profit_center_short_name,
                                dpd.main_section,
                                dpd.pnl_cur_id,
                                dpd.pnl_cur_code,
                                dpd.exchange_id,
                                dpd.exchange_name
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             sum(dpm.pnl) prev_yearend_pnl,
                             0 prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id exchange_id,
                             dpm.exchange_name exchange_name
                        from dps_derivative_pnl_summary dpm,
                             (select mec1.corporate_id,
                                     max(mec1.trade_date) prev_year_month_end,
                                     substr(max(case
                                                  when mec1.process_id is not null then
                                                   to_char(mec1.trade_date,
                                                           'yyyymmddhh24miss') ||
                                                   mec1.process_id
                                                end),
                                            15) month_process_id
                                from tdc_trade_date_closure mec1
                               where mec1.corporate_id = pc_corporate_id
                                 and mec1.process = 'EOM'
                                 and mec1.trade_date <=
                                     (select max(end_date)
                                        from cfy_corporate_financial_year@eka_appdb
                                       where end_date < vd_acc_start_date
                                         and corporateid = pc_corporate_id)
                               group by mec1.corporate_id) prev_month_data
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id =
                             prev_month_data.month_process_id
                         and dpm.corporate_id = prev_month_data.corporate_id
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name,
                                dpm.main_section
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             sum(dpm.pnl) prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id,
                             dpm.exchange_name
                        from dps_derivative_pnl_summary dpm
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id = vc_prev_eom_ref_no
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.main_section,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name) t
               group by t.corporate_id,
                        t.corporate_name,
                        t.profit_center_id,
                        t.profit_center_name,
                        t.profit_center_short_name,
                        t.main_section,
                        t.sub_section,
                        base_cur_id,
                        unrealized_section,
                        is_pending_approval,
                        base_cur_code,
                        t.exchange_id,
                        t.exchange_name) t1,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t1.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+);
    ------ record forwords unrealized derivative details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Forwards' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ------ record options unrealized derivative details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Options' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ------ record Avarage unrealized derivative details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Average' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ---record futures realized details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (
              -- get today pnl and month todate pnl
              select dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.profit_center_id,
                      dpd.profit_center_name,
                      profit_center_short_name,
                      dpd.main_section,
                      'Realized' as sub_section,
                      sum(case
                            when dpd.process_id = pc_process_id then
                             nvl(dpd.pnl, 0)
                            else
                             0
                          end) today_pnl,
                      sum(nvl(dpd.pnl, 0)) mtd_pnl,
                      0 previous_month_pnl,
                      dpd.pnl_cur_id,
                      dpd.pnl_cur_code,
                      'Futures' unrealized_section,
                      'N' is_pending_approval,
                      dpd.exchange_id,
                      dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                      tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Futures'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Futures'
               group by dpd.corporate_id,
                         dpd.corporate_name,
                         dpd.profit_center_id,
                         dpd.profit_center_name,
                         profit_center_short_name,
                         dpd.main_section,
                         dpd.pnl_cur_id,
                         dpd.pnl_cur_code,
                         dpd.exchange_id,
                         dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Futures' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Futures'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Futures'
                 and dpm.process_id = tdc.process_id
                    --and    tdc.trade_date = vd_prev_eom_date
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ---record forwords realized details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (
              -- get today pnl and month todate pnl
              select dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.profit_center_id,
                      dpd.profit_center_name,
                      profit_center_short_name,
                      dpd.main_section,
                      'Realized' as sub_section,
                      sum(case
                            when dpd.process_id = pc_process_id then
                             nvl(dpd.pnl, 0)
                            else
                             0
                          end) today_pnl,
                      sum(nvl(dpd.pnl, 0)) mtd_pnl,
                      0 previous_month_pnl,
                      dpd.pnl_cur_id,
                      dpd.pnl_cur_code,
                      'Forwards' unrealized_section,
                      'N' is_pending_approval,
                      dpd.exchange_id,
                      dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                      tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                         dpd.corporate_name,
                         dpd.profit_center_id,
                         dpd.profit_center_name,
                         profit_center_short_name,
                         dpd.main_section,
                         dpd.pnl_cur_id,
                         dpd.pnl_cur_code,
                         dpd.exchange_id,
                         dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Forwards'
                 and dpm.process_id = tdc.process_id
                    --and    tdc.trade_date = vd_prev_eom_date
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    -------record options realized details------------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                    --and    dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Options'
                    --and    tdc.trade_date between vd_acc_start_date and prev_month_data.prev_month_end
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    -------record Avarage realized details------------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                    --and    dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Average'
                    --and    tdc.trade_date between vd_acc_start_date and prev_month_data.prev_month_end
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    --Dashboard changes 01-Mar-2012 start
    --derivatives Unrelalized and realized PNL details by Instrument ID
    --Record Futures Unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t1.corporate_id,
             t1.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             ytd_pnl,
             previous_month_pnl,
             mtd_pnl,
             today_pnl,
             t1.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             exchange_id,
             exchange_name,
             instrument_id,
             instrument_name
        from (select corporate_id,
                     corporate_name,
                     pc_process_id,
                     profit_center_id,
                     profit_center_name,
                     profit_center_short_name,
                     main_section,
                     sub_section,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) ytd_pnl,
                     round(nvl(sum(prev_eom_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) previous_month_pnl,
                     decode(pc_process,
                            'EOM',
                            0,
                            round(nvl(sum(today_pnl), 0) -
                                  nvl(sum(prev_eom_pnl), 0),
                                  vn_base_currency_decimals)) mtd_pnl,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(decode(pc_process,
                                      'EOM',
                                      0,
                                      sum(prev_eod_pnl)),
                               0),
                           vn_base_currency_decimals) today_pnl,
                     base_cur_id,
                     base_cur_code,
                     unrealized_section,
                     is_pending_approval,
                     exchange_id,
                     exchange_name,
                     instrument_id,
                     instrument_name
                from (select dpd.corporate_id,
                             dpd.corporate_name,
                             dpd.profit_center_id,
                             dpd.profit_center_name,
                             profit_center_short_name,
                             dpd.main_section main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             0 prev_eom_pnl,
                             sum(case
                                   when dpd.process_id = vc_prev_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) prev_eod_pnl,
                             sum(case
                                   when dpd.process_id = pc_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) today_pnl,
                             dpd.pnl_cur_id base_cur_id,
                             dpd.pnl_cur_code base_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpd.exchange_id,
                             dpd.exchange_name,
                             dpd.instrument_id,
                             dpd.instrument_name
                        from dps_derivative_pnl_summary dpd
                       where dpd.corporate_id = pc_corporate_id
                         and dpd.process_id in
                             (pc_process_id, vc_prev_process_id)
                         and dpd.main_section = 'Futures'
                         and dpd.sub_section = 'Unrealized'
                         and dpd.entity = 'Futures'
                       group by dpd.corporate_id,
                                dpd.corporate_name,
                                dpd.profit_center_id,
                                dpd.profit_center_name,
                                profit_center_short_name,
                                dpd.main_section,
                                dpd.pnl_cur_id,
                                dpd.pnl_cur_code,
                                dpd.exchange_id,
                                dpd.exchange_name,
                                dpd.instrument_id,
                                dpd.instrument_name
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             sum(dpm.pnl) prev_yearend_pnl,
                             0 prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id exchange_id,
                             dpm.exchange_name exchange_name,
                             dpm.instrument_id,
                             dpm.instrument_name
                        from dps_derivative_pnl_summary dpm,
                             (select mec1.corporate_id,
                                     max(mec1.trade_date) prev_year_month_end,
                                     substr(max(case
                                                  when mec1.process_id is not null then
                                                   to_char(mec1.trade_date,
                                                           'yyyymmddhh24miss') ||
                                                   mec1.process_id
                                                end),
                                            15) month_process_id
                                from tdc_trade_date_closure mec1
                               where mec1.corporate_id = pc_corporate_id
                                 and mec1.process = 'EOM'
                                 and mec1.trade_date <=
                                     (select max(end_date)
                                        from cfy_corporate_financial_year@eka_appdb
                                       where end_date < vd_acc_start_date
                                         and corporateid = pc_corporate_id)
                               group by mec1.corporate_id) prev_month_data
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id =
                             prev_month_data.month_process_id
                         and dpm.corporate_id = prev_month_data.corporate_id
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name,
                                dpm.main_section,
                                dpm.instrument_id,
                                dpm.instrument_name
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             sum(dpm.pnl) prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id,
                             dpm.exchange_name,
                             dpm.instrument_id,
                             dpm.instrument_name
                        from dps_derivative_pnl_summary dpm
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id = vc_prev_eom_ref_no
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.main_section,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name,
                                dpm.instrument_id,
                                dpm.instrument_name) t
               group by t.corporate_id,
                        t.corporate_name,
                        t.profit_center_id,
                        t.profit_center_name,
                        t.profit_center_short_name,
                        t.main_section,
                        t.sub_section,
                        base_cur_id,
                        unrealized_section,
                        is_pending_approval,
                        base_cur_code,
                        t.exchange_id,
                        t.exchange_name,
                        t.instrument_id,
                        t.instrument_name) t1,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t1.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+);
    --record forwords unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Forwards' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record options unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Options' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record Avarage unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Average' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record futures realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Futures' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Futures'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Futures'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Futures' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Futures'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Futures'
                 and dpm.process_id = tdc.process_id
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record forwords realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (
              -- get today pnl and month todate pnl
              select dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.profit_center_id,
                      dpd.profit_center_name,
                      profit_center_short_name,
                      dpd.main_section,
                      'Realized' as sub_section,
                      sum(case
                            when dpd.process_id = pc_process_id then
                             nvl(dpd.pnl, 0)
                            else
                             0
                          end) today_pnl,
                      sum(nvl(dpd.pnl, 0)) mtd_pnl,
                      0 previous_month_pnl,
                      dpd.pnl_cur_id,
                      dpd.pnl_cur_code,
                      'Forwards' unrealized_section,
                      'N' is_pending_approval,
                      dpd.exchange_id,
                      dpd.exchange_name,
                      dpd.instrument_id,
                      dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                      tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                         dpd.corporate_name,
                         dpd.profit_center_id,
                         dpd.profit_center_name,
                         profit_center_short_name,
                         dpd.main_section,
                         dpd.pnl_cur_id,
                         dpd.pnl_cur_code,
                         dpd.exchange_id,
                         dpd.exchange_name,
                         dpd.instrument_id,
                         dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Forwards'
                 and dpm.process_id = tdc.process_id
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record options realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Options'
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record Avarage realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Average'
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --Dashboard changes 01-Mar-2012 end            
    ------ records broker/clearer commissions daily
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select corporate_id,
             corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             base_cur_id,
             base_cur_code,
             group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             base_qty_unit_id,
             base_qty_unit,
             'Commission' unrealized_section,
             'N' is_pending_approval,
             'NA' exchange_id,
             '' exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     dpd.profit_center_short_name,
                     dpd.main_section,
                     dpd.sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            dpd.cost_amt
                           else
                            0
                         end) today_pnl,
                     sum(dpd.cost_amt) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.cost_cur_id base_cur_id,
                     dpd.cost_cur_code base_cur_code,
                     null group_id,
                     null group_name,
                     null group_cur_id,
                     null group_cur_code,
                     null group_qty_unit_id,
                     null group_qty_unit,
                     null base_qty_unit_id,
                     null base_qty_unit,
                     'Commissions' unrealized_section,
                     'N' is_pending_approval,
                     null exchange_id,
                     null exchange_name
                from cps_cost_pnl_summary   dpd,
                     tdc_trade_date_closure tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.process = 'EOD'
                 and dpd.main_section = 'Commissions'
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        dpd.profit_center_short_name,
                        dpd.main_section,
                        dpd.sub_section,
                        dpd.cost_cur_id,
                        dpd.cost_cur_code
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     dpm.sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(dpm.cost_amt) previous_month_pnl,
                     dpm.cost_cur_id base_cur_id,
                     dpm.cost_cur_code base_cur_code,
                     null group_id,
                     null group_name,
                     null group_cur_id,
                     null group_cur_code,
                     null group_qty_unit_id,
                     null group_qty_unit,
                     null base_qty_unit_id,
                     null base_qty_unit,
                     'Commissions' unrealized_section,
                     'N' is_pending_approval,
                     null exchange_id,
                     null exchange_name
                from cps_cost_pnl_summary   dpm,
                     tdc_trade_date_closure tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = tdc.process_id
                 and tdc.trade_date = vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.sub_section,
                        dpm.cost_cur_id,
                        dpm.cost_cur_code) t
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                base_cur_id,
                base_cur_code,
                group_id,
                group_name,
                group_cur_id,
                group_cur_code,
                group_qty_unit_id,
                group_qty_unit,
                base_qty_unit_id,
                base_qty_unit,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_daily_trade_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_update_new_trade(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_process      varchar2) as
    vc_prev_process_id varchar2(15);
  begin
    begin
      select t1.process_id
        into vc_prev_process_id
        from tdc_trade_date_closure t1
       where t1.corporate_id = pc_corporate_id
         and t1.process = pc_process
         and t1.trade_date =
             (select max(t2.trade_date)
                from tdc_trade_date_closure t2
               where t2.corporate_id = pc_corporate_id
                 and t2.trade_date < pd_trade_date
                 and t2.process = pc_process);
    end;
    update dt_derivative_trade dt
       set dt.is_new_trade = 'Y'
     where dt.process_id = pc_process_id
       and dt.corporate_id = pc_corporate_id
       and not exists
     (select *
              from dt_derivative_trade dt_prev
             where dt_prev.internal_derivative_ref_no =
                   dt.internal_derivative_ref_no
               and dt_prev.process_id = vc_prev_process_id
               and dt_prev.corporate_id = pc_corporate_id);
  end;

  procedure sp_calc_future_unreal_pnl_attr(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2
                                           --------------------------------------------------------------------------------------------------------------------------
                                           --        procedure name                            : sp_calc_future_unreal_pnl_attr
                                           --        author                                    : AGS REPORTS TEAM
                                           --        created date                              : 11th Jan 2011
                                           --        purpose                                   : populate cdc unrealized pnl
                                           --        parameters
                                           --        pc_corporate_id                           : corporate id
                                           --        pd_trade_date                             : eod date id
                                           --        pc_user_id                                : user id
                                           --        pc_process                                : process
                                           --        modification history
                                           --        modified date                             :
                                           --        modified by                               :
                                           --        modify description                        :
                                           --------------------------------------------------------------------------------------------------------------------------
                                           ) is
    vobj_error_log             tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count         number := 1;
    vn_m2m_cur_decimals        number;
    vn_cont_price_cur_decimals number;
    vn_count                   number;
    vc_process                 varchar2(15);
    -- New Contract
    cursor unreal_pnl_attr is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'New' attribution_main_type,
             'New' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                1.1
               when dpd.trade_type = 'Sell' then
                1.2
               else
                1.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             null m2m_price_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             dpd.trade_price_cur_code || '/' || dpd.trade_price_weight_unit curr_eod_price_unit,
             dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'NEW_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    ---Modified Contract [Quantity]
    cursor unreal_pnl_attr_mcq is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Contract' attribution_main_type,
             'Quantity' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                2.1
               when dpd.trade_type = 'Sell' then
                2.2
               else
                2.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price_in_base prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.open_quantity_in_base total_qty,
             dpd.prev_open_quantity_in_base prev_total_qty,
             dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.open_quantity_in_base <> dpd.prev_open_quantity_in_base --Modification is for Quantity only
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    ---Pricing.....TODO:
    cursor unreal_pnl_attr_price is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Contract' attribution_main_type,
             'Price' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                3.1
               when dpd.trade_type = 'Sell' then
                3.2
               else
                3.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price_in_base prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             --dpd.trade_price_in_base contract_price_in_val_unit,
             --dpd.prev_trade_price_in_base prev_contract_price_in_val,
             dpd.trade_price contract_price_in_val_unit,
             dpd.prev_trade_price prev_contract_price_in_val,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
            --  AND    dpd.trade_price_in_base <> dpd.prev_trade_price_in_base ---Change in Price only
         and dpd.trade_price <> dpd.prev_trade_price
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    ---Settlement Prices....TODO:
    cursor unreal_pnl_attr_sett_prices is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Market Data' attribution_main_type,
             'Settlement Price' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                6.1
               when dpd.trade_type = 'Sell' then
                6.2
               else
                6.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price_in_base prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             -- dpd.sett_price_in_base net_m2m_price,
             dpd.settlement_price   net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             --dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_settlement_price prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.clearer_comm_in_base clearer_comm_amt,
             dpd.prev_clearer_comm_amt_in_base prev_clearer_comm_amt,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
            --AND    dpd.sett_price_in_base <> dpd.prev_sett_price_in_base --Change in Settlement Prices only
         and dpd.settlement_price <> dpd.prev_settlement_price
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    --ends here
    -- Cancelled Contract
    cursor unreal_pnl_attr_cancelled is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Contract' attribution_main_type,
             'Cancellation' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                7.1
               when dpd.trade_type = 'Sell' then
                7.2
               else
                7.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             null m2m_price_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             dpd.trade_price_cur_code || '/' || dpd.trade_price_weight_unit curr_eod_price_unit,
             (-1) * dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status in ('NEW_TRADE', 'EXISTING_TRADE')
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.process_id = gvc_previous_process_id --TODO: Need to check if setting value
         and dpd.corporate_id = pc_corporate_id
         and not exists (select *
                from dpd_derivative_pnl_daily dt
               where dt.internal_derivative_ref_no =
                     dpd.internal_derivative_ref_no
                 and dt.process_id = pc_process_id);
    ---
    -- Realized Contract
    cursor unreal_pnl_attr_real is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Realization' attribution_main_type,
             'Realization' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                8.1
               when dpd.trade_type = 'Sell' then
                8.2
               else
                8.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             null m2m_price_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             dpd.trade_price_cur_code || '/' || dpd.trade_price_weight_unit curr_eod_price_unit,
             (-1) * dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status in ('NEW_TRADE', 'EXISTING_TRADE')
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.process_id = gvc_previous_process_id --TODO: Need to check if setting value
         and dpd.corporate_id = pc_corporate_id
         and exists (select *
                from dpd_derivative_pnl_daily dt
               where dt.internal_derivative_ref_no =
                     dpd.internal_derivative_ref_no
                 and dt.process_id = pc_process_id
                 and dt.status in ('Settled', 'Verified',
                      'Expired', 'Exercised')
                 and dt.pnl_type in ('Realized'));
    cursor unreal_pnl_fx_att is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Market Data' attribution_main_type,
             'Fx Rates Entity' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                9.1
               when dpd.trade_type = 'Sell' then
                9.2
               else
                9.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.trade_price contract_price_in_val_unit,
             dpd.prev_trade_price prev_contract_price_in_val,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate,
             dpd.trade_cur_to_base_exch_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.trade_price_in_base <> dpd.prev_trade_price_in_base ---Change in Price only
         and dpd.trade_cur_to_base_exch_rate <>
             dpd.prev_trade_cur_to_base_rate
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    cursor unreal_pnl_fx_mkt_att is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Market Data' attribution_main_type,
             'Fx Rates Market' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                10.1
               when dpd.trade_type = 'Sell' then
                10.2
               else
                10.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.settlement_price,
             dpd.prev_settlement_price,
             dpd.trade_price contract_price_in_val_unit,
             dpd.prev_trade_price prev_contract_price_in_val,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate,
             dpd.trade_cur_to_base_exch_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.sett_price_in_base <> dpd.prev_sett_price_in_base ---Change in Price only
         and dpd.trade_cur_to_base_exch_rate <>
             dpd.prev_trade_cur_to_base_rate
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    -- variable declaration
    vn_pnlc_due_to_attr      number := 0;
    vn_pnlc_due_to_qty       number := 0;
    vn_pnlc_due_to_price     number := 0;
    vn_pnlc_due_to_estimates number := 0;
    vn_other_pnlc_in_base    number := 0;
    vn_net_pnlc_in_base      number := 0;
  begin
    for unreal_pnl_attr_rows in unreal_pnl_attr
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         pnlc_due_to_attr,
         m2m_price_unit_id,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_rows.corporate_id,
         unreal_pnl_attr_rows.corporate_name,
         unreal_pnl_attr_rows.attribution_type,
         unreal_pnl_attr_rows.attribution_master_type,
         unreal_pnl_attr_rows.attribution_main_type,
         unreal_pnl_attr_rows.attribution_sub_type,
         unreal_pnl_attr_rows.attribution_order,
         unreal_pnl_attr_rows.internal_contract_ref_no,
         unreal_pnl_attr_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_rows.contract_ref_no,
         unreal_pnl_attr_rows.item_no,
         unreal_pnl_attr_rows.contract_type,
         unreal_pnl_attr_rows.item_qty,
         unreal_pnl_attr_rows.qty_unit_id,
         unreal_pnl_attr_rows.curr_eod_qty,
         unreal_pnl_attr_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_rows.curr_eod_contract_price,
         unreal_pnl_attr_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_rows.net_pnlc_in_base,
         unreal_pnl_attr_rows.m2m_price_unit_id,
         unreal_pnl_attr_rows.net_pnlc_in_base);
    end loop;
    --Loop 2
    for unreal_pnl_attr_mcq_rows in unreal_pnl_attr_mcq
    loop
      --Calculation----
      --TODO: Check all the possible conversion.......
      if unreal_pnl_attr_mcq_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_mcq_rows.curr_eod_qty -
                               nvl(unreal_pnl_attr_mcq_rows.prev_eod_qty,
                                     0)) *
                               (unreal_pnl_attr_mcq_rows.prev_net_m2m_price -
                               unreal_pnl_attr_mcq_rows.prev_eod_contract_price));
      elsif unreal_pnl_attr_mcq_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_mcq_rows.curr_eod_qty -
                               nvl(unreal_pnl_attr_mcq_rows.prev_eod_qty,
                                     0)) *
                               (unreal_pnl_attr_mcq_rows.prev_eod_contract_price -
                               unreal_pnl_attr_mcq_rows.prev_net_m2m_price));
      end if;
      --vn_pnlc_due_to_attr   := vn_pnlc_due_to_qty;
      vn_other_pnlc_in_base := unreal_pnl_attr_mcq_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      --Ends here---
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_mcq_rows.corporate_id,
         unreal_pnl_attr_mcq_rows.corporate_name,
         unreal_pnl_attr_mcq_rows.attribution_type,
         unreal_pnl_attr_mcq_rows.attribution_master_type,
         unreal_pnl_attr_mcq_rows.attribution_main_type,
         unreal_pnl_attr_mcq_rows.attribution_sub_type,
         unreal_pnl_attr_mcq_rows.attribution_order,
         unreal_pnl_attr_mcq_rows.internal_contract_ref_no,
         unreal_pnl_attr_mcq_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_mcq_rows.contract_ref_no,
         unreal_pnl_attr_mcq_rows.item_no,
         unreal_pnl_attr_mcq_rows.contract_type,
         unreal_pnl_attr_mcq_rows.item_qty,
         unreal_pnl_attr_mcq_rows.qty_unit_id,
         unreal_pnl_attr_mcq_rows.curr_eod_qty,
         unreal_pnl_attr_mcq_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_mcq_rows.prev_eod_qty,
         unreal_pnl_attr_mcq_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_mcq_rows.curr_eod_contract_price,
         unreal_pnl_attr_mcq_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_mcq_rows.prev_eod_contract_price,
         unreal_pnl_attr_mcq_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_mcq_rows.md_id,
         unreal_pnl_attr_mcq_rows.prev_md_id,
         unreal_pnl_attr_mcq_rows.net_m2m_price,
         unreal_pnl_attr_mcq_rows.m2m_price_unit_id,
         unreal_pnl_attr_mcq_rows.prev_net_m2m_price,
         unreal_pnl_attr_mcq_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_mcq_rows.net_pnlc_in_base);
    end loop;
    --Ends here
    --Loop 3
    for unreal_pnl_attr_price_rows in unreal_pnl_attr_price
    loop
      --Calculation----
      --TODO: Check all the possible conversion.......
      --vn_pnlc_due_to_qty    := 0;
      if unreal_pnl_attr_price_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_price_rows.prev_contract_price_in_val *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate) -
                               (nvl(unreal_pnl_attr_price_rows.contract_price_in_val_unit,
                                     0) *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate)) *
                               (nvl(unreal_pnl_attr_price_rows.prev_eod_qty,
                                    0));
      elsif unreal_pnl_attr_price_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_price_rows.contract_price_in_val_unit *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate) -
                               (nvl(unreal_pnl_attr_price_rows.prev_contract_price_in_val,
                                     0) *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate)) *
                               (nvl(unreal_pnl_attr_price_rows.prev_eod_qty,
                                    0));
      end if;
      --vn_pnlc_due_to_attr   := vn_pnlc_due_to_price;
      vn_other_pnlc_in_base := unreal_pnl_attr_price_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      --Ends here---
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_price_rows.corporate_id,
         unreal_pnl_attr_price_rows.corporate_name,
         unreal_pnl_attr_price_rows.attribution_type,
         unreal_pnl_attr_price_rows.attribution_master_type,
         unreal_pnl_attr_price_rows.attribution_main_type,
         unreal_pnl_attr_price_rows.attribution_sub_type,
         unreal_pnl_attr_price_rows.attribution_order,
         unreal_pnl_attr_price_rows.internal_contract_ref_no,
         unreal_pnl_attr_price_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_price_rows.contract_ref_no,
         unreal_pnl_attr_price_rows.item_no,
         unreal_pnl_attr_price_rows.contract_type,
         unreal_pnl_attr_price_rows.item_qty,
         unreal_pnl_attr_price_rows.qty_unit_id,
         unreal_pnl_attr_price_rows.curr_eod_qty,
         unreal_pnl_attr_price_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_price_rows.prev_eod_qty,
         unreal_pnl_attr_price_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_price_rows.curr_eod_contract_price,
         unreal_pnl_attr_price_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_price_rows.prev_eod_contract_price,
         unreal_pnl_attr_price_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_price_rows.md_id,
         unreal_pnl_attr_price_rows.prev_md_id,
         unreal_pnl_attr_price_rows.net_m2m_price,
         unreal_pnl_attr_price_rows.m2m_price_unit_id,
         unreal_pnl_attr_price_rows.prev_net_m2m_price,
         unreal_pnl_attr_price_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_price_rows.net_pnlc_in_base);
    end loop;
    --Ends here
    --Loop 6
    for unreal_pnl_attr_sp_rows in unreal_pnl_attr_sett_prices
    loop
      --Calculation----
      --TODO: Check all the possible conversion.......
      --vn_pnlc_due_to_qty    := 0;
      if unreal_pnl_attr_sp_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_sp_rows.net_m2m_price -
                               nvl(unreal_pnl_attr_sp_rows.prev_net_m2m_price,
                                     0)) *
                               unreal_pnl_attr_sp_rows.prev_trade_cur_to_base_rate) *
                               (nvl(unreal_pnl_attr_sp_rows.prev_eod_qty, 0));
      elsif unreal_pnl_attr_sp_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_sp_rows.prev_net_m2m_price -
                               nvl(unreal_pnl_attr_sp_rows.net_m2m_price,
                                     0)) *
                               unreal_pnl_attr_sp_rows.prev_trade_cur_to_base_rate) *
                               (nvl(unreal_pnl_attr_sp_rows.prev_eod_qty, 0));
      end if;
      --vn_pnlc_due_to_attr   := vn_pnlc_due_to_price;
      vn_other_pnlc_in_base := unreal_pnl_attr_sp_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      --Ends here---
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_sp_rows.corporate_id,
         unreal_pnl_attr_sp_rows.corporate_name,
         unreal_pnl_attr_sp_rows.attribution_type,
         unreal_pnl_attr_sp_rows.attribution_master_type,
         unreal_pnl_attr_sp_rows.attribution_main_type,
         unreal_pnl_attr_sp_rows.attribution_sub_type,
         unreal_pnl_attr_sp_rows.attribution_order,
         unreal_pnl_attr_sp_rows.internal_contract_ref_no,
         unreal_pnl_attr_sp_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_sp_rows.contract_ref_no,
         unreal_pnl_attr_sp_rows.item_no,
         unreal_pnl_attr_sp_rows.contract_type,
         unreal_pnl_attr_sp_rows.item_qty,
         unreal_pnl_attr_sp_rows.qty_unit_id,
         unreal_pnl_attr_sp_rows.curr_eod_qty,
         unreal_pnl_attr_sp_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_sp_rows.prev_eod_qty,
         unreal_pnl_attr_sp_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_sp_rows.curr_eod_contract_price,
         unreal_pnl_attr_sp_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_sp_rows.prev_eod_contract_price,
         unreal_pnl_attr_sp_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_sp_rows.md_id,
         unreal_pnl_attr_sp_rows.prev_md_id,
         unreal_pnl_attr_sp_rows.net_m2m_price,
         unreal_pnl_attr_sp_rows.m2m_price_unit_id,
         unreal_pnl_attr_sp_rows.prev_net_m2m_price,
         unreal_pnl_attr_sp_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_sp_rows.net_pnlc_in_base);
    end loop;
    --Ends here
    --Loop --7
    for unreal_pnl_attr_cancelled_rows in unreal_pnl_attr_cancelled
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         pnlc_due_to_attr,
         m2m_price_unit_id,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_cancelled_rows.corporate_id,
         unreal_pnl_attr_cancelled_rows.corporate_name,
         unreal_pnl_attr_cancelled_rows.attribution_type,
         unreal_pnl_attr_cancelled_rows.attribution_master_type,
         unreal_pnl_attr_cancelled_rows.attribution_main_type,
         unreal_pnl_attr_cancelled_rows.attribution_sub_type,
         unreal_pnl_attr_cancelled_rows.attribution_order,
         unreal_pnl_attr_cancelled_rows.internal_contract_ref_no,
         unreal_pnl_attr_cancelled_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_cancelled_rows.contract_ref_no,
         unreal_pnl_attr_cancelled_rows.item_no,
         unreal_pnl_attr_cancelled_rows.contract_type,
         unreal_pnl_attr_cancelled_rows.item_qty,
         unreal_pnl_attr_cancelled_rows.qty_unit_id,
         unreal_pnl_attr_cancelled_rows.curr_eod_qty,
         unreal_pnl_attr_cancelled_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_cancelled_rows.curr_eod_contract_price,
         unreal_pnl_attr_cancelled_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_cancelled_rows.net_pnlc_in_base,
         unreal_pnl_attr_cancelled_rows.m2m_price_unit_id,
         unreal_pnl_attr_cancelled_rows.net_pnlc_in_base);
    end loop;
    --Loop 8 Realization--
    for unreal_pnl_attr_real_rows in unreal_pnl_attr_real
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         pnlc_due_to_attr,
         m2m_price_unit_id,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_real_rows.corporate_id,
         unreal_pnl_attr_real_rows.corporate_name,
         unreal_pnl_attr_real_rows.attribution_type,
         unreal_pnl_attr_real_rows.attribution_master_type,
         unreal_pnl_attr_real_rows.attribution_main_type,
         unreal_pnl_attr_real_rows.attribution_sub_type,
         unreal_pnl_attr_real_rows.attribution_order,
         unreal_pnl_attr_real_rows.internal_contract_ref_no,
         unreal_pnl_attr_real_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_real_rows.contract_ref_no,
         unreal_pnl_attr_real_rows.item_no,
         unreal_pnl_attr_real_rows.contract_type,
         unreal_pnl_attr_real_rows.item_qty,
         unreal_pnl_attr_real_rows.qty_unit_id,
         unreal_pnl_attr_real_rows.curr_eod_qty,
         unreal_pnl_attr_real_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_real_rows.curr_eod_contract_price,
         unreal_pnl_attr_real_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_real_rows.net_pnlc_in_base,
         unreal_pnl_attr_real_rows.m2m_price_unit_id,
         unreal_pnl_attr_real_rows.net_pnlc_in_base);
    end loop;
    for unreal_pnl_fx_att_rows in unreal_pnl_fx_att
    loop
      if unreal_pnl_fx_att_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_att_rows.prev_trade_cur_to_base_rate -
                               unreal_pnl_fx_att_rows.trade_cur_to_base_exch_rate) *
                               (unreal_pnl_fx_att_rows.prev_contract_price_in_val) *
                               (nvl(unreal_pnl_fx_att_rows.prev_eod_qty, 0));
      elsif unreal_pnl_fx_att_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_att_rows.trade_cur_to_base_exch_rate -
                               unreal_pnl_fx_att_rows.prev_trade_cur_to_base_rate) *
                               (unreal_pnl_fx_att_rows.prev_contract_price_in_val) *
                               (nvl(unreal_pnl_fx_att_rows.prev_eod_qty, 0));
      end if;
      vn_other_pnlc_in_base := unreal_pnl_fx_att_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_fx_att_rows.corporate_id,
         unreal_pnl_fx_att_rows.corporate_name,
         unreal_pnl_fx_att_rows.attribution_type,
         unreal_pnl_fx_att_rows.attribution_master_type,
         unreal_pnl_fx_att_rows.attribution_main_type,
         unreal_pnl_fx_att_rows.attribution_sub_type,
         unreal_pnl_fx_att_rows.attribution_order,
         unreal_pnl_fx_att_rows.internal_contract_ref_no,
         unreal_pnl_fx_att_rows.internal_contract_item_ref_no,
         unreal_pnl_fx_att_rows.contract_ref_no,
         unreal_pnl_fx_att_rows.item_no,
         unreal_pnl_fx_att_rows.contract_type,
         unreal_pnl_fx_att_rows.item_qty,
         unreal_pnl_fx_att_rows.qty_unit_id,
         unreal_pnl_fx_att_rows.curr_eod_qty,
         unreal_pnl_fx_att_rows.curr_eod_qty_unit_id,
         unreal_pnl_fx_att_rows.prev_eod_qty,
         unreal_pnl_fx_att_rows.prev_eod_qty_unit_id,
         unreal_pnl_fx_att_rows.curr_eod_contract_price,
         unreal_pnl_fx_att_rows.curr_eod_price_unit_id,
         unreal_pnl_fx_att_rows.prev_eod_contract_price,
         unreal_pnl_fx_att_rows.prev_eod_price_unit_id,
         unreal_pnl_fx_att_rows.md_id,
         unreal_pnl_fx_att_rows.prev_md_id,
         unreal_pnl_fx_att_rows.net_m2m_price,
         unreal_pnl_fx_att_rows.m2m_price_unit_id,
         unreal_pnl_fx_att_rows.prev_net_m2m_price,
         unreal_pnl_fx_att_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_fx_att_rows.net_pnlc_in_base);
    end loop;
    for unreal_pnl_fx_mkt_att_rows in unreal_pnl_fx_mkt_att
    loop
      if unreal_pnl_fx_mkt_att_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_mkt_att_rows.trade_cur_to_base_exch_rate -
                               unreal_pnl_fx_mkt_att_rows.prev_trade_cur_to_base_rate) *
                               unreal_pnl_fx_mkt_att_rows.prev_settlement_price *
                               nvl(unreal_pnl_fx_mkt_att_rows.prev_eod_qty,
                                   0);
      elsif unreal_pnl_fx_mkt_att_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_mkt_att_rows.prev_trade_cur_to_base_rate -
                               unreal_pnl_fx_mkt_att_rows.trade_cur_to_base_exch_rate) *
                               unreal_pnl_fx_mkt_att_rows.prev_settlement_price *
                               nvl(unreal_pnl_fx_mkt_att_rows.prev_eod_qty,
                                   0);
      end if;
      vn_other_pnlc_in_base := unreal_pnl_fx_mkt_att_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_fx_mkt_att_rows.corporate_id,
         unreal_pnl_fx_mkt_att_rows.corporate_name,
         unreal_pnl_fx_mkt_att_rows.attribution_type,
         unreal_pnl_fx_mkt_att_rows.attribution_master_type,
         unreal_pnl_fx_mkt_att_rows.attribution_main_type,
         unreal_pnl_fx_mkt_att_rows.attribution_sub_type,
         unreal_pnl_fx_mkt_att_rows.attribution_order,
         unreal_pnl_fx_mkt_att_rows.internal_contract_ref_no,
         unreal_pnl_fx_mkt_att_rows.internal_contract_item_ref_no,
         unreal_pnl_fx_mkt_att_rows.contract_ref_no,
         unreal_pnl_fx_mkt_att_rows.item_no,
         unreal_pnl_fx_mkt_att_rows.contract_type,
         unreal_pnl_fx_mkt_att_rows.item_qty,
         unreal_pnl_fx_mkt_att_rows.qty_unit_id,
         unreal_pnl_fx_mkt_att_rows.curr_eod_qty,
         unreal_pnl_fx_mkt_att_rows.curr_eod_qty_unit_id,
         unreal_pnl_fx_mkt_att_rows.prev_eod_qty,
         unreal_pnl_fx_mkt_att_rows.prev_eod_qty_unit_id,
         unreal_pnl_fx_mkt_att_rows.curr_eod_contract_price,
         unreal_pnl_fx_mkt_att_rows.curr_eod_price_unit_id,
         unreal_pnl_fx_mkt_att_rows.prev_eod_contract_price,
         unreal_pnl_fx_mkt_att_rows.prev_eod_price_unit_id,
         unreal_pnl_fx_mkt_att_rows.md_id,
         unreal_pnl_fx_mkt_att_rows.prev_md_id,
         unreal_pnl_fx_mkt_att_rows.net_m2m_price,
         unreal_pnl_fx_mkt_att_rows.m2m_price_unit_id,
         unreal_pnl_fx_mkt_att_rows.prev_net_m2m_price,
         unreal_pnl_fx_mkt_att_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_fx_mkt_att_rows.net_pnlc_in_base);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_unreal_pnl_attr',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

end;
/
ALTER TABLE CT_CURRENCY_TRADE ADD OPTION_PREMIUM  NUMBER(20,10); 
ALTER TABLE CT_CURRENCY_TRADE ADD OPTION_PREMIUM_UNIT_ID  VARCHAR2(20 CHAR); 
ALTER TABLE CT_CURRENCY_TRADE ADD VALUE_DATE  DATE; 
ALTER TABLE CT_CURRENCY_TRADE ADD PARENT_INT_FX_REF_NO  VARCHAR2(15 CHAR); 
ALTER TABLE CT_CURRENCY_TRADE  ADD SPOT_RATE  NUMBER(20,10);
ALTER TABLE CT_CURRENCY_TRADE  ADD MARGIN_RATE  NUMBER(20,10);
ALTER TABLE CT_CURRENCY_TRADE  ADD OTHER_CHARGES  NUMBER(20,10);
ALTER TABLE CT_CURRENCY_TRADE  ADD SLIPPAGE_RATE  NUMBER(20,10);
ALTER TABLE CT_CURRENCY_TRADE  ADD IS_EXCHANGE_COMP  CHAR(1) DEFAULT 'N');
ALTER TABLE CT_CURRENCY_TRADE  ADD IS_NEW_TRADE  CHAR(1);


ALTER TABLE CTUL_CURRENCY_TRADE_UL ADD OPTION_PREMIUM  VARCHAR2 (30 Char); 
ALTER TABLE CTUL_CURRENCY_TRADE_UL ADD OPTION_PREMIUM_UNIT_ID  VARCHAR2(20 CHAR); 
ALTER TABLE CTUL_CURRENCY_TRADE_UL ADD VALUE_DATE  VARCHAR2 (30 Char); 
ALTER TABLE CTUL_CURRENCY_TRADE_UL ADD PARENT_INT_FX_REF_NO  VARCHAR2(15 CHAR);
ALTER TABLE CTUL_CURRENCY_TRADE_UL ADD SPOT_RATE  VARCHAR2(20 CHAR);
ALTER TABLE CTUL_CURRENCY_TRADE_UL  ADD MARGIN_RATE  VARCHAR2(20 CHAR);
ALTER TABLE CTUL_CURRENCY_TRADE_UL  ADD OTHER_CHARGES  VARCHAR2(20 CHAR);
ALTER TABLE CTUL_CURRENCY_TRADE_UL  ADD SLIPPAGE_RATE  VARCHAR2(20 CHAR);
ALTER TABLE CTUL_CURRENCY_TRADE_UL  ADD IS_EXCHANGE_COMP  VARCHAR2(1 CHAR);

create or replace package "PKG_CDC_TRANSFER_DATA" is

  -- author  : Siva
  -- created : 30/12/2010
  -- purpose : pull data from transactional system for eod/eom processing
  procedure sp_cdc_transfer_data(pc_corporate_id       in varchar2,
                                 pt_previous_pull_date timestamp,
                                 pt_current_pull_date  timestamp,
                                 pd_trade_date         date,
                                 pc_user_id            varchar2,
                                 pc_process            varchar2,
                                 pc_dbd_id             varchar2);

  procedure sp_cdc_delete_app_data(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_user_id      varchar2,
                                   pc_process      varchar2);

  procedure sp_cdc_refresh_app_data(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2);

  procedure sp_cdc_insert_ul_data(pc_corporate_id  in varchar2,
                                  pc_user_id       varchar2,
                                  pc_process       varchar2,
                                  pc_dbd_id        varchar2,
                                  pd_trade_date    date,
                                  pc_app_eodeom_id varchar2);

  procedure sp_cdc_insert_derivative_data(pc_corporate_id       in varchar2,
                                          pt_previous_pull_date timestamp,
                                          pt_current_pull_date  timestamp,
                                          pc_dbd_id             varchar2,
                                          pc_user_id            varchar2,
                                          pc_process            varchar2,
                                          pd_trade_date         date);

end; 
/
create or replace package body "PKG_CDC_TRANSFER_DATA" is

  procedure sp_cdc_transfer_data(pc_corporate_id       in varchar2,
                                 pt_previous_pull_date timestamp,
                                 pt_current_pull_date  timestamp,
                                 pd_trade_date         date,
                                 pc_user_id            varchar2,
                                 pc_process            varchar2,
                                 pc_dbd_id             varchar2)
  --*****************************************************************************************************************************************
    --                    procedure name                           : sp_cdc_transfer_data
    --                    author                                   : siva
    --                    created date                             : 09th jan 2009
    --                    purpose                                  : transfer transaction data into eod database
    --                    parameters
    --
    --                    pc_corporate_id                          corporate id
    --                    pt_previous_pull_date                    last dump date
    --                    pt_current_pull_date                     current sys time(when called)
    --                    pd_trade_date                            eod data
    --                    pc_user_id                               user id
    --                    pc_process                               process = 'eod'
    --
    --                    modification history
    --                    modified by                              :
    --                    modified date                            :
    --                    modify description                       :
    --*****************************************************************************************************************************************
   is
    vc_dbd_id          varchar2(15);
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 25;
    vc_app_eodeom_id   varchar2(15);
  begin
  
    --Get the Latest EOD/EOM Table id from app schema which is used for Transfering AXS data
    begin
      if pc_process = 'EOD' then
        select eod.eod_id
          into vc_app_eodeom_id
          from eod_end_of_day_details@eka_appdb eod
         where eod.corporate_id = pc_corporate_id
           and eod.as_of_date = pd_trade_date;
      
      else
        select eom.eom_id
          into vc_app_eodeom_id
          from eom_end_of_month_details@eka_appdb eom
         where eom.corporate_id = pc_corporate_id
           and eom.as_of_date = pd_trade_date;
      end if;
    exception
      when no_data_found then
        vc_app_eodeom_id := null;
    end;
  
    vc_dbd_id := pc_dbd_id;
    vn_logno  := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'Data Transfer Started ...');
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_cdc_delete_app_data');
    sp_cdc_delete_app_data(pc_corporate_id,
                           pd_trade_date,
                           pc_user_id,
                           pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_cdc_refresh_app_data');
    sp_cdc_refresh_app_data(pc_corporate_id,
                            pd_trade_date,
                            pc_user_id,
                            pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_cdc_insert_ul_data');
    sp_cdc_insert_ul_data(pc_corporate_id,
                          pc_user_id,
                          pc_process,
                          vc_dbd_id,
                          pd_trade_date,
                          vc_app_eodeom_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_cdc_insert_derivative_data');
    sp_cdc_insert_derivative_data(pc_corporate_id,
                                  pt_previous_pull_date,
                                  pt_current_pull_date,
                                  vc_dbd_id,
                                  pc_user_id,
                                  pc_process,
                                  pd_trade_date);
  
    vn_logno := vn_logno + 1;
  
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'Data Transfer Completed !!!');
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while transafer data');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_cdc_transfer_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_cdc_delete_app_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_delete_app_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    delete from dam_derivative_action_amapping;
    delete from dat_derivative_aggregate_trade;
    delete from oba_our_bank_accounts;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_cdc_delete_app_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_cdc_refresh_app_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_refresh_app_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log          tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count      number := 1;
    vc_other_process_status number := 0;
  begin
    begin
      if pc_process = 'EOD' then
        select count(*)
          into vc_other_process_status
          from eod_end_of_day_details@eka_appdb eod
         where eod.corporate_id <> pc_corporate_id
           and eod.as_of_date <> pd_trade_date
           and eod.processing_status = 'Running';
      else
        select count(*)
          into vc_other_process_status
          from eom_end_of_month_details@eka_appdb eom
         where eom.corporate_id <> pc_corporate_id
           and eom.as_of_date <> pd_trade_date
           and eom.processing_status = 'Running';
      end if;
    exception
      when others then
        vc_other_process_status := 1;
    end;
    if vc_other_process_status = 0 then
      dbms_mview.refresh('dpm_derivative_purpose_master', 'C');
      dbms_mview.refresh('dtpm_deal_type_purpose_mapping', 'C');
      dbms_mview.refresh('otm_option_type_master', 'C');
      dbms_mview.refresh('OVS_OPTION_VALUATION_SETUP', 'C');
    end if;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_cdc_refresh_app_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_cdc_insert_ul_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_insert_ul_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id  in varchar2,
   pc_user_id       varchar2,
   pc_process       varchar2,
   pc_dbd_id        varchar2,
   pd_trade_date    date,
   pc_app_eodeom_id varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
  
    insert into ctul_currency_trade_ul
      (internal_action_ref_no,
       internal_treasury_ref_no,
       entry_type,
       is_deleted,
       dr_id,
       corporate_id,
       treasury_ref_no,
       external_ref_no,
       deal_type_id,
       trade_date,
       exchange_rate,
       fx_rate_base_to_foreign,
       bank_id,
       bank_acc_id,
       bank_charges,
       bank_charges_type,
       bank_charges_cur_id,
       profit_center_id,
       strategy_id,
       purpose_id,
       nominee_profile_id,
       remarks,
       created_by,
       modified_by,
       created_date,
       modified_date,
       status,
       trader_id,
       payment_terms_id,
       --HDL_FX_settlement change start
       outstanding_amount,
       outstanding_amount_currency_id,
       premium_rate,
       --HDL_FX_settlement change end
       option_premium,
       option_premium_unit_id,
       value_date,
       parent_int_fx_ref_no,
       spot_rate,
       margin_rate,
       other_charges,
       slippage_rate,
       is_exchange_comp,
       dbd_id)
      select ul.internal_action_ref_no,
             ul. internal_treasury_ref_no,
             ul. entry_type,
             ul.is_deleted,
             ul.dr_id,
             ul.corporate_id,
             ul.treasury_ref_no,
             ul.external_ref_no,
             ul.deal_type_id,
             ul.trade_date,
             ul.exchange_rate,
             ul.fx_rate_base_to_foreign,
             ul.bank_id,
             ul.bank_acc_id,
             ul.bank_charges,
             ul.bank_charges_type,
             ul.bank_charges_cur_id,
             ul.profit_center_id,
             ul.strategy_id,
             ul.purpose_id,
             ul.nominee_profile_id,
             ul.remarks,
             ul.created_by,
             ul.modified_by,
             ul.created_date,
             ul.modified_date,
             ul.status,
             ul.trader_id,
             ul.payment_terms_id,
             --HDL_FX_settlement change start
             ul.outstanding_amount,
             ul.outstanding_amount_currency_id,
             ul.premium_rate,
             --HDL_FX_settlement change end
             ul.option_premium,
             ul.option_premium_unit_id,
             ul.value_date,
             ul.parent_int_fx_ref_no,
             ul.spot_rate,
             ul.margin_rate,
             ul.other_charges,
             ul.slippage_rate,
             ul.is_exchange_comp,
             pc_dbd_id
        from ctul_currency_trade_ul    @eka_appdb ul,
             eod_eom_axsdata@eka_appdb axs
       where ul.internal_action_ref_no = axs.internal_action_ref_no
         and axs.corporate_id = pc_corporate_id
         and axs.eodeom_id = pc_app_eodeom_id
         and axs.process = pc_process;
  
    insert into crtdul_cur_trade_details_ul
      (crtd_id,
       internal_action_ref_no,
       internal_treasury_ref_no,
       trade_type,
       cur_id,
       leg_no,
       amount,
       is_base,
       dbd_id)
      select ul.ctrd_id,
             ul.internal_action_ref_no,
             ul.internal_treasury_ref_no,
             ul.trade_type,
             ul.cur_id,
             ul.leg_no,
             ul.amount,
             ul.is_base,
             pc_dbd_id
        from crtdul_cur_trade_details_ul @eka_appdb ul,
             eod_eom_axsdata@eka_appdb   axs
       where ul.internal_action_ref_no = axs.internal_action_ref_no
         and axs.corporate_id = pc_corporate_id
         and axs.eodeom_id = pc_app_eodeom_id
         and axs.process = pc_process;
  
    insert into dtul_derivative_trade_ul
      (internal_action_ref_no,
       internal_derivative_ref_no,
       entry_type,
       is_deleted,
       derivative_ref_no,
       corporate_id,
       trader_id,
       dr_id,
       trade_type,
       deal_type_id,
       profit_center_id,
       strategy_id,
       purpose_id,
       external_ref_no,
       trade_date,
       cp_profile_id,
       master_contract_id,
       broker_profile_id,
       broker_account_id,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       clearer_profile_id,
       clearer_account_id,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       product_id,
       quality_id,
       quantity_unit_id,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       formula_id,
       index_instrument_id,
       strike_price,
       strike_price_unit_id,
       premium_discount,
       premium_discount_price_unit_id,
       premium_due_date,
       settlement_cur_id,
       nominee_profile_id,
       remarks,
       leg_no,
       created_by,
       modified_by,
       created_date,
       last_modified_date,
       option_expiry_date,
       parent_int_derivative_ref_no,
       status,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term,
       payment_due_date,
       is_imported,
       closed_lots,
       closed_quantity,
       int_trade_parent_der_ref_no,
       is_internal_trade,
       price_point_id,
       available_price_id,
       average_from_date,
       average_to_date,
       pricing_invoicing_status,
       settlement_price,
       settlement_price_unit_id,
       swap_type_1,
       swap_trade_price_type_1,
       swap_float_type_1,
       swap_trade_price_1,
       swap_trade_price_unit_id_1,
       swap_index_instrument_id_1,
       swap_formula_id_1,
       swap_type_2,
       swap_trade_price_type_2,
       swap_float_type_2,
       swap_trade_price_2,
       swap_trade_price_unit_id_2,
       swap_index_instrument_id_2,
       swap_formula_id_2,
       approval_status,
       price_source_id,
       traded_on,
       dbd_id)
      select ul.internal_action_ref_no,
             ul.internal_derivative_ref_no,
             ul.entry_type,
             ul.is_deleted,
             ul.derivative_ref_no,
             ul.corporate_id,
             ul.trader_id,
             ul.dr_id,
             ul.trade_type,
             ul.deal_type_id,
             ul.profit_center_id,
             ul.strategy_id,
             ul.purpose_id,
             ul.external_ref_no,
             ul.trade_date,
             ul.cp_profile_id,
             ul.master_contract_id,
             ul.broker_profile_id,
             ul.broker_account_id,
             ul.broker_comm_type_id,
             ul.broker_comm_amt,
             ul.broker_comm_cur_id,
             ul.clearer_profile_id,
             ul.clearer_account_id,
             ul.clearer_comm_type_id,
             ul.clearer_comm_amt,
             ul.clearer_comm_cur_id,
             ul.product_id,
             ul.quality_id,
             ul.quantity_unit_id,
             ul.total_lots,
             ul.total_quantity,
             ul.open_lots,
             ul.open_quantity,
             ul.exercised_lots,
             ul.exercised_quantity,
             ul.expired_lots,
             ul.expired_quantity,
             ul.trade_price_type_id,
             ul.trade_price,
             ul.trade_price_unit_id,
             ul.formula_id,
             ul.index_instrument_id,
             ul.strike_price,
             ul.strike_price_unit_id,
             ul.premium_discount,
             ul.premium_discount_price_unit_id,
             ul.premium_due_date,
             ul.settlement_cur_id,
             ul.nominee_profile_id,
             ul.remarks,
             ul.leg_no,
             ul.created_by,
             ul.modified_by,
             ul.created_date,
             ul.last_modified_date,
             ul.option_expiry_date,
             ul.parent_int_derivative_ref_no,
             ul.status,
             ul.market_location_country,
             ul.market_location_state,
             ul.market_location_city,
             ul.is_what_if,
             ul.payment_term,
             ul.payment_due_date,
             ul.is_imported,
             ul.closed_lots,
             ul.closed_quantity,
             ul.int_trade_parent_der_ref_no,
             ul.is_internal_trade,
             ul.price_point_id,
             ul.available_price_id,
             ul.average_from_date,
             ul.average_to_date,
             ul.pricing_invoicing_status,
             ul.settlement_price,
             ul.settlement_price_unit_id,
             ul.swap_type_1,
             ul.swap_trade_price_type_1,
             ul.swap_float_type_1,
             ul.swap_trade_price_1,
             ul.swap_trade_price_unit_id_1,
             ul.swap_index_instrument_id_1,
             ul.swap_formula_id_1,
             ul.swap_type_2,
             ul.swap_trade_price_type_2,
             ul.swap_float_type_2,
             ul.swap_trade_price_2,
             ul.swap_trade_price_unit_id_2,
             ul.swap_index_instrument_id_2,
             ul.swap_formula_id_2,
             ul.approval_status,
             ul.price_source_id,
             ul.traded_on,
             pc_dbd_id
        from dtul_derivative_trade_ul  @eka_appdb ul,
             eod_eom_axsdata@eka_appdb axs
       where ul.internal_action_ref_no = axs.internal_action_ref_no
         and axs.corporate_id = pc_corporate_id
         and axs.eodeom_id = pc_app_eodeom_id
         and axs.process = pc_process;
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_cdc_insert_ul_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

      procedure sp_cdc_insert_derivative_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_insert_derivative_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id       in varchar2,
   pt_previous_pull_date timestamp,
   pt_current_pull_date  timestamp,
   pc_dbd_id             varchar2,
   pc_user_id            varchar2,
   pc_process            varchar2,
   pd_trade_date         date) is
    vobj_error_log         tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count     number := 1;
    vd_valid_closeout_date date;
  begin
  
    insert into dcoh_der_closeout_header
      (internal_close_out_ref_no,
       close_out_ref_no,
       corporate_id,
       close_out_date,
       co_mode,
       dr_id,
       profit_center_1_id,
       profit_center_2_id,
       trader_id,
       strike_price,
       strike_price_unit_id,
       clearer_profile_id,
       clearer_account_id,
       nominee_profile_id,
       tot_lots_closed,
       tot_qty_closed,
       tot_trades_closed,
       qty_unit_id,
       clearer_comm,
       clearer_comm_cur_id,
       broker_comm_amt,
       broker_comm_cur_id,
       realized_pnl,
       pnl_cur_id,
       created_by,
       rollbacked_by,
       is_rolled_back,
       created_date,
       roll_back_date,
       dbd_id)
      select internal_close_out_ref_no,
             close_out_ref_no,
             corporate_id,
             close_out_date,
             co_mode,
             dr_id,
             profit_center_1_id,
             profit_center_2_id,
             trader_id,
             strike_price,
             strike_price_unit_id,
             clearer_profile_id,
             clearer_account_id,
             nominee_profile_id,
             tot_lots_closed,
             tot_qty_closed,
             tot_trades_closed,
             qty_unit_id,
             clearer_comm,
             clearer_comm_cur_id,
             broker_comm_amt,
             broker_comm_cur_id,
             realized_pnl,
             pnl_cur_id,
             created_by,
             rollbacked_by,
             is_rolled_back,
             created_date,
             roll_back_date,
             pc_dbd_id
        from dcoh_der_closeout_header@eka_appdb
       where corporate_id = pc_corporate_id
         and created_date > pt_previous_pull_date
         and created_date <= pt_current_pull_date;
     commit; 
      
    for cur_update in (select dcoh_trans.*
                         from dcoh_der_closeout_header@eka_appdb dcoh_trans
                        where dcoh_trans.corporate_id = pc_corporate_id
                          and dcoh_trans.roll_back_date >
                              pt_previous_pull_date
                          and dcoh_trans.roll_back_date <=
                              pt_current_pull_date
                          and dcoh_trans.is_rolled_back = 'Y')
    loop
      update dcoh_der_closeout_header dcoh
         set dcoh.is_rolled_back       = 'Y',
             dcoh.roll_back_date       = cur_update.roll_back_date,
             dcoh.undo_closeout_dbd_id = pc_dbd_id
       where dcoh.internal_close_out_ref_no =
             cur_update.internal_close_out_ref_no;
    end loop;
    commit;
    
    -- 12th Mar 2012
    -- Janna
    -- Update Valid Close Out Date Start
    for cur_dcoh in (select dcoh.internal_close_out_ref_no,
                            dcoh.close_out_date,
                            dim.instrument_id
                       from dcoh_der_closeout_header  dcoh,
                            drm_derivative_master     drm,
                            dim_der_instrument_master dim
                      where dcoh.dbd_id = pc_dbd_id
                        and dcoh.dr_id = drm.dr_id
                        and drm.instrument_id = dim.instrument_id)
    loop
      vd_valid_closeout_date := cur_dcoh.close_out_date;
      while true
      loop       
        if pkg_cdc_derivatives_process.f_is_day_holiday(cur_dcoh.instrument_id,
                                                        vd_valid_closeout_date) then
          vd_valid_closeout_date := vd_valid_closeout_date - 1;
        else
          exit;
        end if;
      end loop;
      update dcoh_der_closeout_header dcoh
         set dcoh.valid_closeout_date = vd_valid_closeout_date
       where dcoh.internal_close_out_ref_no =
             cur_dcoh.internal_close_out_ref_no;
    end loop;
  
    -- Update Valid Close Out Date End 
  
    insert into dcod_der_closeout_detail
      (int_close_out_detail_ref_no,
       internal_close_out_ref_no,
       internal_derivative_ref_no,
       lots_closed,
       quantity_closed,
       quantity_unit_id,
       trading_fee,
       clearing_fee,
       trading_clearing_fee,
       broker_comm_type_id,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       broker_comm_amt,
       broker_comm_cur_id,
       is_deleted,
       dbd_id)
      select int_close_out_detail_ref_no,
             internal_close_out_ref_no,
             internal_derivative_ref_no,
             lots_closed,
             quantity_closed,
             quantity_unit_id,
             trading_fee,
             clearing_fee,
             trading_clearing_fee,
             broker_comm_type_id,
             clearer_comm_type_id,
             clearer_comm_amt,
             clearer_comm_cur_id,
             broker_comm_amt,
             broker_comm_cur_id,
             is_deleted,
             pc_dbd_id
        from dcod_der_closeout_detail@eka_appdb
       where internal_close_out_ref_no in
             (select internal_close_out_ref_no
                from dcoh_der_closeout_header
               where dbd_id = pc_dbd_id);  
  
    insert into dam_derivative_action_amapping
      (internal_action_ref_no, internal_derivative_ref_no, dbd_id)
      select internal_action_ref_no,
             internal_derivative_ref_no,
             pc_dbd_id
        from dam_derivative_action_amapping@eka_appdb;
  
    insert into dat_derivative_aggregate_trade
      (aggregate_trade_id,
       aggregate_trade_ref_no,
       leg_1_trade_type,
       leg_2_trade_type,
       leg_1_int_der_ref_no,
       leg_2_int_der_ref_no,
       dbd_id)
      select aggregate_trade_id,
             aggregate_trade_ref_no,
             leg_1_trade_type,
             leg_2_trade_type,
             leg_1_int_der_ref_no,
             leg_2_int_der_ref_no,
             pc_dbd_id
        from dat_derivative_aggregate_trade@eka_appdb;
  
    insert into fsh_fin_settlement_header
      (fsh_id,
       internal_derivative_ref_no,
       settlement_date,
       contract_price,
       contract_price_unit_id,
       market_price,
       market_price_unit_id,
       settlement_price,
       settlement_price_unit_id,
       is_deleted,
       created_by,
       created_date,
       is_settled,
       settlement_ref_no,
       dbd_id)
      select fsh.fsh_id,
             fsh.internal_derivative_ref_no,
             fsh.settlement_date,
             fsh.contract_price,
             fsh.contract_price_unit_id,
             fsh.market_price,
             fsh.market_price_unit_id,
             fsh.settlement_price,
             fsh.settlement_price_unit_id,
             fsh.is_deleted,
             fsh.created_by,
             fsh.created_date,
             fsh.is_settled,
             fsh.settlement_ref_no,
             pc_dbd_id
        from fsh_fin_settlement_header@eka_appdb fsh
       where created_date > pt_previous_pull_date
         and created_date <= pt_current_pull_date;
    commit;  
      
    for cur_update in (select fsh_trans.*
                         from fsh_fin_settlement_header@eka_appdb fsh_trans
                        where fsh_trans.roll_back_date >
                              pt_previous_pull_date
                          and fsh_trans.roll_back_date <=
                              pt_current_pull_date
                          and fsh_trans.is_settled = 'N')
    loop
    
      update fsh_fin_settlement_header fsh
         set fsh.is_settled             = 'N',
             fsh.settlement_date        = cur_update.settlement_date,
             fsh.roll_back_date         = cur_update.roll_back_date,
             fsh.undo_settlement_dbd_id = pc_dbd_id
       where fsh.internal_derivative_ref_no =
             cur_update.internal_derivative_ref_no;
    end loop;
  
    /*  insert into dt_fbi 
     (dt_fbi_id,                   
      internal_derivative_ref_no, 
      formula_inst_id,           
      formula_id,                 
      instrument_id,               
      price_source_id,            
      price_point_id,             
      available_price_id,         
      fb_period_type,            
      fb_period_sub_type,        
      period_month,               
      period_year,                
      period_from_date,           
      period_to_date,            
      no_of_months,               
      no_of_days,                  
      period_type_id,            
      delivery_period_id,         
      off_day_price,              
      basis,                     
      basis_price_unit_id,         
      fx_rate_type,                
      fx_rate_,                  
      is_deleted,                 
      is_currency_curve,          
      fb_period_type_id,          
      monthly_prompt_month_id,     
      leg_no,                     
      dbd_id)
    select  dt_fbi_id,                   
            internal_derivative_ref_no, 
            formula_inst_id,           
            formula_id,                 
            instrument_id,               
            price_source_id,            
            price_point_id,             
            available_price_id,         
            fb_period_type,            
            fb_period_sub_type,        
            period_month,               
            period_year,                
            period_from_date,           
            period_to_date,            
            no_of_months,               
            no_of_days,                  
            period_type_id,            
            delivery_period_id,         
            off_day_price,              
            basis,                     
            basis_price_unit_id,         
            fx_rate_type,                
            fx_rate_,                  
            is_deleted,                 
            is_currency_curve,          
            fb_period_type_id,          
            monthly_prompt_month_id,     
            leg_no,
            pc_dbd_id                      
       from  dt_fbi@eka_appdb dtfbi
       where dtfbi.internal_derivative_ref_no in
       (select dt.internal_derivative_ref_no from dt_derivative_trade dt
       where  dt.dbd_id=pc_dbd_id) ; */
  
    insert into oba_our_bank_accounts
      (bank_id,
       account_id,
       account_no,
       account_name,
       currency_id,
       swift_code,
       chips_uid,
       aba_no,
       iban,
       beneficiary_name,
       beneficiary_address,
       external_ref_no,
       is_active,
       crspdnt_bank_acc_no,
       crspdnt_bank_name,
       crspdnt_iban,
       crspdnt_swift_code,
       crspdnt_bank_address)
      select bank_id,
             account_id,
             account_no,
             account_name,
             currency_id,
             swift_code,
             chips_uid,
             aba_no,
             iban,
             beneficiary_name,
             beneficiary_address,
             external_ref_no,
             is_deleted,
             crspdnt_bank_acc_no,
             crspdnt_bank_name,
             crspdnt_iban,
             crspdnt_swift_code,
             crspdnt_bank_address
        from oba_our_bank_accounts@eka_appdb;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_cdc_insert_derivative_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

end; 
/
CREATE OR REPLACE PACKAGE "PKG_CDC_POPULATE_DATA" IS

  -- Author  : Siva
  -- Created : 09-Jan-2009
  -- Purpose : All the Physicals Day end procedures are calculated here
  -- Public type declarations
  -- pvc_process VARCHAR2(5) := 'EOD';

  --pvc_process VARCHAR2(5);
  gvc_dbd_id varchar2(15);

  gvc_process varchar2(15);

  procedure sp_cdc_populate_table_data(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2,
                                       pc_process      varchar2);

  procedure sp_cdc_create_dt_data(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2,
                                  pc_dbd_id       varchar2);

  procedure sp_cdc_create_crtd_data(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_user_id      varchar2);

  procedure sp_cdc_create_ct_data(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2);

end; 
/
CREATE OR REPLACE PACKAGE BODY "PKG_CDC_POPULATE_DATA" IS

  procedure sp_cdc_populate_table_data
  /******************************************************************************************************************************************
    procedure name                           : sp_cdc_populate_table_data
    author                                   : Ashok
    created date                             : 5 th jan 2011
    purpose                                  : populate transfer transaction data
    parameters
          
    pc_corporate_id                          : corporate id
    pt_previous_pull_date                    : last dump date
    pt_current_pull_date                     : current sys time(when called)
    pd_trade_date                            : eod data
    pc_user_id                               : user id
    pc_process                               : process = 'eod'
          
    modified date                            :
    modify description                       :
    ******************************************************************************************************************************************/
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_dbd_id       varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 50;
    vc_local_error_msg varchar2(100);
  begin
    gvc_dbd_id  := pc_dbd_id;
    gvc_process := pc_process;
  
    if pkg_process_status.sp_get(pc_corporate_id,
                                 gvc_process,
                                 pd_trade_date) = 'Cancel' then
      goto cancel_process;
    end if;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            pc_dbd_id,
                            vn_logno,
                            'sp_cdc_create_dt_data');
  
    sp_cdc_create_dt_data(pc_corporate_id,
                          pd_trade_date,
                          pc_user_id,
                          pc_process,
                          pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id,
                                 gvc_process,
                                 pd_trade_date) = 'Cancel' then
      goto cancel_process;
    end if;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            pc_dbd_id,
                            vn_logno,
                            'sp_cdc_create_crtd_data');
  
    sp_cdc_create_crtd_data(pc_corporate_id, pd_trade_date, pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id,
                                 gvc_process,
                                 pd_trade_date) = 'Cancel' then
      goto cancel_process;
    end if;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            pc_dbd_id,
                            vn_logno,
                            'sp_cdc_create_ct_data');
  
    sp_cdc_create_ct_data(pc_corporate_id, pd_trade_date, pc_user_id);
  
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while populate table data');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_cdc_populate_table_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm || ' at ' ||
                                                           vc_local_error_msg,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  ----------------------------------------------------------------------------------------

  procedure sp_cdc_create_dt_data(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2,
                                  pc_dbd_id       varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into dt_derivative_trade
      (internal_derivative_ref_no,
       derivative_ref_no,
       corporate_id,
       trader_id,
       dr_id,
       trade_type,
       deal_type_id,
       profit_center_id,
       strategy_id,
       purpose_id,
       external_ref_no,
       trade_date,
       cp_profile_id,
       master_contract_id,
       broker_profile_id,
       broker_account_id,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       clearer_profile_id,
       clearer_account_id,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       product_id,
       quality_id,
       quantity_unit_id,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       formula_id,
       index_instrument_id,
       strike_price,
       strike_price_unit_id,
       premium_discount,
       premium_discount_price_unit_id,
       premium_due_date,
       settlement_cur_id,
       nominee_profile_id,
       remarks,
       leg_no,
       created_by,
       modified_by,
       created_date,
       last_modified_date,
       option_expiry_date,
       parent_int_derivative_ref_no,
       status,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term,
       payment_due_date,
       is_imported,
       closed_lots,
       closed_quantity,
       int_trade_parent_der_ref_no,
       is_internal_trade,
       price_point_id,
       available_price_id,
       average_from_date,
       average_to_date,
       swap_type_1,
       swap_trade_price_type_1,
       swap_float_type_1,
       swap_trade_price_1,
       swap_trade_price_unit_id_1,
       swap_index_instrument_id_1,
       swap_formula_id_1,
       swap_type_2,
       swap_trade_price_type_2,
       swap_float_type_2,
       swap_trade_price_2,
       swap_trade_price_unit_id_2,
       swap_index_instrument_id_2,
       swap_formula_id_2,
       /*swap_product1,
                swap_product_quality1,
                swap_product2,
                swap_product_quality2,*/
       pricing_invoicing_status,
       settlement_price,
       settlement_price_unit_id,
       approval_status,
       price_source_id,
       traded_on,
       dbd_id)
      select internal_derivative_ref_no,
             decode(derivative_ref_no,
                    'Empty_String',
                    null,
                    derivative_ref_no),
             decode(corporate_id, 'Empty_String', null, corporate_id),
             decode(trader_id, 'Empty_String', null, trader_id),
             decode(dr_id, 'Empty_String', null, dr_id),
             decode(trade_type, 'Empty_String', null, trade_type),
             decode(deal_type_id, 'Empty_String', null, deal_type_id),
             decode(profit_center_id,
                    'Empty_String',
                    null,
                    profit_center_id),
             decode(strategy_id, 'Empty_String', null, strategy_id),
             decode(purpose_id, 'Empty_String', null, purpose_id),
             decode(external_ref_no, 'Empty_String', null, external_ref_no),
             decode(trade_date, 'Empty_String', null, trade_date),
             decode(cp_profile_id, 'Empty_String', null, cp_profile_id),
             decode(master_contract_id,
                    'Empty_String',
                    null,
                    master_contract_id),
             decode(broker_profile_id,
                    'Empty_String',
                    null,
                    broker_profile_id),
             decode(broker_account_id,
                    'Empty_String',
                    null,
                    broker_account_id),
             decode(broker_comm_type_id,
                    'Empty_String',
                    null,
                    broker_comm_type_id),
             decode(broker_comm_amt, 'Empty_String', null, broker_comm_amt),
             decode(broker_comm_cur_id,
                    'Empty_String',
                    null,
                    broker_comm_cur_id),
             decode(clearer_profile_id,
                    'Empty_String',
                    null,
                    clearer_profile_id),
             decode(clearer_account_id,
                    'Empty_String',
                    null,
                    clearer_account_id),
             decode(clearer_comm_type_id,
                    'Empty_String',
                    null,
                    clearer_comm_type_id),
             decode(clearer_comm_amt,
                    'Empty_String',
                    null,
                    clearer_comm_amt),
             decode(clearer_comm_cur_id,
                    'Empty_String',
                    null,
                    clearer_comm_cur_id),
             decode(product_id, 'Empty_String', null, product_id),
             decode(quality_id, 'Empty_String', null, quality_id),
             decode(quantity_unit_id,
                    'Empty_String',
                    null,
                    quantity_unit_id),
             decode(total_lots, 'Empty_String', null, total_lots),
             decode(total_quantity, 'Empty_String', null, total_quantity),
             decode(open_lots, 'Empty_String', null, open_lots),
             decode(open_quantity, 'Empty_String', null, open_quantity),
             decode(exercised_lots, 'Empty_String', null, exercised_lots),
             decode(exercised_quantity,
                    'Empty_String',
                    null,
                    exercised_quantity),
             decode(expired_lots, 'Empty_String', null, expired_lots),
             decode(expired_quantity,
                    'Empty_String',
                    null,
                    expired_quantity),
             decode(trade_price_type_id,
                    'Empty_String',
                    null,
                    trade_price_type_id),
             decode(trade_price, 'Empty_String', null, trade_price),
             decode(trade_price_unit_id,
                    'Empty_String',
                    null,
                    trade_price_unit_id),
             decode(formula_id, 'Empty_String', null, formula_id),
             decode(index_instrument_id,
                    'Empty_String',
                    null,
                    index_instrument_id),
             decode(strike_price, 'Empty_String', null, strike_price),
             decode(strike_price_unit_id,
                    'Empty_String',
                    null,
                    strike_price_unit_id),
             decode(premium_discount,
                    'Empty_String',
                    null,
                    premium_discount),
             decode(premium_discount_price_unit_id,
                    'Empty_String',
                    null,
                    premium_discount_price_unit_id),
             decode(premium_due_date,
                    'Empty_String',
                    null,
                    premium_due_date),
             decode(settlement_cur_id,
                    'Empty_String',
                    null,
                    settlement_cur_id),
             decode(nominee_profile_id,
                    'Empty_String',
                    null,
                    nominee_profile_id),
             decode(remarks, 'Empty_String', null, remarks),
             decode(leg_no, 'Empty_String', null, leg_no),
             decode(created_by, 'Empty_String', null, created_by),
             decode(modified_by, 'Empty_String', null, modified_by),
             pd_trade_date, -- null,--decode(created_date, 'Empty_String', NULL, created_date), by siva on 09-feb-2011
             pd_trade_date, --decode(last_modified_date,'Empty_String',NULL,last_modified_date), by siva on 09-feb-2011
             decode(option_expiry_date,
                    'Empty_String',
                    null,
                    option_expiry_date),
             decode(parent_int_derivative_ref_no,
                    'Empty_String',
                    null,
                    parent_int_derivative_ref_no),
             decode(status, 'Empty_String', null, status),
             decode(market_location_country,
                    'Empty_String',
                    null,
                    market_location_country),
             decode(market_location_state,
                    'Empty_String',
                    null,
                    market_location_state),
             decode(market_location_city,
                    'Empty_String',
                    null,
                    market_location_city),
             decode(is_what_if, 'Empty_String', null, is_what_if),
             decode(payment_term, 'Empty_String', null, payment_term),
             decode(payment_due_date,
                    'Empty_String',
                    null,
                    payment_due_date),
             decode(is_imported, 'Empty_String', null, is_imported),
             decode(closed_lots, 'Empty_String', null, closed_lots),
             decode(closed_quantity, 'Empty_String', null, closed_quantity),
             decode(int_trade_parent_der_ref_no,
                    'Empty_String',
                    null,
                    int_trade_parent_der_ref_no),
             decode(is_internal_trade,
                    'Empty_String',
                    null,
                    is_internal_trade),
             decode(price_point_id, 'Empty_String', null, price_point_id),
             decode(available_price_id,
                    'Empty_String',
                    null,
                    available_price_id),
             decode(average_from_date,
                    'Empty_String',
                    null,
                    average_from_date),
             decode(average_to_date, 'Empty_String', null, average_to_date),
             decode(swap_type_1, 'Empty_String', null, swap_type_1),
             decode(swap_trade_price_type_1,
                    'Empty_String',
                    null,
                    swap_trade_price_type_1),
             decode(swap_float_type_1,
                    'Empty_String',
                    null,
                    swap_float_type_1),
             decode(swap_trade_price_1,
                    'Empty_String',
                    null,
                    swap_trade_price_1),
             decode(swap_trade_price_unit_id_1,
                    'Empty_String',
                    null,
                    swap_trade_price_unit_id_1),
             decode(swap_index_instrument_id_1,
                    'Empty_String',
                    null,
                    swap_index_instrument_id_1),
             decode(swap_formula_id_1,
                    'Empty_String',
                    null,
                    swap_formula_id_1),
             decode(swap_type_2, 'Empty_String', null, swap_type_2),
             decode(swap_trade_price_type_2,
                    'Empty_String',
                    null,
                    swap_trade_price_type_2),
             decode(swap_float_type_2,
                    'Empty_String',
                    null,
                    swap_float_type_2),
             decode(swap_trade_price_2,
                    'Empty_String',
                    null,
                    swap_trade_price_2),
             decode(swap_trade_price_unit_id_2,
                    'Empty_String',
                    null,
                    swap_trade_price_unit_id_2),
             decode(swap_index_instrument_id_2,
                    'Empty_String',
                    null,
                    swap_index_instrument_id_2),
             decode(swap_formula_id_2,
                    'Empty_String',
                    null,
                    swap_formula_id_2),             
             decode(pricing_invoicing_status,
                    'Empty_String',
                    null,
                    pricing_invoicing_status),
             decode(settlement_price,
                    'Empty_String',
                    null,
                    settlement_price),
             decode(settlement_price_unit_id,
                    'Empty_String',
                    null,
                    settlement_price_unit_id),
             decode(approval_status, 'Empty_String', null, approval_status),
             decode(price_source_id, 'Empty_String', null, price_source_id),
             decode(traded_on, 'Empty_String', null, traded_on),
             gvc_dbd_id
        from (select
              
               internal_derivative_ref_no,
               substr(max(case
                            when dtul.entry_type is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             entry_type
                          end),
                      24) entry_type,
               
               substr(max(case
                            when dtul.is_deleted is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             is_deleted
                          end),
                      24) is_deleted,
               
               substr(max(case
                            when dtul.derivative_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             derivative_ref_no
                          end),
                      24) derivative_ref_no,
               
               substr(max(case
                            when dtul.corporate_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.corporate_id
                          end),
                      24) corporate_id,
               
               substr(max(case
                            when dtul.trader_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             trader_id
                          end),
                      24) trader_id,
               
               substr(max(case
                            when dtul.dr_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || dr_id
                          end),
                      24) dr_id,
               
               substr(max(case
                            when dtul.trade_type is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             trade_type
                          end),
                      24) trade_type,
               
               substr(max(case
                            when dtul.deal_type_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             deal_type_id
                          end),
                      24) deal_type_id,
               
               substr(max(case
                            when dtul.profit_center_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             profit_center_id
                          end),
                      24) profit_center_id,
               
               substr(max(case
                            when dtul.strategy_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             strategy_id
                          end),
                      24) strategy_id,
               
               substr(max(case
                            when dtul.purpose_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             purpose_id
                          end),
                      24) purpose_id,
               
               substr(max(case
                            when dtul.external_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             external_ref_no
                          end),
                      24) external_ref_no,
               
               substr(max(case
                            when dtul.trade_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.trade_date
                          end),
                      24) trade_date,
               
               substr(max(case
                            when dtul.cp_profile_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             cp_profile_id
                          end),
                      24) cp_profile_id,
               
               substr(max(case
                            when dtul.master_contract_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             master_contract_id
                          end),
                      24) master_contract_id,
               
               substr(max(case
                            when dtul.broker_profile_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             broker_profile_id
                          end),
                      24) broker_profile_id,
               
               substr(max(case
                            when dtul.broker_account_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             broker_account_id
                          end),
                      24) broker_account_id,
               
               substr(max(case
                            when dtul.broker_comm_type_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.broker_comm_type_id
                          end),
                      24) broker_comm_type_id,
               
               substr(max(case
                            when dtul.broker_comm_amt is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.broker_comm_amt
                          end),
                      24) broker_comm_amt,
               
               substr(max(case
                            when dtul.broker_comm_cur_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.broker_comm_cur_id
                          end),
                      24) broker_comm_cur_id,
               
               substr(max(case
                            when dtul.clearer_profile_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.clearer_profile_id
                          end),
                      24) clearer_profile_id,
               
               substr(max(case
                            when dtul.clearer_account_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.clearer_account_id
                          end),
                      24) clearer_account_id,
               
               substr(max(case
                            when dtul.clearer_comm_type_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.clearer_comm_type_id
                          end),
                      24) clearer_comm_type_id,
               
               substr(max(case
                            when dtul.clearer_comm_amt is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.clearer_comm_amt
                          end),
                      24) clearer_comm_amt,
               
               substr(max(case
                            when dtul.product_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.product_id
                          end),
                      24) product_id,
               
               substr(max(case
                            when dtul.quality_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.quality_id
                          end),
                      24) quality_id,
               
               substr(max(case
                            when dtul.clearer_comm_cur_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.clearer_comm_cur_id
                          end),
                      24) clearer_comm_cur_id,
               
               substr(max(case
                            when dtul.quantity_unit_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.quantity_unit_id
                          end),
                      24) quantity_unit_id,
               
               substr(max(case
                            when dtul.total_lots is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.total_lots
                          end),
                      24) total_lots,
               
               substr(max(case
                            when dtul.total_quantity is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.total_quantity
                          end),
                      24) total_quantity,
               
               substr(max(case
                            when dtul.open_lots is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.open_lots
                          end),
                      24) open_lots,
               
               substr(max(case
                            when dtul.open_quantity is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.open_quantity
                          end),
                      24) open_quantity,
               
               substr(max(case
                            when dtul.exercised_lots is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.exercised_lots
                          end),
                      24) exercised_lots,
               
               substr(max(case
                            when dtul.exercised_quantity is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.exercised_quantity
                          end),
                      24) exercised_quantity,
               
               substr(max(case
                            when dtul.expired_lots is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.expired_lots
                          end),
                      24) expired_lots,
               
               substr(max(case
                            when dtul.expired_quantity is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.expired_quantity
                          end),
                      24) expired_quantity,
               
               substr(max(case
                            when dtul.trade_price_type_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.trade_price_type_id
                          end),
                      24) trade_price_type_id,
               
               substr(max(case
                            when dtul.trade_price is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.trade_price
                          end),
                      24) trade_price,
               
               substr(max(case
                            when dtul.trade_price_unit_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.trade_price_unit_id
                          end),
                      24) trade_price_unit_id,
               
               substr(max(case
                            when dtul.formula_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.formula_id
                          end),
                      24) formula_id,
               
               substr(max(case
                            when dtul.index_instrument_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.index_instrument_id
                          end),
                      24) index_instrument_id,
               
               substr(max(case
                            when dtul.strike_price is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.strike_price
                          end),
                      24) strike_price,
               
               substr(max(case
                            when dtul.strike_price_unit_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.strike_price_unit_id
                          end),
                      24) strike_price_unit_id,
               
               substr(max(case
                            when dtul.premium_discount is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.premium_discount
                          end),
                      24) premium_discount,
               
               substr(max(case
                            when dtul.premium_discount_price_unit_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.premium_discount_price_unit_id
                          end),
                      24) premium_discount_price_unit_id,
               
               substr(max(case
                            when dtul.premium_due_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.premium_due_date
                          end),
                      24) premium_due_date,
               
               substr(max(case
                            when dtul.settlement_cur_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.settlement_cur_id
                          end),
                      24) settlement_cur_id,
               
               substr(max(case
                            when dtul.nominee_profile_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.nominee_profile_id
                          end),
                      24) nominee_profile_id,
               
               substr(max(case
                            when dtul.remarks is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.remarks
                          end),
                      24) remarks,
               
               substr(max(case
                            when dtul.leg_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.leg_no
                          end),
                      24) leg_no,
               
               substr(max(case
                            when dtul.created_by is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.created_by
                          end),
                      24) created_by,
               
               substr(max(case
                            when dtul.modified_by is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.modified_by
                          end),
                      24) modified_by,
               
               substr(max(case
                            when dtul.created_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.created_date
                          end),
                      24) created_date,
               
               substr(max(case
                            when last_modified_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             last_modified_date
                          end),
                      24) last_modified_date,
               
               substr(max(case
                            when option_expiry_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             option_expiry_date
                          end),
                      24) option_expiry_date,
               
               substr(max(case
                            when parent_int_derivative_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             parent_int_derivative_ref_no
                          end),
                      24) parent_int_derivative_ref_no,
               
               substr(max(case
                            when dtul.status is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             dtul.status
                          end),
                      24) status,
               
               substr(max(case
                            when market_location_country is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             market_location_country
                          end),
                      24) market_location_country,
               
               substr(max(case
                            when market_location_state is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             market_location_state
                          end),
                      24) market_location_state,
               
               substr(max(case
                            when market_location_city is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             market_location_city
                          end),
                      24) market_location_city,
               
               substr(max(case
                            when is_what_if is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             is_what_if
                          end),
                      24) is_what_if,
               
               substr(max(case
                            when payment_term is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             payment_term
                          end),
                      24) payment_term,
               
               substr(max(case
                            when payment_due_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             payment_due_date
                          end),
                      24) payment_due_date,
               
               substr(max(case
                            when is_imported is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             is_imported
                          end),
                      24) is_imported,
               
               substr(max(case
                            when closed_lots is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             closed_lots
                          end),
                      24) closed_lots,
               
               substr(max(case
                            when closed_quantity is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             closed_quantity
                          end),
                      24) closed_quantity,
               substr(max(case
                            when int_trade_parent_der_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             int_trade_parent_der_ref_no
                          end),
                      24) int_trade_parent_der_ref_no,
               substr(max(case
                            when is_internal_trade is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             is_internal_trade
                          end),
                      24) is_internal_trade,
               substr(max(case
                            when price_point_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             price_point_id
                          end),
                      24) price_point_id,
               substr(max(case
                            when available_price_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             available_price_id
                          end),
                      24) available_price_id,
               substr(max(case
                            when average_from_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             average_from_date
                          end),
                      24) average_from_date,
               substr(max(case
                            when average_to_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             average_to_date
                          end),
                      24) average_to_date,
               substr(max(case
                            when swap_type_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_type_1
                          end),
                      24) swap_type_1,
               
               substr(max(case
                            when swap_trade_price_type_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_trade_price_type_1
                          end),
                      24) swap_trade_price_type_1,
               
               substr(max(case
                            when swap_float_type_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_float_type_1
                          end),
                      24) swap_float_type_1,
               substr(max(case
                            when swap_trade_price_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_trade_price_1
                          end),
                      24) swap_trade_price_1,
               
               substr(max(case
                            when swap_trade_price_unit_id_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_trade_price_unit_id_1
                          end),
                      24) swap_trade_price_unit_id_1,
               
               substr(max(case
                            when swap_index_instrument_id_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_index_instrument_id_1
                          end),
                      24) swap_index_instrument_id_1,
               
               substr(max(case
                            when swap_formula_id_1 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_formula_id_1
                          end),
                      24) swap_formula_id_1,
               
               substr(max(case
                            when swap_type_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_type_2
                          end),
                      24) swap_type_2,
               
               substr(max(case
                            when swap_trade_price_type_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_trade_price_type_2
                          end),
                      24) swap_trade_price_type_2,
               
               substr(max(case
                            when swap_float_type_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_float_type_2
                          end),
                      24) swap_float_type_2,
               
               substr(max(case
                            when swap_trade_price_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_trade_price_2
                          end),
                      24) swap_trade_price_2,
               
               substr(max(case
                            when swap_trade_price_unit_id_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_trade_price_unit_id_2
                          end),
                      24) swap_trade_price_unit_id_2,
               
               substr(max(case
                            when swap_index_instrument_id_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_index_instrument_id_2
                          end),
                      24) swap_index_instrument_id_2,
               
               substr(max(case
                            when swap_formula_id_2 is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             swap_formula_id_2
                          end),
                      24) swap_formula_id_2,               
               substr(max(case
                            when pricing_invoicing_status is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             pricing_invoicing_status
                          end),
                      24) pricing_invoicing_status,
               substr(max(case
                            when settlement_price is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             settlement_price
                          end),
                      24) settlement_price,
               substr(max(case
                            when settlement_price_unit_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             settlement_price_unit_id
                          end),
                      24) settlement_price_unit_id,
               substr(max(case
                            when approval_status is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             approval_status
                          end),
                      24) approval_status,
               substr(max(case
                            when price_source_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             price_source_id
                          end),
                      24) price_source_id,
               substr(max(case
                            when traded_on is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             traded_on
                          end),
                      24) traded_on       
                from dtul_derivative_trade_ul dtul,
                     axs_action_summary       axs,
                     dbd_database_dump        dbd
               where dbd.dbd_id = axs.dbd_id
                 and dbd.process = gvc_process
                 and dtul.internal_action_ref_no =
                     axs.internal_action_ref_no
                 and axs.eff_date <= pd_trade_date
                 and axs.corporate_id = pc_corporate_id
               group by dtul.internal_derivative_ref_no) dtul
       where dtul.status <> 'Delete'
       and dtul.derivative_ref_no is not null;
      -- and nvl(dtul.is_internal_trade,'N')<>'Y';
  
    begin
    
      for cc in (select dcod.internal_derivative_ref_no,
                        sum(nvl(dcod.lots_closed, 0)) lots_closed,
                        sum(nvl(dcod.quantity_closed, 0)) quantity_closed
                   from dcoh_der_closeout_header dcoh,
                        dcod_der_closeout_detail dcod,
                        dbd_database_dump        dbd
                  where dcoh.internal_close_out_ref_no =
                        dcod.internal_close_out_ref_no
                    and dcoh.close_out_date <= pd_trade_date
                    and dcod.dbd_id = dcoh.dbd_id
                    and dcoh.dbd_id = dbd.dbd_id
                    and dbd.process = pc_process
                    and dcoh.corporate_id = pc_corporate_id
                    and dcoh.is_rolled_back = 'N'
                  group by dcod.internal_derivative_ref_no)
      loop
        update dt_derivative_trade drt
           set drt.total_lots_closed = cc.lots_closed,
               drt.total_qty_closed  = cc.quantity_closed
         where drt.internal_derivative_ref_no =
               cc.internal_derivative_ref_no
           and drt.corporate_id = pc_corporate_id
           and drt.dbd_id = pc_dbd_id;
      end loop;
    
      update dt_derivative_trade drt
         set drt.open_quantity = drt.total_quantity -  nvl(drt.total_qty_closed, 0)  -  nvl(drt.exercised_quantity, 0) - nvl(drt.expired_quantity,0)  ,
             drt.open_lots     = drt.total_lots -   nvl(drt.total_lots_closed, 0) - nvl(drt.exercised_lots, 0) - nvl(drt.expired_lots,0)
       where drt.corporate_id = pc_corporate_id
         and drt.dbd_id = pc_dbd_id;
    commit;
     /*update dt_derivative_trade drt
         set drt.status = 'Verified' 
       where drt.corporate_id = pc_corporate_id
       and ( nvl(drt.open_quantity,0) > 0 and  nvl(drt.open_lots,0) > 0)
         and drt.dbd_id = pc_dbd_id;*/
    end;
  
    insert into dt_fbi
      (dt_fbi_id,
       internal_derivative_ref_no,
       formula_inst_id,
       formula_id,
       instrument_id,
       price_source_id,
       price_point_id,
       available_price_id,
       fb_period_type,
       fb_period_sub_type,
       period_month,
       period_year,
       period_from_date,
       period_to_date,
       no_of_months,
       no_of_days,
       period_type_id,
       delivery_period_id,
       off_day_price,
       basis,
       basis_price_unit_id,
       fx_rate_type,
       fx_rate_,
       is_deleted,
       is_currency_curve,
       fb_period_type_id,
       monthly_prompt_month_id,
       leg_no,
       dbd_id)
      select dt_fbi_id,
             internal_derivative_ref_no,
             formula_inst_id,
             formula_id,
             instrument_id,
             price_source_id,
             price_point_id,
             available_price_id,
             fb_period_type,
             fb_period_sub_type,
             period_month,
             period_year,
             period_from_date,
             period_to_date,
             no_of_months,
             no_of_days,
             period_type_id,
             delivery_period_id,
             off_day_price,
             basis,
             basis_price_unit_id,
             fx_rate_type,
             fx_rate_,
             is_deleted,
             is_currency_curve,
             fb_period_type_id,
             monthly_prompt_month_id,
             leg_no,
             pc_dbd_id
        from dt_fbi@eka_appdb dtfbi
       where dtfbi.internal_derivative_ref_no in
             (select dt.internal_derivative_ref_no
                from dt_derivative_trade dt
               where dt.dbd_id = pc_dbd_id)
            and dtfbi.is_deleted ='N';
  
    for cc_dtfbi in (select dt.internal_derivative_ref_no,
                            dt.derivative_ref_no,
                            dt.corporate_id,
                            drm.dr_id_name,
                            nvl(drm.period_month, to_char(nvl(drm.period_date,drm.prompt_date), 'Mon')) period_month,
                            nvl(drm.period_year, to_char(nvl(drm.period_date,drm.prompt_date), 'yyyy')) period_year
                       from dt_derivative_trade   dt,
                            drm_derivative_master drm
                      where dt.dr_id = drm.dr_id
                        and dt.status = 'Verified'
                        and dt.is_what_if = 'N'
                        and dt.trade_date <= pd_trade_date
                        and dt.corporate_id = pc_corporate_id
                        and dt.dbd_id = pc_dbd_id)
    loop
    
      update dt_fbi dtfbi
         set dtfbi.period_month = cc_dtfbi.period_month,
             dtfbi.period_year  = cc_dtfbi.period_year
       where dtfbi.dbd_id = pc_dbd_id
         and dtfbi.internal_derivative_ref_no =
             cc_dtfbi.internal_derivative_ref_no
         and nvl(dtfbi.fb_period_type, 'NA') in ('Delivered', 'NA')
         and dtfbi.period_month is null;
    
      update dt_fbi dtfbi
         set dtfbi.period_month = cc_dtfbi.period_month,
             dtfbi.period_year  = cc_dtfbi.period_year
       where dtfbi.dbd_id = pc_dbd_id
         and dtfbi.internal_derivative_ref_no =
             cc_dtfbi.internal_derivative_ref_no
         and nvl(dtfbi.fb_period_type, 'NA') in ('Prompt', 'Settlement')
         and nvl(dtfbi.fb_period_sub_type, 'NA') in ('Delivery Month')
         and dtfbi.period_month is null;
    
    end loop;
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_cdc_create_dt_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_cdc_create_crtd_data(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_user_id      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
  
    insert into crtd_cur_trade_details
      (ctrd_id,
       internal_treasury_ref_no,
       trade_type,
       cur_id,
       leg_no,
       amount,
       is_base,
       dbd_id)
      select ctrd_id,
             internal_treasury_ref_no,
             decode(trade_type, 'Empty_String', null, trade_type),
             decode(cur_id, 'Empty_String', null, cur_id),
             decode(leg_no, 'Empty_String', null, leg_no),
             decode(amount, 'Empty_String', null, amount),
             decode(is_base, 'Empty_String', null, is_base),
             gvc_dbd_id
      
        from (select
              ---internal_action_ref_no, internal_treasury_ref_no, trade_type, cur_id, leg_no, amount, is_base from crtdul_cur_trade_details_ul
               crtd_id ctrd_id,
               internal_treasury_ref_no,
               substr(max(case
                            when dtul. trade_type is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             trade_type
                          end),
                      24) trade_type,
               
               substr(max(case
                            when dtul. cur_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || cur_id
                          end),
                      24) cur_id,
               
               substr(max(case
                            when dtul. leg_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || leg_no
                          end),
                      24) leg_no,
               substr(max(case
                            when dtul. amount is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || amount
                          end),
                      24) amount,
               substr(max(case
                            when dtul. is_base is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || is_base
                          end),
                      24) is_base
              
                from crtdul_cur_trade_details_ul dtul,
                     axs_action_summary          axs,
                     dbd_database_dump           dbd
               where dbd.dbd_id = axs.dbd_id
                 and dbd.process = gvc_process
                 and dtul.internal_action_ref_no =
                     axs.internal_action_ref_no
                 and axs.eff_date <= pd_trade_date
                 and axs.corporate_id = pc_corporate_id
               group by crtd_id,
                        internal_treasury_ref_no);
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_cdc_create_crtd_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
  end;

  procedure sp_cdc_create_ct_data(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into ct_currency_trade
      (internal_treasury_ref_no,
       dr_id,
       corporate_id,
       treasury_ref_no,
       external_ref_no,
       deal_type_id,
       trade_date,
       exchange_rate,
       fx_rate_base_to_foreign,
       bank_id,
       bank_acc_id,
       bank_charges,
       bank_charges_type,
       bank_charges_cur_id,
       profit_center_id,
       strategy_id,
       purpose_id,
       nominee_profile_id,
       remarks,
       created_by,
       modified_by,
       created_date,
       modified_date,
       status,
       trader_id,
       counter_party_id,
       master_contract_id,
       payment_terms_id,
       payment_due_date,
       --HDL_FX_settlement change start 
       outstanding_amount,
       outstanding_amount_currency_id,
       premium_rate,
       outstanding_leg1_amt,
       outstanding_leg2_amt,       
       --hdl_fx_settlement change end
       option_premium,
       option_premium_unit_id,
       value_date,
       parent_int_fx_ref_no,
       spot_rate,
       margin_rate,
       other_charges,
       slippage_rate,
       is_exchange_comp,
       dbd_id)

      select internal_treasury_ref_no,
             decode(dr_id, 'Empty_String', null, dr_id),
             decode(corporate_id, 'Empty_String', null, corporate_id),
             decode(treasury_ref_no, 'Empty_String', null, treasury_ref_no),
             decode(external_ref_no, 'Empty_String', null, external_ref_no),
             decode(deal_type_id, 'Empty_String', null, deal_type_id),
             decode(trade_date, 'Empty_String', null, trade_date),
             decode(exchange_rate, 'Empty_String', null, exchange_rate),
             decode(fx_rate_base_to_foreign,
                    'Empty_String',
                    null,
                    fx_rate_base_to_foreign),
             decode(bank_id, 'Empty_String', null, bank_id),
             decode(bank_acc_id, 'Empty_String', null, bank_acc_id),
             decode(bank_charges, 'Empty_String', null, bank_charges),
             decode(bank_charges_type,
                    'Empty_String',
                    null,
                    bank_charges_type),
             decode(bank_charges_cur_id,
                    'Empty_String',
                    null,
                    bank_charges_cur_id),
             decode(profit_center_id,
                    'Empty_String',
                    null,
                    profit_center_id),
             decode(strategy_id, 'Empty_String', null, strategy_id),
             decode(purpose_id, 'Empty_String', null, purpose_id),
             decode(nominee_profile_id,
                    'Empty_String',
                    null,
                    nominee_profile_id),
             decode(remarks, 'Empty_String', null, remarks),
             decode(created_by, 'Empty_String', null, created_by),
             decode(modified_by, 'Empty_String', null, modified_by),
             
             decode(created_date, 'Empty_String', null, created_date),
             decode(modified_date, 'Empty_String', null, modified_date),
             
             decode(status, 'Empty_String', null, status),
             decode(trader_id, 'Empty_String', null, trader_id),
             decode(counter_party_id,
                    'Empty_String',
                    null,
                    counter_party_id),
             decode(master_contract_id,
                    'Empty_String',
                    null,
                    master_contract_id),
             decode(payment_terms_id,
                    'Empty_String',
                    null,
                    payment_terms_id),
             decode(payment_due_date,
                    'Empty_String',
                    null,
                    payment_due_date),
             --HDL_FX_settlement change start
             decode(outstanding_amount,
                    'empty_string',
                    null,
                    outstanding_amount),
             decode(outstanding_amount_currency_id,
                    'empty_string',
                    null,
                    outstanding_amount_currency_id),
             decode(premium_rate,
                    'empty_string',
                    null,
                    premium_rate),  
             0,
             0,                          
             --hdl_fx_settlement change end  
              decode(option_premium,
                    'empty_string',
                    null,
                    option_premium),
             decode(option_premium_unit_id,
                    'empty_string',
                    null,
                    option_premium_unit_id),  
              decode(value_date,
                    'empty_string',
                    null,
                    value_date),
             decode(parent_int_fx_ref_no,
                    'empty_string',
                    null,
                    parent_int_fx_ref_no),
             decode(spot_rate,
                    'empty_string',
                    null,
                    spot_rate),
             decode(margin_rate,
                    'empty_string',
                    null,
                    margin_rate), 
             decode(other_charges,
                    'empty_string',
                    null,
                    other_charges),
              decode(slippage_rate,
                    'empty_string',
                    null,
                    slippage_rate),        
              decode(is_exchange_comp,
                    'empty_string',
                    null,
                    is_exchange_comp),                    
             gvc_dbd_id
        from (select
              
               internal_treasury_ref_no,
               
               substr(max(case
                            when ctul. entry_type is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             entry_type
                          end),
                      24) entry_type,
               
               substr(max(case
                            when ctul. dr_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || dr_id
                          end),
                      24) dr_id,
               
               substr(max(case
                            when ctul. corporate_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             ctul.corporate_id
                          end),
                      24) corporate_id,
               
               substr(max(case
                            when ctul. treasury_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             treasury_ref_no
                          end),
                      24) treasury_ref_no,
               
               substr(max(case
                            when ctul. external_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             external_ref_no
                          end),
                      24) external_ref_no,
               
               substr(max(case
                            when ctul.deal_type_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             deal_type_id
                          end),
                      24) deal_type_id,
               
               substr(max(case
                            when ctul.trade_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             ctul.trade_date
                          end),
                      24) trade_date,
               
               substr(max(case
                            when ctul.exchange_rate is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             exchange_rate
                          end),
                      24) exchange_rate,
               
               substr(max(case
                            when ctul. fx_rate_base_to_foreign is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             fx_rate_base_to_foreign
                          end),
                      24) fx_rate_base_to_foreign,
               
               substr(max(case
                            when ctul. bank_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || bank_id
                          end),
                      24) bank_id,
               
               substr(max(case
                            when ctul. bank_acc_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             bank_acc_id
                          end),
                      24) bank_acc_id,
               
               substr(max(case
                            when ctul.bank_charges is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             bank_charges
                          end),
                      24) bank_charges,
               
               substr(max(case
                            when ctul.bank_charges_type is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             bank_charges_type
                          end),
                      24) bank_charges_type,
               
               substr(max(case
                            when ctul. bank_charges_cur_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             bank_charges_cur_id
                          end),
                      24) bank_charges_cur_id,
               
               substr(max(case
                            when ctul.profit_center_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             profit_center_id
                          end),
                      24) profit_center_id,
               
               substr(max(case
                            when ctul. strategy_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             strategy_id
                          end),
                      24) strategy_id,
               
               substr(max(case
                            when ctul. purpose_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             purpose_id
                          end),
                      24) purpose_id,
               
               substr(max(case
                            when ctul. nominee_profile_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             nominee_profile_id
                          end),
                      24) nominee_profile_id,
               
               substr(max(case
                            when ctul. remarks is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') || remarks
                          end),
                      24) remarks,
               
               substr(max(case
                            when ctul. created_by is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             ctul.created_by
                          end),
                      24) created_by,
               
               substr(max(case
                            when ctul. modified_by is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             modified_by
                          end),
                      24) modified_by,
               
               substr(max(case
                            when ctul. created_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             ctul.created_date
                          end),
                      24) created_date,
               
               substr(max(case
                            when ctul. modified_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             modified_date
                          end),
                      24) modified_date,
               
               substr(max(case
                            when ctul. status is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             ctul.status
                          end),
                      24) status,
               
               substr(max(case
                            when ctul. trader_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             trader_id
                          end),
                      24) trader_id,
               
               substr(max(case
                            when ctul. counter_party_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             counter_party_id
                          end),
                      24) counter_party_id,
               
               substr(max(case
                            when ctul. master_contract_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             master_contract_id
                          end),
                      24) master_contract_id,
               
               substr(max(case
                            when ctul. payment_terms_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             payment_terms_id
                          end),
                      24) payment_terms_id,
               
               substr(max(case
                            when ctul. payment_due_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             payment_due_date
                          end),
                      24) payment_due_date,
                --HDL_FX_settlement change start
                substr(max(case
                            when ctul. outstanding_amount is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             outstanding_amount
                          end),
                      24) outstanding_amount,
                substr(max(case
                            when ctul. outstanding_amount_currency_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             outstanding_amount_currency_id
                          end),
                      24) outstanding_amount_currency_id,       
                substr(max(case
                            when ctul. premium_rate is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             premium_rate
                          end),
                      24) premium_rate ,                   
                --HDL_FX_settlement change end     
                 substr(max(case
                            when ctul. option_premium is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             option_premium
                          end),
                      24) option_premium,
                 substr(max(case
                            when ctul. option_premium_unit_id is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             option_premium_unit_id
                          end),
                      24) option_premium_unit_id,
                 substr(max(case
                            when ctul. value_date is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             value_date
                          end),
                      24) value_date,  
                 substr(max(case
                            when ctul. parent_int_fx_ref_no is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             parent_int_fx_ref_no
                          end),
                      24) parent_int_fx_ref_no,
                  substr(max(case
                            when ctul. spot_rate is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             spot_rate
                          end),
                      24) spot_rate,
                   substr(max(case
                            when ctul. margin_rate is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             margin_rate
                          end),
                      24) margin_rate,
                   substr(max(case
                            when ctul. other_charges is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             other_charges
                          end),
                      24) other_charges,
                    substr(max(case
                            when ctul. slippage_rate is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             slippage_rate
                          end),
                      24) slippage_rate, 
                      substr(max(case
                            when ctul. is_exchange_comp is not null then
                             to_char(axs.created_date, 'yyyymmddhh24missff9') ||
                             is_exchange_comp
                          end),
                      24) is_exchange_comp
                from ctul_currency_trade_ul ctul,
                     axs_action_summary     axs,
                     dbd_database_dump      dbd
               where dbd.dbd_id = axs.dbd_id
                 and dbd.process = gvc_process
                 and ctul.internal_action_ref_no =
                     axs.internal_action_ref_no
                 and axs.eff_date <= pd_trade_date
                 and axs.corporate_id = pc_corporate_id
               group by ctul. internal_treasury_ref_no) ctul
      
       where ctul.status <> 'Delete';
  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_cdc_create_ct_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

end; 
/
create or replace package "PKG_CDC_PRE_CHECK_PROCESS" is

  -- author  : siva
  -- created :
  -- purpose : pre check data for eod and eom
  gvc_dbd_id varchar2(15);

  gvc_process varchar2(3);

  procedure sp_pre_check(pc_corporate_id varchar2,
                         pd_trade_date   date,
                         pc_user_id      varchar2,
                         pc_process      varchar2);

  procedure sp_pre_check_corp_fx_rate(pc_corporate_id varchar2,
                                      pd_trade_date   date,
                                      pc_user_id      varchar2,
                                      pc_process      varchar2);

  procedure sp_pre_check_derivatives(pc_corporate_id varchar2,
                                     pd_trade_date   date,
                                     pc_user_id      varchar2,
                                     pc_process      varchar2);

  procedure sp_pre_check_swap_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2);

  procedure sp_pre_check_currency(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2,
                                  pc_dbd_id       varchar2);
  procedure sp_record_expired_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_process_id   varchar2);
  procedure sp_record_expired_currency(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_process_id   varchar2);

  procedure sp_pre_check_gather_stats;

end; 
/
create or replace package body "PKG_CDC_PRE_CHECK_PROCESS" is

  procedure sp_pre_check
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_pre_check
    --        author                                    : janna
    --        created date                              : 20th jan 2009
    --        purpose                                   : calls all precheck packages
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        pd_trade_date                             : trade date
    --        pc_user_id                                : user id
    --        pc_process                                : process eod or eom
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 100;
  begin
    gvc_process := pc_process;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    select max(dbd.dbd_id)
      into gvc_dbd_id
      from dbd_database_dump dbd
     where dbd.corporate_id = pc_corporate_id
       and dbd.process = pc_process
       and dbd.trade_date = pd_trade_date;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_corp_fx_rate');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_corp_fx_rate(pc_corporate_id,
                              pd_trade_date,
                              pc_user_id,
                              pc_process);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'inside sp_pre_check process !!!!');
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_derivatives');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_derivatives(pc_corporate_id,
                             pd_trade_date,
                             pc_user_id,
                             pc_process);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_currency');
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_currency(pc_corporate_id,
                          pd_trade_date,
                          pc_user_id,
                          pc_process,
                          gvc_dbd_id);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_swap_derivatives');
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_swap_derivatives(pc_corporate_id,
                                  pd_trade_date,
                                  pc_user_id,
                                  pc_process,
                                  gvc_dbd_id);
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            gvc_dbd_id,
                            vn_logno,
                            'sp_pre_check_gather_stats');
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    sp_pre_check_gather_stats;
  
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while pnl calculation');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_corp_fx_rate(pc_corporate_id varchar2,
                                      pd_trade_date   date,
                                      pc_user_id      varchar2,
                                      pc_process      varchar2) is
    pragma autonomous_transaction;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_error_string    varchar2(1000);
  
    cursor cur_currency is
      select cm.cur_id,
             cm.cur_code,
             akc.base_cur_id,
             akc.base_currency_name
        from cm_currency_master cm,
             ak_corporate       akc
       where akc.corporate_id = pc_corporate_id
         and cm.is_sub_cur = 'N';
  
  begin
    for cur_currency_rows in cur_currency
    loop
      if pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                  cur_currency_rows.base_cur_id,
                                                  cur_currency_rows.cur_id,
                                                  pd_trade_date,
                                                  1) = -1 then
        vc_error_string := vc_error_string || cur_currency_rows.cur_code || ',';
      end if;
    end loop;
    if length(vc_error_string) > 1 then
      vc_error_string := substr(vc_error_string,
                                1,
                                length(vc_error_string) - 1);
    
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_corp_fx_rate',
                                                           'PHY-003',
                                                           vc_error_string,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    
    end if;
  end;
  procedure sp_pre_check_derivatives(pc_corporate_id varchar2,
                                     pd_trade_date   date,
                                     pc_user_id      varchar2,
                                     pc_process      varchar2) is
    pragma autonomous_transaction;
    /******************************************************************************************************************************************
    procedure name                            : sp_pre_check_derivatives
    author                                    : janna
    created date                              : 11th jan 2009
    purpose                                   : pre check for derivativ trades
    
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_user_id                                : user id
    pc_process                                : process
    
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vc_position_check  varchar2(100);
    vc_error_type      varchar2(7);
    vc_dbd_id          varchar2(20);
  
    cursor cur_3rd_wed is
      select drm.dr_id,
             drm.instrument_id,
             dt.average_to_date,
             dt.derivative_ref_no,
             div.price_source_id,
             div.available_price_id,
             dim.underlying_instrument_id,
             ps.price_source_name,
             apm.available_price_name,
             div.price_unit_id,
             pum.price_unit_name,
             dim_underlying.instrument_name,
             dim.delivery_calender_id,
             pdc.is_daily_cal_applicable,
             pdc.is_monthly_cal_applicable
        from dt_derivative_trade          dt,
             drm_derivative_master        drm,
             dim_der_instrument_master    dim,
             irm_instrument_type_master   irm,
             div_der_instrument_valuation div,
             ps_price_source              ps,
             apm_available_price_master   apm,
             pum_price_unit_master        pum,
             dim_der_instrument_master    dim_underlying,
             pdc_prompt_delivery_calendar pdc
       where dt.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.instrument_type_id = irm.instrument_type_id
         and irm.instrument_type = 'Average'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dim.underlying_instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and dt.dbd_id = vc_dbd_id
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and div.price_source_id = ps.price_source_id
         and div.available_price_id = apm.available_price_id
         and div.price_unit_id = pum.price_unit_id
         and div.instrument_id = dim_underlying.instrument_id
         and dim.delivery_calender_id = pdc.prompt_delivery_calendar_id(+);
    vc_caluclate_val_dr_id varchar2(30);
    vd_3rd_wed_of_qp       varchar2(15);
    workings_days          number;
    vd_quotes_date         date;
    vc_calculate_price     number;
    vc_dr_id_name          varchar2(30);
    vc_prompt_date         date;
    vc_prompt_month        varchar2(15);
    vc_prompt_year         number;
  
  begin
    -- get the dump id
    select max((dbd.dbd_id))
      into vc_dbd_id
      from dbd_database_dump dbd
     where corporate_id = pc_corporate_id
       and process = pc_process
       and trade_date = pd_trade_date;
    gvc_dbd_id := vc_dbd_id;
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_pre_check_derivatives',
                 pc_process || ' - M2M-025 @' || systimestamp);
  
    -- check all the quotes entry insurments price source with valuation price source
    --TODO - Siva - If both are not matching we have raise error.
    insert into eel_eod_eom_exception_log
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-025',
             t.instrument_name,
             null,
             pc_process,
             systimestamp,
             pc_user_id,
             null,
             pd_trade_date
        from (select stragg(dim.instrument_name) instrument_name
                from dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and pdm.product_asset_class = 'Commodity'
                 and dim.is_currency_curve = 'N'
                 and dim.is_active = 'Y'
                 and dim.is_deleted = 'N'
                 and pdm.is_active = 'Y'
                 and pdm.is_deleted = 'N'
                 and not exists
               (select *
                        from div_der_instrument_valuation div
                       where div.instrument_id = dim.instrument_id
                         and div.is_deleted = 'N'
                         and div.price_source_id is not null)) t
       where t.instrument_name is not null;
    sp_write_log(pc_corporate_id,
                 pd_trade_date,
                 'sp_pre_check_derivatives',
                 pc_process || ' - M2M-001 @' || systimestamp);
  
    -- check all the derivative deals existing in the system are verified
    insert into eel_eod_eom_exception_log
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-001',
             'Following derivative trades are not verified',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             drt.dr_id,
             pd_trade_date
        from dt_derivative_trade drt
       where drt.status = 'None'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.trade_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id;
    -- check settlement price should be avaialble for all open future trades as on eod
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-002',
             t.available_price_name || ' Price for' || ' ' ||
             t.instrument_name || ' ' || 'is missing; ' || 'Trade Date :' ||
             to_char(t.valid_quote_date, 'dd-Mon-yyyy') || ' ' ||
             'Price Source :' || t.price_source_name || ' ' ||
             'Price Unit :' || t.price_unit_name || ' ' || 'Prompt Date :' ||
             t.dr_id_name,
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null, -- t.dr_id,
             pd_trade_date
        from (select drt.dr_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     dim.instrument_name,
                     drm.dr_id_name,
                     ps.price_source_name,
                     cdim.valid_quote_date
                from dt_derivative_trade          drt,
                     pdd_product_derivative_def   pdd,
                     drm_derivative_master        drm,
                     dim_der_instrument_master    dim,
                     irm_instrument_type_master   irm,
                     div_der_instrument_valuation div,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     ps_price_source              ps,
                     cdim_corporate_dim           cdim
               where drt.dr_id = drm.dr_id
                 and drt.corporate_id = pc_corporate_id
                 and drm.instrument_id = dim.instrument_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Future', 'Forward')
                 and drt.status = 'Verified'
                 and drt.is_what_if = 'N'
                 and dim.is_active='Y'
                 and drt.trade_price_type_id in
                     ('Fixed', 'Index', 'Formula')
                 and dim.instrument_id = div.instrument_id
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id(+)
                 and div.price_source_id = ps.price_source_id
                 and div.is_deleted = 'N'
                 and drt.open_quantity > 0
                 and drt.trade_date <= pd_trade_date
                 and drt.dbd_id = vc_dbd_id
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = drm.instrument_id
                 and not exists
               (select edi.dr_id
                        from edi_expired_dr_id edi
                       where edi.corporate_id = pc_corporate_id
                         and edi.process = pc_process
                         and edi.dr_id = drt.dr_id)
                 and not exists
               (select drt.dr_id
                        from eodeom_derivative_quote_detail edq,
                             cdim_corporate_dim             cdim
                       where edq.eodeom_trade_date = pd_trade_date
                         and edq.dq_trade_date = cdim.valid_quote_date
                         and edq.price <> 0
                         and edq.corporate_id = drt.corporate_id
                         and edq.dr_id = drt.dr_id
                         and edq.available_price_id = div.available_price_id
                         and edq.price_unit_id = div.price_unit_id
                         and cdim.corporate_id = pc_corporate_id
                         and cdim.instrument_id = edq.instrument_id
                            -- and apm.available_price_name = 'Settlement'
                            --  and apm.is_active = 'Y'
                            --   and apm.is_deleted = 'N'
                         and edq.dbd_id = vc_dbd_id
                       group by drt.dr_id)
               group by drt.dr_id,
                        apm.available_price_name,
                        pum.price_unit_name,
                        dim.instrument_name,
                        drm.dr_id_name,
                        ps.price_source_name,
                        cdim.valid_quote_date) t
       group by t.dr_id,
                t.available_price_name,
                t.price_unit_name,
                t.instrument_name,
                t.dr_id_name,
                t.price_source_name,
                t.valid_quote_date;
    -- check settlement price should be avaialble for all open option trades as on eod
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-003',
             instrument_type || ' ' || t.dr_id_name || ' @ ' ||
             t.strike_price || ' ' || ppu.price_unit_name || '( ' ||
             t.available_price_name || ' Price in ' || t.price_unit_name || ')' ||
             'Price Source:' || t.price_source_name || ' Trade Date :' ||
             to_char(t.valid_quote_date, 'dd-Mon-yyyy'),
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null, --t.dr_id,
             pd_trade_date
        from pum_price_unit_master ppu,
             qum_quantity_unit_master qum,
             cm_currency_master cm,
             (select drt.dr_id,
                     dim.instrument_name instrument_type,
                     drt.strike_price,
                     drt.strike_price_unit_id,
                     apm.available_price_name,
                     pum.price_unit_name,
                     drm.dr_id_name,
                     ps.price_source_name,
                     cdim.valid_quote_date
                from dt_derivative_trade          drt,
                     pdd_product_derivative_def   pdd,
                     drm_derivative_master        drm,
                     dim_der_instrument_master    dim,
                     irm_instrument_type_master   irm,
                     div_der_instrument_valuation div,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     ps_price_source              ps,
                     cdim_corporate_dim           cdim
               where drt.corporate_id = pc_corporate_id
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and drt.dbd_id = vc_dbd_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id(+)
                 and div.price_source_id = ps.price_source_id
                 and drt.status = 'Verified'
                 and drt.is_what_if = 'N'
                 and drt.open_quantity > 0
                 and drt.trade_date <= pd_trade_date
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = drm.instrument_id
                 and not exists
               (select edi.dr_id
                        from edi_expired_dr_id edi
                       where edi.corporate_id = pc_corporate_id
                         and edi.process = pc_process
                         and edi.dr_id = drt.dr_id)
                 and drt.dr_id not in
                     (select drt.dr_id
                        from eodeom_derivative_quote_detail edq,
                             cdim_corporate_dim             cdim
                       where drt.corporate_id = pc_corporate_id
                         and drt.trade_date <= pd_trade_date
                         and edq.eodeom_trade_date = pd_trade_date
                         and edq.dq_trade_date = cdim.valid_quote_date
                         and drt.status = 'Verified'
                         and edq.price <> 0
                         and drt.dr_id = edq.dr_id
                         and edq.available_price_id = div.available_price_id
                         and edq.price_unit_id = div.price_unit_id
                         and edq.price_source_id = div.price_source_id
                         and drt.dbd_id = vc_dbd_id
                         and drt.corporate_id = edq.corporate_id
                         and cdim.corporate_id = pc_corporate_id
                         and cdim.instrument_id = edq.instrument_id)) t
       where t.strike_price_unit_id = ppu.price_unit_id
         and ppu.weight_unit_id = qum.qty_unit_id
         and ppu.cur_id = cm.cur_id
       group by instrument_type,
                t.strike_price,
                ppu.price_unit_name,
                cm.cur_code,
                ppu.weight,
                qum.qty_unit,
                t.available_price_name,
                t.price_unit_name,
                t.dr_id,
                t.dr_id_name,
                t.price_source_name,
                t.valid_quote_date;
    -- check settlement price should be available for all closed trades as on eod
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-002',
             'Settlement Price for Close out date is missing,' ||
             t.instrument_name || ',' || t.dr_id_name || ' Close out date:' ||
             t.close_out_date || '( ' || t.available_price_name || ',' ||
             t.price_unit_name || ')',
             stragg(t.derivative_ref_no) derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null,
             pd_trade_date
        from (select drt.dr_id,
                     dim.instrument_name,
                     drm.dr_id_name,
                     dcoh.close_out_date,
                     drt.derivative_ref_no,
                     apm.available_price_name,
                     pum.price_unit_name
                from dt_derivative_trade          drt,
                     pdd_product_derivative_def   pdd,
                     drm_derivative_master        drm,
                     dim_der_instrument_master    dim,
                     irm_instrument_type_master   irm,
                     div_der_instrument_valuation div,
                     apm_available_price_master   apm,
                     pum_price_unit_master        pum,
                     dcoh_der_closeout_header     dcoh,
                     dcod_der_closeout_detail     dcod
               where drt.dr_id = drm.dr_id
                 and drt.corporate_id = pc_corporate_id
                 and drm.instrument_id = dim.instrument_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                    --and    irm.instrument_type_id = 'irmf'
                 and dim.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and div.available_price_id = apm.available_price_id
                 and div.price_unit_id = pum.price_unit_id(+)
                 and drt.trade_date <= pd_trade_date
                 and drt.dbd_id = vc_dbd_id
                 and drt.is_what_if = 'N'
                 and drt.internal_derivative_ref_no =
                     dcod.internal_derivative_ref_no
                 and dcod.internal_close_out_ref_no =
                     dcoh.internal_close_out_ref_no
                 and dcoh.close_out_date <= pd_trade_date
                    --and    dcoh.dbd_id = vc_dbd_id
                 and dcoh.is_rolled_back = 'N'
                 and not exists
               (select drt.dr_id
                        from dq_derivative_quotes        dq,
                             dqd_derivative_quote_detail dqd
                       where dq.dq_id = dqd.dq_id
                         and dq.dbd_id = dqd.dbd_id
                         and dq.trade_date = dcoh.valid_closeout_date
                         and dqd.price <> 0
                         and dqd.dr_id = drt.dr_id
                         and dq.corporate_id = drt.corporate_id
                         and upper(dq.entry_type) = upper(pdd.traded_on)
                         and dq.instrument_id = dim.instrument_id
                         and dqd.available_price_id = div.available_price_id
                         and dqd.price_unit_id = div.price_unit_id
                         and dq.dbd_id = vc_dbd_id
                      
                      )
               group by drt.dr_id,
                        dcoh.close_out_date,
                        drt.derivative_ref_no,
                        dim.instrument_name,
                        drm.dr_id_name,
                        apm.available_price_name,
                        pum.price_unit_name) t
       group by t.instrument_name,
                t.dr_id_name,
                t.available_price_name,
                t.price_unit_name,
                t.close_out_date;
    /* not required since for expired/exercised, we dont use market rates
    -- check settlement price should be avaialble for all exercised/expired trades as on eod
    insert into eel_eod_eom_exception_log eel
        (corporate_id,
         submodule_name,
         exception_code,
         data_missing_for,
         trade_ref_no,
         process,
         process_run_date,
         process_run_by,
         dr_id,
         trade_date)
        select pc_corporate_id,
               'derivatives pre-check',
               'm2m-003', --preeti check for code
               instrument_type || ' @ ' || t.strike_price || ' ' ||
               cm.cur_code || '/' || ppu.weight || qum.qty_unit,
               null as derivative_ref_no,
               pc_process,
               systimestamp,
               pc_user_id,
               t.dr_id,
               pd_trade_date
        from   ppu_product_price_units ppu,
               qum_quantity_unit_master qum,
               cm_currency_master cm,
               (select drt.dr_id,
                       irm.instrument_type,
                       drt.strike_price,
                       drt.strike_price_unit_id
                from   drt_derivative_trade       drt,
                       pdd_product_derivative_def pdd,
                       drm_derivative_master      drm,
                       dim_der_instrument_master  dim,
                       irm_instrument_type_master irm
                where  drt.corporate_id = pc_corporate_id
                and    drt.dr_id = drm.dr_id
                and    drm.instrument_id = dim.instrument_id
                and    drt.dbd_id = vc_dbd_id
                and    pdd.derivative_def_id = dim.derivative_def_id
                and    irm.instrument_type_id = dim.instrument_type_id
                and    irm.instrument_type_id in
                       ('irmco', 'irmpo', 'irmotco', 'irmotpo')
                and    drt.status in ('exercised','expired')
                --and    drt.open_quantity > 0
                and    drt.trade_date <= pd_trade_date
                and    drt.dr_id not in
                       (select drt.dr_id
                         from   drt_derivative_trade drt,
                                dq_derivative_quotes dq
                         where  drt.corporate_id = pc_corporate_id
                         and    drt.trade_date <= pd_trade_date
                         and    dq.trade_date = drt.exercised_expired_date
                         and    drt.status in ('exercised','expired')
                         and    dq.settlement_price <> 0
                         and    dq.dr_id = drt.dr_id
                         and    dq.dbd_id = drt.dbd_id
                         and    dq.dbd_id = vc_dbd_id
                         and    dq.corporate_id = drt.corporate_id)) t
        where  t.strike_price_unit_id = ppu.price_unit_id
        and    ppu.weight_unit_id = qum.qty_unit_id
        and    ppu.cur_id = cm.cur_id
        group  by instrument_type,
                  t.strike_price,
                  cm.cur_code,
                  ppu.weight,
                  qum.qty_unit,
                  dr_id;
     */
    -- check for trades beyond expiry date which are still open and throw error
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-023',
             'Following derivative trades are not closed/expired/exercised',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             drt.dr_id,
             pd_trade_date,
             'Error'
        from dt_derivative_trade   drt,
             drm_derivative_master drm
       where drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.trade_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id
         and drt.dr_id = drm.dr_id
         and drm.expiry_date <= pd_trade_date;
    -- check for trades beyond first notice date which are still open and warn
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-023',
             'Following derivative trades are not closed/expired/exercised',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             drt.dr_id,
             pd_trade_date,
             'Warning'
        from dt_derivative_trade   drt,
             drm_derivative_master drm
       where drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.trade_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id
         and drt.dr_id = drm.dr_id
         and drm.first_notice_date <= pd_trade_date
         and drm.expiry_date > pd_trade_date;
  
    --  Check to identify whether the Average Trades available in the System are Settled:
  
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-027',
             'Following Average trades were not Setteled',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null,
             pd_trade_date,
             'Error'
        from dt_derivative_trade drt
       where drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.corporate_id = pc_corporate_id
         and drt.average_to_date <= pd_trade_date
         and drt.dbd_id = vc_dbd_id;
  
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-028',
             'Market Premium were missing for the Following Average trades, Prompt Date : ' ||
             drm.dr_id_name || ' (Trade Date : ' ||
             to_char(cdim.valid_quote_date, 'dd-Mon-yyyy') || ' )',
             drt.derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             null, -- drt.dr_id,
             pd_trade_date,
             'Error'
        from dt_derivative_trade        drt,
             drm_derivative_master      drm,
             dim_der_instrument_master  dim,
             irm_instrument_type_master irm,
             cdim_corporate_dim         cdim
       where drt.dr_id = drm.dr_id
         and drt.corporate_id = pc_corporate_id
         and drm.instrument_id = dim.instrument_id
         and dim.instrument_type_id = irm.instrument_type_id
         and irm.instrument_type = 'Average'
         and drt.status = 'Verified'
         and drt.is_what_if = 'N'
         and drt.open_quantity > 0
         and drt.trade_date <= pd_trade_date
         and pd_trade_date between drt.average_from_date and
             drt.average_to_date
         and drt.dbd_id = vc_dbd_id
         and cdim.corporate_id = pc_corporate_id
         and cdim.instrument_id = drm.instrument_id
         and not exists
       (select drt.dr_id
                from eodeom_derivative_quote_detail eodeom,
                     cdim_corporate_dim             cdim
               where eodeom.price_source_id = drt.price_source_id
                 and eodeom.available_price_id = drt.available_price_id
                 and eodeom.dr_id = drt.dr_id
                 and eodeom.dbd_id = vc_dbd_id
                 and eodeom.eodeom_trade_date = pd_trade_date
                 and eodeom.dq_trade_date = cdim.valid_quote_date
                 and eodeom.price <> 0
                 and eodeom.corporate_id = pc_corporate_id
                 and cdim.corporate_id = pc_corporate_id
                 and cdim.instrument_id = eodeom.instrument_id);
  
    ---Check to identify the Prompt Date Price Quotes for the Available Average Trades:
  
    for cur_3rd_wed_rows in cur_3rd_wed
    loop
    
      vd_3rd_wed_of_qp := pkg_cdc_derivatives_process.f_get_next_day(cur_3rd_wed_rows.average_to_date,
                                                                     'Wed',
                                                                     3);
      while true
      loop
        if pkg_cdc_derivatives_process.f_is_day_holiday(cur_3rd_wed_rows.underlying_instrument_id,
                                                        vd_3rd_wed_of_qp) then
          vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
        else
          exit;
        end if;
      end loop;
    
      --- get 3rd wednesday  before QP period
      --  Get the quotation date = Trade Date +2 working Days
    
      if vd_3rd_wed_of_qp < pd_trade_date then
        workings_days  := 0;
        vd_quotes_date := pd_trade_date + 1;
        while workings_days <> 2
        loop
          if pkg_cdc_derivatives_process.f_is_day_holiday(cur_3rd_wed_rows.underlying_instrument_id,
                                                          vd_quotes_date) then
            vd_quotes_date := vd_quotes_date + 1;
          else
            workings_days := workings_days + 1;
            if workings_days <> 2 then
              vd_quotes_date := vd_quotes_date + 1;
            end if;
          end if;
        end loop;
        vd_3rd_wed_of_qp := vd_quotes_date;
      end if;
    
      -- Valuation dr_id:
      begin
        select cdim.valid_quote_date
          into vd_quotes_date
          from cdim_corporate_dim cdim
         where cdim.corporate_id = pc_corporate_id
           and cdim.instrument_id =
               cur_3rd_wed_rows.underlying_instrument_id;
      exception
        when others then
          vd_quotes_date := pd_trade_date;
        
      end;
      if cur_3rd_wed_rows.is_daily_cal_applicable = 'Y' then
      begin
        select drm.dr_id,
               drm.dr_id_name
          into vc_caluclate_val_dr_id,
               vc_dr_id_name               
          from drm_derivative_master drm
         where drm.instrument_id =
               cur_3rd_wed_rows.underlying_instrument_id
           and drm.prompt_date = vd_3rd_wed_of_qp
           and drm.price_point_id is null
           and rownum <= 1
           and drm.is_deleted = 'N';
      exception
        when no_data_found then
          vc_caluclate_val_dr_id := null;
      end;
     elsif cur_3rd_wed_rows.is_daily_cal_applicable = 'N' and
                   cur_3rd_wed_rows.is_monthly_cal_applicable = 'Y' then
                
                  vc_prompt_date  := pkg_general.fn_get_next_month_prompt_date(cur_3rd_wed_rows.delivery_calender_id,
                                                                                      cur_3rd_wed_rows.average_to_date);
                  vc_prompt_month := to_char(vc_prompt_date, 'Mon');
                  vc_prompt_year  := to_char(vc_prompt_date, 'YYYY');
       
     begin
        select drm.dr_id,
               drm.dr_id_name
          into vc_caluclate_val_dr_id,
               vc_dr_id_name               
          from drm_derivative_master drm
         where drm.instrument_id =
               cur_3rd_wed_rows.underlying_instrument_id
           and drm.period_month = vc_prompt_month
           and drm.period_year = vc_prompt_year
           and drm.price_point_id is null
           and rownum <= 1
           and drm.is_deleted = 'N';
      exception
        when no_data_found then
          vc_caluclate_val_dr_id := null;
      end;
      end if;
    
      -- price:
    
      begin
        select eodeom.price
          into vc_calculate_price
          from eodeom_derivative_quote_detail eodeom,
               cdim_corporate_dim             cdim,
               drm_derivative_master          drm
         where eodeom.price_source_id = cur_3rd_wed_rows.price_source_id
           and eodeom.available_price_id =
               cur_3rd_wed_rows.available_price_id
           and eodeom.dr_id = vc_caluclate_val_dr_id
           and eodeom.corporate_id = pc_corporate_id
           and eodeom.dbd_id = vc_dbd_id
           and cdim.corporate_id = pc_corporate_id
           and drm.dr_id = vc_caluclate_val_dr_id
           and drm.instrument_id = cdim.instrument_id
           and eodeom.price_unit_id=cur_3rd_wed_rows.price_unit_id
           and eodeom.dq_trade_date = cdim.valid_quote_date;
      exception
        when no_data_found then
          vc_calculate_price := 0;
      end;
    
      if vc_calculate_price = 0 then
        insert into eel_eod_eom_exception_log eel
          (corporate_id,
           submodule_name,
           exception_code,
           data_missing_for,
           trade_ref_no,
           process,
           process_run_date,
           process_run_by,
           dr_id,
           trade_date,
           error_type)
        values
          (pc_corporate_id,
           'Derivatives Pre-Check',
           'M2M-029',
           'Settlement Price Missing for ' ||
           cur_3rd_wed_rows.instrument_name || ' ' || 'is missing; ' ||
           ' Price Source :' || cur_3rd_wed_rows.price_source_name ||
           ' Price Unit :' || cur_3rd_wed_rows.price_unit_name ||
           ' Prompt Date :' || vc_dr_id_name ||
           ' Trade Date :' || to_char(vd_quotes_date, 'dd-Mon-rrrr'),
           cur_3rd_wed_rows.derivative_ref_no,
           pc_process,
           systimestamp,
           pc_user_id,
           null,
           pd_trade_date,
           'Error');
        null;
      end if;
    end loop;
  
    -- check open position which can be closed out for future and option trades
    -- based on the ccg this might be a error or message
    select position_check
      into vc_position_check
      from ccg_corporateconfig
     where corporateid = pc_corporate_id;
    if vc_position_check <>
       'Allow processing even if position exist which can be closed out' then
      vc_error_type := 'Error';
    else
      vc_error_type := 'Warning';
    end if;
  
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Derivatives Pre-Check',
             'M2M-004',
             'Buy Lots : ' || to_char(t.buy_lots) || '  Sell Lots : ' ||
             to_char(t.sell_lots),
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             t.dr_id,
             pd_trade_date,
             vc_error_type
        from (select drt.dr_id,
                     sum(case
                           when drt.trade_type = 'Buy' then
                            drt.total_lots
                           else
                            0
                         end) as buy_lots,
                     sum(case
                           when drt.trade_type = 'Sell' then
                            drt.total_lots
                           else
                            0
                         end) as sell_lots
                from dt_derivative_trade        drt,
                     pdd_product_derivative_def pdd,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     irm_instrument_type_master irm
               where drt.dbd_id = vc_dbd_id
                 and drt.corporate_id = pc_corporate_id
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and drm.expiry_date <= pd_trade_date
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in
                     ('Future', 'Forward', 'Option Put', 'Option Call')
                 and drt.status = 'Verified'
                 and drt.is_what_if = 'N'
                 and drt.trade_date <= pd_trade_date
               group by drt.dr_id
              having sum(case when drt.trade_type = 'Buy' then drt.total_lots else 0 end) <> 0 and sum(case when drt.trade_type = 'Sell' then drt.total_lots else 0 end) <> 0) t;
    commit;
  exception
    when others then
      rollback;
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_derivatives',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_swap_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2) is
  
    cursor cur_swap_index is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_1 swap_type,
             dt.swap_trade_price_type_1 swap_trade_price_type,
             dt.swap_float_type_1 swap_float_type,
             dt.swap_trade_price_1 swap_trade_price,
             dt.swap_trade_price_unit_id_1 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_1 swap_index_instrument_id,
             dt.swap_formula_id_1 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade dt,
             dt_fbi              dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.swap_trade_price_type_1 = 'Floating'
         and dt.swap_float_type_1 = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dtfbi.is_deleted = 'N'
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
      union all
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_2 swap_type,
             dt.swap_trade_price_type_2 swap_trade_price_type,
             dt.swap_float_type_2 swap_float_type,
             dt.swap_trade_price_2 swap_trade_price,
             dt.swap_trade_price_unit_id_2 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_2 swap_index_instrument_id,
             dt.swap_formula_id_2 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade dt,
             dt_fbi              dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.swap_trade_price_type_2 = 'Floating'
         and dt.swap_float_type_2 = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dtfbi.is_deleted = 'N'
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id;
    --one reocrds for forward records
    cursor cur_fwd is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.formula_id,
             fbs.formula_internal,
             fbs.formula_display,
             fbs.formula_name,
             fbs.price_unit_id
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs
       where dt.trade_price_type_id = 'Formula'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dt.formula_id = fbs.formula_id
      union all
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dtfbi.instrument_id formula_id,
             '$' || dtfbi.instrument_id || '$' formula_internal,
             'Test' formula_display,
             'Test' formula_name,
             dtfbi.basis_price_unit_id price_unit_id
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs,
             dt_fbi                    dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.trade_price_type_id = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dtfbi.is_deleted = 'N'
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
         and dt.formula_id = fbs.formula_id(+);
  
    cursor cur_fwd_det(pc_internal_derivative_ref_no varchar2) is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.formula_id,
             fbs.formula_internal,
             fbs.formula_display,
             fbs.formula_name,
             --  fbs.formula_id,
             fbs.price_unit_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs,
             dt_fbi                    dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.trade_price_type_id = 'Formula'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
         and dtfbi.is_deleted = 'N'
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.formula_id = fbs.formula_id
      union all
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dtfbi.instrument_id formula_id,
             '$' || dtfbi.instrument_id || '$' formula_internal,
             'Test' formula_display,
             'Test' formula_name,
             dtfbi.basis_price_unit_id price_unit_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_
        from dt_derivative_trade       dt,
             fbs_formula_builder_setup fbs,
             dt_fbi                    dtfbi
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dt.trade_price_type_id = 'Index'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id
         and dtfbi.is_deleted = 'N'
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.formula_id = fbs.formula_id(+);
  
    cursor cur_dt is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id
        from dt_derivative_trade dt
       where dt.status = 'Verified'
            --  and dt.internal_derivative_ref_no = '75'
         and dt.is_what_if = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id;
  
    cursor cur_swap_formula_leg1(pc_internal_derivative_ref_no varchar2) is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_1 swap_type,
             dt.swap_trade_price_type_1 swap_trade_price_type,
             dt.swap_float_type_1 swap_float_type,
             dt.swap_trade_price_1 swap_trade_price,
             dt.swap_trade_price_unit_id_1 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_1 swap_index_instrument_id,
             dt.swap_formula_id_1 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_,
             fbs.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             fbs.formula_internal,
             fbs.price_unit_id
        from dt_derivative_trade       dt,
             dt_fbi                    dtfbi,
             fbs_formula_builder_setup fbs
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dtfbi.formula_id = fbs.formula_id
         and dt.swap_formula_id_1 = dtfbi.formula_id
         and dt.swap_trade_price_type_1 = 'Floating'
         and dt.swap_float_type_1 = 'Formula'
         and dt.status = 'Verified'
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.is_what_if = 'N'
         and dtfbi.is_deleted = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id;
  
    cursor cur_swap_formula_leg2(pc_internal_derivative_ref_no varchar2) is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             dt.corporate_id,
             dt.swap_type_2 swap_type,
             dt.swap_trade_price_type_2 swap_trade_price_type,
             dt.swap_float_type_2 swap_float_type,
             dt.swap_trade_price_2 swap_trade_price,
             dt.swap_trade_price_unit_id_2 swap_trade_price_unit_id,
             dt.swap_index_instrument_id_2 swap_index_instrument_id,
             dt.swap_formula_id_2 swap_formula_id,
             dtfbi.instrument_id,
             dtfbi.price_source_id,
             dtfbi.price_point_id,
             dtfbi.available_price_id,
             dtfbi.fb_period_type,
             dtfbi.fb_period_sub_type,
             dtfbi.period_month,
             dtfbi.period_year,
             dtfbi.period_from_date,
             dtfbi.period_to_date,
             dtfbi.no_of_months,
             dtfbi.no_of_days,
             dtfbi.period_type_id,
             dtfbi.delivery_period_id,
             dtfbi.off_day_price,
             dtfbi.basis,
             dtfbi.basis_price_unit_id,
             dtfbi.fx_rate_type,
             dtfbi.fx_rate_,
             fbs.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             fbs.formula_internal,
             fbs.price_unit_id
        from dt_derivative_trade       dt,
             dt_fbi                    dtfbi,
             fbs_formula_builder_setup fbs
       where dt.internal_derivative_ref_no =
             dtfbi.internal_derivative_ref_no
         and dtfbi.formula_id = fbs.formula_id
         and dt.swap_formula_id_2 = dtfbi.formula_id
         and dt.internal_derivative_ref_no = pc_internal_derivative_ref_no
         and dt.swap_trade_price_type_2 = 'Floating'
         and dt.swap_float_type_2 = 'Formula'
         and dt.status = 'Verified'
         and dt.is_what_if = 'N'
         and dtfbi.is_deleted = 'N'
         and dt.trade_date <= pd_trade_date
         and dt.corporate_id = pc_corporate_id
         and dt.dbd_id = pc_dbd_id
         and dtfbi.dbd_id = pc_dbd_id;
  
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vt_tbl_ind_setup          fb_tbl_setup;
    vt_tbl_ind_instrument     fb_tbl_instrument_data;
    vt_tbl_ind_instrument_out fb_tbl_instrument_data;
    vt_tbl_ind_setup_out      fb_tbl_setup;
    vt_fb_tbl_ind_error_out   fb_tbl_error;
    vt_tbl_frm_setup          fb_tbl_setup;
    vt_tbl_frm_instrument     fb_tbl_instrument_data;
    vt_tbl_frm_instrument_out fb_tbl_instrument_data;
    vt_tbl_frm_setup_out      fb_tbl_setup;
    vt_fb_tbl_frm_error_out   fb_tbl_error;
    vn_cur_row_cnt            number;
    vn_fb_order_sq            number := 1;
    --vc_period_month           varchar2(10);
    --vn_period_year            number;
  
  begin
    vt_tbl_frm_setup          := fb_tbl_setup();
    vt_tbl_frm_instrument     := fb_tbl_instrument_data();
    vt_tbl_frm_instrument_out := fb_tbl_instrument_data();
    vt_tbl_frm_setup_out      := fb_tbl_setup();
    vt_fb_tbl_frm_error_out   := fb_tbl_error();
    vt_tbl_ind_setup          := fb_tbl_setup();
    vt_tbl_ind_instrument     := fb_tbl_instrument_data();
    vt_tbl_ind_instrument_out := fb_tbl_instrument_data();
    vt_tbl_ind_setup_out      := fb_tbl_setup();
    vt_fb_tbl_ind_error_out   := fb_tbl_error();
  
    vn_cur_row_cnt := 1;
  
    for cur_swap_index_rows in cur_swap_index
    loop
      vt_tbl_ind_setup.extend;
      vt_tbl_ind_setup(1) := fb_typ_setup(cur_swap_index_rows.instrument_id,
                                          pc_corporate_id,
                                          'index',
                                          'index',
                                          '$' ||
                                          cur_swap_index_rows.instrument_id || '$',
                                          cur_swap_index_rows.basis_price_unit_id,
                                          pd_trade_date,
                                          null,
                                          null,
                                          null,
                                          null);
    
      vt_tbl_ind_instrument.extend;
      vt_tbl_ind_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                      cur_swap_index_rows.instrument_id,
                                                                      cur_swap_index_rows.instrument_id,
                                                                      cur_swap_index_rows.price_source_id,
                                                                      cur_swap_index_rows.price_point_id,
                                                                      cur_swap_index_rows.available_price_id,
                                                                      cur_swap_index_rows.fb_period_type,
                                                                      cur_swap_index_rows.fb_period_sub_type,
                                                                      cur_swap_index_rows.period_month,
                                                                      cur_swap_index_rows.period_year,
                                                                      cur_swap_index_rows.period_from_date,
                                                                      cur_swap_index_rows.period_to_date,
                                                                      cur_swap_index_rows.no_of_months,
                                                                      cur_swap_index_rows.no_of_days,
                                                                      cur_swap_index_rows.period_type_id,
                                                                      cur_swap_index_rows.delivery_period_id,
                                                                      cur_swap_index_rows.off_day_price,
                                                                      cur_swap_index_rows.basis,
                                                                      cur_swap_index_rows.basis_price_unit_id,
                                                                      cur_swap_index_rows.fx_rate_type,
                                                                      cur_swap_index_rows.fx_rate_,
                                                                      null,
                                                                      null,
                                                                      null,
                                                                      null,
                                                                      null);
      vn_fb_order_sq := vn_fb_order_sq + 1;
      vn_cur_row_cnt := vn_cur_row_cnt + 1;
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_pre_check_swap_derivatives',
                   'for swap index price check: trade ref  ' ||
                   cur_swap_index_rows.derivative_ref_no || ' started');
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind_setup,
                                                 vt_tbl_ind_instrument,
                                                 vt_tbl_ind_setup_out,
                                                 vt_tbl_ind_instrument_out,
                                                 vt_fb_tbl_ind_error_out,
                                                 pc_dbd_id,
                                                 cur_swap_index_rows.derivative_ref_no);
    
    end loop;
  
    --each trade wise   cur_dt--
    for cur_dt_rows in cur_dt
    loop
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
    
      for cur_swap_formula_rows in cur_swap_formula_leg1(cur_dt_rows.internal_derivative_ref_no)
      loop
        sp_write_log(pc_corporate_id,
                     pd_trade_date,
                     'sp_pre_check_swap_derivatives',
                     'for swap formula price check: trade ref leg 1  ' ||
                     cur_dt_rows.derivative_ref_no || ' started ' ||
                     cur_swap_formula_rows.formula_name);
        vt_tbl_frm_setup.extend;
        vt_tbl_frm_setup(1) := fb_typ_setup(cur_swap_formula_rows.formula_id,
                                            pc_corporate_id,
                                            cur_swap_formula_rows.formula_name,
                                            cur_swap_formula_rows.formula_display,
                                            cur_swap_formula_rows.formula_internal,
                                            cur_swap_formula_rows.price_unit_id,
                                            pd_trade_date,
                                            null,
                                            null,
                                            null,
                                            null);
      
        vt_tbl_frm_instrument.extend;
        vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                        cur_swap_formula_rows.swap_formula_id,
                                                                        cur_swap_formula_rows.instrument_id,
                                                                        cur_swap_formula_rows.price_source_id,
                                                                        cur_swap_formula_rows.price_point_id,
                                                                        cur_swap_formula_rows.available_price_id,
                                                                        cur_swap_formula_rows.fb_period_type,
                                                                        cur_swap_formula_rows.fb_period_sub_type,
                                                                        cur_swap_formula_rows.period_month,
                                                                        cur_swap_formula_rows.period_year,
                                                                        cur_swap_formula_rows.period_from_date,
                                                                        cur_swap_formula_rows.period_to_date,
                                                                        cur_swap_formula_rows.no_of_months,
                                                                        cur_swap_formula_rows.no_of_days,
                                                                        cur_swap_formula_rows.period_type_id,
                                                                        cur_swap_formula_rows.delivery_period_id,
                                                                        cur_swap_formula_rows.off_day_price,
                                                                        cur_swap_formula_rows.basis,
                                                                        cur_swap_formula_rows.basis_price_unit_id,
                                                                        cur_swap_formula_rows.fx_rate_type,
                                                                        cur_swap_formula_rows.fx_rate_,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null);
        vn_fb_order_sq := vn_fb_order_sq + 1;
        vn_cur_row_cnt := vn_cur_row_cnt + 1;
      end loop;
    
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                 vt_tbl_frm_instrument,
                                                 vt_tbl_frm_setup_out,
                                                 vt_tbl_frm_instrument_out,
                                                 vt_fb_tbl_frm_error_out,
                                                 pc_dbd_id,
                                                 cur_dt_rows.derivative_ref_no);
    
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
      for cur_swap_formula_rows in cur_swap_formula_leg2(cur_dt_rows.internal_derivative_ref_no)
      loop
        sp_write_log(pc_corporate_id,
                     pd_trade_date,
                     'sp_pre_check_swap_derivatives',
                     'for swap formula price check: trade ref leg 2  ' ||
                     cur_dt_rows.derivative_ref_no || ' started ' ||
                     cur_swap_formula_rows.formula_name);
        vt_tbl_frm_setup.extend;
        vt_tbl_frm_setup(1) := fb_typ_setup(cur_swap_formula_rows.formula_id,
                                            pc_corporate_id,
                                            cur_swap_formula_rows.formula_name,
                                            cur_swap_formula_rows.formula_display,
                                            cur_swap_formula_rows.formula_internal,
                                            cur_swap_formula_rows.price_unit_id,
                                            pd_trade_date,
                                            null,
                                            null,
                                            null,
                                            null);
      
        vt_tbl_frm_instrument.extend;
        vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                        cur_swap_formula_rows.swap_formula_id,
                                                                        cur_swap_formula_rows.instrument_id,
                                                                        cur_swap_formula_rows.price_source_id,
                                                                        cur_swap_formula_rows.price_point_id,
                                                                        cur_swap_formula_rows.available_price_id,
                                                                        cur_swap_formula_rows.fb_period_type,
                                                                        cur_swap_formula_rows.fb_period_sub_type,
                                                                        cur_swap_formula_rows.period_month,
                                                                        cur_swap_formula_rows.period_year,
                                                                        cur_swap_formula_rows.period_from_date,
                                                                        cur_swap_formula_rows.period_to_date,
                                                                        cur_swap_formula_rows.no_of_months,
                                                                        cur_swap_formula_rows.no_of_days,
                                                                        cur_swap_formula_rows.period_type_id,
                                                                        cur_swap_formula_rows.delivery_period_id,
                                                                        cur_swap_formula_rows.off_day_price,
                                                                        cur_swap_formula_rows.basis,
                                                                        cur_swap_formula_rows.basis_price_unit_id,
                                                                        cur_swap_formula_rows.fx_rate_type,
                                                                        cur_swap_formula_rows.fx_rate_,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null);
        vn_fb_order_sq := vn_fb_order_sq + 1;
        vn_cur_row_cnt := vn_cur_row_cnt + 1;
      
      end loop;
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                 vt_tbl_frm_instrument,
                                                 vt_tbl_frm_setup_out,
                                                 vt_tbl_frm_instrument_out,
                                                 vt_fb_tbl_frm_error_out,
                                                 pc_dbd_id,
                                                 cur_dt_rows.derivative_ref_no
                                                 
                                                 );
    
    end loop;
    --check for forward trades
  
    for cur_fwd_rows in cur_fwd
    loop
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
      sp_write_log(pc_corporate_id,
                   pd_trade_date,
                   'sp_pre_check_swap_derivatives',
                   'for swap formula price check: trade ref leg 1  ' ||
                   cur_fwd_rows.derivative_ref_no || ' started ' ||
                   cur_fwd_rows.formula_name);
      vt_tbl_frm_setup.extend;
      vt_tbl_frm_setup(1) := fb_typ_setup(cur_fwd_rows.formula_id,
                                          pc_corporate_id,
                                          cur_fwd_rows.formula_name,
                                          cur_fwd_rows.formula_display,
                                          cur_fwd_rows.formula_internal,
                                          cur_fwd_rows.price_unit_id,
                                          pd_trade_date,
                                          null,
                                          null,
                                          null,
                                          null);
      for cur_fwd_det_rows in cur_fwd_det(cur_fwd_rows.internal_derivative_ref_no)
      loop
        sp_write_log(pc_corporate_id,
                     pd_trade_date,
                     'sp_pre_check_swap_derivatives',
                     'for swap formula price check: trade ref leg 1  ' ||
                     cur_fwd_rows.derivative_ref_no || ' started ' ||
                     cur_fwd_rows.formula_name);
        vt_tbl_frm_instrument.extend;
        vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                        cur_fwd_det_rows.formula_id,
                                                                        cur_fwd_det_rows.instrument_id,
                                                                        cur_fwd_det_rows.price_source_id,
                                                                        cur_fwd_det_rows.price_point_id,
                                                                        cur_fwd_det_rows.available_price_id,
                                                                        cur_fwd_det_rows.fb_period_type,
                                                                        cur_fwd_det_rows.fb_period_sub_type,
                                                                        cur_fwd_det_rows.period_month,
                                                                        cur_fwd_det_rows.period_year,
                                                                        cur_fwd_det_rows.period_from_date,
                                                                        cur_fwd_det_rows.period_to_date,
                                                                        cur_fwd_det_rows.no_of_months,
                                                                        cur_fwd_det_rows.no_of_days,
                                                                        cur_fwd_det_rows.period_type_id,
                                                                        cur_fwd_det_rows.delivery_period_id,
                                                                        cur_fwd_det_rows.off_day_price,
                                                                        cur_fwd_det_rows.basis,
                                                                        cur_fwd_det_rows.basis_price_unit_id,
                                                                        cur_fwd_det_rows.fx_rate_type,
                                                                        cur_fwd_det_rows.fx_rate_,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null);
        vn_fb_order_sq := vn_fb_order_sq + 1;
        vn_cur_row_cnt := vn_cur_row_cnt + 1;
      end loop;
    
      pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                 vt_tbl_frm_instrument,
                                                 vt_tbl_frm_setup_out,
                                                 vt_tbl_frm_instrument_out,
                                                 vt_fb_tbl_frm_error_out,
                                                 pc_dbd_id,
                                                 cur_fwd_rows.derivative_ref_no);
    
      vn_cur_row_cnt := 1;
      vn_fb_order_sq := 1;
    
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_swap_derivatives',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_currency(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2,
                                  pc_dbd_id       varchar2) is
    pragma autonomous_transaction;
    /******************************************************************************************************************************************
    procedure name                            : sp_pre_check_derivatives
    author                                    : janna
    created date                              : 11th jan 2009
    purpose                                   : pre check for derivativ trades
    
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_user_id                                : user id
    pc_process                                : process
    
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    --vc_position_check  varchar2(100);
    --vc_error_type      varchar2(7);
  begin
    -- get the dump id
    /*select max(dbd.dbd_id)
     into gvc_dbd_id
     from dbd_database_dump dbd
    where corporate_id = pc_corporate_id
      and process = pc_process
      and trade_date = pd_trade_date;*/
    -- check all the derivative deals existing in the system are verified
    insert into eel_eod_eom_exception_log
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Currency Pre-Check',
             'M2M-020',
             'Following currency trades are not verified',
             ct.treasury_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             ct.dr_id,
             pd_trade_date
        from ct_currency_trade ct
       where ct.status = 'None'
         and ct.corporate_id = pc_corporate_id
         and ct.trade_date <= pd_trade_date
         and ct.dbd_id = pc_dbd_id;
    -- check settlement price should be avaialble for all open future trades as on eod
    --check for currency quotes for unrealized pnl(prompt_date<>trade date)
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date)
      select pc_corporate_id,
             'Currency Pre-Check',
             'M2M-021',
             'Settlement Price for currency trade is missing',
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             t.dr_id,
             pd_trade_date
        from (select ct.dr_id
                from ct_currency_trade     ct,
                     drm_derivative_master drm
               where ct.corporate_id = pc_corporate_id
                 and ct.dr_id = drm.dr_id
                 and upper(ct.status) = 'VERIFIED'
                 and ct.trade_date <= pd_trade_date
                 and ct.dbd_id = pc_dbd_id
                    --  and drm.period_date <> pd_trade_date
                 and not exists
               (select ecd.ct_id
                        from eci_expired_ct_id ecd
                       where ecd.corporate_id = pc_corporate_id
                         and ecd.ct_id = ct.dr_id
                         and ecd.process = pc_process)
                 and not exists
               (select cfq.dr_id
                        from eodeom_currency_forward_quotes cfq,
                             div_der_instrument_valuation   div
                       where cfq.dr_id = ct.dr_id
                         and cfq.rate <> 0
                         and cfq.corporate_id = pc_corporate_id
                         and cfq.instrument_id=div.instrument_id
                         and cfq.price_source_id=div.price_source_id
                         and div.is_deleted='N'
                         and cfq.dbd_id = pc_dbd_id)
               group by ct.dr_id) t
       group by t.dr_id;
  
    --check for currency quotes for realized pnl(prompt_date=trade date) as warning
    insert into eel_eod_eom_exception_log eel
      (corporate_id,
       submodule_name,
       exception_code,
       data_missing_for,
       trade_ref_no,
       process,
       process_run_date,
       process_run_by,
       dr_id,
       trade_date,
       error_type)
      select pc_corporate_id,
             'Currency Pre-Check',
             'M2M-026',
             'Bank Fx Rate(Spot) is not available',
             null as derivative_ref_no,
             pc_process,
             systimestamp,
             pc_user_id,
             t.dr_id,
             pd_trade_date,
             'Warning'
        from (select ct.dr_id
                from ct_currency_trade     ct,
                     drm_derivative_master drm
               where ct.corporate_id = pc_corporate_id
                 and ct.dr_id = drm.dr_id
                 and upper(ct.status) = 'VERIFIED'
                 and ct.trade_date <= pd_trade_date
                 and ct.dbd_id = pc_dbd_id
                 and drm.prompt_date <= pd_trade_date
                 and not exists
               (select ecd.ct_id
                        from eci_expired_ct_id ecd
                       where ecd.corporate_id = pc_corporate_id
                         and ecd.ct_id = ct.dr_id
                         and ecd.process = pc_process)
                 and not exists
               (select cfq.dr_id
                        from eodeom_currency_forward_quotes cfq,
                             div_der_instrument_valuation   div
                       where cfq.dr_id = ct.dr_id
                         and cfq.rate <> 0
                         and cfq.corporate_id = pc_corporate_id
                         and cfq.dbd_id = pc_dbd_id
                            -- and cfq.prompt_date = pd_trade_date
                         and cfq.prompt_date = drm.prompt_date
                         and cfq.instrument_id=div.instrument_id
                         and cfq.price_source_id=div.price_source_id
                         and div.is_deleted='N'
                         and cfq.is_spot = 'Y')
               group by ct.dr_id) t
       group by t.dr_id;
    commit;
  exception
    when others then
      rollback;
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_pre_check_currency',
                                                           'M2M-022',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_record_expired_derivatives(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_process_id   varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_record_expired_dr_id
    --        author                                    :
    --        created date                              :
    --        purpose                                   :
    --        parameters
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    -- pragma autonomous_transaction;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into edi_expired_dr_id
      (corporate_id, dr_id, trade_date, process_id, process)
      select pc_corporate_id,
             drm.dr_id,
             pd_trade_date,
             pc_process_id,
             pc_process
        from drm_derivative_master drm
       where nvl(drm.expiry_date, drm.prompt_date) <= pd_trade_date
         and drm.price_point_id is null
         and not exists
       (select edid.dr_id,
                     edid.corporate_id
                from edi_expired_dr_id edid
               where edid.dr_id = drm.dr_id
                 and edid.process = pc_process
                 and edid.corporate_id = pc_corporate_id)
       group by drm.dr_id;
  
    -- update the dr id expired flag to y in drt table
    --
    /*update dt_derivative_trade drt
      set drt.is_what_if = 'Y'
    where drt.dbd_id = pc_dbd_id
      and drt.dr_id in
          (select edid.dr_id
             from edi_expired_dr_id edid
            where edid.corporate_id = pc_corporate_id);*/ --siva
    -- commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_record_expired_derivatives',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_record_expired_currency(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_process_id   varchar2) is
    --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_record_expired_currency
    --        author                                    :
    --        created date                              :
    --        purpose                                   :
    --        parameters
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
    -- pragma autonomous_transaction;
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into eci_expired_ct_id
      (corporate_id, ct_id, trade_date, process, process_id)
      select pc_corporate_id,
             drm.dr_id ct_id,
             pd_trade_date,
             pc_process,
             pc_process_id
        from ct_currency_trade     ct,
             drm_derivative_master drm
       where ct.process_id = pc_process_id
         and ct.dr_id = drm.dr_id
         and drm.prompt_date <= pd_trade_date
         and ct.corporate_id = pc_corporate_id
         and exists (select cfq.dr_id
                from eodeom_currency_forward_quotes cfq
               where cfq.corporate_id = pc_corporate_id
                 and cfq.process_id = pc_process_id
                 and cfq.dr_id = ct.dr_id
                 and cfq.is_spot = 'Y')
         and not exists (select ecid.ct_id
                from eci_expired_ct_id ecid
               where ecid.corporate_id = pc_corporate_id
                 and ecid.process = pc_process
                 and ecid.ct_id = drm.dr_id)
       group by drm.dr_id;
  
    --
    -- update the dr id expired flag to y in drt table
    --
    /*   update ct_currency_trade ct
      set ct.is_ct_id_expired = 'Y', ct.status = 'SETTLED'
    where ct.dbd_id = pc_dbd_id
      and ct.dr_id in
          (select ecid.ct_id
             from eci_expired_ct_id ecid
            where ecid.corporate_id = pc_corporate_id);*/
    -- commit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_record_expired_currency',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           pc_process,
                                                           '',
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_pre_check_gather_stats is
  begin
    sp_gather_stats('dt_derivative_trade');
    sp_gather_stats('ct_currency_trade');
    sp_gather_stats('crtd_cur_trade_details');
    sp_gather_stats('dcoh_der_closeout_header');
    sp_gather_stats('dcod_der_closeout_detail');
    sp_gather_stats('fsh_fin_settlement_header');
    sp_gather_stats('dt_fbi');
    sp_gather_stats('dat_derivative_aggregate_trade');
  end;
end; 
/
create or replace package "PKG_CDC_DERIVATIVES_PROCESS" is

  gvc_previous_process_id varchar2(15);

  gvc_dbd_id varchar2(15);

  gvc_previous_process_date date;

  procedure sp_process_run(pc_corporate_id varchar2,
                           pd_trade_date   date,
                           pc_process_id   varchar2,
                           pc_user_id      varchar2,
                           pc_process      varchar2,
                           pc_dbd_id       varchar2);

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date,
                               pc_process      varchar2,
                               pc_dbd_id       varchar2);

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2);

  procedure sp_cdc_rebuild_stats;

  procedure sp_calc_future_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2);

  procedure sp_calc_future_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2);

  procedure sp_calc_forward_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2,
                                           pc_dbd_id       varchar2);

  procedure sp_calc_forward_realized_pnl(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2,
                                         pc_dbd_id       varchar2);

  procedure sp_calc_option_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2);

  procedure sp_calc_option_unr_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2);

  procedure sp_calc_swap_unrealized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2);

  procedure sp_calc_option_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2);

  procedure sp_calc_option_rea_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_dbd_id       varchar2);

  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2;

  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number;

  function f_get_converted_currency_amt(pc_corporate_id        in varchar2,
                                        pc_from_cur_id         in varchar2,
                                        pc_to_cur_id           in varchar2,
                                        pd_cur_date            in date,
                                        pn_amt_to_be_converted in number)
    return number;

  function f_currency_exchange_rate(pd_trade_date   date,
                                    pc_corporate_id varchar2,
                                    pd_prompt_date  varchar2,
                                    pc_from_cur_id  varchar2,
                                    pc_to_cur_id    varchar2) return number;

  function f_get_converted_price_pum(pc_corporate_id       varchar2,
                                     pn_price              number,
                                     pc_from_price_unit_id varchar2,
                                     pc_to_price_unit_id   varchar2,
                                     pd_trade_date         date,
                                     pc_product_id         varchar2)
    return number;

  function f_get_next_day(p_date     in date,
                          p_day      in varchar2,
                          p_position in number) return date;

  function f_is_day_holiday(pc_instrumentid in varchar2,
                            pc_trade_date   date) return boolean;

  procedure sp_calc_daily_initial_margin(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2);

  /*   PROCEDURE sp_calc_future_accounts(
  pc_corporate_id VARCHAR2,
  pd_trade_date   DATE,
  pc_process_id   VARCHAR2,
  pc_user_id      VARCHAR2,
  pc_process      VARCHAR2);*/
  procedure sp_mark_realized_derivatives(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2);

  procedure sp_mark_new_derivative_trades(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2);

  procedure sp_calc_undo_closeout(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2);

  procedure sp_calc_undo_settled(pc_corporate_id varchar2,
                                 pd_trade_date   date,
                                 pc_process_id   varchar2,
                                 pc_user_id      varchar2,
                                 pc_process      varchar2);

  procedure sp_calc_clearer_summary(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2);

  procedure recordfxpnl(p_corporateid varchar2,
                        p_tradedate   date,
                        p_process_id  varchar2,
                        p_userid      varchar2,
                        p_prcoess     varchar2);

  --below added for early delivery/cancellation fx trades                        
  procedure sp_recordfxpnl_edcd(p_corporateid varchar2,
                                p_tradedate   date,
                                p_process_id  varchar2,
                                p_userid      varchar2,
                                p_prcoess     varchar2);

  procedure sp_calc_price_exposure(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_process      varchar2,
                                   pc_user_id      varchar2);

  procedure sp_calc_average_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_process      varchar2,
                                           pc_user_id      varchar2,
                                           pc_dbd_id       varchar2);

  procedure sp_calc_pnl_summary(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_user_id      varchar2);

  procedure sp_calc_daily_trade_pnl(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2);

  procedure sp_update_new_trade(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_process      varchar2);

  --Added by Siddharth 10-Apr-2012
  procedure sp_calc_future_unreal_pnl_attr(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2);

  procedure sp_calc_broker_margin_util(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_process      varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2);
 procedure sp_calc_fx_option_realized_pnl(p_corporateid varchar2,
                        p_tradedate   date,
                        p_process_id  varchar2,
                        p_userid      varchar2,
                        p_prcoess     varchar2);                                         

end; 
/
create or replace package body "PKG_CDC_DERIVATIVES_PROCESS" is

  procedure sp_process_run(pc_corporate_id varchar2,
                           pd_trade_date   date,
                           pc_process_id   varchar2,
                           pc_user_id      varchar2,
                           pc_process      varchar2,
                           pc_dbd_id       varchar2 --eod or eom
                           ----------------------------------------------------------------------
                           --        procedure name                            : sp_process_run
                           --        author                                    :
                           --        created date                              : 10 th jan 2011
                           --        purpose                                   : calls all procedures for eod
                           --        parameters
                           --        pc_corporate_id                           : corporate id
                           --        pd_trade_date                             : trade date
                           --        pc_process_id                             : eod/eom reference no
                           --        modification history
                           --        modified date                             :
                           --        modified by                               :
                           --        modify description                        :
                           --------------------------------------------------------------------------------------------------------------------------
                           ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 0;
    vc_prev_process_id varchar2(15);
    vd_prev_eod_date   date;
    --vn_err             varchar2(50);
  begin
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'EOD/EOM process Started ....');
    -- mark eod
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_process_id := null;
        vd_prev_eod_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      gvc_previous_process_id   := vc_prev_process_id;
      gvc_previous_process_date := vd_prev_eod_date;
    end if;
    /*IF pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' THEN
      GOTO cancel_process;
    END IF;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_process_id');
    sp_mark_process_id(pc_corporate_id,
                       pc_process_id,
                       pc_user_id,
                       pd_trade_date,
                       pc_process,
                       pc_dbd_id       );*/
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_cdc_rebuild_stats');
    sp_cdc_rebuild_stats;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_update_new_trade');
    sp_update_new_trade(pc_corporate_id,
                        pd_trade_date,
                        pc_process_id,
                        pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_future_unrealized_pnl');
    sp_calc_future_unrealized_pnl(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id,
                                  pc_process,
                                  pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_realized_derivatives');
    sp_mark_realized_derivatives(pc_corporate_id,
                                 pd_trade_date,
                                 pc_process_id,
                                 pc_user_id,
                                 pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_future_realized_pnl');
    sp_calc_future_realized_pnl(pc_corporate_id,
                                pd_trade_date,
                                pc_process_id,
                                pc_user_id,
                                pc_process,
                                pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_forward_unrealized_pnl');
    sp_calc_forward_unrealized_pnl(pc_corporate_id,
                                   pd_trade_date,
                                   pc_process_id,
                                   pc_user_id,
                                   pc_process,
                                   pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_forward_realized_pnl');
    sp_calc_forward_realized_pnl(pc_corporate_id,
                                 pd_trade_date,
                                 pc_process_id,
                                 pc_user_id,
                                 pc_process,
                                 pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_swap_unrealized_pnl');
    sp_calc_swap_unrealized_pnl(pc_corporate_id,
                                pd_trade_date,
                                pc_process_id,
                                pc_user_id,
                                pc_process,
                                pc_dbd_id);
    /*    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_unrealized_pnl');
    sp_calc_option_unrealized_pnl(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id,
                                  pc_process);*/
    --
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_unr_ext_pnl');
    sp_calc_option_unr_ext_pnl(pc_corporate_id,
                               pd_trade_date,
                               pc_process_id,
                               pc_user_id,
                               pc_process);
    ----                                                                    
    /*   if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_realized_pnl');
    sp_calc_option_realized_pnl(pc_corporate_id,
                                pd_trade_date,
                                pc_process_id,
                                pc_user_id,
                                pc_process,
                                pc_dbd_id);*/
    ----
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_option_rea_ext_pnl');
    sp_calc_option_rea_ext_pnl(pc_corporate_id,
                               pd_trade_date,
                               pc_process_id,
                               pc_user_id,
                               pc_process,
                               pc_dbd_id);
    -----                                                                  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_daily_initial_margin');
    sp_calc_daily_initial_margin(pc_corporate_id,
                                 pd_trade_date,
                                 pc_process_id,
                                 pc_user_id,
                                 pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_mark_new_derivative_trades');
    sp_mark_new_derivative_trades(pc_corporate_id,
                                  pd_trade_date,
                                  pc_process_id,
                                  pc_user_id,
                                  pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_undo_closeout');
    sp_calc_undo_closeout(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          pc_user_id,
                          pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_undo_settled');
    sp_calc_undo_settled(pc_corporate_id,
                         pd_trade_date,
                         pc_process_id,
                         pc_user_id,
                         pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_clearer_summary');
    sp_calc_clearer_summary(pc_corporate_id,
                            pd_trade_date,
                            pc_process_id,
                            pc_user_id,
                            pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'recordfxpnl');
    recordfxpnl(pc_corporate_id,
                pd_trade_date,
                pc_process_id,
                pc_user_id,
                pc_process);
    ------newly added for Fx trade early delivery/cancellation
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'recordfxpnl');
    sp_recordfxpnl_edcd(pc_corporate_id,
                        pd_trade_date,
                        pc_process_id,
                        pc_user_id,
                        pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_price_exposure');
    sp_calc_price_exposure(pc_corporate_id,
                           pd_trade_date,
                           pc_process_id,
                           pc_process,
                           pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_average_unrealized_pnl');
    sp_calc_average_unrealized_pnl(pc_corporate_id,
                                   pd_trade_date,
                                   pc_process_id,
                                   pc_process,
                                   pc_user_id,
                                   pc_dbd_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_pnl_summary');
    sp_calc_pnl_summary(pc_corporate_id,
                        pd_trade_date,
                        pc_process_id,
                        pc_user_id);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_daily_trade_pnl');
    sp_calc_daily_trade_pnl(pc_corporate_id,
                            pd_trade_date,
                            pc_process_id,
                            pc_user_id,
                            pc_process);
    --Added by Siddharth
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_future_unreal_pnl_attr');
    sp_calc_future_unreal_pnl_attr(pc_corporate_id,
                                   pd_trade_date,
                                   pc_process_id,
                                   pc_user_id,
                                   pc_process);
    --Ends here
    --Brokerage_Margin_Utilization Changes start
    vn_logno := vn_logno + 1;
    sp_eodeom_process_log(pc_corporate_id,
                          pd_trade_date,
                          pc_process_id,
                          vn_logno,
                          'sp_calc_broker_margin_util');
    sp_calc_broker_margin_util(pc_corporate_id,
                               pd_trade_date,
                               pc_process_id,
                               pc_process,
                               pc_user_id,
                               pc_dbd_id);
    --Brokerage_Margin_Utilization Changes end                                  
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while pnl calculation');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_process_run',
                                                           'M2M-013',
                                                           'code:' ||
                                                           sqlcode ||
                                                           'message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date,
                               pc_process      varchar2,
                               pc_dbd_id       varchar2
                               --------------------------------------------------------------------------------------------------------------------------
                               --        procedure name                            : sp_mark_process_id
                               --        author                                    : siva
                               --        created date                              : 20th jan 2009
                               --        purpose                                   : to mark the eod refernce numbers
                               --
                               --        parameters
                               --        pc_corporate_id                           : corporate id
                               --        pd_trade_date                             : trade date
                               --        pc_process_id                             : eod reference no
                               --
                               --        modification history
                               --        modified date                             :
                               --        modified by                               :
                               --        modify description                        :
                               --------------------------------------------------------------------------------------------------------------------------
                               ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    --start marking
    update dat_derivative_aggregate_trade agd
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update crtd_cur_trade_details
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update dam_derivative_action_amapping
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update dt_derivative_trade
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    /*update dcoh_der_closeout_header
    set process_id=pc_process_id
     WHERE process_id IS NULL
       AND dbd_id = pc_dbd_id;
    
    update dcod_der_closeout_detail
    set process_id=pc_process_id
     WHERE process_id IS NULL
       AND dbd_id = pc_dbd_id;*/
    update dcoh_der_closeout_header
       set process_id = pc_process_id
     where process_id is null
       and corporate_id = pc_corporate_id
       and close_out_date <= pd_trade_date
       and dbd_id in (select dbd.dbd_id
                        from dbd_database_dump dbd
                       where dbd.corporate_id = pc_corporate_id
                         and dbd.process = pc_process
                         and dbd.trade_date <= pd_trade_date);
    update dcod_der_closeout_detail dcod
       set process_id = pc_process_id
     where dcod.internal_close_out_ref_no in
           (select internal_close_out_ref_no
              from dcoh_der_closeout_header
             where process_id = pc_process_id)
       and dcod.dbd_id in
           (select dbd.dbd_id
              from dbd_database_dump dbd
             where dbd.corporate_id = pc_corporate_id
               and dbd.process = pc_process
               and dbd.trade_date <= pd_trade_date);
    update ct_currency_trade
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update dt_fbi
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    update fsh_fin_settlement_header
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    --HDL_FX_settlement change start
    update fxs_fx_settlement
       set process_id = pc_process_id
     where process_id is null
       and dbd_id = pc_dbd_id;
    --HDL_FX_settlement change end  
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_mark_process_id',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2)
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_process_rollback
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : rollback eod
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
   is
    -- vc_process_id      VARCHAR2(15);
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    delete from dtul_derivative_trade_ul where dbd_id = pc_dbd_id;
    delete from crtdul_cur_trade_details_ul where dbd_id = pc_dbd_id;
    delete from ctul_currency_trade_ul where dbd_id = pc_dbd_id;
    --delete from eodeom_derivative_quote_detail where dbd_id = pc_dbd_id;
    delete from dt_derivative_trade where dbd_id = pc_dbd_id;
    delete from dt_fbi where dbd_id = pc_dbd_id;
    delete from crtd_cur_trade_details where dbd_id = pc_dbd_id;
    delete from ct_currency_trade where dbd_id = pc_dbd_id;
    delete from dpd_derivative_pnl_daily where process_id = pc_process_id;
    delete from dim_daily_initial_margin where process_id = pc_process_id;
    delete from dat_derivative_aggregate_trade where dbd_id = pc_dbd_id;
    delete from dam_derivative_action_amapping where dbd_id = pc_dbd_id;
    delete from cpd_currency_pnl_daily where process_id = pc_process_id;
    delete from dtp_derivative_trade_pnl where process_id = pc_process_id;
    --DELETE FROM ct_currency_trade WHERE dbd_id = pc_dbd_id;
    delete from dcoh_der_closeout_header where dbd_id = pc_dbd_id;
    delete from dcod_der_closeout_detail where dbd_id = pc_dbd_id;
    delete from fsh_fin_settlement_header where dbd_id = pc_dbd_id;
    delete from spc_summary_position_clearer
     where process_id = pc_process_id;
    update dcoh_der_closeout_header dcoh --10-jan-2011
       set dcoh.is_rolled_back       = 'N',
           dcoh.roll_back_date       = null,
           dcoh.undo_closeout_dbd_id = null
     where dcoh.undo_closeout_dbd_id = pc_dbd_id;
    update dcoh_der_closeout_header
       set process_id = null
     where process_id = pc_process_id;
    update dcod_der_closeout_detail
       set process_id = null
     where process_id = pc_process_id;
    delete from dped_drt_price_exp_details
     where process_id = pc_process_id;
    delete from dpe_derivative_price_exposure
     where process_id = pc_process_id;
    --HDL_FX_settlement change start
    delete from fxs_fx_settlement where dbd_id = pc_dbd_id;
    --HDL_FX_settlement change end
    --Brokerage_Margin_Utilization Changes start
    delete from bmu_broker_margin_utilization
     where process_id = pc_process_id;
    --Brokerage_Margin_Utilization Changes start end
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_process_rollback',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           null, --pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_cdc_rebuild_stats is
  begin
    sp_gather_stats('dpd_derivative_pnl_daily');
    sp_gather_stats('dim_daily_initial_margin');
    sp_gather_stats('dps_derivative_pnl_summary');
  end;

  procedure sp_calc_future_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2,
                                          pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_future_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_futures is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             pdd.lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             div_der_instrument_valuation   div,
             apm_available_price_master     apm,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = apm.available_price_id
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
            --         and apm.available_price_name = 'Settlement'
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and irm.instrument_type = 'Future'
         and nvl(dt.traded_on, 'Exchange') = 'Exchange'
         and upper(dt.status) = 'VERIFIED'
         and dtm.deal_type_display_name not like '%Swap%'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.open_quantity > 0
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_trade_qty_exch_unit         number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
    --Added by Siddharth---
    vn_qty_in_base_unit         number;
    vn_trade_price_in_base_cur  number;
    vn_market_price_in_base_cur number;
    --Ends here---
  begin
    for cur_futures_rows in cur_futures
    loop
      -- Trade Qty in Exchange Weight Unit
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_futures_rows.quantity_unit_id,
                                                                     cur_futures_rows.lot_size_unit_id,
                                                                     cur_futures_rows.open_quantity);
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.broker_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.clearer_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)*/
      /* commented code since from and to is reveresed 18-jul-2009
      vn_qty_in_trade_wt_unit      := f_get_converted_quantity(null, --product id
                                                                           cur_futures_rows.weight_unit_id,
                                                                           cur_futures_rows.trade_qty_unit_id,
                                                                           cur_futures_rows.trade_qty); */
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_futures_rows.quantity_unit_id,
                                                          cur_futures_rows.trade_weight_unit_id,
                                                          cur_futures_rows.open_quantity
                                                          -- this we added for drt changes. bhairu
                                                          --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                          );
      --preeti fix for open lots
      --vn_market_price_in_trade_cur := cur_futures_rows.settlement_price;
      if cur_futures_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  cur_futures_rows.trade_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                                   cur_futures_rows.settlement_weight_unit_id,
                                                                                   cur_futures_rows.trade_weight_unit_id,
                                                                                   1,
                                                                                   cur_futures_rows.gravity,
                                                                                   cur_futures_rows.gravity_type,
                                                                                   cur_futures_rows.density_mass_qty_unit_id,
                                                                                   cur_futures_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  cur_futures_rows.trade_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_futures_rows.product_id,
                                                                              cur_futures_rows.settlement_weight_unit_id,
                                                                              cur_futures_rows.trade_weight_unit_id,
                                                                              1));
      end if;
      /* he units will be the same since its defaulted in the screen
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                            cur_futures_row(i).weight /
                                            (cur_futures_rows(i).ppu_dq_weight *
                                            pkg_general.f_get_converted_quantity(null,
                                                                                  cur_futures_rows.ppu_dq_weight_unit_id,
                                                                                  cur_futures_rows.weight_unit_id,
                                                                                  1));
       */
      pkg_general.sp_get_main_cur_detail(cur_futures_rows.trade_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_futures_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_futures_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := cur_futures_rows.trade_price /
                                        nvl(cur_futures_rows.trade_weight,
                                            1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_futures_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      vn_total_trade_value_base_cur  := vn_trade_to_base_exch_rate *
                                        vn_total_trade_value_trade_cur;
      vn_total_market_value_base_cur := vn_trade_to_base_exch_rate *
                                        vn_total_market_val_trade_cur;
      ---Added by Siddharth---
      vn_qty_in_base_unit := f_get_converted_quantity(null, --product id
                                                      cur_futures_rows.quantity_unit_id,
                                                      cur_futures_rows.base_qty_unit_id,
                                                      cur_futures_rows.open_quantity
                                                      -- this we added for drt changes. bhairu
                                                      --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                      );
      if vn_qty_in_base_unit <> 0 then
        vn_trade_price_in_base_cur := vn_total_trade_value_base_cur /
                                      vn_qty_in_base_unit;
      else
        vn_trade_price_in_base_cur := 0;
      end if;
      if vn_qty_in_base_unit <> 0 then
        vn_market_price_in_base_cur := vn_total_market_value_base_cur /
                                       vn_qty_in_base_unit;
      else
        vn_market_price_in_base_cur := 0;
      end if;
      --Ends here
      /* 18-jul-2009 . commented this and replaced this with above code
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.weight_unit_id,
                                                                            cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate; */
      vn_broker_comm_in_base_cur := cur_futures_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_futures_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0);
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      --  all this check should be removed later
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur,
         open_quantity_in_base,
         trade_price_in_base,
         sett_price_in_base)
      values
        (cur_futures_rows.internal_derivative_ref_no,
         cur_futures_rows.derivative_ref_no,
         cur_futures_rows.eod_trade_date,
         cur_futures_rows.trade_date,
         cur_futures_rows.corporate_id,
         cur_futures_rows.corporate_name,
         cur_futures_rows.trader_id,
         cur_futures_rows.tradername,
         cur_futures_rows.profit_center_id,
         cur_futures_rows.profit_center_name,
         cur_futures_rows.profit_center_short_name,
         cur_futures_rows.dr_id,
         cur_futures_rows.instrument_id,
         cur_futures_rows.instrument_name,
         cur_futures_rows.instrument_symbol,
         cur_futures_rows.instrument_type_id,
         cur_futures_rows.instrument_type,
         cur_futures_rows.instrument_display_name,
         cur_futures_rows.instrument_sub_type_id,
         cur_futures_rows.instrument_sub_type,
         cur_futures_rows.derivative_def_id,
         cur_futures_rows.derivative_def_name,
         cur_futures_rows.traded_on,
         cur_futures_rows.product_id,
         cur_futures_rows.product_desc,
         cur_futures_rows.exchange_id,
         cur_futures_rows.exchange_name,
         cur_futures_rows.exchange_code,
         cur_futures_rows.lot_size,
         cur_futures_rows.lot_size_unit_id,
         cur_futures_rows.lot_size_qty_unit,
         cur_futures_rows.price_point_id,
         cur_futures_rows.price_point_name,
         cur_futures_rows.period_type_id,
         cur_futures_rows.period_type_name,
         cur_futures_rows.period_type_display_name,
         cur_futures_rows.period_month,
         cur_futures_rows.period_year,
         cur_futures_rows.period_date,
         cur_futures_rows.prompt_date,
         cur_futures_rows.dr_id_name,
         cur_futures_rows.trade_type,
         cur_futures_rows.deal_type_id,
         cur_futures_rows.deal_type_name,
         cur_futures_rows.deal_type_display_name,
         cur_futures_rows.is_multiple_leg_involved,
         cur_futures_rows.deal_category,
         cur_futures_rows.deal_sub_category,
         cur_futures_rows.strategy_id,
         cur_futures_rows.strategy_name,
         cur_futures_rows.description,
         cur_futures_rows.strategy_def_name,
         cur_futures_rows.groupid,
         cur_futures_rows.groupname,
         cur_futures_rows.purpose_id,
         cur_futures_rows.purpose_name,
         cur_futures_rows.purpose_display_name,
         cur_futures_rows.external_ref_no,
         cur_futures_rows.cp_profile_id,
         cur_futures_rows.cp_name,
         cur_futures_rows.master_contract_id,
         cur_futures_rows.broker_profile_id,
         cur_futures_rows.broker_name,
         cur_futures_rows.broker_account_id,
         cur_futures_rows.broker_account_name,
         cur_futures_rows.broker_account_type,
         cur_futures_rows.broker_comm_type_id,
         cur_futures_rows.broker_comm_amt,
         cur_futures_rows.broker_comm_cur_id,
         cur_futures_rows.broker_cur_code,
         cur_futures_rows.clearer_profile_id,
         cur_futures_rows.clearer_name,
         cur_futures_rows.clearer_account_id,
         cur_futures_rows.clearer_account_name,
         cur_futures_rows.clearer_account_type,
         cur_futures_rows.clearer_comm_type_id,
         cur_futures_rows.clearer_comm_amt,
         cur_futures_rows.clearer_comm_cur_id,
         cur_futures_rows.clearer_cur_code,
         cur_futures_rows.product,
         cur_futures_rows.productdesc,
         cur_futures_rows.quality_id,
         cur_futures_rows.quality_name,
         cur_futures_rows.quantity_unit_id,
         cur_futures_rows.quantityname,
         cur_futures_rows.open_lots, -- total_lots,--siva
         cur_futures_rows.open_quantity, -- .total_quantity,--siva
         cur_futures_rows.open_lots,
         cur_futures_rows.open_quantity,
         cur_futures_rows.exercised_lots,
         cur_futures_rows.exercised_quantity,
         cur_futures_rows.expired_lots,
         cur_futures_rows.expired_quantity,
         cur_futures_rows.trade_price_type_id,
         cur_futures_rows.trade_price,
         cur_futures_rows.trade_price_unit_id,
         cur_futures_rows.trade_cur_id,
         cur_futures_rows.trade_cur_code,
         cur_futures_rows.trade_weight,
         cur_futures_rows.trade_weight_unit_id,
         cur_futures_rows.trade_qty_unit,
         cur_futures_rows.formula_id,
         cur_futures_rows.formula_name,
         cur_futures_rows.formula_display,
         cur_futures_rows.index_instrument_id,
         cur_futures_rows.index_instrument_name,
         cur_futures_rows.strike_price,
         cur_futures_rows.strike_price_unit_id,
         cur_futures_rows.strike_cur_id,
         cur_futures_rows.strike_cur_code,
         cur_futures_rows.strike_weight,
         cur_futures_rows.strike_weight_unit_id,
         cur_futures_rows.strike_qty_unit,
         cur_futures_rows.premium_discount,
         cur_futures_rows.premium_discount_price_unit_id,
         cur_futures_rows.pd_cur_id,
         cur_futures_rows.pd_cur_code,
         cur_futures_rows.pd_weight,
         cur_futures_rows.pd_weight_unit_id,
         cur_futures_rows.pd_qty_unit,
         cur_futures_rows.premium_due_date,
         cur_futures_rows.nominee_profile_id,
         cur_futures_rows.nominee_name,
         cur_futures_rows.leg_no,
         cur_futures_rows.option_expiry_date,
         cur_futures_rows.parent_int_derivative_ref_no,
         cur_futures_rows.market_location_country,
         cur_futures_rows.market_location_state,
         cur_futures_rows.market_location_city,
         cur_futures_rows.is_what_if,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_due_date,
         cur_futures_rows.closed_lots,
         cur_futures_rows.closed_quantity,
         cur_futures_rows.is_new_trade_date,
         cur_futures_rows.status,
         cur_futures_rows.settlement_cur_id,
         cur_futures_rows.settlement_cur_code,
         cur_futures_rows.in_out_at_money_status,
         cur_futures_rows.in_out_at_money_value,
         cur_futures_rows.exercise_date,
         cur_futures_rows.expiry_date,
         cur_futures_rows.group_cur_id,
         cur_futures_rows.group_cur_code,
         cur_futures_rows.group_qty_unit_id,
         cur_futures_rows.gcd_qty_unit,
         cur_futures_rows.base_qty_unit_id,
         cur_futures_rows.base_qty_unit,
         cur_futures_rows.internal_close_out_ref_no,
         cur_futures_rows.close_out_ref_no,
         cur_futures_rows.close_out_date,
         cur_futures_rows.settlement_price,
         cur_futures_rows.settlement_price_unit_id,
         cur_futures_rows.settlement_price_cur_id,
         cur_futures_rows.settlemet_price_cur_code,
         cur_futures_rows.settlement_price_weight,
         cur_futures_rows.settlement_weight_unit_id,
         cur_futures_rows.settlement_weight_unit,
         cur_futures_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_futures_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_futures_rows.base_cur_id,
         cur_futures_rows.base_cur_code,
         cur_futures_rows.underlying_future_dr_id,
         cur_futures_rows.underlying_future_dr_id_name,
         cur_futures_rows.underlying_future_expiry_date,
         cur_futures_rows.underlying_future_quote_price,
         cur_futures_rows.underlying_fut_price_unit_id,
         cur_futures_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_futures_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur,
         vn_qty_in_base_unit,
         vn_trade_price_in_base_cur,
         vn_market_price_in_base_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type,
                                --Added by Siddharth
                                dpd_prev_day.open_quantity_in_base,
                                dpd_prev_day.base_qty_unit_id,
                                dpd_prev_day.trade_price_in_base,
                                dpd_prev_day.trade_price_unit_id,
                                dpd_prev_day.sett_price_in_base,
                                dpd_prev_day.sett_price_unit_id,
                                dpd_prev_day.broker_comm_in_base,
                                dpd_prev_day.clearer_comm_in_base,
                                dpd_prev_day.trade_cur_to_base_exch_rate,
                                dpd_prev_day.clearer_exch_rate,
                                dpd_prev_day.broker_exch_rate,
                                dpd_prev_day.pnl_in_trade_cur,
                                dpd_prev_day.settlement_price,
                                dpd_prev_day.trade_price
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur,
               dpd_today.prev_open_quantity_in_base    = cur_update.open_quantity_in_base,
               dpd_today.prev_quantity_unit_id         = cur_update.base_qty_unit_id,
               dpd_today.prev_trade_price_in_base      = cur_update.trade_price_in_base,
               dpd_today.prev_trade_price_unit_id      = cur_update.trade_price_unit_id,
               dpd_today.prev_sett_price_in_base       = cur_update.sett_price_in_base,
               dpd_today.prev_sett_price_unit_id       = cur_update.sett_price_unit_id,
               dpd_today.prev_clearer_comm_amt_in_base = cur_update.clearer_comm_in_base,
               dpd_today.prev_broker_comm_amt_in_base  = cur_update.broker_comm_in_base,
               dpd_today.prev_trade_cur_to_base_rate   = cur_update.trade_cur_to_base_exch_rate,
               dpd_today.prev_broker_exch_rate         = cur_update.broker_exch_rate,
               dpd_today.prev_clearer_exch_rate        = cur_update.clearer_exch_rate,
               dpd_today.prev_pnl_in_trade_cur         = cur_update.pnl_in_trade_cur,
               dpd_today.prev_settlement_price         = cur_update.settlement_price,
               dpd_today.prev_trade_price              = cur_update.trade_price,
               dpd_today.cont_unr_status               = 'EXISTING_TRADE'
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      --Added by Siddharth--
      -- mark the trades came as new in this eod/eom
      begin
        update dpd_derivative_pnl_daily dpd
           set dpd.cont_unr_status = 'NEW_TRADE'
         where dpd.cont_unr_status is null
           and dpd.process_id = pc_process_id
           and dpd.corporate_id = pc_corporate_id;
      exception
        when others then
          dbms_output.put_line('SQLERRM-2' || sqlerrm);
      end;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_future_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_future_realized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the realized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    cursor cur_futures is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             pdd.lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dcod.broker_comm_type_id,
             dcod.broker_comm_amt,
             dcod.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dcod.clearer_comm_type_id,            
             dcod.clearer_comm_amt,--
             dcod.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             dcod.lots_closed,
             dcod.quantity_closed,
             dcod.quantity_unit_id as dcod_quantity_unit_id,
             dcoh.internal_close_out_ref_no,
             dcoh.close_out_ref_no,
             dcoh.close_out_date,
             dcoh.valid_closeout_date,
             --edq.price settlement_price,
             --edq.price_unit_id settlement_price_unit_id,
             --pum_settle.cur_id settlement_price_cur_id,
             --cm_settle.cur_code settlemet_price_cur_code,
             --pum_settle.weight settlement_price_weight,
             --pum_settle.weight_unit_id settlement_weight_unit_id,
             --qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             div_der_instrument_valuation   div,
             apm_available_price_master     apm,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             dcoh_der_closeout_header       dcoh,
             dcod_der_closeout_detail       dcod,
             bct_broker_commission_types    bct_clearer,
             bct_broker_commission_types    bct_broker
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and div.available_price_id = apm.available_price_id
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dcod.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dcod.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
            --and dt.process_id=edq.process_id
            --AND dt.dr_id = edq.dr_id(+)
            --AND edq.price_unit_id = pum_settle.price_unit_id(+)
            --AND pum_settle.cur_id = cm_settle.cur_id(+)
            --AND pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dcoh.internal_close_out_ref_no =
             dcod.internal_close_out_ref_no
         and dcod.process_id = dcoh.process_id
         and dcoh.process_id = pc_process_id
         and dt.internal_derivative_ref_no =
             dcod.internal_derivative_ref_no
         and irm.instrument_type in ('Future', 'Forward')
            -- AND UPPER(dt.status) in ('closed', 'settled')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dcoh.is_rolled_back = 'N'
         and dt.clearer_comm_type_id = bct_clearer.commission_type_id(+)
         and dt.broker_comm_type_id = bct_broker.commission_type_id(+);
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clearer_comm_in_base_cur    number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    --vn_bank_fees_exch_rate         number;
    --vn_bank_fees                   number;
    --vn_bank_fees_in_base_cur       number;
    vn_trade_qty_exch_unit         number;
    vn_settlemet_price             number;
    vc_settlement_price_unit_id    varchar2(15);
    vc_settlement_cur_id           varchar2(15);
    vc_settlement_cur_code         varchar2(15);
    vc_settlement_weight           number(7, 2);
    vc_settlement_weight_unit_id   varchar2(15);
    vc_settlement_weight_unit      varchar2(15);
    vn_logno                       number := 0;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    --update drt
    /*
    update drt_derivative_trade drt
    set    (drt.close_out_ref_no, drt.close_out_date) = (select dcoh.close_out_ref_no,
                                                                dcoh.close_out_date
                                                         from   dcoh_der_closeout_header dcoh,
                                                                dcod_der_closeout_detail dcod
                                                         where  dcoh.internal_close_out_ref_no =
                                                                dcod.internal_close_out_ref_no
                                                         and    dcod.process_id =
                                                                dcoh.process_id
                                                         and    dcoh.process_id =
                                                                pc_process_id
                                                         and    dcod.internal_derivative_ref_no =
                                                                drt.internal_derivative_ref_no)
    where  drt.process_id = pc_process_id;
    */
    for cur_futures_rows in cur_futures
    loop
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_futures_rows.trade_qty_unit_id,
                                                                     cur_futures_rows.lot_size_unit_id,
                                                                     cur_futures_rows.quantity_closed);
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      if cur_futures_rows.broker_comm_cur_id <>
         cur_futures_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_out_date,
                                                                   pc_corporate_id,
                                                                   cur_futures_rows.prompt_date,
                                                                   cur_futures_rows.broker_comm_cur_id,
                                                                   cur_futures_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_futures_rows.clearer_comm_cur_id <>
         cur_futures_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_out_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.clearer_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      /*      IF cur_futures_rows.bank_fee_cur_id IS NOT NULL AND
         cur_futures_rows.bank_fee_cur_id <> cur_futures_rows.base_cur_id THEN
        vn_bank_fees_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_date,
                                                                                   pc_corporate_id,
                                                                                   cur_futures_rows.prompt_date,
                                                                                   cur_futures_rows.bank_fee_cur_id,
                                                                                   cur_futures_rows.base_cur_id);
      ELSE
        vn_bank_fees_exch_rate := 1;
      END IF;*/
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      --vn_qty_in_trade_wt_unit      := f_get_converted_quantity(null, --product id
      --                                                                     cur_futures_rows.weight_unit_id,
      --                                                                     cur_futures_rows.trade_qty_unit_id,
      --                                                                     cur_futures_rows.trade_qty);
      --we should be getting the closed quantity
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_futures_rows.trade_qty_unit_id,
                                                          cur_futures_rows.trade_weight_unit_id,
                                                          cur_futures_rows.quantity_closed);
      ---    vn_market_price_in_trade_cur := cur_futures_rows.settlement_price;
      begin
        select dqd.price,
               dqd.price_unit_id,
               pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vn_settlemet_price,
               vc_settlement_price_unit_id,
               vc_settlement_cur_id,
               vc_settlement_cur_code,
               vc_settlement_weight,
               vc_settlement_weight_unit_id,
               vc_settlement_weight_unit
          from dq_derivative_quotes        dq,
               dqd_derivative_quote_detail dqd,
               apm_available_price_master  apm,
               pum_price_unit_master       pum,
               cm_currency_master          cm,
               qum_quantity_unit_master    qum
         where dq.dq_id = dqd.dq_id
           and dq.dbd_id = dqd.dbd_id
           and dqd.price_unit_id = pum.price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id
           and dq.trade_date = cur_futures_rows.valid_closeout_date
           and dqd.price <> 0
           and dqd.dr_id = cur_futures_rows.dr_id
           and dq.corporate_id = pc_corporate_id
           and upper(dq.entry_type) = upper(cur_futures_rows.traded_on)
           and dq.instrument_id = cur_futures_rows.instrument_id
           and dqd.available_price_id = apm.available_price_id
           and dqd.available_price_id = cur_futures_rows.available_price_id
           and dqd.price_unit_id = cur_futures_rows.price_unit_id
              --  and apm.available_price_name = 'Settlement'
           and dq.dbd_id = pc_dbd_id;
      exception
        when no_data_found then
          vn_settlemet_price           := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
        when others then
          vn_settlemet_price           := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
      end;
      if nvl(vc_settlement_cur_id, 'NA') <> 'NA' and
         nvl(vc_settlement_weight_unit_id, 'NA') <> 'NA' then
        if cur_futures_rows.gravity is not null then
          vn_market_price_in_trade_cur := ((vn_settlemet_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_futures_rows.trade_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                                     vc_settlement_weight_unit_id,
                                                                                     cur_futures_rows.trade_weight_unit_id,
                                                                                     1,
                                                                                     cur_futures_rows.gravity,
                                                                                     cur_futures_rows.gravity_type,
                                                                                     cur_futures_rows.density_mass_qty_unit_id,
                                                                                     cur_futures_rows.density_volume_qty_unit_id));
        else
          vn_market_price_in_trade_cur := ((vn_settlemet_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_futures_rows.trade_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.f_get_converted_quantity(cur_futures_rows.product_id,
                                                                                vc_settlement_weight_unit_id,
                                                                                cur_futures_rows.trade_weight_unit_id,
                                                                                1));
        end if;
      else
        vn_market_price_in_trade_cur := 0;
      end if;
      /*
      market price in trade currency (dq_) needs to be converted into price unit currency of drt_
      
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                        cur_futures_rows.weight /
                                        (cur_futures_rows.ppu_dq_weight *
                                        pkg_general.f_get_converted_quantity(null,
                                                                              cur_futures_rows.ppu_dq_weight_unit_id,
                                                                              cur_futures_rows.weight_unit_id,
                                                                              1));
      */
      pkg_general.sp_get_main_cur_detail(cur_futures_rows.trade_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_futures_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(cur_futures_rows.close_out_date,
                                                               pc_corporate_id,
                                                               cur_futures_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_futures_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := cur_futures_rows.trade_price /
                                        nvl(cur_futures_rows.trade_weight,
                                            1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_futures_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      -- calcualate trade pnl in trade currency ends here
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      /*
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.quantity_unit_id,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.quantity_closed ) *
                                                                            --cur_futures_rows.weight_unit_id,
                                                                            --cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate;
      */
      vn_broker_comm_in_base_cur  := cur_futures_rows.broker_comm_amt *
                                     vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur := cur_futures_rows.clearer_comm_amt *
                                     vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur    := vn_pnl_value_in_trade_cur *
                                     vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur      := vn_pnl_value_in_base_cur -
                                     nvl(vn_broker_comm_in_base_cur, 0) -
                                     nvl(vn_clearer_comm_in_base_cur, 0);
      /* -NVL(vn_bank_fees_in_base_cur, 0);*/
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_futures_rows.internal_derivative_ref_no,
         cur_futures_rows.derivative_ref_no,
         cur_futures_rows.eod_trade_date,
         cur_futures_rows.trade_date,
         cur_futures_rows.corporate_id,
         cur_futures_rows.corporate_name,
         cur_futures_rows.trader_id,
         cur_futures_rows.tradername,
         cur_futures_rows.profit_center_id,
         cur_futures_rows.profit_center_name,
         cur_futures_rows.profit_center_short_name,
         cur_futures_rows.dr_id,
         cur_futures_rows.instrument_id,
         cur_futures_rows.instrument_name,
         cur_futures_rows.instrument_symbol,
         cur_futures_rows.instrument_type_id,
         cur_futures_rows.instrument_type,
         cur_futures_rows.instrument_display_name,
         cur_futures_rows.instrument_sub_type_id,
         cur_futures_rows.instrument_sub_type,
         cur_futures_rows.derivative_def_id,
         cur_futures_rows.derivative_def_name,
         cur_futures_rows.traded_on,
         cur_futures_rows.product_id,
         cur_futures_rows.product_desc,
         cur_futures_rows.exchange_id,
         cur_futures_rows.exchange_name,
         cur_futures_rows.exchange_code,
         cur_futures_rows.lot_size,
         cur_futures_rows.lot_size_unit_id,
         cur_futures_rows.lot_size_qty_unit,
         cur_futures_rows.price_point_id,
         cur_futures_rows.price_point_name,
         cur_futures_rows.period_type_id,
         cur_futures_rows.period_type_name,
         cur_futures_rows.period_type_display_name,
         cur_futures_rows.period_month,
         cur_futures_rows.period_year,
         cur_futures_rows.period_date,
         cur_futures_rows.prompt_date,
         cur_futures_rows.dr_id_name,
         cur_futures_rows.trade_type,
         cur_futures_rows.deal_type_id,
         cur_futures_rows.deal_type_name,
         cur_futures_rows.deal_type_display_name,
         cur_futures_rows.is_multiple_leg_involved,
         cur_futures_rows.deal_category,
         cur_futures_rows.deal_sub_category,
         cur_futures_rows.strategy_id,
         cur_futures_rows.strategy_name,
         cur_futures_rows.description,
         cur_futures_rows.strategy_def_name,
         cur_futures_rows.groupid,
         cur_futures_rows.groupname,
         cur_futures_rows.purpose_id,
         cur_futures_rows.purpose_name,
         cur_futures_rows.purpose_display_name,
         cur_futures_rows.external_ref_no,
         cur_futures_rows.cp_profile_id,
         cur_futures_rows.cp_name,
         cur_futures_rows.master_contract_id,
         cur_futures_rows.broker_profile_id,
         cur_futures_rows.broker_name,
         cur_futures_rows.broker_account_id,
         cur_futures_rows.broker_account_name,
         cur_futures_rows.broker_account_type,
         cur_futures_rows.broker_comm_type_id,
         cur_futures_rows.broker_comm_amt,
         cur_futures_rows.broker_comm_cur_id,
         cur_futures_rows.broker_cur_code,
         cur_futures_rows.clearer_profile_id,
         cur_futures_rows.clearer_name,
         cur_futures_rows.clearer_account_id,
         cur_futures_rows.clearer_account_name,
         cur_futures_rows.clearer_account_type,
         cur_futures_rows.clearer_comm_type_id,
         cur_futures_rows.clearer_comm_amt,
         cur_futures_rows.clearer_comm_cur_id,
         cur_futures_rows.clearer_cur_code,
         cur_futures_rows.product,
         cur_futures_rows.productdesc,
         cur_futures_rows.quality_id,
         cur_futures_rows.quality_name,
         cur_futures_rows.trade_qty_unit_id,
         cur_futures_rows.quantityname,
         cur_futures_rows.lots_closed, --siva total_lots,
         cur_futures_rows.quantity_closed, -- total_quantity,
         cur_futures_rows.open_lots,
         cur_futures_rows.open_quantity,
         cur_futures_rows.exercised_lots,
         cur_futures_rows.exercised_quantity,
         cur_futures_rows.expired_lots,
         cur_futures_rows.expired_quantity,
         cur_futures_rows.trade_price_type_id,
         cur_futures_rows.trade_price,
         cur_futures_rows.trade_price_unit_id,
         cur_futures_rows.trade_cur_id,
         cur_futures_rows.trade_cur_code,
         cur_futures_rows.trade_weight,
         cur_futures_rows.trade_weight_unit_id,
         cur_futures_rows.trade_qty_unit,
         cur_futures_rows.formula_id,
         cur_futures_rows.formula_name,
         cur_futures_rows.formula_display,
         cur_futures_rows.index_instrument_id,
         cur_futures_rows.index_instrument_name,
         cur_futures_rows.strike_price,
         cur_futures_rows.strike_price_unit_id,
         cur_futures_rows.strike_cur_id,
         cur_futures_rows.strike_cur_code,
         cur_futures_rows.strike_weight,
         cur_futures_rows.strike_weight_unit_id,
         cur_futures_rows.strike_qty_unit,
         cur_futures_rows.premium_discount,
         cur_futures_rows.premium_discount_price_unit_id,
         cur_futures_rows.pd_cur_id,
         cur_futures_rows.pd_cur_code,
         cur_futures_rows.pd_weight,
         cur_futures_rows.pd_weight_unit_id,
         cur_futures_rows.pd_qty_unit,
         cur_futures_rows.premium_due_date,
         cur_futures_rows.nominee_profile_id,
         cur_futures_rows.nominee_name,
         cur_futures_rows.leg_no,
         cur_futures_rows.option_expiry_date,
         cur_futures_rows.parent_int_derivative_ref_no,
         cur_futures_rows.market_location_country,
         cur_futures_rows.market_location_state,
         cur_futures_rows.market_location_city,
         cur_futures_rows.is_what_if,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_due_date,
         cur_futures_rows.closed_lots,
         cur_futures_rows.closed_quantity,
         cur_futures_rows.is_new_trade_date,
         cur_futures_rows.status,
         cur_futures_rows.settlement_cur_id,
         cur_futures_rows.settlement_cur_code,
         cur_futures_rows.in_out_at_money_status,
         cur_futures_rows.in_out_at_money_value,
         cur_futures_rows.exercise_date,
         cur_futures_rows.expiry_date,
         cur_futures_rows.group_cur_id,
         cur_futures_rows.group_cur_code,
         cur_futures_rows.group_qty_unit_id,
         cur_futures_rows.gcd_qty_unit,
         cur_futures_rows.base_qty_unit_id,
         cur_futures_rows.base_qty_unit,
         cur_futures_rows.internal_close_out_ref_no,
         cur_futures_rows.close_out_ref_no,
         cur_futures_rows.close_out_date,
         vn_market_price_in_trade_cur,
         vc_settlement_price_unit_id,
         vc_settlement_cur_id,
         vc_settlement_cur_code,
         vc_settlement_weight,
         vc_settlement_weight_unit_id,
         vc_settlement_weight_unit,
         cur_futures_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_futures_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_futures_rows.base_cur_id,
         cur_futures_rows.base_cur_code,
         cur_futures_rows.underlying_future_dr_id,
         cur_futures_rows.underlying_future_dr_id_name,
         cur_futures_rows.underlying_future_expiry_date,
         cur_futures_rows.underlying_future_quote_price,
         cur_futures_rows.underlying_fut_price_unit_id,
         cur_futures_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_futures_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_forward_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2,
                                           pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_future_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_futures is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                (case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end) else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             pum_trade.price_unit_name trade_price_unit_name,
             cm_trade.cur_code trade_price_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_weight_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             apm_available_price_master     apm,
             div_der_instrument_valuation   div,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and edq.available_price_id = apm.available_price_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
            --   and apm.available_price_name = 'Settlement'
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and irm.instrument_type in ('Forward', 'Future')
         and upper(dt.status) = 'VERIFIED'
         and dt.traded_on = 'OTC'
         and dtm.deal_type_display_name not like '%Swap%'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.open_quantity > 0
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_trade_qty_exch_unit         number;
    vn_trade_price                 number;
    vc_trade_price_unit_id         varchar2(15);
    vt_tbl_frm_setup               fb_tbl_setup;
    vt_tbl_frm_instrument          fb_tbl_instrument_data;
    vt_tbl_frm_instrument_out      fb_tbl_instrument_data;
    vt_tbl_frm_setup_out           fb_tbl_setup;
    vt_fb_tbl_frm_error_out        fb_tbl_error;
    vt_tbl_ind_setup               fb_tbl_setup;
    vt_tbl_ind_instrument          fb_tbl_instrument_data;
    vt_tbl_ind_instrument_out      fb_tbl_instrument_data;
    vt_tbl_ind_setup_out           fb_tbl_setup;
    vt_fb_tbl_ind_error_out        fb_tbl_error;
    vn_cur_row_cnt                 number;
    vn_fb_order_sq                 number := 1;
    vc_trade_price_cur_id          varchar2(15);
    vc_trade_price_cur_code        varchar2(15);
    vc_trade_price_unit_name       varchar2(50);
    vn_trade_price_weight          number(7, 2);
    vc_trade_price_weight_unit_id  varchar2(15);
    vc_trade_price_weight_unit     varchar2(15);
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
  begin
    for cur_futures_rows in cur_futures
    loop
      vt_tbl_frm_setup          := fb_tbl_setup();
      vt_tbl_frm_instrument     := fb_tbl_instrument_data();
      vt_tbl_frm_instrument_out := fb_tbl_instrument_data();
      vt_tbl_frm_setup_out      := fb_tbl_setup();
      vt_fb_tbl_frm_error_out   := fb_tbl_error();
      vt_tbl_ind_setup          := fb_tbl_setup();
      vt_tbl_ind_instrument     := fb_tbl_instrument_data();
      vt_tbl_ind_instrument_out := fb_tbl_instrument_data();
      vt_tbl_ind_setup_out      := fb_tbl_setup();
      vt_fb_tbl_ind_error_out   := fb_tbl_error();
      -- dbms_output.put_line('refno '|| cur_futures_rows.derivative_ref_no || ' price type '|| cur_futures_rows.trade_price_type_id);
      vn_trade_price                := null;
      vc_trade_price_unit_id        := null;
      vc_trade_price_cur_id         := null;
      vc_trade_price_cur_code       := null;
      vn_trade_price_weight         := null;
      vc_trade_price_weight_unit_id := null;
      vc_trade_price_weight_unit    := null;
      if cur_futures_rows.trade_price_type_id = 'Fixed' then
        vn_trade_price                := cur_futures_rows.trade_price;
        vc_trade_price_unit_id        := cur_futures_rows.trade_price_unit_id;
        vc_trade_price_unit_name      := cur_futures_rows.trade_price_unit_name;
        vc_trade_price_cur_id         := cur_futures_rows.trade_cur_id;
        vn_trade_price_weight         := cur_futures_rows.trade_weight;
        vc_trade_price_weight_unit_id := cur_futures_rows.trade_weight_unit_id;
        vc_trade_price_cur_code       := cur_futures_rows.trade_price_cur_code;
        vc_trade_price_weight_unit    := cur_futures_rows.trade_weight_unit;
      elsif cur_futures_rows.trade_price_type_id = 'Formula' then
        vn_fb_order_sq := 1;
        vn_cur_row_cnt := 1;
        for cc in (select fbs.formula_internal,
                          fbs.formula_display,
                          fbs.formula_name,
                          fbs.formula_id,
                          fbs.price_unit_id
                     from fbs_formula_builder_setup fbs
                    where fbs.formula_id = cur_futures_rows.formula_id)
        loop
          vt_tbl_frm_setup.extend;
          vt_tbl_frm_setup(1) := fb_typ_setup(cc.formula_id,
                                              pc_corporate_id,
                                              cc.formula_name,
                                              cc.formula_display,
                                              cc.formula_internal,
                                              cc.price_unit_id,
                                              pd_trade_date,
                                              null,
                                              null,
                                              null,
                                              null);
        end loop;
        for cc1 in (select dtfbi.instrument_id,
                           dtfbi.price_source_id,
                           dtfbi.price_point_id,
                           dtfbi.available_price_id,
                           dtfbi.fb_period_type,
                           dtfbi.fb_period_sub_type,
                           dtfbi.period_month,
                           dtfbi.period_year,
                           dtfbi.period_from_date,
                           dtfbi.period_to_date,
                           dtfbi.no_of_months,
                           dtfbi.no_of_days,
                           dtfbi.period_type_id,
                           dtfbi.delivery_period_id,
                           dtfbi.off_day_price,
                           dtfbi.basis,
                           dtfbi.basis_price_unit_id,
                           dtfbi.fx_rate_type,
                           dtfbi.fx_rate_
                      from dt_fbi dtfbi
                     where dtfbi.internal_derivative_ref_no =
                           cur_futures_rows.internal_derivative_ref_no
                       and dtfbi.is_deleted = 'N'
                       and dtfbi.process_id = pc_process_id)
        loop
          vn_fb_order_sq := 1;
          vt_tbl_frm_instrument.extend;
          vt_tbl_frm_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                          cur_futures_rows.formula_id,
                                                                          cc1.instrument_id,
                                                                          cc1.price_source_id,
                                                                          cc1.price_point_id,
                                                                          cc1.available_price_id,
                                                                          cc1.fb_period_type,
                                                                          cc1.fb_period_sub_type,
                                                                          cc1.period_month,
                                                                          cc1.period_year,
                                                                          cc1.period_from_date,
                                                                          cc1.period_to_date,
                                                                          cc1.no_of_months,
                                                                          cc1.no_of_days,
                                                                          cc1.period_type_id,
                                                                          cc1.delivery_period_id,
                                                                          cc1.off_day_price,
                                                                          cc1.basis,
                                                                          cc1.basis_price_unit_id,
                                                                          cc1.fx_rate_type,
                                                                          cc1.fx_rate_,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null);
          vn_fb_order_sq := vn_fb_order_sq + 1;
          vn_cur_row_cnt := vn_cur_row_cnt + 1;
        end loop;
        pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm_setup,
                                                   vt_tbl_frm_instrument,
                                                   vt_tbl_frm_setup_out,
                                                   vt_tbl_frm_instrument_out,
                                                   vt_fb_tbl_frm_error_out,
                                                   pc_dbd_id,
                                                   cur_futures_rows.derivative_ref_no);
        for i in vt_tbl_frm_setup_out.first .. vt_tbl_frm_setup_out.last
        loop
          vn_trade_price         := vt_tbl_frm_setup_out(i).fb_price;
          vc_trade_price_unit_id := vt_tbl_frm_setup_out(i).price_unit_id;
          /*dbms_output.put_line('vn_trade_price ' || vn_trade_price);
          dbms_output.put_line('vc_trade_price_unit_id ' ||
                               vc_trade_price_unit_id);*/
        end loop;
      elsif cur_futures_rows.trade_price_type_id = 'Index' then
        vn_fb_order_sq := 1;
        vn_cur_row_cnt := 1;
        for cc1 in (select dtfbi.instrument_id,
                           dtfbi.price_source_id,
                           dtfbi.price_point_id,
                           dtfbi.available_price_id,
                           dtfbi.fb_period_type,
                           dtfbi.fb_period_sub_type,
                           dtfbi.period_month,
                           dtfbi.period_year,
                           dtfbi.period_from_date,
                           dtfbi.period_to_date,
                           dtfbi.no_of_months,
                           dtfbi.no_of_days,
                           dtfbi.period_type_id,
                           dtfbi.delivery_period_id,
                           dtfbi.off_day_price,
                           dtfbi.basis,
                           dtfbi.basis_price_unit_id,
                           dtfbi.fx_rate_type,
                           dtfbi.fx_rate_
                      from dt_fbi dtfbi
                     where dtfbi.internal_derivative_ref_no =
                           cur_futures_rows.internal_derivative_ref_no
                       and dtfbi.is_deleted = 'N'
                       and dtfbi.process_id = pc_process_id)
        loop
          vt_tbl_ind_setup.extend;
          vt_tbl_ind_setup(1) := fb_typ_setup(cc1.instrument_id,
                                              pc_corporate_id,
                                              'index',
                                              'index',
                                              '$' || cc1.instrument_id || '$',
                                              cc1.basis_price_unit_id,
                                              pd_trade_date,
                                              null,
                                              null,
                                              null,
                                              null);
          vt_tbl_ind_instrument.extend;
          vt_tbl_ind_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                          cc1.instrument_id,
                                                                          cc1.instrument_id,
                                                                          cc1.price_source_id,
                                                                          cc1.price_point_id,
                                                                          cc1.available_price_id,
                                                                          cc1.fb_period_type,
                                                                          cc1.fb_period_sub_type,
                                                                          cc1.period_month,
                                                                          cc1.period_year,
                                                                          cc1.period_from_date,
                                                                          cc1.period_to_date,
                                                                          cc1.no_of_months,
                                                                          cc1.no_of_days,
                                                                          cc1.period_type_id,
                                                                          cc1.delivery_period_id,
                                                                          cc1.off_day_price,
                                                                          cc1.basis,
                                                                          cc1.basis_price_unit_id,
                                                                          cc1.fx_rate_type,
                                                                          cc1.fx_rate_,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null,
                                                                          null);
          vn_fb_order_sq := vn_fb_order_sq + 1;
          vn_cur_row_cnt := vn_cur_row_cnt + 1;
        end loop;
        pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind_setup,
                                                   vt_tbl_ind_instrument,
                                                   vt_tbl_ind_setup_out,
                                                   vt_tbl_ind_instrument_out,
                                                   vt_fb_tbl_ind_error_out,
                                                   pc_dbd_id,
                                                   cur_futures_rows.derivative_ref_no);
        for i in vt_tbl_ind_setup_out.first .. vt_tbl_ind_setup_out.last
        loop
          vn_trade_price         := vt_tbl_ind_setup_out(i).fb_price;
          vc_trade_price_unit_id := vt_tbl_ind_setup_out(i).price_unit_id;
          /*
          dbms_output.put_line('vn_trade_price ' || vn_trade_price);
          dbms_output.put_line('vc_trade_price_unit_id ' ||
                               vc_trade_price_unit_id);*/
        end loop;
      else
        vn_trade_price         := 0;
        vc_trade_price_unit_id := null;
      end if;
      if cur_futures_rows.trade_price_type_id <> 'Fixed' then
        begin
          select pum.price_unit_name,
                 pum.cur_id,
                 pum.weight,
                 pum.weight_unit_id,
                 cm.cur_code,
                 qum.qty_unit
            into vc_trade_price_unit_name,
                 vc_trade_price_cur_id,
                 vn_trade_price_weight,
                 vc_trade_price_weight_unit_id,
                 vc_trade_price_cur_code,
                 vc_trade_price_weight_unit
            from v_ppu_pum                pum,
                 cm_currency_master       cm,
                 qum_quantity_unit_master qum
           where pum.product_price_unit_id = vc_trade_price_unit_id
             and pum.cur_id = cm.cur_id
             and pum.weight_unit_id = qum.qty_unit_id;
        exception
          when no_data_found then
            vc_trade_price_cur_id         := null;
            vc_trade_price_unit_name      := null;
            vn_trade_price_weight         := null;
            vc_trade_price_weight_unit_id := null;
            vc_trade_price_cur_code       := null;
            vc_trade_price_weight_unit    := null;
        end;
      end if;
      /*dbms_output.put_line('vc_trade_price_unit_name' ||
      vc_trade_price_unit_name || '- ' ||
      vc_trade_price_weight_unit_id);*/
      -- Trade Qty in Exchange Weight Unit
      if cur_futures_rows.gravity is not null then
        if cur_futures_rows.quantity_unit_id <>
           cur_futures_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                              cur_futures_rows.quantity_unit_id,
                                                                              cur_futures_rows.lot_size_unit_id,
                                                                              cur_futures_rows.open_quantity,
                                                                              cur_futures_rows.gravity,
                                                                              cur_futures_rows.gravity_type,
                                                                              cur_futures_rows.density_mass_qty_unit_id,
                                                                              cur_futures_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_futures_rows.quantity_unit_id,
                                                                         cur_futures_rows.lot_size_unit_id,
                                                                         cur_futures_rows.open_quantity);
        end if;
      end if;
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.broker_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_futures_rows.prompt_date,
                                                                 cur_futures_rows.clearer_comm_cur_id,
                                                                 cur_futures_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)*/
      /* commented code since from and to is reveresed 18-jul-2009
      vn_qty_in_trade_wt_unit      := f_get_converted_quantity(null, --product id
                                                                           cur_futures_rows.weight_unit_id,
                                                                           cur_futures_rows.trade_qty_unit_id,
                                                                           cur_futures_rows.trade_qty); */
      if cur_futures_rows.gravity is not null then
        vn_qty_in_trade_wt_unit := pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                             cur_futures_rows.quantity_unit_id,
                                                                             vc_trade_price_weight_unit_id,
                                                                             cur_futures_rows.open_quantity,
                                                                             cur_futures_rows.gravity,
                                                                             cur_futures_rows.gravity_type,
                                                                             cur_futures_rows.density_mass_qty_unit_id,
                                                                             cur_futures_rows.density_volume_qty_unit_id);
      else
        vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                            cur_futures_rows.quantity_unit_id,
                                                            vc_trade_price_weight_unit_id,
                                                            cur_futures_rows.open_quantity
                                                            -- this we added for drt changes. bhairu
                                                            --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                            );
      end if;
      --preeti fix for open lots
      -- vn_market_price_in_trade_cur := cur_futures_rows.settlement_price;
      if cur_futures_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  vc_trade_price_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_futures_rows.product_id,
                                                                                   cur_futures_rows.settlement_weight_unit_id,
                                                                                   vc_trade_price_weight_unit_id,
                                                                                   1,
                                                                                   cur_futures_rows.gravity,
                                                                                   cur_futures_rows.gravity_type,
                                                                                   cur_futures_rows.density_mass_qty_unit_id,
                                                                                   cur_futures_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_futures_rows.settlement_price /
                                        nvl(cur_futures_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_futures_rows.settlement_price_cur_id,
                                                                                  vc_trade_price_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_futures_rows.product_id,
                                                                              cur_futures_rows.settlement_weight_unit_id,
                                                                              vc_trade_price_weight_unit_id,
                                                                              1));
      end if;
      /* he units will be the same since its defaulted in the screen
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                            cur_futures_row(i).weight /
                                            (cur_futures_rows(i).ppu_dq_weight *
                                            pkg_general.f_get_converted_quantity(null,
                                                                                  cur_futures_rows.ppu_dq_weight_unit_id,
                                                                                  cur_futures_rows.weight_unit_id,
                                                                                  1));
       */
      pkg_general.sp_get_main_cur_detail(vc_trade_price_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_futures_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_futures_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_futures_rows.prompt_date,
                                                              cur_futures_rows.base_cur_id,
                                                              cur_futures_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := vn_trade_price /
                                        nvl(vn_trade_price_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_futures_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      vn_total_trade_value_base_cur  := vn_trade_to_base_exch_rate *
                                        vn_total_trade_value_trade_cur;
      vn_total_market_value_base_cur := vn_trade_to_base_exch_rate *
                                        vn_total_market_val_trade_cur;
      /* 18-jul-2009 . commented this and replaced this with above code
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.weight_unit_id,
                                                                            cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate; */
      vn_broker_comm_in_base_cur := cur_futures_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_futures_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0);
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --  all this check should be removed later
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur)
      values
        (cur_futures_rows.internal_derivative_ref_no,
         cur_futures_rows.derivative_ref_no,
         cur_futures_rows.eod_trade_date,
         cur_futures_rows.trade_date,
         cur_futures_rows.corporate_id,
         cur_futures_rows.corporate_name,
         cur_futures_rows.trader_id,
         cur_futures_rows.tradername,
         cur_futures_rows.profit_center_id,
         cur_futures_rows.profit_center_name,
         cur_futures_rows.profit_center_short_name,
         cur_futures_rows.dr_id,
         cur_futures_rows.instrument_id,
         cur_futures_rows.instrument_name,
         cur_futures_rows.instrument_symbol,
         cur_futures_rows.instrument_type_id,
         cur_futures_rows.instrument_type,
         cur_futures_rows.instrument_display_name,
         cur_futures_rows.instrument_sub_type_id,
         cur_futures_rows.instrument_sub_type,
         cur_futures_rows.derivative_def_id,
         cur_futures_rows.derivative_def_name,
         cur_futures_rows.traded_on,
         cur_futures_rows.product_id,
         cur_futures_rows.product_desc,
         cur_futures_rows.exchange_id,
         cur_futures_rows.exchange_name,
         cur_futures_rows.exchange_code,
         cur_futures_rows.lot_size,
         cur_futures_rows.lot_size_unit_id,
         cur_futures_rows.lot_size_qty_unit,
         cur_futures_rows.price_point_id,
         cur_futures_rows.price_point_name,
         cur_futures_rows.period_type_id,
         cur_futures_rows.period_type_name,
         cur_futures_rows.period_type_display_name,
         cur_futures_rows.period_month,
         cur_futures_rows.period_year,
         cur_futures_rows.period_date,
         cur_futures_rows.prompt_date,
         cur_futures_rows.dr_id_name,
         cur_futures_rows.trade_type,
         cur_futures_rows.deal_type_id,
         cur_futures_rows.deal_type_name,
         cur_futures_rows.deal_type_display_name,
         cur_futures_rows.is_multiple_leg_involved,
         cur_futures_rows.deal_category,
         cur_futures_rows.deal_sub_category,
         cur_futures_rows.strategy_id,
         cur_futures_rows.strategy_name,
         cur_futures_rows.description,
         cur_futures_rows.strategy_def_name,
         cur_futures_rows.groupid,
         cur_futures_rows.groupname,
         cur_futures_rows.purpose_id,
         cur_futures_rows.purpose_name,
         cur_futures_rows.purpose_display_name,
         cur_futures_rows.external_ref_no,
         cur_futures_rows.cp_profile_id,
         cur_futures_rows.cp_name,
         cur_futures_rows.master_contract_id,
         cur_futures_rows.broker_profile_id,
         cur_futures_rows.broker_name,
         cur_futures_rows.broker_account_id,
         cur_futures_rows.broker_account_name,
         cur_futures_rows.broker_account_type,
         cur_futures_rows.broker_comm_type_id,
         cur_futures_rows.broker_comm_amt,
         cur_futures_rows.broker_comm_cur_id,
         cur_futures_rows.broker_cur_code,
         cur_futures_rows.clearer_profile_id,
         cur_futures_rows.clearer_name,
         cur_futures_rows.clearer_account_id,
         cur_futures_rows.clearer_account_name,
         cur_futures_rows.clearer_account_type,
         cur_futures_rows.clearer_comm_type_id,
         cur_futures_rows.clearer_comm_amt,
         cur_futures_rows.clearer_comm_cur_id,
         cur_futures_rows.clearer_cur_code,
         cur_futures_rows.product,
         cur_futures_rows.productdesc,
         cur_futures_rows.quality_id,
         cur_futures_rows.quality_name,
         cur_futures_rows.quantity_unit_id,
         cur_futures_rows.quantityname,
         cur_futures_rows.open_lots, -- total_lots,--siva
         cur_futures_rows.open_quantity, -- .total_quantity,--siva
         cur_futures_rows.open_lots,
         cur_futures_rows.open_quantity,
         cur_futures_rows.exercised_lots,
         cur_futures_rows.exercised_quantity,
         cur_futures_rows.expired_lots,
         cur_futures_rows.expired_quantity,
         cur_futures_rows.trade_price_type_id,
         vn_trade_price,
         vc_trade_price_unit_id,
         vc_trade_price_cur_id,
         vc_trade_price_cur_code,
         vn_trade_price_weight,
         vc_trade_price_weight_unit_id,
         vc_trade_price_weight_unit,
         cur_futures_rows.formula_id,
         cur_futures_rows.formula_name,
         cur_futures_rows.formula_display,
         cur_futures_rows.index_instrument_id,
         cur_futures_rows.index_instrument_name,
         cur_futures_rows.strike_price,
         cur_futures_rows.strike_price_unit_id,
         cur_futures_rows.strike_cur_id,
         cur_futures_rows.strike_cur_code,
         cur_futures_rows.strike_weight,
         cur_futures_rows.strike_weight_unit_id,
         cur_futures_rows.strike_qty_unit,
         cur_futures_rows.premium_discount,
         cur_futures_rows.premium_discount_price_unit_id,
         cur_futures_rows.pd_cur_id,
         cur_futures_rows.pd_cur_code,
         cur_futures_rows.pd_weight,
         cur_futures_rows.pd_weight_unit_id,
         cur_futures_rows.pd_qty_unit,
         cur_futures_rows.premium_due_date,
         cur_futures_rows.nominee_profile_id,
         cur_futures_rows.nominee_name,
         cur_futures_rows.leg_no,
         cur_futures_rows.option_expiry_date,
         cur_futures_rows.parent_int_derivative_ref_no,
         cur_futures_rows.market_location_country,
         cur_futures_rows.market_location_state,
         cur_futures_rows.market_location_city,
         cur_futures_rows.is_what_if,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_term,
         cur_futures_rows.payment_due_date,
         cur_futures_rows.closed_lots,
         cur_futures_rows.closed_quantity,
         cur_futures_rows.is_new_trade_date,
         cur_futures_rows.status,
         cur_futures_rows.settlement_cur_id,
         cur_futures_rows.settlement_cur_code,
         cur_futures_rows.in_out_at_money_status,
         cur_futures_rows.in_out_at_money_value,
         cur_futures_rows.exercise_date,
         cur_futures_rows.expiry_date,
         cur_futures_rows.group_cur_id,
         cur_futures_rows.group_cur_code,
         cur_futures_rows.group_qty_unit_id,
         cur_futures_rows.gcd_qty_unit,
         cur_futures_rows.base_qty_unit_id,
         cur_futures_rows.base_qty_unit,
         cur_futures_rows.internal_close_out_ref_no,
         cur_futures_rows.close_out_ref_no,
         cur_futures_rows.close_out_date,
         cur_futures_rows.settlement_price,
         cur_futures_rows.settlement_price_unit_id,
         cur_futures_rows.settlement_price_cur_id,
         cur_futures_rows.settlemet_price_cur_code,
         cur_futures_rows.settlement_price_weight,
         cur_futures_rows.settlement_weight_unit_id,
         cur_futures_rows.settlement_weight_unit,
         cur_futures_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_futures_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_futures_rows.base_cur_id,
         cur_futures_rows.base_cur_code,
         cur_futures_rows.underlying_future_dr_id,
         cur_futures_rows.underlying_future_dr_id_name,
         cur_futures_rows.underlying_future_expiry_date,
         cur_futures_rows.underlying_future_quote_price,
         cur_futures_rows.underlying_fut_price_unit_id,
         cur_futures_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_futures_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_forward_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_forward_realized_pnl(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2,
                                         pc_dbd_id       varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_forwards is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             'Settled' status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             fsh.settlement_ref_no,
             fsh.fsh_id,
             fsh.settlement_date,
             fsh.contract_price,
             fsh.contract_price_unit_id,
             fsh.market_price,
             fsh.market_price_unit_id,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             fsh_fin_settlement_header      fsh
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dt.internal_derivative_ref_no = fsh.internal_derivative_ref_no
         and fsh.process_id = pc_process_id
         and fsh.is_settled = 'Y'
         and fsh.is_deleted = 'N'
         and irm.instrument_type in ('Forward', 'Future')
            -- AND UPPER(dt.status) in ('closed', 'settled')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_trade_qty_exch_unit         number;
    vn_trade_to_base_exch_rate     number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vc_trade_price_cur_id          varchar2(15);
    vc_trade_price_cur_code        varchar2(15);
    vn_trade_price_weight          number(7, 2);
    vc_trade_price_weight_unit_id  varchar2(15);
    vc_trade_price_qty_unit        varchar2(15);
    vc_market_price_cur_id         varchar2(15);
    vc_market_price_cur_code       varchar2(15);
    vn_market_price_weight         number(7, 2);
    vc_market_price_weight_unit_id varchar2(15);
    vc_market_price_qty_unit       varchar2(15);
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_pnl_value_in_trade_cur      number;
    vn_total_trade_value_base_cur  number;
    vn_broker_comm_in_base_cur     number;
    vn_clearer_comm_in_base_cur    number;
    vn_pnl_value_in_base_cur       number;
    vn_net_pnl_in_base_cur         number;
    vn_market_contract_price       number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    for cur_forwards_rows in cur_forwards
    loop
      begin
        select pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vc_trade_price_cur_id,
               vc_trade_price_cur_code,
               vn_trade_price_weight,
               vc_trade_price_weight_unit_id,
               vc_trade_price_qty_unit
          from pum_price_unit_master    pum,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where pum.price_unit_id = cur_forwards_rows.contract_price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          select pum.cur_id,
                 cm.cur_code,
                 pum.weight,
                 pum.weight_unit_id,
                 qum.qty_unit
            into vc_trade_price_cur_id,
                 vc_trade_price_cur_code,
                 vn_trade_price_weight,
                 vc_trade_price_weight_unit_id,
                 vc_trade_price_qty_unit
            from v_ppu_pum                pum,
                 cm_currency_master       cm,
                 qum_quantity_unit_master qum
           where pum.product_price_unit_id =
                 cur_forwards_rows.contract_price_unit_id
             and pum.cur_id = cm.cur_id
             and pum.weight_unit_id = qum.qty_unit_id;
      end;
      -- Trade Qty in Exchange Weight Unit
      if cur_forwards_rows.gravity is not null then
        vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_forwards_rows.product_id,
                                                                            cur_forwards_rows.quantity_unit_id,
                                                                            cur_forwards_rows.lot_size_unit_id,
                                                                            cur_forwards_rows.open_quantity,
                                                                            cur_forwards_rows.gravity,
                                                                            cur_forwards_rows.gravity_type,
                                                                            cur_forwards_rows.density_mass_qty_unit_id,
                                                                            cur_forwards_rows.density_volume_qty_unit_id);
      else
        vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                       cur_forwards_rows.quantity_unit_id,
                                                                       cur_forwards_rows.lot_size_unit_id,
                                                                       cur_forwards_rows.open_quantity);
      end if;
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      if cur_forwards_rows.broker_comm_cur_id <>
         cur_forwards_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                   pc_corporate_id,
                                                                   cur_forwards_rows.prompt_date,
                                                                   cur_forwards_rows.broker_comm_cur_id,
                                                                   cur_forwards_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_forwards_rows.clearer_comm_cur_id <>
         cur_forwards_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_forwards_rows.prompt_date,
                                                                 cur_forwards_rows.clearer_comm_cur_id,
                                                                 cur_forwards_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      begin
        select pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vc_market_price_cur_id,
               vc_market_price_cur_code,
               vn_market_price_weight,
               vc_market_price_weight_unit_id,
               vc_market_price_qty_unit
          from pum_price_unit_master    pum,
               cm_currency_master       cm,
               qum_quantity_unit_master qum
         where pum.price_unit_id = cur_forwards_rows.market_price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          select pum.cur_id,
                 cm.cur_code,
                 pum.weight,
                 pum.weight_unit_id,
                 qum.qty_unit
            into vc_market_price_cur_id,
                 vc_market_price_cur_code,
                 vn_market_price_weight,
                 vc_market_price_weight_unit_id,
                 vc_market_price_qty_unit
            from v_ppu_pum                pum,
                 cm_currency_master       cm,
                 qum_quantity_unit_master qum
           where pum.product_price_unit_id =
                 cur_forwards_rows.market_price_unit_id
             and pum.cur_id = cm.cur_id
             and pum.weight_unit_id = qum.qty_unit_id;
      end;
      pkg_general.sp_get_main_cur_detail(vc_trade_price_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_forwards_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                               pc_corporate_id,
                                                               cur_forwards_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_forwards_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      if cur_forwards_rows.gravity is not null then
        vn_total_trade_value_trade_cur := ((cur_forwards_rows.contract_price /
                                          nvl(vn_trade_price_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_trade_price_cur_id,
                                                                                    cur_forwards_rows.settlement_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) *
                                          (pkg_general.fn_mass_volume_qty_conversion(cur_forwards_rows.product_id,
                                                                                     cur_forwards_rows.quantity_unit_id,
                                                                                     vc_trade_price_weight_unit_id,
                                                                                     cur_forwards_rows.open_quantity,
                                                                                     cur_forwards_rows.gravity,
                                                                                     cur_forwards_rows.gravity_type,
                                                                                     cur_forwards_rows.density_mass_qty_unit_id,
                                                                                     cur_forwards_rows.density_volume_qty_unit_id)) *
                                          vn_trade_sub_cur_id_factor;
      else
        vn_total_trade_value_trade_cur := ((cur_forwards_rows.contract_price /
                                          nvl(vn_trade_price_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_trade_price_cur_id,
                                                                                    cur_forwards_rows.settlement_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) *
                                          (pkg_general.f_get_converted_quantity(cur_forwards_rows.product_id,
                                                                                cur_forwards_rows.quantity_unit_id,
                                                                                vc_trade_price_weight_unit_id,
                                                                                cur_forwards_rows.open_quantity)) *
                                          vn_trade_sub_cur_id_factor;
      end if;
      if cur_forwards_rows.gravity is not null then
        vn_total_market_val_trade_cur := ((cur_forwards_rows.market_price /
                                         nvl(vn_market_price_weight, 1)) *
                                         pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                   vc_market_price_cur_id,
                                                                                   cur_forwards_rows.settlement_cur_id,
                                                                                   pd_trade_date,
                                                                                   1)) *
                                         (pkg_general.fn_mass_volume_qty_conversion(cur_forwards_rows.product_id,
                                                                                    cur_forwards_rows.quantity_unit_id,
                                                                                    vc_market_price_weight_unit_id,
                                                                                    cur_forwards_rows.open_quantity,
                                                                                    cur_forwards_rows.gravity,
                                                                                    cur_forwards_rows.gravity_type,
                                                                                    cur_forwards_rows.density_mass_qty_unit_id,
                                                                                    cur_forwards_rows.density_volume_qty_unit_id)) *
                                         vn_trade_sub_cur_id_factor;
      else
        vn_total_market_val_trade_cur := ((cur_forwards_rows.market_price /
                                         nvl(vn_market_price_weight, 1)) *
                                         pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                   vc_market_price_cur_id,
                                                                                   cur_forwards_rows.settlement_cur_id,
                                                                                   pd_trade_date,
                                                                                   1)) *
                                         (pkg_general.f_get_converted_quantity(cur_forwards_rows.product_id,
                                                                               cur_forwards_rows.quantity_unit_id,
                                                                               vc_market_price_weight_unit_id,
                                                                               cur_forwards_rows.open_quantity)) *
                                         vn_trade_sub_cur_id_factor;
      end if;
      if cur_forwards_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_broker_comm_in_base_cur     := cur_forwards_rows.broker_comm_amt *
                                        vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur    := cur_forwards_rows.clearer_comm_amt *
                                        vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur       := vn_pnl_value_in_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur         := vn_pnl_value_in_base_cur -
                                        nvl(vn_broker_comm_in_base_cur, 0) -
                                        nvl(vn_clearer_comm_in_base_cur, 0);
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         --internal_close_out_ref_no,
         --close_out_ref_no,
         -- close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         settlement_ref_no,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_forwards_rows.internal_derivative_ref_no,
         cur_forwards_rows.derivative_ref_no,
         cur_forwards_rows.eod_trade_date,
         cur_forwards_rows.trade_date,
         cur_forwards_rows.corporate_id,
         cur_forwards_rows.corporate_name,
         cur_forwards_rows.trader_id,
         cur_forwards_rows.tradername,
         cur_forwards_rows.profit_center_id,
         cur_forwards_rows.profit_center_name,
         cur_forwards_rows.profit_center_short_name,
         cur_forwards_rows.dr_id,
         cur_forwards_rows.instrument_id,
         cur_forwards_rows.instrument_name,
         cur_forwards_rows.instrument_symbol,
         cur_forwards_rows.instrument_type_id,
         cur_forwards_rows.instrument_type,
         cur_forwards_rows.instrument_display_name,
         cur_forwards_rows.instrument_sub_type_id,
         cur_forwards_rows.instrument_sub_type,
         cur_forwards_rows.derivative_def_id,
         cur_forwards_rows.derivative_def_name,
         cur_forwards_rows.traded_on,
         cur_forwards_rows.product_id,
         cur_forwards_rows.product_desc,
         cur_forwards_rows.exchange_id,
         cur_forwards_rows.exchange_name,
         cur_forwards_rows.exchange_code,
         cur_forwards_rows.lot_size,
         cur_forwards_rows.lot_size_unit_id,
         cur_forwards_rows.lot_size_qty_unit,
         cur_forwards_rows.price_point_id,
         cur_forwards_rows.price_point_name,
         cur_forwards_rows.period_type_id,
         cur_forwards_rows.period_type_name,
         cur_forwards_rows.period_type_display_name,
         cur_forwards_rows.period_month,
         cur_forwards_rows.period_year,
         cur_forwards_rows.period_date,
         cur_forwards_rows.prompt_date,
         cur_forwards_rows.dr_id_name,
         cur_forwards_rows.trade_type,
         cur_forwards_rows.deal_type_id,
         cur_forwards_rows.deal_type_name,
         cur_forwards_rows.deal_type_display_name,
         cur_forwards_rows.is_multiple_leg_involved,
         cur_forwards_rows.deal_category,
         cur_forwards_rows.deal_sub_category,
         cur_forwards_rows.strategy_id,
         cur_forwards_rows.strategy_name,
         cur_forwards_rows.description,
         cur_forwards_rows.strategy_def_name,
         cur_forwards_rows.groupid,
         cur_forwards_rows.groupname,
         cur_forwards_rows.purpose_id,
         cur_forwards_rows.purpose_name,
         cur_forwards_rows.purpose_display_name,
         cur_forwards_rows.external_ref_no,
         cur_forwards_rows.cp_profile_id,
         cur_forwards_rows.cp_name,
         cur_forwards_rows.master_contract_id,
         cur_forwards_rows.broker_profile_id,
         cur_forwards_rows.broker_name,
         cur_forwards_rows.broker_account_id,
         cur_forwards_rows.broker_account_name,
         cur_forwards_rows.broker_account_type,
         cur_forwards_rows.broker_comm_type_id,
         cur_forwards_rows.broker_comm_amt,
         cur_forwards_rows.broker_comm_cur_id,
         cur_forwards_rows.broker_cur_code,
         cur_forwards_rows.clearer_profile_id,
         cur_forwards_rows.clearer_name,
         cur_forwards_rows.clearer_account_id,
         cur_forwards_rows.clearer_account_name,
         cur_forwards_rows.clearer_account_type,
         cur_forwards_rows.clearer_comm_type_id,
         cur_forwards_rows.clearer_comm_amt,
         cur_forwards_rows.clearer_comm_cur_id,
         cur_forwards_rows.clearer_cur_code,
         cur_forwards_rows.product,
         cur_forwards_rows.productdesc,
         cur_forwards_rows.quality_id,
         cur_forwards_rows.quality_name,
         cur_forwards_rows.quantity_unit_id,
         cur_forwards_rows.quantityname,
         cur_forwards_rows.total_lots,
         cur_forwards_rows.total_quantity,
         cur_forwards_rows.open_lots,
         cur_forwards_rows.open_quantity,
         cur_forwards_rows.exercised_lots,
         cur_forwards_rows.exercised_quantity,
         cur_forwards_rows.expired_lots,
         cur_forwards_rows.expired_quantity,
         cur_forwards_rows.trade_price_type_id,
         cur_forwards_rows.contract_price,
         cur_forwards_rows.contract_price_unit_id,
         vc_trade_price_cur_id,
         vc_trade_price_cur_code,
         vn_trade_price_weight,
         vc_trade_price_weight_unit_id,
         vc_trade_price_qty_unit,
         cur_forwards_rows.formula_id,
         cur_forwards_rows.formula_name,
         cur_forwards_rows.formula_display,
         cur_forwards_rows.index_instrument_id,
         cur_forwards_rows.index_instrument_name,
         cur_forwards_rows.strike_price,
         cur_forwards_rows.strike_price_unit_id,
         cur_forwards_rows.strike_cur_id,
         cur_forwards_rows.strike_cur_code,
         cur_forwards_rows.strike_weight,
         cur_forwards_rows.strike_weight_unit_id,
         cur_forwards_rows.strike_qty_unit,
         cur_forwards_rows.premium_discount,
         cur_forwards_rows.premium_discount_price_unit_id,
         cur_forwards_rows.pd_cur_id,
         cur_forwards_rows.pd_cur_code,
         cur_forwards_rows.pd_weight,
         cur_forwards_rows.pd_weight_unit_id,
         cur_forwards_rows.pd_qty_unit,
         cur_forwards_rows.premium_due_date,
         cur_forwards_rows.nominee_profile_id,
         cur_forwards_rows.nominee_name,
         cur_forwards_rows.leg_no,
         cur_forwards_rows.option_expiry_date,
         cur_forwards_rows.parent_int_derivative_ref_no,
         cur_forwards_rows.market_location_country,
         cur_forwards_rows.market_location_state,
         cur_forwards_rows.market_location_city,
         cur_forwards_rows.is_what_if,
         cur_forwards_rows.payment_term,
         cur_forwards_rows.payment_term,
         cur_forwards_rows.payment_due_date,
         cur_forwards_rows.closed_lots,
         cur_forwards_rows.closed_quantity,
         cur_forwards_rows.is_new_trade_date,
         cur_forwards_rows.status,
         cur_forwards_rows.settlement_cur_id,
         cur_forwards_rows.settlement_cur_code,
         cur_forwards_rows.in_out_at_money_status,
         cur_forwards_rows.in_out_at_money_value,
         cur_forwards_rows.exercise_date,
         cur_forwards_rows.expiry_date,
         cur_forwards_rows.group_cur_id,
         cur_forwards_rows.group_cur_code,
         cur_forwards_rows.group_qty_unit_id,
         cur_forwards_rows.gcd_qty_unit,
         cur_forwards_rows.base_qty_unit_id,
         cur_forwards_rows.base_qty_unit,
         --cur_forwards_rows.internal_close_out_ref_no,
         -- cur_forwards_rows.close_out_ref_no,
         --cur_forwards_rows.close_out_date,
         cur_forwards_rows.market_price,
         cur_forwards_rows.market_price_unit_id,
         vc_market_price_cur_id,
         vc_market_price_cur_code,
         vn_market_price_weight,
         vc_market_price_weight_unit_id,
         vc_market_price_qty_unit,
         cur_forwards_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_forwards_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_forwards_rows.base_cur_id,
         cur_forwards_rows.base_cur_code,
         cur_forwards_rows.underlying_future_dr_id,
         cur_forwards_rows.underlying_future_dr_id_name,
         cur_forwards_rows.underlying_future_expiry_date,
         cur_forwards_rows.underlying_future_quote_price,
         cur_forwards_rows.underlying_fut_price_unit_id,
         cur_forwards_rows.process_id,
         vn_trade_qty_exch_unit,
         cur_forwards_rows.settlement_ref_no,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_forwards_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_forward_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_swap_unrealized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_swap_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for futures as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_swaps is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             'Unrealized' as pnl_type,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             dt.int_trade_parent_der_ref_no,
             dt.is_internal_trade,
             dt.available_price_id,
             dt.average_from_date,
             dt.average_to_date,
             dt.swap_type_1,
             dt.swap_trade_price_type_1,
             dt.swap_float_type_1,
             dt.swap_trade_price_1,
             dt.swap_trade_price_unit_id_1,
             pum_swap.price_unit_name swap_trade_price_unit_1,
             dt.swap_index_instrument_id_1,
             dt.swap_formula_id_1,
             dt.swap_type_2,
             dt.swap_trade_price_type_2,
             dt.swap_float_type_2,
             dt.swap_trade_price_2,
             dt.swap_trade_price_unit_id_2,
             pum_swap1.price_unit_id swap_trade_price_unit_2,
             dt.swap_index_instrument_id_2,
             dt.swap_formula_id_2,
             dt.swap_product1,
             dt.swap_product_quality1,
             dt.swap_product2,
             dt.swap_product_quality2,
             dt.pricing_invoicing_status,
             dt.approval_status,
             dt.trading_fee,
             dt.clearing_fee,
             dt.trading_clearing_fee,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             pum_price_unit_master          pum_swap,
             pum_price_unit_master          pum_swap1
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and dt.swap_trade_price_unit_id_1 = pum_swap.price_unit_id(+)
         and dt.swap_trade_price_unit_id_2 = pum_swap1.price_unit_id(+)
            --AND irm.instrument_type in ('Future', 'Forward')
         and dtm.deal_type_display_name like '%Swap%'
         and upper(dt.status) = 'VERIFIED'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.open_quantity > 0
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    --vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_sett_cur number;
    --vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    --vn_qty_in_trade_wt_unit        number;
    --vn_market_price_in_trade_cur   number;
    --vn_total_market_val_trade_cur  number;
    --vn_trade_price_in_trade_cur    number;
    --vn_total_trade_value_trade_cur number;
    vn_trade_qty_exch_unit         number;
    vn_settle_to_base_exch_rate    number;
    vn_total_value_in_leg1_set_cur number;
    vn_total_value_in_leg2_set_cur number;
    vt_tbl_frm1_setup              fb_tbl_setup;
    vt_tbl_frm1_instrument         fb_tbl_instrument_data;
    vt_tbl_frm1_instrument_out     fb_tbl_instrument_data;
    vt_tbl_frm1_setup_out          fb_tbl_setup;
    vt_fb_tbl_frm1_error_out       fb_tbl_error;
    vt_tbl_frm2_setup              fb_tbl_setup;
    vt_tbl_frm2_instrument         fb_tbl_instrument_data;
    vt_tbl_frm2_instrument_out     fb_tbl_instrument_data;
    vt_tbl_frm2_setup_out          fb_tbl_setup;
    vt_fb_tbl_frm2_error_out       fb_tbl_error;
    vt_tbl_ind1_setup              fb_tbl_setup;
    vt_tbl_ind1_instrument         fb_tbl_instrument_data;
    vt_tbl_ind1_instrument_out     fb_tbl_instrument_data;
    vt_tbl_ind1_setup_out          fb_tbl_setup;
    vt_fb_tbl_ind1_error_out       fb_tbl_error;
    vt_tbl_ind2_setup              fb_tbl_setup;
    vt_tbl_ind2_instrument         fb_tbl_instrument_data;
    vt_tbl_ind2_instrument_out     fb_tbl_instrument_data;
    vt_tbl_ind2_setup_out          fb_tbl_setup;
    vt_fb_tbl_ind2_error_out       fb_tbl_error;
    vn_cur_row_cnt                 number;
    vn_fb_order_sq                 number := 1;
    vn_leg1_formula_price          number;
    vc_leg1_formula_price_unit_id  varchar2(15);
    vn_leg2_formula_price          number;
    vc_leg2_formula_price_unit_id  varchar2(15);
    vc_leg1_cur_id                 varchar2(15);
    vc_leg1_price_unit_name        varchar2(50);
    vn_leg1_weight                 number(7, 2);
    vc_leg1_qty_unit_id            varchar2(15);
    vc_leg1_weight_unit_id         varchar2(15);
    vc_leg2_cur_id                 varchar2(15);
    vc_leg2_price_unit_name        varchar2(50);
    vn_leg2_weight                 number(7, 2);
    vc_leg2_weight_unit_id         varchar2(15);
    vc_leg2_qty_unit_id            varchar2(15);
    vc_test_str                    varchar2(100);
    vc_leg_2                       varchar2(1);
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
  begin
    for cur_swaps_rows in cur_swaps
    loop
      vt_tbl_frm1_setup          := fb_tbl_setup();
      vt_tbl_frm1_instrument     := fb_tbl_instrument_data();
      vt_tbl_frm1_instrument_out := fb_tbl_instrument_data();
      vt_tbl_frm1_setup_out      := fb_tbl_setup();
      vt_fb_tbl_frm1_error_out   := fb_tbl_error();
      vt_tbl_frm2_setup          := fb_tbl_setup();
      vt_tbl_frm2_instrument     := fb_tbl_instrument_data();
      vt_tbl_frm2_instrument_out := fb_tbl_instrument_data();
      vt_tbl_frm2_setup_out      := fb_tbl_setup();
      vt_fb_tbl_frm2_error_out   := fb_tbl_error();
      vt_tbl_ind1_setup          := fb_tbl_setup();
      vt_tbl_ind1_instrument     := fb_tbl_instrument_data();
      vt_tbl_ind1_instrument_out := fb_tbl_instrument_data();
      vt_tbl_ind1_setup_out      := fb_tbl_setup();
      vt_fb_tbl_ind1_error_out   := fb_tbl_error();
      vt_tbl_ind2_setup          := fb_tbl_setup();
      vt_tbl_ind2_instrument     := fb_tbl_instrument_data();
      vt_tbl_ind2_instrument_out := fb_tbl_instrument_data();
      vt_tbl_ind2_setup_out      := fb_tbl_setup();
      vt_fb_tbl_ind2_error_out   := fb_tbl_error();
      if cur_swaps_rows.swap_trade_price_type_1 = 'Fixed' then
        begin
          select ppu.product_price_unit_id
            into vc_leg1_formula_price_unit_id
            from v_ppu_pum ppu
           where ppu.price_unit_id =
                 cur_swaps_rows.swap_trade_price_unit_id_1
             and ppu.product_id = cur_swaps_rows.product_id;
          vn_leg1_formula_price := cur_swaps_rows.swap_trade_price_1;
        exception
          when no_data_found then
            vc_leg1_formula_price_unit_id := cur_swaps_rows.swap_trade_price_unit_id_1; --TODO
        end;
      elsif cur_swaps_rows.swap_trade_price_type_1 = 'Floating' then
        if cur_swaps_rows.swap_float_type_1 = 'Formula' then
          vn_cur_row_cnt := 1;
          vn_fb_order_sq := 1;
          vc_test_str    := cur_swaps_rows.internal_derivative_ref_no ||
                            ' leg 1 ' ||
                            cur_swaps_rows.swap_trade_price_type_1 || ' - ' ||
                            cur_swaps_rows.swap_float_type_1;
          for cc in (select fbs.formula_internal,
                            fbs.formula_display,
                            fbs.formula_name,
                            fbs.formula_id,
                            fbs.price_unit_id
                       from fbs_formula_builder_setup fbs
                      where fbs.formula_id =
                            cur_swaps_rows.swap_formula_id_1)
          loop
            vt_tbl_frm1_setup.extend;
            vt_tbl_frm1_setup(1) := fb_typ_setup(cc.formula_id,
                                                 pc_corporate_id,
                                                 cc.formula_name,
                                                 cc.formula_display,
                                                 cc.formula_internal,
                                                 cc.price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          vn_cur_row_cnt := 1;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = '1')
          loop
            vn_fb_order_sq := 1;
            vt_tbl_frm1_instrument.extend;
            vt_tbl_frm1_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cur_swaps_rows.swap_formula_id_1,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm1_setup,
                                                     vt_tbl_frm1_instrument,
                                                     vt_tbl_frm1_setup_out,
                                                     vt_tbl_frm1_instrument_out,
                                                     vt_fb_tbl_frm1_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_frm1_setup_out.first .. vt_tbl_frm1_setup_out.last
          loop
            vn_leg1_formula_price         := vt_tbl_frm1_setup_out(i)
                                            .fb_price;
            vc_leg1_formula_price_unit_id := vt_tbl_frm1_setup_out(i)
                                            .price_unit_id;
          end loop;
        elsif cur_swaps_rows.swap_float_type_1 = 'Index' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          vc_test_str    := cur_swaps_rows.internal_derivative_ref_no ||
                            ' leg 1 ' ||
                            cur_swaps_rows.swap_trade_price_type_1 || ' - ' ||
                            cur_swaps_rows.swap_float_type_1;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = '1')
          loop
            vt_tbl_ind1_setup.extend;
            vt_tbl_ind1_setup(1) := fb_typ_setup(cc1.instrument_id,
                                                 pc_corporate_id,
                                                 'index',
                                                 'index',
                                                 '$' || cc1.instrument_id || '$',
                                                 cc1.basis_price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vt_tbl_ind1_instrument.extend;
            vt_tbl_ind1_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cc1.instrument_id,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind1_setup,
                                                     vt_tbl_ind1_instrument,
                                                     vt_tbl_ind1_setup_out,
                                                     vt_tbl_ind1_instrument_out,
                                                     vt_fb_tbl_ind1_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_ind1_setup_out.first .. vt_tbl_ind1_setup_out.last
          loop
            vn_leg1_formula_price         := vt_tbl_ind1_setup_out(i)
                                            .fb_price;
            vc_leg1_formula_price_unit_id := vt_tbl_ind1_setup_out(i)
                                            .price_unit_id;
          end loop;
        end if;
      else
        vn_leg1_formula_price         := 0;
        vc_leg1_formula_price_unit_id := null;
      end if;
      if cur_swaps_rows.swap_trade_price_type_2 = 'Fixed' then
        vc_test_str := cur_swaps_rows.internal_derivative_ref_no ||
                       ' leg 2 ' || cur_swaps_rows.swap_trade_price_type_2 ||
                       ' - ' || cur_swaps_rows.swap_float_type_2;
        begin
          select ppu.product_price_unit_id
            into vc_leg2_formula_price_unit_id
            from v_ppu_pum ppu
           where ppu.price_unit_id =
                 cur_swaps_rows.swap_trade_price_unit_id_2
             and ppu.product_id = cur_swaps_rows.product_id;
          vn_leg2_formula_price := cur_swaps_rows.swap_trade_price_2;
        exception
          when no_data_found then
            vc_leg1_formula_price_unit_id := cur_swaps_rows.swap_trade_price_unit_id_2; --TODO
        end;
      elsif cur_swaps_rows.swap_trade_price_type_2 = 'Floating' then
        if cur_swaps_rows.swap_float_type_2 = 'Formula' then
          /*if cur_swaps_rows.swap_float_type_1 = 'Formula' then
            if nvl(cur_swaps_rows.swap_formula_id_1, 1) =
               nvl(cur_swaps_rows.swap_formula_id_2, 1) then
              vc_leg_2 := 1;
            else
              vc_leg_2 := 1;
            end if;
          else
            vc_leg_2 := 1;
          end if;*/
          vc_leg_2       := 2;
          vc_test_str    := cur_swaps_rows.internal_derivative_ref_no ||
                            ' leg 2 ' ||
                            cur_swaps_rows.swap_trade_price_type_2 || ' - ' ||
                            cur_swaps_rows.swap_float_type_2;
          vn_cur_row_cnt := 1;
          for cc in (select fbs.formula_internal,
                            fbs.formula_display,
                            fbs.formula_name,
                            fbs.formula_id,
                            fbs.price_unit_id
                       from fbs_formula_builder_setup fbs
                      where fbs.formula_id =
                            cur_swaps_rows.swap_formula_id_2)
          loop
            vt_tbl_frm2_setup.extend;
            vt_tbl_frm2_setup(1) := fb_typ_setup(cc.formula_id,
                                                 pc_corporate_id,
                                                 cc.formula_name,
                                                 cc.formula_display,
                                                 cc.formula_internal,
                                                 cc.price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          vn_cur_row_cnt := 1;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = vc_leg_2)
          loop
            vn_fb_order_sq := 1;
            vt_tbl_frm2_instrument.extend;
            vt_tbl_frm2_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cur_swaps_rows.swap_formula_id_2,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_frm2_setup,
                                                     vt_tbl_frm2_instrument,
                                                     vt_tbl_frm2_setup_out,
                                                     vt_tbl_frm2_instrument_out,
                                                     vt_fb_tbl_frm2_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_frm2_setup_out.first .. vt_tbl_frm2_setup_out.last
          loop
            vn_leg2_formula_price         := vt_tbl_frm2_setup_out(i)
                                            .fb_price;
            vc_leg2_formula_price_unit_id := vt_tbl_frm2_setup_out(i)
                                            .price_unit_id;
          end loop;
        elsif cur_swaps_rows.swap_float_type_2 = 'Index' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          /*  if cur_swaps_rows.swap_float_type_1 = 'Index' then
            if nvl(cur_swaps_rows.swap_index_instrument_id_1, 1) =
               nvl(cur_swaps_rows.swap_index_instrument_id_2, 1) then
              vc_leg_2 := 1;
            else
              vc_leg_2 := 2;
            end if;
          else
            vc_leg_2 := 1;
          end if;*/
          vc_leg_2    := 2;
          vc_test_str := cur_swaps_rows.internal_derivative_ref_no ||
                         ' leg 2 ' ||
                         cur_swaps_rows.swap_trade_price_type_2 || ' - ' ||
                         cur_swaps_rows.swap_float_type_2;
          for cc1 in (select dtfbi.instrument_id,
                             dtfbi.price_source_id,
                             dtfbi.price_point_id,
                             dtfbi.available_price_id,
                             dtfbi.fb_period_type,
                             dtfbi.fb_period_sub_type,
                             dtfbi.period_month,
                             dtfbi.period_year,
                             dtfbi.period_from_date,
                             dtfbi.period_to_date,
                             dtfbi.no_of_months,
                             dtfbi.no_of_days,
                             dtfbi.period_type_id,
                             dtfbi.delivery_period_id,
                             dtfbi.off_day_price,
                             dtfbi.basis,
                             dtfbi.basis_price_unit_id,
                             dtfbi.fx_rate_type,
                             dtfbi.fx_rate_
                        from dt_fbi dtfbi
                       where dtfbi.internal_derivative_ref_no =
                             cur_swaps_rows.internal_derivative_ref_no
                         and dtfbi.is_deleted = 'N'
                         and dtfbi.process_id = pc_process_id
                         and dtfbi.leg_no = vc_leg_2)
          loop
            vt_tbl_ind2_setup.extend;
            vt_tbl_ind2_setup(1) := fb_typ_setup(cc1.instrument_id,
                                                 pc_corporate_id,
                                                 'index',
                                                 'index',
                                                 '$' || cc1.instrument_id || '$',
                                                 cc1.basis_price_unit_id,
                                                 pd_trade_date,
                                                 null,
                                                 null,
                                                 null,
                                                 null);
            vt_tbl_ind2_instrument.extend;
            vt_tbl_ind2_instrument(vn_cur_row_cnt) := fb_typ_instrument_data(vn_fb_order_sq,
                                                                             cc1.instrument_id,
                                                                             cc1.instrument_id,
                                                                             cc1.price_source_id,
                                                                             cc1.price_point_id,
                                                                             cc1.available_price_id,
                                                                             cc1.fb_period_type,
                                                                             cc1.fb_period_sub_type,
                                                                             cc1.period_month,
                                                                             cc1.period_year,
                                                                             cc1.period_from_date,
                                                                             cc1.period_to_date,
                                                                             cc1.no_of_months,
                                                                             cc1.no_of_days,
                                                                             cc1.period_type_id,
                                                                             cc1.delivery_period_id,
                                                                             cc1.off_day_price,
                                                                             cc1.basis,
                                                                             cc1.basis_price_unit_id,
                                                                             cc1.fx_rate_type,
                                                                             cc1.fx_rate_,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null,
                                                                             null);
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          pkg_cdc_formula_builder.sp_calculate_price(vt_tbl_ind2_setup,
                                                     vt_tbl_ind2_instrument,
                                                     vt_tbl_ind2_setup_out,
                                                     vt_tbl_ind2_instrument_out,
                                                     vt_fb_tbl_ind2_error_out,
                                                     pc_dbd_id,
                                                     cur_swaps_rows.derivative_ref_no);
          for i in vt_tbl_ind2_setup_out.first .. vt_tbl_ind2_setup_out.last
          loop
            vn_leg2_formula_price         := vt_tbl_ind2_setup_out(i)
                                            .fb_price;
            vc_leg2_formula_price_unit_id := vt_tbl_ind2_setup_out(i)
                                            .price_unit_id;
          end loop;
        end if;
      else
        vn_leg2_formula_price         := 0;
        vc_leg2_formula_price_unit_id := null;
      end if;
      vc_test_str := 's1';
      -- Trade Qty in Exchange Weight Unit
      if cur_swaps_rows.gravity is not null then
        if cur_swaps_rows.quantity_unit_id <>
           cur_swaps_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_swaps_rows.product_id,
                                                                              cur_swaps_rows.quantity_unit_id,
                                                                              cur_swaps_rows.lot_size_unit_id,
                                                                              cur_swaps_rows.open_quantity,
                                                                              cur_swaps_rows.gravity,
                                                                              cur_swaps_rows.gravity_type,
                                                                              cur_swaps_rows.density_mass_qty_unit_id,
                                                                              cur_swaps_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_swaps_rows.quantity_unit_id,
                                                                         cur_swaps_rows.lot_size_unit_id,
                                                                         cur_swaps_rows.open_quantity);
        end if;
      end if;
      /*get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vc_test_str := 's2';
      if cur_swaps_rows.settlement_cur_id is not null then
        vn_settle_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                pc_corporate_id,
                                                                cur_swaps_rows.prompt_date,
                                                                cur_swaps_rows.settlement_cur_id,
                                                                cur_swaps_rows.base_cur_id);
      else
        vn_settle_to_base_exch_rate := 0;
      end if;
      vc_test_str := 's3';
      if cur_swaps_rows.broker_comm_cur_id is not null then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                   pc_corporate_id,
                                                                   cur_swaps_rows.prompt_date,
                                                                   cur_swaps_rows.broker_comm_cur_id,
                                                                   cur_swaps_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 0;
      end if;
      vc_test_str := 's4';
      if cur_swaps_rows.clearer_comm_cur_id is not null then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_swaps_rows.prompt_date,
                                                                 cur_swaps_rows.clearer_comm_cur_id,
                                                                 cur_swaps_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 0;
      end if;
      vc_test_str := 's5';
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)*/
      vc_test_str := 's6';
      begin
        select pum.cur_id,
               pum.price_unit_name,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit_id
          into vc_leg1_cur_id,
               vc_leg1_price_unit_name,
               vn_leg1_weight,
               vc_leg1_weight_unit_id,
               vc_leg1_qty_unit_id
          from v_ppu_pum                pum,
               qum_quantity_unit_master qum
         where pum.product_price_unit_id = vc_leg1_formula_price_unit_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          vc_leg1_cur_id          := null;
          vc_leg1_price_unit_name := null;
          vn_leg1_weight          := 0;
          vc_leg1_weight_unit_id  := null;
          vc_leg1_qty_unit_id     := null;
      end;
      vc_test_str := 's7';
      if nvl(vn_leg1_formula_price, 0) = 0 then
        vn_total_value_in_leg1_set_cur := 0;
      else
        if nvl(vc_leg1_cur_id, 'NA') <> 'NA' and
           nvl(cur_swaps_rows.settlement_cur_id, 'NA') <> 'NA' then
          if cur_swaps_rows.gravity is not null then
            vn_total_value_in_leg1_set_cur := ((vn_leg1_formula_price /
                                              nvl(vn_leg1_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg1_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.fn_mass_volume_qty_conversion(cur_swaps_rows.product_id,
                                                                                         cur_swaps_rows.quantity_unit_id,
                                                                                         vc_leg1_qty_unit_id,
                                                                                         cur_swaps_rows.open_quantity,
                                                                                         cur_swaps_rows.gravity,
                                                                                         cur_swaps_rows.gravity_type,
                                                                                         cur_swaps_rows.density_mass_qty_unit_id,
                                                                                         cur_swaps_rows.density_volume_qty_unit_id));
          else
            vn_total_value_in_leg1_set_cur := ((vn_leg1_formula_price /
                                              nvl(vn_leg1_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg1_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.f_get_converted_quantity(cur_swaps_rows.product_id,
                                                                                    cur_swaps_rows.quantity_unit_id,
                                                                                    vc_leg1_qty_unit_id,
                                                                                    cur_swaps_rows.open_quantity));
          end if;
        else
          vn_total_value_in_leg1_set_cur := 0;
        end if;
      end if;
      begin
        select pum.cur_id,
               pum.price_unit_name,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit_id
          into vc_leg2_cur_id,
               vc_leg2_price_unit_name,
               vn_leg2_weight,
               vc_leg2_weight_unit_id,
               vc_leg2_qty_unit_id
          from v_ppu_pum                pum,
               qum_quantity_unit_master qum
         where pum.product_price_unit_id = vc_leg2_formula_price_unit_id
           and pum.weight_unit_id = qum.qty_unit_id;
      exception
        when no_data_found then
          vc_leg2_cur_id          := null;
          vc_leg2_price_unit_name := null;
          vn_leg2_weight          := 0;
          vc_leg2_weight_unit_id  := null;
          vc_leg2_qty_unit_id     := null;
      end;
      vc_test_str := 's8';
      if nvl(vn_leg2_formula_price, 0) = 0 then
        vn_total_value_in_leg2_set_cur := 0;
      else
        if nvl(vc_leg2_cur_id, 'NA') <> 'NA' and
           nvl(cur_swaps_rows.settlement_cur_id, 'NA') <> 'NA' then
          if cur_swaps_rows.gravity is not null then
            vn_total_value_in_leg2_set_cur := ((vn_leg2_formula_price /
                                              nvl(vn_leg2_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg2_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.fn_mass_volume_qty_conversion(cur_swaps_rows.product_id,
                                                                                         cur_swaps_rows.quantity_unit_id,
                                                                                         vc_leg2_qty_unit_id,
                                                                                         cur_swaps_rows.open_quantity,
                                                                                         cur_swaps_rows.gravity,
                                                                                         cur_swaps_rows.gravity_type,
                                                                                         cur_swaps_rows.density_mass_qty_unit_id,
                                                                                         cur_swaps_rows.density_volume_qty_unit_id));
          else
            vn_total_value_in_leg2_set_cur := ((vn_leg2_formula_price /
                                              nvl(vn_leg2_weight, 1)) *
                                              pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                        vc_leg2_cur_id,
                                                                                        cur_swaps_rows.settlement_cur_id,
                                                                                        pd_trade_date,
                                                                                        1)) *
                                              (pkg_general.f_get_converted_quantity(cur_swaps_rows.product_id,
                                                                                    cur_swaps_rows.quantity_unit_id,
                                                                                    vc_leg2_qty_unit_id,
                                                                                    cur_swaps_rows.open_quantity));
          end if;
        else
          vn_total_value_in_leg2_set_cur := 0;
        end if;
      end if;
      vc_test_str := 's9';
      /*---Change based on Raja's input */
      /*IF cur_swaps_rows.trade_type = 'Buy' THEN
          vn_pnl_value_in_sett_cur := vn_total_value_in_leg1_set_cur -
                                      vn_total_value_in_leg2_set_cur;
      ELSE
          vn_pnl_value_in_sett_cur := vn_total_value_in_leg2_set_cur -
                                      vn_total_value_in_leg1_set_cur;
      END IF;*/
      if cur_swaps_rows.swap_type_1 = 'Receive' and
         cur_swaps_rows.swap_type_2 = 'Pay' then
        ---Pay  --Receive
        vn_pnl_value_in_sett_cur := vn_total_value_in_leg1_set_cur -
                                    vn_total_value_in_leg2_set_cur;
      elsif cur_swaps_rows.swap_type_1 = 'Pay' and
            cur_swaps_rows.swap_type_2 = 'Receive' then
        ---Pay  --Receive
        vn_pnl_value_in_sett_cur := vn_total_value_in_leg2_set_cur -
                                    vn_total_value_in_leg1_set_cur;
        --vn_total_value_in_leg2_set_cur;
      end if;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      
      IF cur_swaps_rows.trade_type = 'Buy' THEN
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      ELSE
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      END IF;
      
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
       */
      /*vn_total_trade_value_base_cur := vn_trade_to_base_exch_rate *
      vn_total_trade_value_trade_cur;*/
      /* 18-jul-2009 . commented this and replaced this with above code
      vn_total_trade_value_base_cur := pkg_general.f_get_converted_quantity(null,
                                                                            cur_futures_rows.trade_qty_unit_id,
                                                                            cur_futures_rows.weight_unit_id,
                                                                            cur_futures_rows.trade_qty) *
                                       cur_futures_rows.trade_price *
                                       vn_trade_to_base_exch_rate; */
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_swaps_rows.prompt_date,
                                                              cur_swaps_rows.base_cur_id,
                                                              cur_swaps_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_swaps_rows.prompt_date,
                                                              cur_swaps_rows.base_cur_id,
                                                              cur_swaps_rows.group_cur_id);
      ---ends here
      vn_broker_comm_in_base_cur := cur_swaps_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_swaps_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_sett_cur *
                                    vn_settle_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0);
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      --  all this check should be removed later
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_sett_cur is null then
        vn_pnl_value_in_sett_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         status,
         settlement_cur_id,
         settlement_cur_code,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         process_id,
         trade_qty_in_exch_unit,
         int_trade_parent_der_ref_no,
         is_internal_trade,
         available_price_id,
         average_from_date,
         average_to_date,
         swap_type_1,
         swap_trade_price_type_1,
         swap_float_type_1,
         swap_trade_price_1,
         swap_trade_price_unit_id_1,
         swap_trade_price_unit_1,
         swap_index_instrument_id_1,
         swap_formula_id_1,
         swap_type_2,
         swap_trade_price_type_2,
         swap_float_type_2,
         swap_trade_price_2,
         swap_trade_price_unit_id_2,
         swap_trade_price_unit_2,
         swap_index_instrument_id_2,
         swap_formula_id_2,
         swap_product1,
         swap_product_quality1,
         swap_product2,
         swap_product_quality2,
         pricing_invoicing_status,
         approval_status,
         trading_fee,
         clearing_fee,
         trading_clearing_fee,
         pnl_in_sett_cur,
         trade_value_in_base,
         market_value_in_base,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur)
      values
        (cur_swaps_rows.internal_derivative_ref_no,
         cur_swaps_rows.derivative_ref_no,
         cur_swaps_rows.eod_trade_date,
         cur_swaps_rows.trade_date,
         cur_swaps_rows.corporate_id,
         cur_swaps_rows.corporate_name,
         cur_swaps_rows.trader_id,
         cur_swaps_rows.tradername,
         cur_swaps_rows.profit_center_id,
         cur_swaps_rows.profit_center_name,
         cur_swaps_rows.profit_center_short_name,
         cur_swaps_rows.dr_id,
         cur_swaps_rows.instrument_id,
         cur_swaps_rows.instrument_name,
         cur_swaps_rows.instrument_symbol,
         cur_swaps_rows.instrument_type_id,
         cur_swaps_rows.instrument_type,
         cur_swaps_rows.instrument_display_name,
         cur_swaps_rows.instrument_sub_type_id,
         cur_swaps_rows.instrument_sub_type,
         cur_swaps_rows.derivative_def_id,
         cur_swaps_rows.derivative_def_name,
         cur_swaps_rows.traded_on,
         cur_swaps_rows.product_id,
         cur_swaps_rows.product_desc,
         cur_swaps_rows.exchange_id,
         cur_swaps_rows.exchange_name,
         cur_swaps_rows.exchange_code,
         cur_swaps_rows.lot_size,
         cur_swaps_rows.lot_size_unit_id,
         cur_swaps_rows.lot_size_qty_unit,
         cur_swaps_rows.price_point_id,
         cur_swaps_rows.price_point_name,
         cur_swaps_rows.period_type_id,
         cur_swaps_rows.period_type_name,
         cur_swaps_rows.period_type_display_name,
         cur_swaps_rows.period_month,
         cur_swaps_rows.period_year,
         cur_swaps_rows.period_date,
         cur_swaps_rows.prompt_date,
         cur_swaps_rows.dr_id_name,
         cur_swaps_rows.trade_type,
         cur_swaps_rows.deal_type_id,
         cur_swaps_rows.deal_type_name,
         cur_swaps_rows.deal_type_display_name,
         cur_swaps_rows.is_multiple_leg_involved,
         cur_swaps_rows.strategy_id,
         cur_swaps_rows.strategy_name,
         cur_swaps_rows.description,
         cur_swaps_rows.strategy_def_name,
         cur_swaps_rows.groupid,
         cur_swaps_rows.groupname,
         cur_swaps_rows.purpose_id,
         cur_swaps_rows.purpose_name,
         cur_swaps_rows.purpose_display_name,
         cur_swaps_rows.external_ref_no,
         cur_swaps_rows.cp_profile_id,
         cur_swaps_rows.cp_name,
         cur_swaps_rows.master_contract_id,
         cur_swaps_rows.broker_profile_id,
         cur_swaps_rows.broker_name,
         cur_swaps_rows.broker_account_id,
         cur_swaps_rows.broker_account_name,
         cur_swaps_rows.broker_account_type,
         cur_swaps_rows.broker_comm_type_id,
         cur_swaps_rows.broker_comm_amt,
         cur_swaps_rows.broker_comm_cur_id,
         cur_swaps_rows.broker_cur_code,
         cur_swaps_rows.clearer_profile_id,
         cur_swaps_rows.clearer_name,
         cur_swaps_rows.clearer_account_id,
         cur_swaps_rows.clearer_account_name,
         cur_swaps_rows.clearer_account_type,
         cur_swaps_rows.clearer_comm_type_id,
         cur_swaps_rows.clearer_comm_amt,
         cur_swaps_rows.clearer_comm_cur_id,
         cur_swaps_rows.clearer_cur_code,
         cur_swaps_rows.product,
         cur_swaps_rows.productdesc,
         cur_swaps_rows.quality_id,
         cur_swaps_rows.quality_name,
         cur_swaps_rows.quantity_unit_id,
         cur_swaps_rows.quantityname,
         cur_swaps_rows.open_lots, -- total_lots,--siva
         cur_swaps_rows.open_quantity, -- .total_quantity,--siva
         cur_swaps_rows.open_lots,
         cur_swaps_rows.open_quantity,
         cur_swaps_rows.exercised_lots,
         cur_swaps_rows.exercised_quantity,
         cur_swaps_rows.expired_lots,
         cur_swaps_rows.expired_quantity,
         cur_swaps_rows.trade_price_type_id,
         cur_swaps_rows.trade_price,
         cur_swaps_rows.trade_price_unit_id,
         cur_swaps_rows.trade_cur_id,
         cur_swaps_rows.trade_cur_code,
         cur_swaps_rows.trade_weight,
         cur_swaps_rows.trade_weight_unit_id,
         cur_swaps_rows.trade_qty_unit,
         cur_swaps_rows.formula_id,
         cur_swaps_rows.formula_name,
         cur_swaps_rows.formula_display,
         cur_swaps_rows.index_instrument_id,
         cur_swaps_rows.index_instrument_name,
         cur_swaps_rows.strike_price,
         cur_swaps_rows.strike_price_unit_id,
         cur_swaps_rows.strike_cur_id,
         cur_swaps_rows.strike_cur_code,
         cur_swaps_rows.strike_weight,
         cur_swaps_rows.strike_weight_unit_id,
         cur_swaps_rows.strike_qty_unit,
         cur_swaps_rows.premium_discount,
         cur_swaps_rows.premium_discount_price_unit_id,
         cur_swaps_rows.pd_cur_id,
         cur_swaps_rows.pd_cur_code,
         cur_swaps_rows.pd_weight,
         cur_swaps_rows.pd_weight_unit_id,
         cur_swaps_rows.pd_qty_unit,
         cur_swaps_rows.premium_due_date,
         cur_swaps_rows.nominee_profile_id,
         cur_swaps_rows.nominee_name,
         cur_swaps_rows.leg_no,
         cur_swaps_rows.option_expiry_date,
         cur_swaps_rows.parent_int_derivative_ref_no,
         cur_swaps_rows.market_location_country,
         cur_swaps_rows.market_location_state,
         cur_swaps_rows.market_location_city,
         cur_swaps_rows.is_what_if,
         cur_swaps_rows.payment_term,
         cur_swaps_rows.payment_term,
         cur_swaps_rows.payment_due_date,
         cur_swaps_rows.closed_lots,
         cur_swaps_rows.closed_quantity,
         cur_swaps_rows.status,
         cur_swaps_rows.settlement_cur_id,
         cur_swaps_rows.settlement_cur_code,
         cur_swaps_rows.group_cur_id,
         cur_swaps_rows.group_cur_code,
         cur_swaps_rows.group_qty_unit_id,
         cur_swaps_rows.gcd_qty_unit,
         cur_swaps_rows.base_qty_unit_id,
         cur_swaps_rows.base_qty_unit,
         cur_swaps_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_settle_to_base_exch_rate,
         cur_swaps_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_sett_cur,
         cur_swaps_rows.base_cur_id,
         cur_swaps_rows.base_cur_code,
         cur_swaps_rows.process_id,
         vn_trade_qty_exch_unit,
         cur_swaps_rows.int_trade_parent_der_ref_no,
         cur_swaps_rows.is_internal_trade,
         cur_swaps_rows.available_price_id,
         cur_swaps_rows.average_from_date,
         cur_swaps_rows.average_to_date,
         cur_swaps_rows.swap_type_1,
         cur_swaps_rows.swap_trade_price_type_1,
         cur_swaps_rows.swap_float_type_1,
         vn_leg1_formula_price,
         vc_leg1_formula_price_unit_id,
         vc_leg1_price_unit_name,
         cur_swaps_rows.swap_index_instrument_id_1,
         cur_swaps_rows.swap_formula_id_1,
         cur_swaps_rows.swap_type_2,
         cur_swaps_rows.swap_trade_price_type_2,
         cur_swaps_rows.swap_float_type_2,
         vn_leg2_formula_price,
         vc_leg2_formula_price_unit_id,
         vc_leg2_price_unit_name,
         cur_swaps_rows.swap_index_instrument_id_2,
         cur_swaps_rows.swap_formula_id_2,
         cur_swaps_rows.swap_product1,
         cur_swaps_rows.swap_product_quality1,
         cur_swaps_rows.swap_product2,
         cur_swaps_rows.swap_product_quality2,
         cur_swaps_rows.pricing_invoicing_status,
         cur_swaps_rows.approval_status,
         cur_swaps_rows.trading_fee,
         cur_swaps_rows.clearing_fee,
         cur_swaps_rows.trading_clearing_fee,
         vn_pnl_value_in_sett_cur,
         vn_total_value_in_leg1_set_cur,
         vn_total_value_in_leg2_set_cur,
         cur_swaps_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace ||
                           ' at ' || vc_test_str);
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_swap_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm || ' at ' ||
                                                           vc_test_str,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_unrealized_pnl(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for options as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             apm_available_price_master     apm,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du,
             div_der_instrument_valuation   div
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and edq.available_price_id = apm.available_price_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
            --         and apm.available_price_name = 'Settlement'
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and irm.instrument_type in ('Option Put', 'Option Call')
         and upper(dt.status) = 'VERIFIED' -- comented by siva, as issue in app, for partial exercise of lots, status updated with Exerciced 
         and dt.is_what_if = 'N'
         and dt.open_quantity > 0
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dt.traded_on = 'OTC';
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vn_strike_settlement_price     number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vn_underlying_quote_price      number;
    vc_underlying_price_unit_id    varchar2(20);
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
    --Added by Siddharth---
    vn_qty_in_base_unit         number;
    vn_trade_price_in_base_cur  number;
    vn_market_price_in_base_cur number;
    --Ends here---
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      if cur_option_rows.gravity is not null then
        if cur_option_rows.quantity_unit_id <>
           cur_option_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                              cur_option_rows.quantity_unit_id,
                                                                              cur_option_rows.lot_size_unit_id,
                                                                              cur_option_rows.open_quantity,
                                                                              cur_option_rows.gravity,
                                                                              cur_option_rows.gravity_type,
                                                                              cur_option_rows.density_mass_qty_unit_id,
                                                                              cur_option_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_option_rows.quantity_unit_id,
                                                                         cur_option_rows.lot_size_unit_id,
                                                                         cur_option_rows.open_quantity);
        end if;
      end if;
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.broker_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      if cur_option_rows.gravity is not null then
        vn_qty_in_trade_wt_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                             cur_option_rows.quantity_unit_id,
                                                                             cur_option_rows.pd_weight_unit_id,
                                                                             cur_option_rows.open_quantity,
                                                                             cur_option_rows.gravity,
                                                                             cur_option_rows.gravity_type,
                                                                             cur_option_rows.density_mass_qty_unit_id,
                                                                             cur_option_rows.density_volume_qty_unit_id);
      else
        vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                            cur_option_rows.quantity_unit_id,
                                                            cur_option_rows.pd_weight_unit_id,
                                                            cur_option_rows.open_quantity);
      end if;
      --preeti fix for open qty
      --vn_market_price_in_trade_cur := cur_option_rows.settlement_price;
      if cur_option_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                   cur_option_rows.settlement_weight_unit_id,
                                                                                   cur_option_rows.pd_weight_unit_id,
                                                                                   1,
                                                                                   cur_option_rows.gravity,
                                                                                   cur_option_rows.gravity_type,
                                                                                   cur_option_rows.density_mass_qty_unit_id,
                                                                                   cur_option_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                              cur_option_rows.settlement_weight_unit_id,
                                                                              cur_option_rows.pd_weight_unit_id,
                                                                              1));
      end if;
      /*
      market price in trade currency (dq_) needs to be converted into price unit currency of drt_
      
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                        cur_option_rows.weight /
                                        (cur_option_rows.ppu_dq_weight *
                                        f_get_converted_quantity(null,
                                                                              cur_option_rows.ppu_dq_weight_unit_id,
                                                                              cur_option_rows.weight_unit_id,
                                                                              1));
      */
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_option_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_option_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur  := vn_market_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      -- calcualate trade pnl in trade currency ends here
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
      
      vn_total_trade_value_base_cur := f_get_converted_quantity(null,
                                                                            cur_option_rows.trade_qty_unit_id,
                                                                            cur_option_rows.weight_unit_id,
                                                                            cur_option_rows.trade_qty) *
                                       cur_option_rows.trade_price *
                                       vn_trade_to_base_exch_rate;
      */
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      ---Added by Siddharth---
      vn_qty_in_base_unit := f_get_converted_quantity(null, --product id
                                                      cur_option_rows.quantity_unit_id,
                                                      cur_option_rows.base_qty_unit_id,
                                                      vn_qty_in_trade_wt_unit
                                                      -- this we added for drt changes. bhairu
                                                      --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                      );
      if vn_qty_in_base_unit <> 0 then
        vn_trade_price_in_base_cur := vn_total_trade_value_base_cur /
                                      vn_qty_in_base_unit;
      else
        vn_trade_price_in_base_cur := 0;
      end if;
      if vn_qty_in_base_unit <> 0 then
        vn_market_price_in_base_cur := vn_total_market_value_base_cur /
                                       vn_qty_in_base_unit;
      else
        vn_market_price_in_base_cur := 0;
      end if;
      --Ends here
      vn_broker_comm_in_base_cur := cur_option_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_option_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0)  ;
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---
      /*      if cur_option_rows.gravity is not null then
        vn_strike_settlement_price := (cur_option_rows.strike_price /
                                      nvl(cur_option_rows.strike_weight, 1)) *
                                      pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                               cur_option_rows.strike_cur_id,
                                                                               cur_option_rows.settlement_price_cur_id,
                                                                               pd_trade_date,
                                                                               1) *
                                      (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                 cur_option_rows.strike_weight_unit_id,
                                                                                 cur_option_rows.settlement_weight_unit_id,
                                                                                 1,
                                                                                 cur_option_rows.gravity,
                                                                                 cur_option_rows.gravity_type,
                                                                                 cur_option_rows.density_mass_qty_unit_id,
                                                                                 cur_option_rows.density_volume_qty_unit_id));
      
      else
        vn_strike_settlement_price := (cur_option_rows.strike_price /
                                      nvl(cur_option_rows.strike_weight, 1)) *
                                      pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                               cur_option_rows.strike_cur_id,
                                                                               cur_option_rows.settlement_price_cur_id,
                                                                               pd_trade_date,
                                                                               1) *
                                      (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                            cur_option_rows.strike_weight_unit_id,
                                                                            cur_option_rows.settlement_weight_unit_id,
                                                                            1));
      
      end if;
      if cur_option_rows.instrument_type = 'Option Put' then
        vn_in_out_at_money_value := (nvl(vn_strike_settlement_price, 0) -
                                    nvl(cur_option_rows.settlement_price,
                                         0));
      else
      
        vn_in_out_at_money_value := (nvl(cur_option_rows.settlement_price,
                                         0) -
                                    nvl(vn_strike_settlement_price, 0));
      end if;
      
      if (vn_in_out_at_money_value > 0) then
        vc_in_out_at_money_status := 'In the Money';
      elsif (vn_in_out_at_money_value < 0) then
        vc_in_out_at_money_status := 'Out of the Money';
      else
        vc_in_out_at_money_status := 'At the Money';
      end if;*/
      /*
      calcualte the in/out/at money status and value
      
      if cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy OTC Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell Call Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.strike_price,
                                           0) - nvl(cur_option_rows.settlement_price,
                                                     0));
      elsif cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell OTC Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy Call Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.settlement_price,
                                           0) - nvl(cur_option_rows.strike_price,
                                                     0));
      end if;
      if (vn_in_out_at_money_value > 0) then
          vc_in_out_at_money_status := 'In the Money';
      elsif (vn_in_out_at_money_value < 0) then
          vc_in_out_at_money_status := 'Out of the Money';
      else
          vc_in_out_at_money_status := 'At the Money';
      end if;
      */
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur,
         open_quantity_in_base,
         trade_price_in_base,
         sett_price_in_base)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.quantity_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.open_lots, --.total_lots,
         cur_option_rows.open_quantity, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.closed_lots,
         cur_option_rows.closed_quantity,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         vc_in_out_at_money_status,
         vn_in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         cur_option_rows.settlement_price,
         cur_option_rows.settlement_price_unit_id,
         cur_option_rows.settlement_price_cur_id,
         cur_option_rows.settlemet_price_cur_code,
         cur_option_rows.settlement_price_weight,
         cur_option_rows.settlement_weight_unit_id,
         cur_option_rows.settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur,
         vn_qty_in_base_unit,
         vn_trade_price_in_base_cur,
         vn_market_price_in_base_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type,
                                --Added by Siddharth
                                dpd_prev_day.open_quantity_in_base,
                                dpd_prev_day.base_qty_unit_id,
                                dpd_prev_day.trade_price_in_base, --pd
                                dpd_prev_day.trade_price_unit_id,
                                dpd_prev_day.sett_price_in_base,
                                dpd_prev_day.sett_price_unit_id,
                                dpd_prev_day.broker_comm_in_base,
                                dpd_prev_day.clearer_comm_in_base,
                                dpd_prev_day.trade_cur_to_base_exch_rate,
                                dpd_prev_day.clearer_exch_rate,
                                dpd_prev_day.broker_exch_rate,
                                dpd_prev_day.pnl_in_trade_cur,
                                dpd_prev_day.settlement_price,
                                dpd_prev_day.trade_price
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur,
               dpd_today.prev_open_quantity_in_base    = cur_update.open_quantity_in_base,
               dpd_today.prev_quantity_unit_id         = cur_update.base_qty_unit_id,
               dpd_today.prev_trade_price_in_base      = cur_update.trade_price_in_base,
               dpd_today.prev_trade_price_unit_id      = cur_update.trade_price_unit_id,
               dpd_today.prev_sett_price_in_base       = cur_update.sett_price_in_base,
               dpd_today.prev_sett_price_unit_id       = cur_update.sett_price_unit_id,
               dpd_today.prev_clearer_comm_amt_in_base = cur_update.clearer_comm_in_base,
               dpd_today.prev_broker_comm_amt_in_base  = cur_update.broker_comm_in_base,
               dpd_today.prev_trade_cur_to_base_rate   = cur_update.trade_cur_to_base_exch_rate,
               dpd_today.prev_broker_exch_rate         = cur_update.broker_exch_rate,
               dpd_today.prev_clearer_exch_rate        = cur_update.clearer_exch_rate,
               dpd_today.prev_pnl_in_trade_cur         = cur_update.pnl_in_trade_cur,
               dpd_today.prev_settlement_price         = cur_update.settlement_price,
               dpd_today.prev_trade_price              = cur_update.trade_price,
               dpd_today.cont_unr_status               = 'EXISTING_TRADE'
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      --Added by Siddharth--
      -- mark the trades came as new in this eod/eom
      begin
        update dpd_derivative_pnl_daily dpd
           set dpd.cont_unr_status = 'NEW_TRADE'
         where dpd.cont_unr_status is null
           and dpd.process_id = pc_process_id
           and dpd.corporate_id = pc_corporate_id;
      exception
        when others then
          dbms_output.put_line('SQLERRM-2' || sqlerrm);
      end;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_unr_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_unrealized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the unrealized pnl for options as on eod date
    parameters                                :
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vc_prev_eod_process_id    varchar2(15);
    vd_prev_eod_date          date;
    vc_prev_eom_process_id    varchar2(15);
    vd_prev_eom_date          date;
    lvc_previous_process_id   varchar2(15);
    lvc_previous_process_date date;
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             cpc.profit_center_cur_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             eodeom_derivative_quote_detail edq,
             apm_available_price_master     apm,
             pum_price_unit_master          pum_settle,
             cm_currency_master             cm_settle,
             qum_quantity_unit_master       qum_settle,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du,
             div_der_instrument_valuation   div
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id
         and dt.dr_id = edq.dr_id
         and edq.available_price_id = apm.available_price_id
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and edq.available_price_id = div.available_price_id
         and edq.price_unit_id = div.price_unit_id
         and edq.price_source_id = div.price_source_id
         and apm.is_active = 'Y'
         and apm.is_deleted = 'N'
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
            --and irm.instrument_type in ('Option Put', 'Option Call')
         and irm.instrument_type in ('Option Put', 'Option Call',
              'OTC Put Option', 'OTC Call Option')
            --   and upper(dt.status) = 'VERIFIED' -- comented by siva, as issue in app, for partial exercise of lots, status updated with Exerciced 
         and dt.is_what_if = 'N'
         and dt.open_quantity > 0
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
      --  and dt.traded_on='Exchange'
      --and nvl(dt.is_new_trade, 'N') = 'N'
      ;
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_comm_in_base_cur        number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vn_strike_settlement_price     number;
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vn_underlying_quote_price      number;
    vc_underlying_price_unit_id    varchar2(20);
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
    vn_base_to_profit_exch_rate    number;
    vn_base_to_group_exch_rate     number;
    vn_net_pnl_in_profit_cur       number;
    vn_net_pnl_in_group_cur        number;
    --Added by Siddharth---
    vn_qty_in_base_unit         number;
    vn_trade_price_in_base_cur  number;
    vn_market_price_in_base_cur number;
    --Ends here---
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      if cur_option_rows.gravity is not null then
        if cur_option_rows.quantity_unit_id <>
           cur_option_rows.lot_size_unit_id then
          vn_trade_qty_exch_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                              cur_option_rows.quantity_unit_id,
                                                                              cur_option_rows.lot_size_unit_id,
                                                                              cur_option_rows.open_quantity,
                                                                              cur_option_rows.gravity,
                                                                              cur_option_rows.gravity_type,
                                                                              cur_option_rows.density_mass_qty_unit_id,
                                                                              cur_option_rows.density_volume_qty_unit_id);
        else
          vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                         cur_option_rows.quantity_unit_id,
                                                                         cur_option_rows.lot_size_unit_id,
                                                                         cur_option_rows.open_quantity);
        end if;
      end if;
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.broker_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      vn_clr_cur_to_base_exch_rate   := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      /*
      calcualate trade pnl in trade currency
      1. convert trade qty from trade price unit weight unit to trade weight unit
      2. get the market price in trade currency
      3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
      4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
      5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      if cur_option_rows.gravity is not null then
        vn_qty_in_trade_wt_unit := pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                             cur_option_rows.quantity_unit_id,
                                                                             cur_option_rows.pd_weight_unit_id,
                                                                             cur_option_rows.open_quantity,
                                                                             cur_option_rows.gravity,
                                                                             cur_option_rows.gravity_type,
                                                                             cur_option_rows.density_mass_qty_unit_id,
                                                                             cur_option_rows.density_volume_qty_unit_id);
      else
        vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                            cur_option_rows.quantity_unit_id,
                                                            cur_option_rows.pd_weight_unit_id,
                                                            cur_option_rows.open_quantity);
      end if;
      if cur_option_rows.gravity is not null then
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                   cur_option_rows.settlement_weight_unit_id,
                                                                                   cur_option_rows.pd_weight_unit_id,
                                                                                   1,
                                                                                   cur_option_rows.gravity,
                                                                                   cur_option_rows.gravity_type,
                                                                                   cur_option_rows.density_mass_qty_unit_id,
                                                                                   cur_option_rows.density_volume_qty_unit_id));
      else
        vn_market_price_in_trade_cur := ((cur_option_rows.settlement_price /
                                        nvl(cur_option_rows.settlement_price_weight,
                                              1)) *
                                        pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                  cur_option_rows.settlement_price_cur_id,
                                                                                  cur_option_rows.pd_cur_id,
                                                                                  pd_trade_date,
                                                                                  1)) /
                                        (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                              cur_option_rows.settlement_weight_unit_id,
                                                                              cur_option_rows.pd_weight_unit_id,
                                                                              1));
      end if;
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                             pc_corporate_id,
                                                             cur_option_rows.prompt_date,
                                                             vc_trade_main_cur_id,
                                                             cur_option_rows.base_cur_id);
      ----Added by Siddharth---demo
      vn_base_to_profit_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.profit_center_cur_id);
      vn_base_to_group_exch_rate  := f_currency_exchange_rate(pd_trade_date,
                                                              pc_corporate_id,
                                                              cur_option_rows.prompt_date,
                                                              cur_option_rows.base_cur_id,
                                                              cur_option_rows.group_cur_id);
      ---ends here
      vn_total_market_val_trade_cur := vn_market_price_in_trade_cur *
                                       vn_qty_in_trade_wt_unit *
                                       vn_trade_sub_cur_id_factor;
      ----------------                                   
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*   if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;*/
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur;
      else
        vn_pnl_value_in_trade_cur := (-1) * vn_total_market_val_trade_cur;
      end if;
      --------------------- 
      /* vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
      vn_trade_to_base_exch_rate;*/
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      ---Added by Siddharth---
      vn_qty_in_base_unit := f_get_converted_quantity(null, --product id
                                                      cur_option_rows.quantity_unit_id,
                                                      cur_option_rows.base_qty_unit_id,
                                                      vn_qty_in_trade_wt_unit
                                                      -- this we added for drt changes. bhairu
                                                      --cur_futures_rows.trade_qty-nvl(cur_futures_rows.quantity_closed,0)
                                                      );
      if vn_qty_in_base_unit <> 0 then
        vn_trade_price_in_base_cur := vn_total_trade_value_base_cur /
                                      vn_qty_in_base_unit;
      else
        vn_trade_price_in_base_cur := 0;
      end if;
      if vn_qty_in_base_unit <> 0 then
        vn_market_price_in_base_cur := vn_total_market_value_base_cur /
                                       vn_qty_in_base_unit;
      else
        vn_market_price_in_base_cur := 0;
      end if;
      --Ends here
      vn_broker_comm_in_base_cur := cur_option_rows.broker_comm_amt *
                                    vn_brokr_cur_to_base_exch_rate;
      vn_clr_comm_in_base_cur    := cur_option_rows.clearer_comm_amt *
                                    vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur   := vn_pnl_value_in_trade_cur *
                                    vn_trade_to_base_exch_rate;
      --Fix 10th Nov
      --vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
      --                                 nvl(vn_broker_comm_in_base_cur,0) - nvl(vn_clr_comm_in_base_cur,0)  ;
      vn_net_pnl_in_base_cur := vn_pnl_value_in_base_cur;
      --Added by Siddharth---
      vn_net_pnl_in_profit_cur := vn_net_pnl_in_base_cur *
                                  vn_base_to_profit_exch_rate;
      vn_net_pnl_in_group_cur  := vn_net_pnl_in_base_cur *
                                  vn_base_to_group_exch_rate;
      --Ends here---      
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on,
         unrpnl_in_profit_cur,
         unrpnl_in_group_cur,
         open_quantity_in_base,
         trade_price_in_base,
         sett_price_in_base)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.quantity_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.open_lots, --.total_lots,
         cur_option_rows.open_quantity, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.closed_lots,
         cur_option_rows.closed_quantity,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         vc_in_out_at_money_status,
         vn_in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         cur_option_rows.settlement_price,
         cur_option_rows.settlement_price_unit_id,
         cur_option_rows.settlement_price_cur_id,
         cur_option_rows.settlemet_price_cur_code,
         cur_option_rows.settlement_price_weight,
         cur_option_rows.settlement_weight_unit_id,
         cur_option_rows.settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clr_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on,
         vn_net_pnl_in_profit_cur,
         vn_net_pnl_in_group_cur,
         vn_qty_in_base_unit,
         vn_trade_price_in_base_cur,
         vn_market_price_in_base_cur);
    end loop;
    ---Added by Siddharth
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_eod_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_eod_process_id := null;
        vd_prev_eod_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eom_date,
             vc_prev_eom_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_process_id := null;
        vd_prev_eom_date       := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    if pc_process = 'EOD' then
      lvc_previous_process_id   := vc_prev_eod_process_id;
      lvc_previous_process_date := vd_prev_eod_date;
    else
      lvc_previous_process_id   := vc_prev_eom_process_id;
      lvc_previous_process_date := vd_prev_eom_date;
    end if;
    begin
      -- update previous eod data
      for cur_update in (select dpd_prev_day.internal_derivative_ref_no,
                                dpd_prev_day.pnl_in_base_cur,
                                dpd_prev_day.unrpnl_in_group_cur,
                                dpd_prev_day.unrpnl_in_profit_cur,
                                dpd_prev_day.pnl_type,
                                --Added by Siddharth
                                dpd_prev_day.open_quantity_in_base,
                                dpd_prev_day.base_qty_unit_id,
                                dpd_prev_day.trade_price_in_base, --pd
                                dpd_prev_day.trade_price_unit_id,
                                dpd_prev_day.sett_price_in_base,
                                dpd_prev_day.sett_price_unit_id,
                                dpd_prev_day.broker_comm_in_base,
                                dpd_prev_day.clearer_comm_in_base,
                                dpd_prev_day.trade_cur_to_base_exch_rate,
                                dpd_prev_day.clearer_exch_rate,
                                dpd_prev_day.broker_exch_rate,
                                dpd_prev_day.pnl_in_trade_cur,
                                dpd_prev_day.settlement_price,
                                dpd_prev_day.trade_price
                           from dpd_derivative_pnl_daily dpd_prev_day
                          where dpd_prev_day.process_id =
                                lvc_previous_process_id
                            and corporate_id = pc_corporate_id)
      loop
        update dpd_derivative_pnl_daily dpd_today
           set dpd_today.prev_day_unr_pnl_in_base_cur  = cur_update.pnl_in_base_cur,
               dpd_today.prev_day_unrpnl_in_profit_cur = cur_update.unrpnl_in_profit_cur,
               dpd_today.prev_day_unrpnl_in_group_cur  = cur_update.unrpnl_in_group_cur,
               dpd_today.prev_open_quantity_in_base    = cur_update.open_quantity_in_base,
               dpd_today.prev_quantity_unit_id         = cur_update.base_qty_unit_id,
               dpd_today.prev_trade_price_in_base      = cur_update.trade_price_in_base,
               dpd_today.prev_trade_price_unit_id      = cur_update.trade_price_unit_id,
               dpd_today.prev_sett_price_in_base       = cur_update.sett_price_in_base,
               dpd_today.prev_sett_price_unit_id       = cur_update.sett_price_unit_id,
               dpd_today.prev_clearer_comm_amt_in_base = cur_update.clearer_comm_in_base,
               dpd_today.prev_broker_comm_amt_in_base  = cur_update.broker_comm_in_base,
               dpd_today.prev_trade_cur_to_base_rate   = cur_update.trade_cur_to_base_exch_rate,
               dpd_today.prev_broker_exch_rate         = cur_update.broker_exch_rate,
               dpd_today.prev_clearer_exch_rate        = cur_update.clearer_exch_rate,
               dpd_today.prev_pnl_in_trade_cur         = cur_update.pnl_in_trade_cur,
               dpd_today.prev_settlement_price         = cur_update.settlement_price,
               dpd_today.prev_trade_price              = cur_update.trade_price,
               dpd_today.cont_unr_status               = 'EXISTING_TRADE'
         where dpd_today.internal_derivative_ref_no =
               cur_update.internal_derivative_ref_no
           and dpd_today.process_id = pc_process_id
           and dpd_today.pnl_type = cur_update.pnl_type
           and dpd_today.corporate_id = pc_corporate_id;
      end loop;
      --Added by Siddharth--
      -- mark the trades came as new in this eod/eom
      begin
        update dpd_derivative_pnl_daily dpd
           set dpd.cont_unr_status = 'NEW_TRADE'
         where dpd.cont_unr_status is null
           and dpd.process_id = pc_process_id
           and dpd.corporate_id = pc_corporate_id;
      exception
        when others then
          dbms_output.put_line('SQLERRM-2' || sqlerrm);
      end;
      update dpd_derivative_pnl_daily dpd
         set dpd.trade_day_pnl_in_base_cur = nvl(dpd.pnl_in_base_cur, 0) -
                                             nvl(dpd.prev_day_unr_pnl_in_base_cur,
                                                 0),
             ---added by Siddharth 05/Jan/2012
             dpd.trade_day_pnl_in_profit_cur = nvl(dpd.unrpnl_in_profit_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_profit_cur,
                                                            0),
             dpd.trade_day_pnl_in_group_cur  = nvl(dpd.unrpnl_in_group_cur,
                                                   0) - nvl(dpd.prev_day_unrpnl_in_group_cur,
                                                            0)
      --ends here
       where dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id
         and dpd.pnl_type = 'Unrealized';
    exception
      when others then
        dbms_output.put_line('SQLERRM-1' || sqlerrm);
    end;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_realized_pnl(pc_corporate_id varchar2,
                                        pd_trade_date   date,
                                        pc_process_id   varchar2,
                                        pc_user_id      varchar2,
                                        pc_process      varchar2,
                                        pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_realized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the realized pnl for options as on eod date
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             0 broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             0 clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             decode(dt.status,
                    'Expired',
                    dt.expired_quantity,
                    dt.exercised_quantity) quantity_closed,
             decode(dt.status,
                    'Expired',
                    dt.expired_lots,
                    dt.exercised_lots) lots_closed,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             drm.expiry_date as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             drm.expiry_date close_out_date,
             drm.expiry_date valid_closeout_date,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             div_der_instrument_valuation   div,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and drm.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and irm.instrument_type in ('Option Put', 'Option Call')
         and upper(dt.status) in ('EXERCISED', 'EXPIRED')
         and dt.is_what_if = 'N'
         and dt.is_realized_today = 'Y'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dt.traded_on = 'OTC'
      union
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             nvl(dcod.broker_comm_amt, 0) as broker_comm_amt,
             dcod.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dcod.clearer_comm_amt,
             dcod.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dcod.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dcod.quantity_closed,
             dcod.lots_closed,
             null as is_new_trade_date,
             'Settled' status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             drm.expiry_date as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             dcoh.internal_close_out_ref_no,
             dcoh.close_out_ref_no,
             dcoh.close_out_date,
             dcoh.valid_closeout_date,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             div_der_instrument_valuation   div,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             dcoh_der_closeout_header       dcoh,
             dcod_der_closeout_detail       dcod,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and dim.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dcoh.internal_close_out_ref_no =
             dcod.internal_close_out_ref_no
         and dcod.process_id = dcoh.process_id
         and dcoh.process_id = pc_process_id
         and dt.internal_derivative_ref_no =
             dcod.internal_derivative_ref_no
         and irm.instrument_type in ('Option Put', 'Option Call')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dcoh.is_rolled_back = 'N'
         and dt.traded_on = 'OTC';
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_clearer_comm_in_base_cur    number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vc_settlement_price_unit_id    varchar2(15);
    vc_settlement_cur_id           varchar2(15);
    vc_settlement_cur_code         varchar2(15);
    vc_settlement_weight           number(7, 2);
    vc_settlement_weight_unit_id   varchar2(15);
    vc_settlement_weight_unit      varchar2(15);
    vn_settlement_price            number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_option_rows.trade_qty_unit_id,
                                                                     cur_option_rows.lot_size_unit_id,
                                                                     cur_option_rows.quantity_closed);
      /*
      get the exchange rates
      1. from broker to base currency
      2. trade to base currency
      */
      if cur_option_rows.broker_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_option_rows.close_out_date,
                                                                   pc_corporate_id,
                                                                   cur_option_rows.prompt_date,
                                                                   cur_option_rows.broker_comm_cur_id,
                                                                   cur_option_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_option_rows.clearer_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(cur_option_rows.close_out_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      /* calcualate trade pnl in trade currency
          1. convert trade qty from trade price unit weight unit to trade weight unit
          2. get the market price in trade currency
          3. market value in trade currency = qty in trade weight unit(1) * market price in trade currency(2)
          4. trade value in trade currency = trade price in trade currency (from drt) * trade qty in trade unit(1)
          5. pnl in trade currency = market value in trade currency(2) - trade value in trade currency(4)
      */
      /*  vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
      cur_option_rows.trade_qty_unit_id,
      cur_option_rows.trade_weight_unit_id,
      cur_option_rows.quantity_closed); */
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_option_rows.trade_qty_unit_id,
                                                          cur_option_rows.pd_weight_unit_id,
                                                          cur_option_rows.quantity_closed);
      --vn_market_price_in_trade_cur := cur_option_rows.settlement_price;
      begin
        select dqd.price,
               dqd.price_unit_id,
               pum.cur_id,
               cm.cur_code,
               pum.weight,
               pum.weight_unit_id,
               qum.qty_unit
          into vn_settlement_price,
               vc_settlement_price_unit_id,
               vc_settlement_cur_id,
               vc_settlement_cur_code,
               vc_settlement_weight,
               vc_settlement_weight_unit_id,
               vc_settlement_weight_unit
          from dq_derivative_quotes        dq,
               dqd_derivative_quote_detail dqd,
               apm_available_price_master  apm,
               pum_price_unit_master       pum,
               cm_currency_master          cm,
               qum_quantity_unit_master    qum
         where dq.dq_id = dqd.dq_id
           and dq.dbd_id = dqd.dbd_id
           and dqd.price_unit_id = pum.price_unit_id
           and pum.cur_id = cm.cur_id
           and pum.weight_unit_id = qum.qty_unit_id
           and dq.trade_date = cur_option_rows.valid_closeout_date
           and dqd.price <> 0
           and dqd.dr_id = cur_option_rows.dr_id
           and dq.corporate_id = pc_corporate_id
           and upper(dq.entry_type) = upper(cur_option_rows.traded_on)
           and dq.instrument_id = cur_option_rows.instrument_id
           and dqd.available_price_id = apm.available_price_id
           and dqd.available_price_id = cur_option_rows.available_price_id
           and dqd.price_unit_id = cur_option_rows.price_unit_id
              -- and apm.available_price_name = 'Settlement'
           and dq.dbd_id = pc_dbd_id;
      exception
        when no_data_found then
          vn_settlement_price          := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
        when others then
          vn_settlement_price          := 0;
          vc_settlement_price_unit_id  := null;
          vc_settlement_cur_id         := null;
          vc_settlement_cur_code       := null;
          vc_settlement_weight         := null;
          vc_settlement_weight_unit_id := null;
          vc_settlement_weight_unit    := null;
      end;
      /*
      market price in trade currency (dq_) needs to be converted into price unit currency of drt_
      
      vn_market_price_in_trade_cur   := vn_market_price_in_trade_cur *
                                        cur_option_rows.weight /
                                        (cur_option_rows.ppu_dq_weight *
                                        pkg_general.f_get_converted_quantity(null,
                                                                              cur_option_rows.ppu_dq_weight_unit_id,
                                                                              cur_option_rows.weight_unit_id,
                                                                              1));
      
      */
      if nvl(vc_settlement_cur_id, 'NA') <> 'NA' and
         nvl(vc_settlement_weight_unit_id, 'NA') <> 'NA' then
        if cur_option_rows.gravity is not null then
          vn_market_price_in_trade_cur := ((vn_settlement_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_option_rows.pd_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.fn_mass_volume_qty_conversion(cur_option_rows.product_id,
                                                                                     vc_settlement_weight_unit_id,
                                                                                     cur_option_rows.pd_weight_unit_id,
                                                                                     1,
                                                                                     cur_option_rows.gravity,
                                                                                     cur_option_rows.gravity_type,
                                                                                     cur_option_rows.density_mass_qty_unit_id,
                                                                                     cur_option_rows.density_volume_qty_unit_id));
        else
          vn_market_price_in_trade_cur := ((vn_settlement_price /
                                          nvl(vc_settlement_weight, 1)) *
                                          pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                    vc_settlement_cur_id,
                                                                                    cur_option_rows.pd_cur_id,
                                                                                    pd_trade_date,
                                                                                    1)) /
                                          (pkg_general.f_get_converted_quantity(cur_option_rows.product_id,
                                                                                vc_settlement_weight_unit_id,
                                                                                cur_option_rows.pd_weight_unit_id,
                                                                                1));
        end if;
      else
        vn_market_price_in_trade_cur := 0;
      end if;
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_option_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(cur_option_rows.close_out_date,
                                                               pc_corporate_id,
                                                               cur_option_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_option_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      if cur_option_rows.status in ('Exercised', 'Expired') then
        vn_total_market_val_trade_cur := 0;
      else
        vn_total_market_val_trade_cur := vn_market_price_in_trade_cur *
                                         vn_qty_in_trade_wt_unit *
                                         vn_trade_sub_cur_id_factor;
      end if;
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      /*
      for sales trades pnl = trade price - market price
      for buy trades pnl =  market price - trade price
      */
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := vn_total_market_val_trade_cur -
                                     vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur -
                                     vn_total_market_val_trade_cur;
      end if;
      -- calcualate trade pnl in trade currency ends here
      /*
      calcualte net pnl in base currency
       1. calculate trade value in base currency
       a) convert trade qty to price unit weight unit
       b) multiply a by trade price
       c) multipy by trade to base exchange rate
       2. calcualate broker commission in base currency
       3. pnl value in base currency = pnl value in trade currency * exchange rate from trade to base
       4. net pnl in base currency = pnl value in base currency (3) - broker commission in base currency
      
      vn_total_trade_value_base_cur := f_get_converted_quantity(null,
                                                                            cur_option_rows.trade_qty_unit_id,
                                                                            cur_option_rows.weight_unit_id,
                                                                            cur_option_rows.trade_qty) *
                                       cur_option_rows.trade_price *
                                       vn_trade_to_base_exch_rate;
      
      */
      vn_total_trade_value_base_cur  := vn_total_trade_value_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_total_market_value_base_cur := vn_total_market_val_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_broker_comm_in_base_cur     := cur_option_rows.broker_comm_amt *
                                        vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur    := cur_option_rows.clearer_comm_amt *
                                        vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur       := vn_pnl_value_in_trade_cur *
                                        vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur         := vn_pnl_value_in_base_cur -
                                        nvl(vn_broker_comm_in_base_cur, 0) -
                                        nvl(vn_clearer_comm_in_base_cur, 0);
      /*
      if cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Buy OTC Put Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell Call Option' or
         cur_option_rows.buy_sell || ' ' ||
         cur_option_rows.instrument_type = 'Sell OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.strike_price,
                                           0) - nvl(cur_option_rows.settlement_price,
                                                     0));
      elsif cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Sell OTC Put Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy Call Option' or
            cur_option_rows.buy_sell || ' ' ||
            cur_option_rows.instrument_type = 'Buy OTC Call Option' then
          vn_in_out_at_money_value := (nvl(cur_option_rows.settlement_price,
                                           0) - nvl(cur_option_rows.strike_price,
                                                     0));
      end if;
      
      if (vn_in_out_at_money_value > 0) then
          vc_in_out_at_money_status := 'In the Money';
      elsif (vn_in_out_at_money_value < 0) then
          vc_in_out_at_money_status := 'Out of the Money';
      else
          vc_in_out_at_money_status := 'At the Money';
      end if;
      */
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.trade_qty_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.lots_closed, --total_lots,
         cur_option_rows.quantity_closed, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.lots_closed,
         cur_option_rows.quantity_closed,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         cur_option_rows.in_out_at_money_status,
         cur_option_rows.in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         vn_market_price_in_trade_cur,
         vc_settlement_price_unit_id,
         vc_settlement_cur_id,
         vc_settlement_cur_code,
         vc_settlement_weight,
         vc_settlement_weight_unit_id,
         vc_settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_option_rea_ext_pnl(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2,
                                       pc_dbd_id       varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_calc_option_realized_pnl
    author                                    : janna
    created date                              : 10th jan 2009
    purpose                                   : calculate the realized pnl for options as on eod date
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_eod_ref_no                             : eod reference no
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    cursor cur_options is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             nvl(qum.qty_unit, qum_pdm.qty_unit_id) lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             --0 broker_comm_amt,     
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             --0 clearer_comm_amt,             
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             qat.gravity,
             gtm.gravity_type_name gravity_type,
             qat.density_mass_qty_unit_id,
             qat.density_volume_qty_unit_id,
             dt.quantity_unit_id trade_qty_unit_id,
             qum_um.qty_unit quantityname,
             dt.total_lots,
             dt.total_quantity,
             dt.total_lots open_lots,
             dt.total_quantity open_quantity,
             0 exercised_lots,
             0 exercised_quantity,
             0 expired_lots,
             0 expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             null quantity_closed,
             null lots_closed,
             /*decode(dt.status,
                                                                                                                                                                                                                                                         'Expired',
                                                                                                                                                                                                                                                         dt.expired_quantity,
                                                                                                                                                                                                                                                         dt.exercised_quantity) quantity_closed,
                                                                                                                                                                                                                                                  decode(dt.status,
                                                                                                                                                                                                                                                         'Expired',
                                                                                                                                                                                                                                                         dt.expired_lots,
                                                                                                                                                                                                                                                         dt.exercised_lots) lots_closed,  */
             null is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             drm.expiry_date as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             drm.expiry_date close_out_date,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Realized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             du.underlying_dr_id underlying_future_dr_id,
             drm_du.dr_id_name underlying_future_dr_id_name,
             drm_du.expiry_date underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.available_price_id,
             div.price_unit_id,
             div.price_source_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             div_der_instrument_valuation   div,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             qat_quality_attributes         qat,
             gtm_gravity_type_master        gtm,
             qum_quantity_unit_master       qum_um,
             pum_price_unit_master          pum_trade,
             cm_currency_master             cm_trade,
             qum_quantity_unit_master       qum_trade,
             fbs_formula_builder_setup      fbs,
             dim_der_instrument_master      dim_index,
             pum_price_unit_master          pum_strike,
             cm_currency_master             cm_strike,
             qum_quantity_unit_master       qum_strike,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             du_derivative_underlying       du,
             drm_derivative_master          drm_du
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and drm.instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and irm.instrument_type in ('Option Put', 'Option Call',
              'OTC Put Option', 'OTC Call Option')
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id
         and dt.dr_id = du.dr_id
         and du.underlying_dr_id = drm_du.dr_id
         and dt.is_new_trade = 'Y';
    --         and dt.traded_on='Exchange';
    vn_total_trade_value_base_cur  number;
    vn_pnl_value_in_trade_cur      number;
    vn_trade_to_base_exch_rate     number;
    vn_pnl_value_in_base_cur       number;
    vn_broker_comm_in_base_cur     number;
    vn_clr_cur_to_base_exch_rate   number;
    vn_clearer_comm_in_base_cur    number;
    vn_net_pnl_in_base_cur         number;
    vn_brokr_cur_to_base_exch_rate number;
    vn_qty_in_trade_wt_unit        number;
    vn_market_price_in_trade_cur   number;
    vn_total_market_val_trade_cur  number;
    vn_trade_price_in_trade_cur    number;
    vn_total_trade_value_trade_cur number;
    vn_in_out_at_money_value       number;
    vc_in_out_at_money_status      varchar2(20);
    vobj_error_log                 tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count             number := 1;
    vn_trade_qty_exch_unit         number;
    vc_settlement_price_unit_id    varchar2(15);
    vc_settlement_cur_id           varchar2(15);
    vc_settlement_cur_code         varchar2(15);
    vc_settlement_weight           number(7, 2);
    vc_settlement_weight_unit_id   varchar2(15);
    vc_settlement_weight_unit      varchar2(15);
    vn_settlement_price            number;
    vc_trade_main_cur_id           varchar2(15);
    vc_trade_main_cur_code         varchar2(15);
    vn_trade_sub_cur_id_factor     number;
    vn_trade_cur_decimals          number;
    vn_total_market_value_base_cur number;
  begin
    for cur_option_rows in cur_options
    loop
      -- Trade Qty in Exchange Weight Unit
      vn_trade_qty_exch_unit := pkg_general.f_get_converted_quantity(null,
                                                                     cur_option_rows.trade_qty_unit_id,
                                                                     cur_option_rows.lot_size_unit_id,
                                                                     cur_option_rows.total_quantity);
      if cur_option_rows.broker_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_brokr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                   pc_corporate_id,
                                                                   cur_option_rows.prompt_date,
                                                                   cur_option_rows.broker_comm_cur_id,
                                                                   cur_option_rows.base_cur_id);
      else
        vn_brokr_cur_to_base_exch_rate := 1;
      end if;
      if cur_option_rows.clearer_comm_cur_id <> cur_option_rows.base_cur_id then
        vn_clr_cur_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                                 pc_corporate_id,
                                                                 cur_option_rows.prompt_date,
                                                                 cur_option_rows.clearer_comm_cur_id,
                                                                 cur_option_rows.base_cur_id);
      else
        vn_clr_cur_to_base_exch_rate := 1;
      end if;
      vn_qty_in_trade_wt_unit := f_get_converted_quantity(null, --product id
                                                          cur_option_rows.trade_qty_unit_id,
                                                          cur_option_rows.pd_weight_unit_id,
                                                          cur_option_rows.open_quantity);
      pkg_general.sp_get_main_cur_detail(cur_option_rows.pd_cur_id,
                                         vc_trade_main_cur_id,
                                         vc_trade_main_cur_code,
                                         vn_trade_sub_cur_id_factor,
                                         vn_trade_cur_decimals);
      if vc_trade_main_cur_id <> cur_option_rows.base_cur_id then
        vn_trade_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                               pc_corporate_id,
                                                               cur_option_rows.prompt_date,
                                                               vc_trade_main_cur_id,
                                                               cur_option_rows.base_cur_id);
      else
        vn_trade_to_base_exch_rate := 1;
      end if;
      vn_trade_price_in_trade_cur    := cur_option_rows.premium_discount /
                                        nvl(cur_option_rows.pd_weight, 1);
      vn_total_trade_value_trade_cur := vn_trade_price_in_trade_cur *
                                        vn_qty_in_trade_wt_unit *
                                        vn_trade_sub_cur_id_factor;
      if cur_option_rows.trade_type = 'Buy' then
        vn_pnl_value_in_trade_cur := (-1) * vn_total_trade_value_trade_cur;
      else
        vn_pnl_value_in_trade_cur := vn_total_trade_value_trade_cur;
      end if;
      vn_total_trade_value_base_cur := vn_total_trade_value_trade_cur *
                                       vn_trade_to_base_exch_rate;
      vn_broker_comm_in_base_cur    := cur_option_rows.broker_comm_amt *
                                       vn_brokr_cur_to_base_exch_rate;
      vn_clearer_comm_in_base_cur   := cur_option_rows.clearer_comm_amt *
                                       vn_clr_cur_to_base_exch_rate;
      vn_pnl_value_in_base_cur      := vn_pnl_value_in_trade_cur *
                                       vn_trade_to_base_exch_rate;
      vn_net_pnl_in_base_cur        := vn_pnl_value_in_base_cur -
                                       nvl(vn_broker_comm_in_base_cur, 0) -
                                       nvl(vn_clearer_comm_in_base_cur, 0);
      if vn_net_pnl_in_base_cur is null then
        vn_net_pnl_in_base_cur := 0;
      end if;
      if vn_pnl_value_in_trade_cur is null then
        vn_pnl_value_in_trade_cur := 0;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quality_name,
         quantity_unit_id,
         quantity_unit,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         trade_price_cur_id,
         trade_price_cur_code,
         trade_price_weight,
         trade_price_weight_unit_id,
         trade_price_weight_unit,
         formula_id,
         formula_name,
         formula_display,
         index_instrument_id,
         index_instrument_name,
         strike_price,
         strike_price_unit_id,
         strike_price_cur_id,
         strike_price_cur_code,
         strike_price_weight,
         strike_price_weight_unit_id,
         strike_price_weight_unit,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         internal_close_out_ref_no,
         close_out_ref_no,
         close_out_date,
         settlement_price,
         sett_price_unit_id,
         sett_price_cur_id,
         sett_price_cur_code,
         sett_price_weight,
         sett_price_weight_unit_id,
         sett_price_weight_unit,
         parent_instrument_type,
         clearer_comm_in_base,
         broker_comm_in_base,
         clearer_exch_rate,
         broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         trade_qty_in_exch_unit,
         trade_value_in_base,
         market_value_in_base,
         trade_cur_id,
         trade_cur_code,
         traded_on)
      values
        (cur_option_rows.internal_derivative_ref_no,
         cur_option_rows.derivative_ref_no,
         cur_option_rows.eod_trade_date,
         cur_option_rows.trade_date,
         cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         cur_option_rows.trader_id,
         cur_option_rows.tradername,
         cur_option_rows.profit_center_id,
         cur_option_rows.profit_center_name,
         cur_option_rows.profit_center_short_name,
         cur_option_rows.dr_id,
         cur_option_rows.instrument_id,
         cur_option_rows.instrument_name,
         cur_option_rows.instrument_symbol,
         cur_option_rows.instrument_type_id,
         cur_option_rows.instrument_type,
         cur_option_rows.instrument_display_name,
         cur_option_rows.instrument_sub_type_id,
         cur_option_rows.instrument_sub_type,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.traded_on,
         cur_option_rows.product_id,
         cur_option_rows.product_desc,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.exchange_code,
         cur_option_rows.lot_size,
         cur_option_rows.lot_size_unit_id,
         cur_option_rows.lot_size_qty_unit,
         cur_option_rows.price_point_id,
         cur_option_rows.price_point_name,
         cur_option_rows.period_type_id,
         cur_option_rows.period_type_name,
         cur_option_rows.period_type_display_name,
         cur_option_rows.period_month,
         cur_option_rows.period_year,
         cur_option_rows.period_date,
         cur_option_rows.prompt_date,
         cur_option_rows.dr_id_name,
         cur_option_rows.trade_type,
         cur_option_rows.deal_type_id,
         cur_option_rows.deal_type_name,
         cur_option_rows.deal_type_display_name,
         cur_option_rows.is_multiple_leg_involved,
         cur_option_rows.deal_category,
         cur_option_rows.deal_sub_category,
         cur_option_rows.strategy_id,
         cur_option_rows.strategy_name,
         cur_option_rows.description,
         cur_option_rows.strategy_def_name,
         cur_option_rows.groupid,
         cur_option_rows.groupname,
         cur_option_rows.purpose_id,
         cur_option_rows.purpose_name,
         cur_option_rows.purpose_display_name,
         cur_option_rows.external_ref_no,
         cur_option_rows.cp_profile_id,
         cur_option_rows.cp_name,
         cur_option_rows.master_contract_id,
         cur_option_rows.broker_profile_id,
         cur_option_rows.broker_name,
         cur_option_rows.broker_account_id,
         cur_option_rows.broker_account_name,
         cur_option_rows.broker_account_type,
         cur_option_rows.broker_comm_type_id,
         cur_option_rows.broker_comm_amt,
         cur_option_rows.broker_comm_cur_id,
         cur_option_rows.broker_cur_code,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.clearer_account_id,
         cur_option_rows.clearer_account_name,
         cur_option_rows.clearer_account_type,
         cur_option_rows.clearer_comm_type_id,
         cur_option_rows.clearer_comm_amt,
         cur_option_rows.clearer_comm_cur_id,
         cur_option_rows.clearer_cur_code,
         cur_option_rows.product,
         cur_option_rows.productdesc,
         cur_option_rows.quality_id,
         cur_option_rows.quality_name,
         cur_option_rows.trade_qty_unit_id,
         cur_option_rows.quantityname,
         cur_option_rows.open_lots, --total_lots,
         cur_option_rows.open_quantity, --.total_quantity,
         cur_option_rows.open_lots,
         cur_option_rows.open_quantity,
         cur_option_rows.exercised_lots,
         cur_option_rows.exercised_quantity,
         cur_option_rows.expired_lots,
         cur_option_rows.expired_quantity,
         cur_option_rows.trade_price_type_id,
         cur_option_rows.trade_price,
         cur_option_rows.trade_price_unit_id,
         cur_option_rows.trade_cur_id,
         cur_option_rows.trade_cur_code,
         cur_option_rows.trade_weight,
         cur_option_rows.trade_weight_unit_id,
         cur_option_rows.trade_qty_unit,
         cur_option_rows.formula_id,
         cur_option_rows.formula_name,
         cur_option_rows.formula_display,
         cur_option_rows.index_instrument_id,
         cur_option_rows.index_instrument_name,
         cur_option_rows.strike_price,
         cur_option_rows.strike_price_unit_id,
         cur_option_rows.strike_cur_id,
         cur_option_rows.strike_cur_code,
         cur_option_rows.strike_weight,
         cur_option_rows.strike_weight_unit_id,
         cur_option_rows.strike_qty_unit,
         cur_option_rows.premium_discount,
         cur_option_rows.premium_discount_price_unit_id,
         cur_option_rows.pd_cur_id,
         cur_option_rows.pd_cur_code,
         cur_option_rows.pd_weight,
         cur_option_rows.pd_weight_unit_id,
         cur_option_rows.pd_qty_unit,
         cur_option_rows.premium_due_date,
         cur_option_rows.nominee_profile_id,
         cur_option_rows.nominee_name,
         cur_option_rows.leg_no,
         cur_option_rows.option_expiry_date,
         cur_option_rows.parent_int_derivative_ref_no,
         cur_option_rows.market_location_country,
         cur_option_rows.market_location_state,
         cur_option_rows.market_location_city,
         cur_option_rows.is_what_if,
         cur_option_rows.payment_term,
         cur_option_rows.payment_term,
         cur_option_rows.payment_due_date,
         cur_option_rows.lots_closed,
         cur_option_rows.quantity_closed,
         cur_option_rows.is_new_trade_date,
         cur_option_rows.status,
         cur_option_rows.settlement_cur_id,
         cur_option_rows.settlement_cur_code,
         cur_option_rows.in_out_at_money_status,
         cur_option_rows.in_out_at_money_value,
         cur_option_rows.exercise_date,
         cur_option_rows.expiry_date,
         cur_option_rows.group_cur_id,
         cur_option_rows.group_cur_code,
         cur_option_rows.group_qty_unit_id,
         cur_option_rows.gcd_qty_unit,
         cur_option_rows.base_qty_unit_id,
         cur_option_rows.base_qty_unit,
         cur_option_rows.internal_close_out_ref_no,
         cur_option_rows.close_out_ref_no,
         cur_option_rows.close_out_date,
         vn_market_price_in_trade_cur,
         vc_settlement_price_unit_id,
         vc_settlement_cur_id,
         vc_settlement_cur_code,
         vc_settlement_weight,
         vc_settlement_weight_unit_id,
         vc_settlement_weight_unit,
         cur_option_rows.parent_instrument_type,
         vn_clearer_comm_in_base_cur,
         vn_broker_comm_in_base_cur,
         vn_clr_cur_to_base_exch_rate,
         vn_brokr_cur_to_base_exch_rate,
         vn_trade_to_base_exch_rate,
         cur_option_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_option_rows.base_cur_id,
         cur_option_rows.base_cur_code,
         cur_option_rows.underlying_future_dr_id,
         cur_option_rows.underlying_future_dr_id_name,
         cur_option_rows.underlying_future_expiry_date,
         cur_option_rows.underlying_future_quote_price,
         cur_option_rows.underlying_fut_price_unit_id,
         cur_option_rows.process_id,
         vn_trade_qty_exch_unit,
         vn_total_trade_value_base_cur,
         vn_total_market_value_base_cur,
         vc_trade_main_cur_id,
         vc_trade_main_cur_code,
         cur_option_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_option_realized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  --Brokerage_Margin_Utilization Changes start
  procedure sp_calc_broker_margin_util(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_process_id   varchar2,
                                       pc_process      varchar2,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2) as
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_count           number := 0;
    vn_brkmar_rec      bmu_broker_margin_utilization%rowtype;
    cursor c_trades is
      select t.process_id,
             t.corporate_id,
             t.corporate_name,
             t.broker_profile_id,
             t.broker_name,
             t.instrument_id,
             t.instrument_name,
             t.exchange_id,
             t.exchange_name,
             t.derivative_def_id,
             t.derivative_def_name,
             t.gross_lots,
             t.net_lots,
             t.lot_size,
             t.lot_size_unit_id,
             t.lot_size_unit,
             t.trade_value_in_base,
             t.market_value_in_base,
             t.pnl_in_base_cur,
             t.base_cur_id,
             t.base_cur_code,
             broker_limts.brk_mar_cur_id,
             broker_limts.brk_mar_cur_code,
             broker_limts.intial_margin_limit,
             broker_limts.variation_margin_limit,
             broker_limts.current_credit_limit,
             broker_limts.maintenance_margin,
             broker_limts.margin_cal_method,
             ims.future_outright,
             ims.future_outright_cur_id,
             ims.future_outright_cur_code
        from (select dpd.process_id,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.broker_profile_id,
                     dpd.broker_name,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.product_id,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     sum(dpd.open_lots) gross_lots,
                     sum(dpd.open_lots * (case
                           when dpd.trade_type = 'Sell' then
                            -1
                           else
                            1
                         end)) net_lots,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.lot_size_unit,
                     sum(dpd.trade_value_in_base) trade_value_in_base,
                     sum(dpd.market_value_in_base) market_value_in_base,
                     sum(dpd.pnl_in_base_cur) pnl_in_base_cur,
                     dpd.base_cur_id,
                     dpd.base_cur_code
                from dpd_derivative_pnl_daily dpd
               where dpd.instrument_type = 'Future'
                 and dpd.broker_profile_id is not null
                 and dpd.pnl_type = 'Unrealized'
                 and dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
               group by dpd.process_id,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.broker_profile_id,
                        dpd.broker_name,
                        dpd.product_id,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.lot_size_unit,
                        dpd.base_cur_id,
                        dpd.base_cur_code) t,
             (select brkmm.broker_margin_id,
                     brkmm.broker_profile_id,
                     brkmd.broker_margin_detail_id,
                     brkmd.instrument_id,
                     brkmd.currency_id brk_mar_cur_id,
                     cm.cur_code brk_mar_cur_code,
                     brkmd.intial_margin_limit,
                     brkmd.variation_margin_limit,
                     brkmd.current_credit_limit,
                     brkmd.maintenance_margin,
                     decode(brkmd.margin_calculation_id,
                            'NET_LOTS',
                            'Net Lots',
                            'GROSS_LOTS',
                            'Gross Lots',
                            'Net Lots') margin_cal_method
                from brkmm_broker_margin_master brkmm,
                     brkmd_broker_margin_detail brkmd,
                     cm_currency_master         cm
               where brkmm.broker_margin_id = brkmd.broker_margin_id
                 and brkmd.currency_id = cm.cur_id
                 and brkmm.is_deleted = 'N'
                 and brkmd.is_deleted = 'N') broker_limts,
             (select ims.product_id,
                     ims.derivative_def_id,
                     ims.corporate_id,
                     ims.future_outright,
                     ims.future_outright_cur_id,
                     cm.cur_code future_outright_cur_code
                from ims_initial_margin_setup ims,
                     cm_currency_master       cm
               where ims.is_deleted = 'N'
                 and ims.future_outright_cur_id = cm.cur_id) ims
       where t.broker_profile_id = broker_limts.broker_profile_id(+)
         and t.instrument_id = broker_limts.instrument_id(+)
         and t.corporate_id = ims.corporate_id(+)
         and t.product_id = ims.product_id(+)
         and t.derivative_def_id = ims.derivative_def_id(+);
  begin
    dbms_output.put_line('inside sp_calc_broker_margin_util');
    for c_trades_rec in c_trades
    loop
      vn_count := 0;
      dbms_output.put_line('inside c_trades_rec sp_calc_broker_margin_util' ||
                           c_trades_rec.broker_profile_id || ' - ' ||
                           c_trades_rec.instrument_id || ' - ' ||
                           c_trades_rec.exchange_id);
      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur := pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                               c_trades_rec.brk_mar_cur_id,
                                                                                               c_trades_rec.base_cur_id,
                                                                                               pd_trade_date,
                                                                                               1);
      --
      vn_brkmar_rec.initial_margin_limit_in_base   := c_trades_rec.intial_margin_limit *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      vn_brkmar_rec.current_credit_limit_in_base   := c_trades_rec.current_credit_limit *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      vn_brkmar_rec.variation_margin_limit_in_base := c_trades_rec.variation_margin_limit *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      vn_brkmar_rec.maintenance_margin_in_base     := c_trades_rec.maintenance_margin *
                                                      vn_brkmar_rec.fx_rate_margin_cur_to_base_cur;
      if c_trades_rec.margin_cal_method = 'Gross Lots' then
        vn_brkmar_rec.no_of_lots := c_trades_rec.gross_lots;
      elsif c_trades_rec.margin_cal_method = 'Net Lots' then
        vn_brkmar_rec.no_of_lots := c_trades_rec.net_lots;
      end if;
      vn_brkmar_rec.initial_margin_requirement   := vn_brkmar_rec.no_of_lots *
                                                    c_trades_rec.future_outright;
      vn_brkmar_rec.fx_rate_imr_cur_to_base_cur  := pkg_general.f_get_converted_currency_amt(pc_corporate_id,
                                                                                             c_trades_rec.future_outright_cur_id,
                                                                                             c_trades_rec.base_cur_id,
                                                                                             pd_trade_date,
                                                                                             1);
      vn_brkmar_rec.initial_margin_req_in_base   := vn_brkmar_rec.fx_rate_imr_cur_to_base_cur *
                                                    vn_brkmar_rec.initial_margin_requirement;
      vn_brkmar_rec.variation_margin_requirement := c_trades_rec.pnl_in_base_cur;
      /*c_trades_rec.market_value_in_base -
      c_trades_rec.trade_value_in_base;*/
      vn_brkmar_rec.under_over_utilized_im := vn_brkmar_rec.current_credit_limit_in_base -
                                              vn_brkmar_rec.initial_margin_requirement;
      vn_brkmar_rec.under_over_utilized_vm := c_trades_rec.pnl_in_base_cur +
                                              vn_brkmar_rec.variation_margin_limit_in_base;
      dbms_output.put_line('1');
      insert into bmu_broker_margin_utilization
        (process_id,
         eod_date,
         corporate_id,
         corporate_name,
         broker_profile_id,
         broker_name,
         instrument_id,
         instrument_name,
         exchange_id,
         exchange_name,
         margin_cur_id,
         margin_cur_code,
         initial_margin_limit,
         current_credit_limit,
         variation_margin_limit,
         maintenance_margin,
         margin_calculation_method,
         base_cur_id,
         base_cur_code,
         fx_rate_margin_cur_to_base_cur,
         initial_margin_limit_in_base,
         current_credit_limit_in_base,
         variation_margin_limit_in_base,
         maintenance_margin_in_base,
         no_of_lots,
         net_no_of_lots,
         gross_no_of_lots,
         initial_margin_rate_cur_id,
         initial_margin_rate_cur_code,
         initial_margin_rate,
         initial_margin_requirement,
         fx_rate_imr_cur_to_base_cur,
         initial_margin_req_in_base,
         under_over_utilized_im
         --,UNDER_OVER_UTILIZED_IM_FLAG
        ,
         trade_value_in_base,
         market_value_in_base,
         open_no_of_lots,
         lot_size,
         lot_size_unit,
         variation_margin_requirement,
         under_over_utilized_vm
         --,UNDER_OVER_UTILIZED_VM_FLAG
         )
      values
        (pc_process_id,
         pd_trade_date,
         pc_corporate_id,
         c_trades_rec.corporate_name,
         c_trades_rec.broker_profile_id,
         c_trades_rec.broker_name,
         c_trades_rec.instrument_id,
         c_trades_rec.instrument_name,
         c_trades_rec.exchange_id,
         c_trades_rec.exchange_name,
         c_trades_rec.brk_mar_cur_id,
         c_trades_rec.brk_mar_cur_code,
         c_trades_rec.intial_margin_limit,
         c_trades_rec.current_credit_limit,
         c_trades_rec.variation_margin_limit,
         c_trades_rec.maintenance_margin,
         c_trades_rec.margin_cal_method,
         c_trades_rec.base_cur_id,
         c_trades_rec.base_cur_code,
         vn_brkmar_rec.fx_rate_margin_cur_to_base_cur,
         vn_brkmar_rec.initial_margin_limit_in_base,
         vn_brkmar_rec.current_credit_limit_in_base,
         vn_brkmar_rec.variation_margin_limit_in_base,
         vn_brkmar_rec.maintenance_margin_in_base,
         vn_brkmar_rec.no_of_lots,
         c_trades_rec.net_lots,
         c_trades_rec.gross_lots,
         c_trades_rec.future_outright_cur_id,
         c_trades_rec.future_outright_cur_code,
         c_trades_rec.future_outright,
         vn_brkmar_rec.initial_margin_requirement,
         vn_brkmar_rec.fx_rate_imr_cur_to_base_cur,
         vn_brkmar_rec.initial_margin_req_in_base,
         vn_brkmar_rec.under_over_utilized_im
         --,UNDER_OVER_UTILIZED_IM_FLAG
        ,
         c_trades_rec.trade_value_in_base,
         c_trades_rec.market_value_in_base,
         c_trades_rec.gross_lots,
         c_trades_rec.lot_size,
         c_trades_rec.lot_size_unit_id,
         vn_brkmar_rec.variation_margin_requirement,
         vn_brkmar_rec.under_over_utilized_vm
         --,UNDER_OVER_UTILIZED_VM_FLAG
         );
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      dbms_output.put_line(dbms_utility.format_error_stack);
      dbms_output.put_line(dbms_utility.format_error_backtrace);
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_broker_margin_util',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  --Brokerage_Margin_Utilization Changes end
  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2 is
    vc_is_derived_unit varchar2(1);
  begin
    select qum.is_derrived
      into vc_is_derived_unit
      from qum_quantity_unit_master qum
     where qum.qty_unit_id = pc_qty_unit_id;
    return vc_is_derived_unit;
  end;

  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number is
    vn_conv_factor             number;
    vn_converted_qty           number;
    vc_is_from_der_qty_unit_id varchar2(1);
    vc_is_to_der_qty_unit_id   varchar2(1);
    vc_base_form_qty_unit_id   varchar2(15) := pc_from_qty_unit_id;
    vn_from_der_to_base_conv   number(20, 5) := 1;
    vc_base_to_qty_unit_id     varchar2(15) := pc_to_qty_unit_id;
    vn_to_der_to_base_conv     number(20, 5) := 1;
  begin
    begin
      vc_is_from_der_qty_unit_id := f_get_is_derived_qty_unit(pc_from_qty_unit_id);
      vc_is_to_der_qty_unit_id   := f_get_is_derived_qty_unit(pc_to_qty_unit_id);
      if (vc_is_from_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_form_qty_unit_id,
               vn_from_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_from_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      if (vc_is_to_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_to_qty_unit_id,
               vn_to_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_to_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      select ucm.multiplication_factor
        into vn_conv_factor
        from ucm_unit_conversion_master ucm
       where ucm.from_qty_unit_id = vc_base_form_qty_unit_id
         and ucm.to_qty_unit_id = vc_base_to_qty_unit_id;
      vn_converted_qty := round(vn_from_der_to_base_conv /
                                vn_to_der_to_base_conv * vn_conv_factor *
                                pn_qty_to_be_converted,
                                15);
      return vn_converted_qty;
    exception
      when no_data_found then
        return - 1;
      when others then
        return - 1;
    end;
  end;

  function f_get_converted_currency_amt
  /**************************************************************************************************
    Function Name                       : f_get_converted_currency_amt
    Author                              : Janna
    Created Date                        : 19th Aug 2008
    Purpose                             : To convert a given amount between two currencies as on a given date
    Parameters                          :
    pc_corporate_id                     : Corporate ID
    pc_from_cur_id                      : From Currency
    pc_to_cur_id                        : To Currency
    pd_cur_date                         : Currency Date
    pn_amt_to_be_converted              : Amount to be converted
    Returns                             :
    Number                              : Converted amount
    Modification History
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id        in varchar2,
   pc_from_cur_id         in varchar2,
   pc_to_cur_id           in varchar2,
   pd_cur_date            in date,
   pn_amt_to_be_converted in number) return number is
    vn_result                    number;
    vc_base_cur_id               varchar2(30);
    vc_from_main_cur_id          varchar2(30);
    vc_to_main_cur_id            varchar2(30);
    vn_from_rate                 number;
    vn_from_main_currency_factor number := 1;
    vn_to_main_currency_factor   number := 1;
    vn_to_rate                   number;
  begin
    vn_from_rate        := 1;
    vn_to_rate          := 1;
    vc_from_main_cur_id := pc_from_cur_id;
    vc_to_main_cur_id   := pc_to_cur_id;
    -- Get the Base Currency ID of the corporate
    -- This is used to determine if one of the currencies given is the base currency itself
    -- Since AK_CORPORATE is not having Currency ID column and we are not changing it now
    -- We are joining CUR_CODE of CM with BASE_CURRENCY_NAME of AK_CORPORATE
    -- When AK_CORPORATE table is revamped change this code
    begin
      select akc.base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
      --  AND cm.cur_code = akc.base_currency_name;
    exception
      when no_data_found then
        return - 1;
    end;
    -- Check if the currency passed is a sub-currency if yes take into account
    -- the sub currency factor...
    begin
      select scd.cur_id,
             scd.factor
        into vc_from_main_cur_id,
             vn_from_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_from_cur_id;
    exception
      when no_data_found then
        vn_from_main_currency_factor := 1;
        vc_from_main_cur_id          := pc_from_cur_id;
    end;
    begin
      select scd.cur_id,
             scd.factor
        into vc_to_main_cur_id,
             vn_to_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_to_cur_id;
    exception
      when no_data_found then
        vn_to_main_currency_factor := 1;
        vc_to_main_cur_id          := pc_to_cur_id;
    end;
    if vc_base_cur_id = vc_from_main_cur_id and
       vc_base_cur_id = vc_to_main_cur_id then
      vn_from_rate := 1;
      vn_to_rate   := 1;
    else
      begin
        -- Get the From Currency Exchange rate
        if pc_to_cur_id = pc_from_cur_id then
          return(pn_amt_to_be_converted);
        else
          if vc_from_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_from_rate
              from cq_currency_quote cq
             where cq.cur_id = vc_from_main_cur_id
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = vc_from_main_cur_id
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
          -- Get the To Currency Exchange rate
          if vc_to_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_to_rate
              from cq_currency_quote cq
             where cq.cur_id = upper(vc_to_main_cur_id)
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = upper(vc_to_main_cur_id)
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
        end if;
      exception
        when no_data_found then
          return - 1;
      end;
    end if;
    vn_result := pn_amt_to_be_converted *
                 ((vn_to_rate / vn_to_main_currency_factor) /
                 (vn_from_rate / vn_from_main_currency_factor));
    return(vn_result);
  exception
    when no_data_found then
      return - 1;
  end;

  function f_currency_exchange_rate(pd_trade_date   date,
                                    pc_corporate_id varchar2,
                                    pd_prompt_date  varchar2,
                                    pc_from_cur_id  varchar2,
                                    pc_to_cur_id    varchar2) return number is
    vn_result number;
    /******************************************************************************************************************************************
    procedure name                            : f_currency_exchange_rate
    author                                    :
    created date                              :
    purpose                                   :
    parameters                                :
    modification history                      :
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
  begin
    vn_result := f_get_converted_currency_amt(pc_corporate_id,
                                              pc_from_cur_id,
                                              pc_to_cur_id,
                                              pd_trade_date,
                                              1);
    return vn_result;
  end;

  function f_get_converted_price_pum(pc_corporate_id       varchar2,
                                     pn_price              number,
                                     pc_from_price_unit_id varchar2,
                                     pc_to_price_unit_id   varchar2,
                                     pd_trade_date         date,
                                     pc_product_id         varchar2)
    return number is
    vn_result number;
  begin
    if pc_from_price_unit_id = pc_to_price_unit_id then
      return pn_price;
    else
      select nvl(round(nvl(pn_price, 0) *
                       f_get_converted_currency_amt(pc_corporate_id,
                                                    pum1.cur_id,
                                                    pum2.cur_id,
                                                    pd_trade_date,
                                                    1) *
                       f_get_converted_quantity(pc_product_id,
                                                pum1.weight_unit_id,
                                                pum2.weight_unit_id,
                                                1) * nvl(pum1.weight, 1) /
                       nvl(pum2.weight, 1),
                       5),
                 0)
        into vn_result
        from pum_price_unit_master pum1,
             pum_price_unit_master pum2
       where pum1.price_unit_id = pc_from_price_unit_id
         and pum2.price_unit_id = pc_to_price_unit_id
         and pum1.is_deleted = 'N'
         and pum2.is_deleted = 'N';
      return vn_result;
    end if;
  exception
    when others then
      return 0;
  end;

  function f_get_next_day(p_date     in date,
                          p_day      in varchar2,
                          p_position in number) return date is
    v_position_date      date;
    v_next_position      number;
    v_start_day          varchar2(10);
    v_first_day_position date;
  begin
    begin
      v_next_position := (p_position - 1) * 7;
      v_start_day     := to_char(to_date('01-' ||
                                         to_char(trunc(p_date), 'mon-yyyy'),
                                         'dd-mon-yyyy'),
                                 'dy');
      if upper(trim(v_start_day)) = upper(trim(p_day)) then
        v_first_day_position := to_date('01-' ||
                                        to_char(trunc(p_date), 'mon-yyyy'),
                                        'dd-mon-yyyy');
      else
        v_first_day_position := next_day(to_date('01-' ||
                                                 to_char(p_date, 'mon-yyyy'),
                                                 'dd-mon-yyyy'),
                                         trim(p_day));
      end if;
      if v_next_position <= 1 then
        v_position_date := trunc(v_first_day_position);
      else
        v_position_date := trunc(v_first_day_position) + v_next_position;
      end if;
    exception
      when no_data_found then
        return null;
      when others then
        return null;
    end;
    return v_position_date;
  end f_get_next_day;

  function f_is_day_holiday(pc_instrumentid in varchar2,
                            pc_trade_date   date) return boolean is
    pc_counter number(1);
    result_val boolean;
  begin
    --Checking the Week End Holiday List
    begin
      select count(*)
        into pc_counter
        from dual
       where to_char(pc_trade_date, 'Dy') in
             (select clwh.holiday
                from dim_der_instrument_master    dim,
                     clm_calendar_master          clm,
                     clwh_calendar_weekly_holiday clwh
               where dim.holiday_calender_id = clm.calendar_id
                 and clm.calendar_id = clwh.calendar_id
                 and dim.instrument_id = pc_instrumentid
                 and clm.is_deleted = 'N'
                 and clwh.is_deleted = 'N');
      if (pc_counter = 1) then
        result_val := true;
      else
        result_val := false;
      end if;
      if (result_val = false) then
        --Checking Other Holiday List
        select count(*)
          into pc_counter
          from dual
         where trim(pc_trade_date) in
               (select trim(hl.holiday_date)
                  from hm_holiday_master         hm,
                       hl_holiday_list           hl,
                       dim_der_instrument_master dim,
                       clm_calendar_master       clm
                 where hm.holiday_id = hl.holiday_id
                   and dim.holiday_calender_id = clm.calendar_id
                   and clm.calendar_id = hm.calendar_id
                   and dim.instrument_id = pc_instrumentid
                   and hm.is_deleted = 'N'
                   and hl.is_deleted = 'N');
        if (pc_counter = 1) then
          result_val := true;
        else
          result_val := false;
        end if;
      end if;
    end;
    return result_val;
  end f_is_day_holiday;

  procedure sp_calc_daily_initial_margin(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2) is
    /*******************************************************************************************************************************************
    Procedure Name                            : sp_calc_daily_initial_margin
    Author                                    : Janna
    Created Date                              : 10th Jan 2009
    Purpose                                   : Calculate the Tradewise daily initial margin as on EOD Date
    Parameters
    pc_corporate_id                           : Corporate ID
    pd_trade_date                             : EOD Date ID
    pc_process_id                             : EOD Reference No
    Modification History
    Modified Date                             :
    Modified By                               :
    Modify Description                        :
    ******************************************************************************************************************************************/
    vc_base_cur_code varchar2(15);
    vc_base_cur_id   varchar2(15);
    --vn_sp_margin_amt_per_lot    number(25, 5) := 0;
    --vc_sp_margin_cur_id         varchar2(15);
    --vn_ot_margin_amt_per_lot    number(25, 5) := 0;
    --vc_ot_margin_cur_id         varchar2(15);
    --vn_op_margin_amt_per_lot    number(25, 5) := 0;
    --vc_op_margin_cur_id         varchar2(15);
    --vc_sp_margin_cur_code       varchar2(15);
    --vc_ot_margin_cur_code       varchar2(15);
    --vc_op_margin_cur_code       varchar2(15);
    vobj_error_log              tableofpelerrorlog := tableofpelerrorlog();
    vn_future_spread            number;
    vn_future_outright          number;
    vn_option_short             number;
    vc_future_spread_cur_id     varchar2(15);
    vc_future_outright_cur_id   varchar2(15);
    vc_option_short_cur_id      varchar2(15);
    vc_future_spread_cur_code   varchar2(15);
    vc_future_outright_cur_code varchar2(15);
    vc_option_short_cur_code    varchar2(15);
    vn_eel_error_count          number := 1;
    cursor cur_future is
      select corporate_id,
             corporate_name,
             clearer_profile_id,
             clearer_name,
             product_id,
             product_name,
             product_derivative_id,
             derivative_def_name,
             exchange_id,
             exchange_name,
             instrument_type,
             instrument_type_id,
             (case
               when buy_lots > sell_lots then
                sell_lots
               else
                buy_lots
             end) no_of_lots,
             buy_lots,
             sell_lots
        from (select t.corporate_id,
                     t.corporate_name,
                     t.clearer_profile_id,
                     t.clearer_name,
                     t.product_id,
                     t.product_name,
                     t.product_derivative_id,
                     t.derivative_def_name,
                     t.exchange_id,
                     t.exchange_name,
                     t.instrument_type,
                     t.instrument_type_id,
                     sum((case
                           when t.net_lots > 0 then
                            t.net_lots
                           else
                            0
                         end)) buy_lots,
                     sum((case
                           when t.net_lots < 0 then
                            abs(t.net_lots)
                           else
                            0
                         end)) sell_lots,
                     sum(t.net_lots) net_lots
                from (select dt.corporate_id,
                             akc.corporate_name,
                             dt.clearer_profile_id clearer_profile_id,
                             nvl(phd.company_long_name1, phd.companyname) clearer_name,
                             dim.product_derivative_id,
                             pdd.product_id,
                             pdm.product_desc product_name,
                             pdd.derivative_def_name,
                             pdd.exchange_id,
                             emt.exchange_name,
                             irm.instrument_type,
                             irm.instrument_type_id,
                             sum((case
                                   when dt.trade_type = 'Buy' then
                                    dt.open_lots
                                 --drt.no_of_lots
                                   else
                                    (-1) * dt.open_lots
                                 --drt.no_of_lots * (-1)
                                 end)) net_lots
                        from dt_derivative_trade        dt,
                             drm_derivative_master      drm,
                             dim_der_instrument_master  dim,
                             irm_instrument_type_master irm,
                             pdd_product_derivative_def pdd,
                             emt_exchangemaster         emt,
                             ak_corporate               akc,
                             phd_profileheaderdetails   phd,
                             pdm_productmaster          pdm
                       where dt.dr_id = drm.dr_id
                         and drm.instrument_id = dim.instrument_id
                         and pdd.derivative_def_id =
                             dim.product_derivative_id
                         and dt.process_id = pc_process_id
                         and irm.instrument_type_id = dim.instrument_type_id
                         and irm.instrument_type in ('Future', 'Forward')
                         and dt.status = 'Verified'
                         and dt.is_what_if = 'N'
                         and dt.corporate_id = pc_corporate_id
                         and dt.trade_date <= pd_trade_date
                         and pdd.exchange_id = emt.exchange_id
                         and dt.corporate_id = akc.corporate_id
                         and dt.clearer_profile_id = phd.profileid
                         and pdd.product_id = pdm.product_id
                       group by dt.corporate_id,
                                akc.corporate_name,
                                dt.clearer_profile_id,
                                nvl(phd.company_long_name1, phd.companyname),
                                dim.product_derivative_id,
                                pdd.product_id,
                                pdm.product_desc,
                                pdd.derivative_def_name,
                                pdd.exchange_id,
                                emt.exchange_name,
                                irm.instrument_type_id,
                                irm.instrument_type,
                                dt.trade_type,
                                dt.open_lots) t
               group by t.corporate_id,
                        t.corporate_name,
                        t.clearer_profile_id,
                        t.clearer_name,
                        t.product_id,
                        t.product_name,
                        t.product_derivative_id,
                        t.derivative_def_name,
                        t.exchange_id,
                        t.exchange_name,
                        t.instrument_type,
                        t.instrument_type_id);
    cursor cur_options is
      select corporate_id,
             corporate_name,
             clearer_profile_id,
             clearer_name,
             product_id,
             product_name,
             derivative_def_id,
             derivative_def_name,
             exchange_id,
             exchange_name,
             'Short' option_type,
             instrument_type,
             instrument_type_id,
             delivery_month,
             sum(delta_value) delta_value,
             no_of_lots
        from (select dt.corporate_id,
                     akc.corporate_name,
                     dt.clearer_profile_id clearer_profile_id,
                     nvl(phd.company_long_name1, phd.companyname) clearer_name,
                     pdd.product_id,
                     pdm.product_desc product_name,
                     pdd.derivative_def_id derivative_def_id,
                     pdd.derivative_def_name derivative_def_name,
                     pdd.exchange_id,
                     emt.exchange_name,
                     irm.instrument_type,
                     irm.instrument_type_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        '01-' || drm.period_month || '-' || drm.period_year
                       else
                        to_char(drm.prompt_date, 'dd-Mon-yyyy')
                     end else to_char(drm.period_date, 'dd-Mon-yyyy') end) delivery_month,
                     /* (case
                                                                                                                                                                                                                                                                                                                                                                                         when pm.period_type_name in ('day', 'week') then
                                                                                                                                                                                                                                                                                                                                                                                          to_char(drm.period_date, 'dd-mon-yyyy')
                                                                                                                                                                                                                                                                                                                                                                                         else
                                                                                                                                                                                                                                                                                                                                                                                          '01-' || drm.period_month || '-' || drm.period_year
                                                                                                                                                                                                                                                                                                                                                                                       end) delivery_month,*/
                     --drt.strike_price,
                     sum(dt.open_lots) no_of_lots,
                     dqd.delta,
                     sum(dt.open_lots) * dqd.delta delta_value
                from dt_derivative_trade         dt,
                     dq_derivative_quotes        dq,
                     dqd_derivative_quote_detail dqd,
                     drm_derivative_master       drm,
                     pm_period_master            pm,
                     dim_der_instrument_master   dim,
                     irm_instrument_type_master  irm,
                     pdd_product_derivative_def  pdd,
                     emt_exchangemaster          emt,
                     ak_corporate                akc,
                     phd_profileheaderdetails    phd,
                     pdm_productmaster           pdm
               where dt.dr_id = drm.dr_id
                 and dt.dr_id = dqd.dr_id
                 and dq.dq_id = dqd.dq_id
                 and dq.corporate_id = dt.corporate_id
                 and dq.trade_date = pd_trade_date
                 and dq.process_id = pc_process_id
                 and dt.process_id = pc_process_id
                 and drm.instrument_id = dim.instrument_id
                 and drm.period_type_id = pm.period_type_id
                 and pdd.derivative_def_id = dim.product_derivative_id
                 and irm.instrument_type_id = dim.instrument_type_id
                 and dim.instrument_type_id = irm.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and dt.status = 'Verified'
                 and dt.is_what_if = 'N'
                 and dt.corporate_id = pc_corporate_id
                 and dt.trade_date <= pd_trade_date
                 and pdd.exchange_id = emt.exchange_id(+)
                 and dt.trade_type = 'Sell'
                    -- AND drt.strike_price = dq.strike_price(+) --???
                 and dt.corporate_id = akc.corporate_id
                 and dt.clearer_profile_id = phd.profileid
                 and pdd.product_id = pdm.product_id
               group by dt.corporate_id,
                        akc.corporate_name,
                        dt.clearer_profile_id,
                        nvl(phd.company_long_name1, phd.companyname),
                        pdd.product_id,
                        pdm.product_desc,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        pdd.exchange_id,
                        emt.exchange_name,
                        irm.instrument_type,
                        irm.instrument_type_id,
                        irm.instrument_type_id,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           '01-' || drm.period_month || '-' ||
                           drm.period_year
                          else
                           to_char(drm.prompt_date, 'dd-Mon-yyyy')
                        end else to_char(drm.period_date, 'dd-Mon-yyyy') end),
                        --drt.strike_price,
                        dqd.delta)
       group by corporate_id,
                corporate_name,
                clearer_profile_id,
                clearer_name,
                product_id,
                product_name,
                derivative_def_id,
                derivative_def_name,
                instrument_type,
                instrument_type_id,
                delivery_month,
                exchange_id,
                exchange_name,
                no_of_lots;
  begin
    --DBMS_OUTPUT.put_line('inside dim');
    select akc.base_currency_name,
           cm.cur_id
      into vc_base_cur_code,
           vc_base_cur_id
      from ak_corporate       akc,
           cm_currency_master cm
     where akc.corporate_id = pc_corporate_id
       and cm.cur_code = akc.base_currency_name;
    -- DBMS_OUTPUT.put_line('Before loop');
    for cur_future_rows in cur_future
    loop
      /*To Record the Futures Margin */
      -- DBMS_OUTPUT.put_line('inside loop');
      begin
        select future_spread,
               future_outright,
               option_short,
               future_spread_cur_id,
               future_outright_cur_id,
               option_short_cur_id,
               cm_spread.cur_code,
               cm_outright.cur_code,
               cm_option.cur_code
          into vn_future_spread,
               vn_future_outright,
               vn_option_short,
               vc_future_spread_cur_id,
               vc_future_outright_cur_id,
               vc_option_short_cur_id,
               vc_future_spread_cur_code,
               vc_future_outright_cur_code,
               vc_option_short_cur_code
          from ims_initial_margin_setup ims,
               cm_currency_master cm_spread,
               cm_currency_master cm_outright,
               cm_currency_master cm_option,
               (select ims1.corporate_id,
                       ims1.derivative_def_id,
                       ims1.product_id
                  from ims_initial_margin_setup ims1
                 where ims1.validity_to_date >= pd_trade_date
                   and ims1.validity_from_date <= pd_trade_date
                   and ims1.corporate_id = pc_corporate_id
                   and ims1.is_deleted = 'N'
                 group by ims1.corporate_id,
                          ims1.derivative_def_id,
                          ims1.product_id) ims2
         where ims.derivative_def_id =
               cur_future_rows.product_derivative_id
           and ims.corporate_id = pc_corporate_id
           and ims.product_id = cur_future_rows.product_id
           and ims.future_spread_cur_id = cm_spread.cur_id
           and ims.future_outright_cur_id = cm_outright.cur_id
           and ims.option_short_cur_id = cm_option.cur_id
           and ims.validity_to_date >= pd_trade_date
           and ims.validity_from_date <= pd_trade_date
           and ims.corporate_id = ims2.corporate_id
           and ims.derivative_def_id = ims2.derivative_def_id
           and ims.product_id = ims2.product_id
           and ims.is_deleted = 'N';
        --preeti add logic to pick up latest valid ones
        --DBMS_OUTPUT.put_line('got values without error');
      exception
        when no_data_found then
          vn_future_spread            := 0;
          vn_future_outright          := 0;
          vn_option_short             := 0;
          vc_future_spread_cur_id     := null;
          vc_future_outright_cur_id   := null;
          vc_option_short_cur_id      := null;
          vc_future_spread_cur_code   := null;
          vc_future_outright_cur_code := null;
          vc_option_short_cur_code    := null;
      end;
      --DBMS_OUTPUT.put_line('before insert');
      insert into dim_daily_initial_margin
        (corporate_id,
         corporate_name,
         process_id,
         trade_date,
         clearer_profile_id,
         clearer_name,
         product_id,
         product_name,
         exch_id,
         exch_name,
         derivative_def_id,
         derivative_def_name,
         instrument_type,
         margin_type,
         spread_margin_per_lot,
         spread_margin_cur_id,
         spread_margin_cur_code,
         outright_margin_per_lot,
         outright_margin_cur_id,
         outright_margin_cur_code,
         no_of_lots,
         long_lots,
         short_lots,
         base_cur_id,
         base_cur_code,
         exch_rate,
         option_margin_rate)
      values
        (cur_future_rows.corporate_id,
         cur_future_rows.corporate_name,
         pc_process_id,
         pd_trade_date,
         cur_future_rows.clearer_profile_id,
         cur_future_rows.clearer_name,
         cur_future_rows.product_id,
         cur_future_rows.product_name,
         cur_future_rows.exchange_id,
         cur_future_rows.exchange_name,
         cur_future_rows.product_derivative_id,
         cur_future_rows.derivative_def_name,
         cur_future_rows.instrument_type,
         'Futures',
         vn_future_spread,
         vc_future_spread_cur_id,
         vc_future_spread_cur_code,
         vn_future_outright,
         vc_future_outright_cur_id,
         vc_future_outright_cur_code,
         cur_future_rows.no_of_lots,
         cur_future_rows.buy_lots,
         cur_future_rows.sell_lots,
         vc_base_cur_id,
         vc_base_cur_code,
         f_get_converted_currency_amt(pc_corporate_id,
                                      vc_future_spread_cur_id,
                                      vc_base_cur_id,
                                      pd_trade_date,
                                      1),
         vn_option_short);
      dbms_output.put_line('after insert' || sql%rowcount);
    end loop;
    --DBMS_OUTPUT.put_line('after futures');
    /*   To Record the Options   */
    for cur_option_rows in cur_options
    loop
      -- DBMS_OUTPUT.put_line('in options');
      begin
        select future_spread,
               future_outright,
               option_short,
               future_spread_cur_id,
               future_outright_cur_id,
               option_short_cur_id,
               cm_spread.cur_code,
               cm_outright.cur_code,
               cm_option.cur_code
          into vn_future_spread,
               vn_future_outright,
               vn_option_short,
               vc_future_spread_cur_id,
               vc_future_outright_cur_id,
               vc_option_short_cur_id,
               vc_future_spread_cur_code,
               vc_future_outright_cur_code,
               vc_option_short_cur_code
          from ims_initial_margin_setup@eka_appdb ims,
               cm_currency_master cm_spread,
               cm_currency_master cm_outright,
               cm_currency_master cm_option,
               (select ims1.corporate_id,
                       ims1.derivative_def_id,
                       ims1.product_id
                  from ims_initial_margin_setup ims1
                 where ims1.validity_to_date >= pd_trade_date
                   and ims1.validity_from_date <= pd_trade_date
                   and ims1.corporate_id = pc_corporate_id
                   and ims1.is_deleted = 'N'
                 group by ims1.corporate_id,
                          ims1.derivative_def_id,
                          ims1.product_id) ims2
         where ims.derivative_def_id = cur_option_rows.derivative_def_id
           and ims.corporate_id = pc_corporate_id
           and ims.product_id = cur_option_rows.product_id
           and ims.future_spread_cur_id = cm_spread.cur_id
           and ims.future_outright_cur_id = cm_outright.cur_id
           and ims.option_short_cur_id = cm_option.cur_id
           and ims.validity_to_date >= pd_trade_date
           and ims.validity_from_date <= pd_trade_date
           and ims.corporate_id = ims2.corporate_id
           and ims.derivative_def_id = ims2.derivative_def_id
           and ims.product_id = ims2.product_id
           and ims.is_deleted = 'N';
        --preeti add logic to pick up latest valid ones
        -- DBMS_OUTPUT.put_line('after select in otiosn');
      exception
        when no_data_found then
          vn_future_spread            := 0;
          vn_future_outright          := 0;
          vn_option_short             := 0;
          vc_future_spread_cur_id     := null;
          vc_future_outright_cur_id   := null;
          vc_option_short_cur_id      := null;
          vc_future_spread_cur_code   := null;
          vc_future_outright_cur_code := null;
          vc_option_short_cur_code    := null;
      end;
      -- DBMS_OUTPUT.put_line('before insert n options');
      insert into dim_daily_initial_margin
        (corporate_id,
         corporate_name,
         process_id,
         trade_date,
         clearer_profile_id,
         clearer_name,
         product_id,
         product_name,
         exch_id,
         exch_name,
         derivative_def_id,
         derivative_def_name,
         instrument_type,
         margin_type,
         spread_margin_per_lot,
         spread_margin_cur_id,
         spread_margin_cur_code,
         outright_margin_per_lot,
         outright_margin_cur_id,
         outright_margin_cur_code,
         no_of_lots,
         long_lots,
         short_lots,
         base_cur_id,
         base_cur_code,
         exch_rate,
         option_margin_rate)
      values
        (cur_option_rows.corporate_id,
         cur_option_rows.corporate_name,
         pc_process_id,
         --pd_trade_date,
         cur_option_rows.delivery_month,
         cur_option_rows.clearer_profile_id,
         cur_option_rows.clearer_name,
         cur_option_rows.product_id,
         cur_option_rows.product_name,
         cur_option_rows.exchange_id,
         cur_option_rows.exchange_name,
         cur_option_rows.derivative_def_id,
         cur_option_rows.derivative_def_name,
         cur_option_rows.instrument_type,
         'Options',
         vn_future_spread,
         vc_future_spread_cur_id,
         vc_future_spread_cur_code,
         null,
         null,
         null,
         cur_option_rows.no_of_lots,
         null,
         null,
         vc_base_cur_id,
         vc_base_cur_code,
         f_get_converted_currency_amt(pc_corporate_id,
                                      vc_future_spread_cur_id,
                                      vc_base_cur_id,
                                      pd_trade_date,
                                      1),
         vn_option_short);
    end loop;
    --DBMS_OUTPUT.put_line('after options');
    /* preeti . These are not required for AWB
    --To Record the Long Options, long Options are premium paid trades,
    
    /*INSERT INTO dim_daily_initial_margin
        (corporate_id,
         corporate_name,
         process_id,
         trade_date,
         clearer_profile_id,
         clearer_name,
         product_id,
         product_name,
         exch_id,
         exch_name,
         derivative_def_id,
         derivative_def_name,
         instrument_type,
         margin_type,
         spread_margin_amt_per_lot,
         spread_margin_cur_id,
         spread_margin_cur_code,
         no_of_lots,
         total_margin_amt,
         margin_amt_in_base_cur,
         base_cur_id,
         base_cur_code)
        SELECT t.corporate_id,
               t.corporate_name,
               pc_process_id,
               pd_trade_date,
               t.clearer_profile_id,
               t.clearer_name,
               t.product_id,
               t.product_name,
               t.exchange_id,
               t.exchange_name,
               t.derivative_def_id,
               t.derivative_def_name,
               t.instrument_type instrument_type,
               t.option_type margin_type,
               0 margin_amt_per_lot,
               t.cur_id,
               t.base_currency_name margin_cur_code,
               t.no_of_lots,
               t.premium_paid tot_margin_amt,
               t.premium_paid margin_amt_base,
               t.base_cur_id,
               t.base_currency_name base_currency
        FROM   (SELECT dt.corporate_id,
                       dt.clearer_profile_id clearer_profile_id,
                       pdd.product_id,
                       cm.cur_id,
                       pdd.exchange_id,
                       irm.instrument_type,
                       'Long' option_type,
                       SUM(dt.total_lots) no_of_lots,
                       SUM(dt.total_lots * pdd.lot_size *
                           pkg_general.f_get_converted_quantity(NULL,
                                                                pdd.lot_size_unit_id,
                                                                pum.weight_unit_id,
                                                                1) *
                           (dt.trade_price / nvl(pum.weight,
                                            1)) *
                           pkg_general.f_get_converted_currency_amt(dt.corporate_id,
                                                                    cm.cur_id,
                                                                    akc.base_currency_name,
                                                                    SYSDATE,
                                                                    1)) premium_paid,
                       akc.base_currency_name,
                       akc.corporate_name,
                       nvl(phd.company_long_name1,
                           phd.companyname) clearer_name,
                       pdm.product_desc product_name,
                       pdd.derivative_def_id,
                       pdd.derivative_def_name,
                       emt.exchange_name,
                       cm_ak_currency.cur_id AS base_cur_id
                FROM   dt_derivative_trade                dt,
                       drm_derivative_master              drm,
                       dim_der_instrument_master          dim,
                       irm_instrument_type_master         irm,
                       pdd_product_derivative_def         pdd,
                       emt_exchangemaster                 emt,
                       ak_corporate                       akc,
                       phd_profileheaderdetails           phd,
                       pdm_productmaster                  pdm,
                       cm_currency_master                 cm,
                       cm_currency_master                 cm_ak_currency,
                       pum_price_unit_master              pum
                WHERE  dt.dr_id = drm.dr_id
                AND    drm.instrument_id = dim.instrument_id
                AND    pdd.derivative_def_id = dim.product_derivative_id
                AND    irm.instrument_type_id = dim.instrument_type_id
                AND    irm.instrument_type_id IN
                       ('IRMCO', 'IRMPO', 'IRMOTCO', 'IRMOTPO')
                AND    dt.status = 'Verified'
                AND    dt.corporate_id = pc_corporate_id
                AND    dt.trade_date <= pd_trade_date
                AND    pdd.exchange_id = emt.exchange_id(+)
                AND    dt.trade_type = 'Buy'
                AND    dt.corporate_id = akc.corporate_id
                AND    dt.clearer_profile_id = phd.profileid
                AND    pdd.product_id = pdm.product_id
                AND    dt.trade_price_unit_id = pum.price_unit_id
                AND    pum.cur_id = cm.cur_id
                AND    cm_ak_currency.cur_code = akc.base_currency_name
                GROUP  BY dt.corporate_id,
                          dt.clearer_profile_id,
                          pdd.product_id,
                          pdd.exchange_id,
                          irm.instrument_type,
                          akc.base_currency_name,
                          akc.corporate_name,
                          nvl(phd.company_long_name1,
                              phd.companyname),
                          pdm.product_desc,
                          pdd.derivative_def_id,
                          pdd.derivative_def_name,
                          emt.exchange_name,
                          cm.cur_id,
                          cm_ak_currency.cur_id) t; */
  exception
    when others then
      dbms_output.put_line('failing here ' || sqlerrm);
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_daily_initial_margin',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  /*procedure sp_calc_future_accounts(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into fad_future_account_daily
      (corporate_id,
       corporate_name,
       eod_trade_date,
       process_id,
       acc_type_id,
       acc_type_name,
       --acc_id,
       --acc_no,
       acc_qty,
       acc_qty_unit_id,
       acc_qty_in_lots,
       trade_date,
       exchange_id,
       exchange_name,
       period_month,
       period_year,
       period_date,
       instrument_type_id,
       instrument_type,
       instrument_id,
       instrument_name,
       order_type_id,
       order_type,
       dr_id,
       derivative_def_id,
       derivative_def_name,
       derivative_ref_no,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       future_month_name,
       buy_sell,
       no_of_lots,
       lot_size,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_cur_weight,
       strike_price_cur_wt_unit_id,
       strike_price_cur_weight_unit,
       settlement_price)
    --parent_instrument_type)
      select akc.corporate_id,
             akc.corporate_name,
             pd_trade_date,
             pc_process_id,
             satm.acc_type_id,
             satm.acc_type_name,
             --sa.acc_id,
             --sa.acc_no,
             sum(dsa.acc_qty),
             dsa.acc_qty_unit_id,
             sum(dsa.quantity_in_lots),
             dt.trade_date,
             emt.exchange_id,
             emt.exchange_name,
             drm.period_month,
             drm.period_year,
             to_date('01/' || drm.period_month || '-' || drm.period_year,
                     'dd-mon-yyyy'),
             irm.instrument_type_id,
             irm.instrument_type,
             dim.instrument_id,
             dim.instrument_name,
             dt.deal_type_id,
             dtm.deal_type_id,
             dt.dr_id,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             dt.derivative_ref_no,
             dt.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             drm.dr_id_name as future_month_name,
             dt.trade_type,
             dt.total_lots,
             pdd.lot_size,
             dt.strike_price,
             dt.strike_price_unit_id,
             cm_drt_strike.cur_id,
             cm_drt_strike.cur_code,
             pum_drt_strike.weight,
             pum_drt_strike.weight_unit_id,
             qum_drt_strike.qty_unit,
             dt.trade_price
      --irm.parent_instrument_type
        from satm_strategy_acc_type_master satm,
             --sa_strategy_account@eka_appdb                 sa,
             dsa_der_strategy_account    dsa,
             dt_derivative_trade         dt,
             ak_corporate@eka_appdb      akc,
             drm_derivative_master       drm,
             dim_der_instrument_master   dim,
             irm_instrument_type_master  irm,
             pdd_product_derivative_def  pdd,
             emt_exchangemaster          emt,
             dtm_deal_type_master        dtm,
             cpc_corporate_profit_center cpc,
             pum_price_unit_master       pum_drt_strike,
             cm_currency_master          cm_drt_strike,
             qum_quantity_unit_master    qum_drt_strike
       where
      --satm.acc_type_id = sa.acc_type_id
       satm.corporate_id = akc.corporate_id
      --and    sa.acc_id = dsa.acc_id
       and dsa.internal_derivative_ref_no = dt.internal_derivative_ref_no
       and dt.dr_id = drm.dr_id
       and drm.instrument_id = dim.instrument_id
       and dim.product_derivative_id = pdd.derivative_def_id
       and irm.instrument_type_id = dim.instrument_type_id
       and emt.exchange_id = pdd.exchange_id
       and dt.deal_type_id = dtm.deal_type_id
       and dt.profit_center_id = cpc.profit_center_id
       and dt.strike_price_unit_id = pum_drt_strike.price_unit_id(+)
       and pum_drt_strike.cur_id = cm_drt_strike.cur_id(+)
       and pum_drt_strike.weight_unit_id = qum_drt_strike.qty_unit_id(+)
       and akc.corporate_id = pc_corporate_id
       and dt.process_id = pc_process_id
       group by akc.corporate_id,
                akc.corporate_name,
                pd_trade_date,
                pc_process_id,
                satm.acc_type_id,
                satm.acc_type_name,
                --sa.acc_id,
                --sa.acc_no,
                dsa.acc_qty_unit_id,
                dt.trade_date,
                emt.exchange_id,
                emt.exchange_name,
                drm.period_month,
                drm.period_year,
                drm.prompt_date,
                irm.instrument_type_id,
                irm.instrument_type,
                dim.instrument_id,
                dim.instrument_name,
                dt.deal_type_id,
                dtm.deal_type_id,
                dt.dr_id,
                pdd.derivative_def_id,
                pdd.derivative_def_name,
                dt.derivative_ref_no,
                dt.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                drm.dr_id_name,
                dt.trade_type,
                dt.total_lots,
                pdd.lot_size,
                dt.strike_price,
                dt.strike_price_unit_id,
                cm_drt_strike.cur_id,
                cm_drt_strike.cur_code,
                pum_drt_strike.weight,
                pum_drt_strike.weight_unit_id,
                qum_drt_strike.qty_unit,
                dt.trade_price;
    --irm.parent_instrument_type;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_accounts',
                                                           'm2m-013',
                                                           'code:' ||
                                                           sqlcode ||
                                                           'message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;*/
  procedure sp_mark_realized_derivatives(pc_corporate_id varchar2,
                                         pd_trade_date   date,
                                         pc_process_id   varchar2,
                                         pc_user_id      varchar2,
                                         pc_process      varchar2) is
    vc_prev_proccess_id varchar2(15);
  begin
    begin
      select tdc.process_id
        into vc_prev_proccess_id
        from tdc_trade_date_closure tdc
       where tdc.corporate_id = pc_corporate_id
         and process = pc_process
         and tdc.trade_date =
             (select max(trade_date)
                from tdc_trade_date_closure
               where corporate_id = pc_corporate_id
                 and trade_date < pd_trade_date
                 and process = pc_process);
    end;
    update dt_derivative_trade dt
       set dt.is_realized_today = 'Y'
     where dt.process_id = pc_process_id
       and dt.corporate_id = pc_corporate_id
       and dt.status in ('Exercised', 'Expired')
       and exists (select *
              from dt_derivative_trade dt_prev
             where dt_prev.process_id = vc_prev_proccess_id
               and dt_prev.status = 'Verified'
               and dt_prev.internal_derivative_ref_no =
                   dt.internal_derivative_ref_no);
    update dt_derivative_trade dt
       set dt.is_realized_today = 'Y'
     where dt.process_id = pc_process_id
       and dt.corporate_id = pc_corporate_id
       and dt.status in ('Exercised', 'Expired')
       and not exists (select *
              from dt_derivative_trade dt_prev
             where dt_prev.process_id = vc_prev_proccess_id
               and dt_prev.internal_derivative_ref_no =
                   dt.internal_derivative_ref_no);
  end;

  procedure sp_mark_new_derivative_trades(pc_corporate_id varchar2,
                                          pd_trade_date   date,
                                          pc_process_id   varchar2,
                                          pc_user_id      varchar2,
                                          pc_process      varchar2) is
    /******************************************************************************************************************************************
    procedure name                            : sp_mark_new_derivative_trades
    author                                    : janna
    created date                              : 13th apr 2009
    purpose                                   : to mark the new trades created between last eod and current eod.
    parameters
    pc_corporate_id                           : corporate id
    pd_trade_date                             : eod date id
    pc_process_id                             : eod reference no
    modification history
    modified date                             :
    modified by                               :
    modify description                        :
    ******************************************************************************************************************************************/
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
    vc_prev_eod_refno         varchar2(20);
    vn_strike_price           number;
    vc_in_out_at_money_status varchar2(30);
  begin
    --write_log(null,'inside sp_mark_new_derivative_trades begin');
    begin
      select t1.process_id
        into vc_prev_eod_refno
        from tdc_trade_date_closure t1
       where t1.corporate_id = pc_corporate_id
         and t1.process = pc_process
         and t1.trade_date =
             (select max(t2.trade_date)
                from tdc_trade_date_closure t2
               where t2.corporate_id = pc_corporate_id
                 and t2.trade_date < pd_trade_date
                 and t2.process = pc_process);
    end;
    insert into dpd_derivative_pnl_daily
      (internal_derivative_ref_no,
       derivative_ref_no,
       eod_trade_date,
       trade_date,
       corporate_id,
       corporate_name,
       trader_id,
       trader_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       dr_id,
       instrument_id,
       instrument_name,
       instrument_symbol,
       instrument_type_id,
       instrument_type,
       instrument_type_name,
       instrument_sub_type_id,
       instrument_sub_type,
       derivative_def_id,
       derivative_def_name,
       derivative_traded_on,
       derivative_prodct_id,
       derivative_prodct_name,
       exchange_id,
       exchange_name,
       exchange_code,
       lot_size,
       lot_size_unit_id,
       lot_size_unit,
       price_point_id,
       price_point_name,
       period_type_id,
       period_type_name,
       period_type_display_name,
       period_month,
       period_year,
       period_date,
       prompt_date,
       dr_id_name,
       trade_type,
       deal_type_id,
       deal_type_name,
       deal_type_display_name,
       is_multiple_leg_involved,
       deal_category,
       deal_sub_category,
       strategy_id,
       strategy_name,
       strategy_desc,
       strategy_def_name,
       group_id,
       group_name,
       purpose_id,
       purpose_name,
       purpose_display_name,
       external_ref_no,
       cp_profile_id,
       cp_name,
       master_contract_id,
       broker_profile_id,
       broker_name,
       broker_account_id,
       broker_account_name,
       broker_account_type,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       broker_comm_cur_code,
       clearer_profile_id,
       clearer_name,
       clearer_account_id,
       clearer_account_name,
       clearer_account_type,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       clearer_comm_cur_code,
       product_id,
       product_name,
       quality_id,
       quality_name,
       quantity_unit_id,
       quantity_unit,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       trade_price_cur_id,
       trade_price_cur_code,
       trade_price_weight,
       trade_price_weight_unit_id,
       trade_price_weight_unit,
       formula_id,
       formula_name,
       formula_display,
       index_instrument_id,
       index_instrument_name,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_weight,
       strike_price_weight_unit_id,
       strike_price_weight_unit,
       premium_discount,
       premium_discount_price_unit_id,
       pd_price_cur_id,
       pd_price_cur_code,
       pd_price_weight,
       pd_price_weight_unit_id,
       pd_price_weight_unit,
       premium_due_date,
       nominee_profile_id,
       nominee_name,
       leg_no,
       option_expiry_date,
       parent_int_derivative_ref_no,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term_id,
       payment_term,
       payment_due_date,
       closed_lots,
       closed_quantity,
       is_new_trade,
       status,
       settlement_cur_id,
       settlement_cur_code,
       in_out_at_money_status,
       in_out_at_money_value,
       exercise_date,
       expiry_date,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       internal_close_out_ref_no,
       close_out_ref_no,
       close_out_date,
       settlement_price,
       sett_price_unit_id,
       sett_price_cur_id,
       sett_price_cur_code,
       sett_price_weight,
       sett_price_weight_unit_id,
       sett_price_weight_unit,
       parent_instrument_type,
       clearer_comm_in_base,
       broker_comm_in_base,
       clearer_exch_rate,
       broker_exch_rate,
       trade_cur_to_base_exch_rate,
       pnl_type,
       pnl_in_base_cur,
       pnl_in_trade_cur,
       base_cur_id,
       base_cur_code,
       underlying_future_dr_id,
       underlying_future_dr_id_name,
       underlying_future_expiry_date,
       underlying_future_quote_price,
       underlying_fut_price_unit_id,
       process_id,
       trade_qty_in_exch_unit,
       int_trade_parent_der_ref_no,
       is_internal_trade,
       available_price_id,
       average_from_date,
       average_to_date,
       swap_type_1,
       swap_trade_price_type_1,
       swap_float_type_1,
       swap_trade_price_1,
       swap_trade_price_unit_id_1,
       swap_trade_price_unit_1,
       swap_index_instrument_id_1,
       swap_formula_id_1,
       swap_type_2,
       swap_trade_price_type_2,
       swap_float_type_2,
       swap_trade_price_2,
       swap_trade_price_unit_id_2,
       swap_trade_price_unit_2,
       swap_index_instrument_id_2,
       swap_formula_id_2,
       swap_product1,
       swap_product_quality1,
       swap_product2,
       swap_product_quality2,
       pricing_invoicing_status,
       approval_status,
       trading_fee,
       clearing_fee,
       trading_clearing_fee,
       pnl_in_sett_cur,
       traded_on)
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             drm.instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             pdd.lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             (case
               when bct_broker.settlement_type in ('HalfTurn', 'LumpSum') then
                dt.broker_comm_amt
               else
                0
             end) broker_comm_amt,
             --dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             (case
               when bct_clearer.settlement_type in ('HalfTurn', 'LumpSum') then
                dt.clearer_comm_amt
               else
                0
             end) clearer_comm_amt,
             --dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             qat.quality_name,
             --   qat.gravity,
             --  gtm.gravity_type_name gravity_type,
             --  qat.density_mass_qty_unit_id,
             --  qat.density_volume_qty_unit_id,
             dt.quantity_unit_id,
             qum_um.qty_unit,
             dt.total_lots,
             dt.total_quantity,
             dt.total_lots open_lots,
             dt.total_quantity open_quantity,
             0 exercised_lots,
             0 exercised_quantity,
             0 expired_lots,
             0 expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             pum_trade.cur_id trade_cur_id,
             cm_trade.cur_code trade_cur_code,
             pum_trade.weight trade_weight,
             pum_trade.weight_unit_id trade_weight_unit_id,
             qum_trade.qty_unit trade_qty_unit,
             dt.formula_id,
             fbs.formula_name,
             fbs.formula_display,
             dt.index_instrument_id,
             dim_index.instrument_name index_instrument_name,
             dt.strike_price,
             dt.strike_price_unit_id,
             pum_strike.cur_id strike_cur_id,
             cm_strike.cur_code strike_cur_code,
             pum_strike.weight strike_weight,
             pum_strike.weight_unit_id strike_weight_unit_id,
             qum_strike.qty_unit strike_qty_unit,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             0 closed_lots,
             0 closed_quantity,
             'Y' is_new_trade,
             'Verified' status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             drm.expiry_date exercise_date,
             drm.expiry_date expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             null internal_close_out_ref_no,
             null close_out_ref_no,
             null close_out_date,
             edq.price settlement_price,
             edq.price_unit_id settlement_price_unit_id,
             pum_settle.cur_id settlement_price_cur_id,
             cm_settle.cur_code settlemet_price_cur_code,
             pum_settle.weight settlement_price_weight,
             pum_settle.weight_unit_id settlement_weight_unit_id,
             qum_settle.qty_unit settlement_weight_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             (case
               when bct_clearer.settlement_type in ('HalfTurn', 'LumpSum') then
                (case
               when nvl(dt.clearer_comm_amt, 0) <> 0 and
                    dt.clearer_comm_cur_id is not null then
                nvl(dt.clearer_comm_amt, 0) *
                pkg_cdc_derivatives_process.f_get_converted_currency_amt(dt.corporate_id,
                                                                         dt.clearer_comm_cur_id,
                                                                         cm_base.cur_id,
                                                                         dt.trade_date,
                                                                         1)
               else
                0
             end) else 0 end) clearer_comm_in_base,
             (case
               when bct_broker.settlement_type in ('HalfTurn', 'LumpSum') then
                (case
               when nvl(dt.broker_comm_amt, 0) <> 0 and
                    dt.broker_comm_cur_id is not null then
                nvl(dt.broker_comm_amt, 0) *
                pkg_cdc_derivatives_process.f_get_converted_currency_amt(dt.corporate_id,
                                                                         dt.broker_comm_cur_id,
                                                                         cm_base.cur_id,
                                                                         dt.trade_date,
                                                                         1)
               else
                0
             end) else 0 end) broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'New Trade' as pnl_type,
             0 pnl_in_base_cur,
             0 pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             0 trade_qty_in_exch_unit,
             dt.int_trade_parent_der_ref_no,
             dt.is_internal_trade,
             dt.available_price_id,
             dt.average_from_date,
             dt.average_to_date,
             dt.swap_type_1,
             dt.swap_trade_price_type_1,
             dt.swap_float_type_1,
             dt.swap_trade_price_1,
             dt.swap_trade_price_unit_id_1,
             pum_swap.price_unit_name swap_trade_price_unit_1,
             dt.swap_index_instrument_id_1,
             dt.swap_formula_id_1,
             dt.swap_type_2,
             dt.swap_trade_price_type_2,
             dt.swap_float_type_2,
             dt.swap_trade_price_2,
             dt.swap_trade_price_unit_id_2,
             pum_swap1.price_unit_id swap_trade_price_unit_2,
             dt.swap_index_instrument_id_2,
             dt.swap_formula_id_2,
             dt.swap_product1,
             dt.swap_product_quality1,
             dt.swap_product2,
             dt.swap_product_quality2,
             dt.pricing_invoicing_status,
             dt.approval_status,
             dt.trading_fee,
             dt.clearing_fee,
             dt.trading_clearing_fee,
             0,
             dt.traded_on
        from dt_derivative_trade dt,
             ak_corporate ak,
             ak_corporate_user aku,
             gab_globaladdressbook gab,
             cpc_corporate_profit_center cpc,
             drm_derivative_master drm,
             dim_der_instrument_master dim,
             irm_instrument_type_master irm,
             istm_instr_sub_type_master istm,
             pdd_product_derivative_def pdd,
             pdm_productmaster pdm,
             emt_exchangemaster emt,
             qum_quantity_unit_master qum,
             pp_price_point pp,
             pm_period_master pm,
             dtm_deal_type_master dtm,
             css_corporate_strategy_setup css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails gcd,
             dpm_derivative_purpose_master dpm,
             phd_profileheaderdetails phd_cp,
             phd_profileheaderdetails phd_broker,
             bca_broker_clearer_account bca_broker,
             cm_currency_master cm_broker_cur,
             phd_profileheaderdetails phd_clearer,
             bca_broker_clearer_account bca_clearer,
             cm_currency_master cm_clearer,
             qat_quality_attributes qat,
             gtm_gravity_type_master gtm,
             qum_quantity_unit_master qum_um,
             pum_price_unit_master pum_trade,
             cm_currency_master cm_trade,
             qum_quantity_unit_master qum_trade,
             fbs_formula_builder_setup fbs,
             dim_der_instrument_master dim_index,
             pum_price_unit_master pum_strike,
             cm_currency_master cm_strike,
             qum_quantity_unit_master qum_strike,
             pum_price_unit_master pum_pd,
             cm_currency_master cm_pd,
             qum_quantity_unit_master qum_pd,
             phd_profileheaderdetails phd_nominee,
             pym_payment_terms_master pym,
             cm_currency_master cm_settlement,
             gcd_groupcorporatedetails gcd_group,
             cm_currency_master cm_gcd,
             qum_quantity_unit_master qum_gcd,
             qum_quantity_unit_master qum_pdm,
             (select edq.*
                from eodeom_derivative_quote_detail edq,
                     div_der_instrument_valuation   div,
                     apm_available_price_master     apm
               where edq.available_price_id = apm.available_price_id
                 and apm.is_active = 'Y'
                 and apm.is_deleted = 'N'
                 and edq.process_id = pc_process_id
                 and edq.instrument_id = div.instrument_id
                 and div.is_deleted = 'N'
                 and edq.available_price_id = div.available_price_id
                 and edq.price_unit_id = div.price_unit_id
              --and apm.available_price_name = 'Settlement'
              ) edq,
             pum_price_unit_master pum_settle,
             cm_currency_master cm_settle,
             qum_quantity_unit_master qum_settle,
             cm_currency_master cm_base,
             pum_price_unit_master pum_swap,
             pum_price_unit_master pum_swap1,
             bct_broker_commission_types bct_clearer,
             bct_broker_commission_types bct_broker
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.quality_id = qat.quality_id(+)
         and qat.gravity_type_id = gtm.gravity_type_id(+)
         and dt.quantity_unit_id = qum_um.qty_unit_id
         and dt.trade_price_unit_id = pum_trade.price_unit_id(+)
         and pum_trade.cur_id = cm_trade.cur_id(+)
         and pum_trade.weight_unit_id = qum_trade.qty_unit_id(+)
         and dt.formula_id = fbs.formula_id(+)
         and dt.index_instrument_id = dim_index.instrument_id(+)
         and dt.strike_price_unit_id = pum_strike.price_unit_id(+)
         and pum_strike.cur_id = cm_strike.cur_id(+)
         and pum_strike.weight_unit_id = qum_strike.qty_unit_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and dt.process_id = edq.process_id(+)
         and dt.dr_id = edq.dr_id(+)
         and edq.price_unit_id = pum_settle.price_unit_id(+)
         and pum_settle.cur_id = cm_settle.cur_id(+)
         and pum_settle.weight_unit_id = qum_settle.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code(+)
         and dt.swap_trade_price_unit_id_1 = pum_swap.price_unit_id(+)
         and dt.swap_trade_price_unit_id_2 = pum_swap1.price_unit_id(+)
         and pdd.traded_on = 'Exchange'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
            -- and dt.dbd_id = '219'
         and dt.process_id = pc_process_id
         and dt.clearer_comm_type_id = bct_clearer.commission_type_id(+)
         and dt.broker_comm_type_id = bct_broker.commission_type_id(+)
         and not exists (select *
                from dt_derivative_trade dt_prev
               where dt_prev.internal_derivative_ref_no =
                     dt.internal_derivative_ref_no
                 and dt_prev.process_id = vc_prev_eod_refno
                 and dt_prev.corporate_id = pc_corporate_id
              --and dt_prev.dbd_id = '193'
              );
    /*
    update dpd_derivative_pnl_daily dpd
       set dpd.is_new_trade = 'Y'
     where not exists (select dpd1.corporate_id,
                   dpd1.derivative_ref_no
              from dpd_derivative_pnl_daily dpd1
             where dpd1.corporate_id = pc_corporate_id
               and dpd1.process_id = vc_prev_eod_refno
               and dpd1.derivative_ref_no = dpd.derivative_ref_no)
       and dpd.corporate_id = pc_corporate_id
       and dpd.process_id = pc_process_id
       and rownum <=1;*/
    --write_log(null,'inside sp_mark_new_derivative_trades end');
    --added by siva on 09-Mar-2011, to be removed after the correct entry calculated
    -- in the package for broker/clearer amount calculation.
    update dpd_derivative_pnl_daily dpd
       set dpd.clearer_comm_in_base = 0, dpd.broker_comm_in_base = 0
     where dpd.process_id = pc_process_id
       and nvl(dpd.is_new_trade, 'NA') <> 'Y'
       and dpd.pnl_type = 'Unrealized';
    for cc in (select dpd.corporate_id,
                      dpd.process_id,
                      dpd.product_id,
                      dpd.instrument_type,
                      dpd.strike_price,
                      dpd.strike_price_unit_id,
                      dpd.underlying_future_dr_id dr_id,
                      dq.price,
                      dq.price_unit_id,
                      dpd.internal_derivative_ref_no
                 from dpd_derivative_pnl_daily       dpd,
                      eodeom_derivative_quote_detail dq,
                      div_der_instrument_valuation   div,
                      apm_available_price_master     apm
                where dpd.underlying_future_dr_id is not null
                  and dpd.corporate_id = pc_corporate_id
                  and dpd.process_id = pc_process_id
                  and dpd.corporate_id = dq.corporate_id
                  and dpd.process_id = dq.process_id
                  and dpd.underlying_future_dr_id = dq.dr_id
                  and dq.instrument_id = div.instrument_id
                  and div.is_deleted = 'N'
                  and dq.available_price_id = apm.available_price_id
                  and dq.available_price_id = div.available_price_id
                  and dq.price_unit_id = div.price_unit_id
                     --                  and apm.available_price_name = 'Settlement'
                  and dpd.instrument_type in ('Option Call', 'Option Put'))
    loop
      vc_in_out_at_money_status := null;
      if cc.price is not null then
        vn_strike_price := f_get_converted_price_pum(pc_corporate_id,
                                                     cc.strike_price,
                                                     cc.strike_price_unit_id,
                                                     cc.price_unit_id,
                                                     pd_trade_date,
                                                     cc.product_id);
        if cc.instrument_type = 'Option Call' then
          if vn_strike_price = cc.price then
            vc_in_out_at_money_status := 'At the Money';
          elsif vn_strike_price < cc.price then
            vc_in_out_at_money_status := 'In the Money';
          else
            vc_in_out_at_money_status := 'Out of the Money';
          end if;
        else
          if vn_strike_price = cc.price then
            vc_in_out_at_money_status := 'At the Money';
          elsif cc.price < vn_strike_price then
            vc_in_out_at_money_status := 'In the Money';
          else
            vc_in_out_at_money_status := 'Out of the Money';
          end if;
        end if;
      end if;
      update dpd_derivative_pnl_daily dpd
         set dpd.underlying_future_quote_price = cc.price,
             dpd.underlying_fut_price_unit_id  = cc.price_unit_id,
             dpd.in_out_at_money_status        = vc_in_out_at_money_status
       where dpd.underlying_future_dr_id = cc.dr_id
         and dpd.internal_derivative_ref_no = cc.internal_derivative_ref_no
         and dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Call', 'Option Put');
      commit;
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_unrealized_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_undo_closeout(pc_corporate_id varchar2,
                                  pd_trade_date   date,
                                  pc_process_id   varchar2,
                                  pc_user_id      varchar2,
                                  pc_process      varchar2) is
    v_dbd_id varchar2(15);
  begin
    select dbd.dbd_id
      into v_dbd_id
      from dbd_database_dump dbd
     where dbd.corporate_id = pc_corporate_id
       and dbd.trade_date = pd_trade_date
       and dbd.process = pc_process;
    insert into dpd_derivative_pnl_daily
      (internal_derivative_ref_no,
       derivative_ref_no,
       eod_trade_date,
       trade_date,
       corporate_id,
       corporate_name,
       trader_id,
       trader_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       dr_id,
       instrument_id,
       instrument_name,
       instrument_symbol,
       instrument_type_id,
       instrument_type,
       instrument_type_name,
       instrument_sub_type_id,
       instrument_sub_type,
       derivative_def_id,
       derivative_def_name,
       derivative_traded_on,
       derivative_prodct_id,
       derivative_prodct_name,
       exchange_id,
       exchange_name,
       exchange_code,
       lot_size,
       lot_size_unit_id,
       lot_size_unit,
       price_point_id,
       price_point_name,
       period_type_id,
       period_type_name,
       period_type_display_name,
       period_month,
       period_year,
       period_date,
       prompt_date,
       dr_id_name,
       trade_type,
       deal_type_id,
       deal_type_name,
       deal_type_display_name,
       is_multiple_leg_involved,
       deal_category,
       deal_sub_category,
       strategy_id,
       strategy_name,
       strategy_desc,
       strategy_def_name,
       group_id,
       group_name,
       purpose_id,
       purpose_name,
       purpose_display_name,
       external_ref_no,
       cp_profile_id,
       cp_name,
       master_contract_id,
       broker_profile_id,
       broker_name,
       broker_account_id,
       broker_account_name,
       broker_account_type,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       broker_comm_cur_code,
       clearer_profile_id,
       clearer_name,
       clearer_account_id,
       clearer_account_name,
       clearer_account_type,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       clearer_comm_cur_code,
       product_id,
       product_name,
       quality_id,
       quality_name,
       quantity_unit_id,
       quantity_unit,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       trade_price_cur_id,
       trade_price_cur_code,
       trade_price_weight,
       trade_price_weight_unit_id,
       trade_price_weight_unit,
       formula_id,
       formula_name,
       formula_display,
       index_instrument_id,
       index_instrument_name,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_weight,
       strike_price_weight_unit_id,
       strike_price_weight_unit,
       premium_discount,
       premium_discount_price_unit_id,
       pd_price_cur_id,
       pd_price_cur_code,
       pd_price_weight,
       pd_price_weight_unit_id,
       pd_price_weight_unit,
       premium_due_date,
       nominee_profile_id,
       nominee_name,
       leg_no,
       option_expiry_date,
       parent_int_derivative_ref_no,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term_id,
       payment_term,
       payment_due_date,
       closed_lots,
       closed_quantity,
       is_new_trade,
       status,
       settlement_cur_id,
       settlement_cur_code,
       in_out_at_money_status,
       in_out_at_money_value,
       exercise_date,
       expiry_date,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       internal_close_out_ref_no,
       close_out_ref_no,
       close_out_date,
       settlement_price,
       sett_price_unit_id,
       sett_price_cur_id,
       sett_price_cur_code,
       sett_price_weight,
       sett_price_weight_unit_id,
       sett_price_weight_unit,
       parent_instrument_type,
       clearer_comm_in_base,
       broker_comm_in_base,
       clearer_exch_rate,
       broker_exch_rate,
       trade_cur_to_base_exch_rate,
       pnl_type,
       pnl_in_base_cur,
       pnl_in_trade_cur,
       base_cur_id,
       base_cur_code,
       underlying_future_dr_id,
       underlying_future_dr_id_name,
       underlying_future_expiry_date,
       underlying_future_quote_price,
       underlying_fut_price_unit_id,
       process_id,
       traded_on)
      select internal_derivative_ref_no,
             derivative_ref_no,
             pd_trade_date,
             dpd.trade_date,
             dpd.corporate_id,
             corporate_name,
             trader_id,
             trader_name,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             dr_id,
             instrument_id,
             instrument_name,
             instrument_symbol,
             instrument_type_id,
             instrument_type,
             instrument_type_name,
             instrument_sub_type_id,
             instrument_sub_type,
             derivative_def_id,
             derivative_def_name,
             derivative_traded_on,
             derivative_prodct_id,
             derivative_prodct_name,
             exchange_id,
             exchange_name,
             exchange_code,
             lot_size,
             lot_size_unit_id,
             lot_size_unit,
             price_point_id,
             price_point_name,
             period_type_id,
             period_type_name,
             period_type_display_name,
             period_month,
             period_year,
             period_date,
             prompt_date,
             dr_id_name,
             trade_type,
             deal_type_id,
             deal_type_name,
             deal_type_display_name,
             is_multiple_leg_involved,
             deal_category,
             deal_sub_category,
             strategy_id,
             strategy_name,
             strategy_desc,
             strategy_def_name,
             group_id,
             group_name,
             purpose_id,
             purpose_name,
             purpose_display_name,
             external_ref_no,
             cp_profile_id,
             cp_name,
             master_contract_id,
             broker_profile_id,
             broker_name,
             broker_account_id,
             broker_account_name,
             broker_account_type,
             broker_comm_type_id,
             broker_comm_amt * -1,
             broker_comm_cur_id,
             broker_comm_cur_code,
             clearer_profile_id,
             clearer_name,
             clearer_account_id,
             clearer_account_name,
             clearer_account_type,
             clearer_comm_type_id,
             clearer_comm_amt * -1,
             clearer_comm_cur_id,
             clearer_comm_cur_code,
             product_id,
             product_name,
             quality_id,
             quality_name,
             quantity_unit_id,
             quantity_unit,
             total_lots,
             total_quantity,
             open_lots,
             open_quantity,
             exercised_lots,
             exercised_quantity,
             expired_lots,
             expired_quantity,
             trade_price_type_id,
             trade_price,
             trade_price_unit_id,
             trade_price_cur_id,
             trade_price_cur_code,
             trade_price_weight,
             trade_price_weight_unit_id,
             trade_price_weight_unit,
             formula_id,
             formula_name,
             formula_display,
             index_instrument_id,
             index_instrument_name,
             strike_price,
             strike_price_unit_id,
             strike_price_cur_id,
             strike_price_cur_code,
             strike_price_weight,
             strike_price_weight_unit_id,
             strike_price_weight_unit,
             premium_discount,
             premium_discount_price_unit_id,
             pd_price_cur_id,
             pd_price_cur_code,
             pd_price_weight,
             pd_price_weight_unit_id,
             pd_price_weight_unit,
             premium_due_date,
             nominee_profile_id,
             nominee_name,
             leg_no,
             option_expiry_date,
             parent_int_derivative_ref_no,
             market_location_country,
             market_location_state,
             market_location_city,
             is_what_if,
             payment_term_id,
             payment_term,
             payment_due_date,
             closed_lots,
             closed_quantity,
             is_new_trade,
             status,
             settlement_cur_id,
             settlement_cur_code,
             in_out_at_money_status,
             in_out_at_money_value,
             exercise_date,
             expiry_date,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             base_qty_unit_id,
             base_qty_unit,
             dpd.internal_close_out_ref_no,
             close_out_ref_no,
             close_out_date,
             settlement_price,
             sett_price_unit_id,
             sett_price_cur_id,
             sett_price_cur_code,
             sett_price_weight,
             sett_price_weight_unit_id,
             sett_price_weight_unit,
             parent_instrument_type,
             clearer_comm_in_base * -1,
             broker_comm_in_base * -1,
             clearer_exch_rate,
             broker_exch_rate,
             trade_cur_to_base_exch_rate,
             'Reverse Realized',
             pnl_in_base_cur * -1,
             pnl_in_trade_cur * -1,
             base_cur_id,
             base_cur_code,
             underlying_future_dr_id,
             underlying_future_dr_id_name,
             underlying_future_expiry_date,
             underlying_future_quote_price,
             underlying_fut_price_unit_id,
             pc_process_id,
             traded_on
        from dpd_derivative_pnl_daily dpd,
             tdc_trade_date_closure tdc,
             (select dpd.internal_close_out_ref_no,
                     max(dpd.eod_trade_date) realized_date
                from dpd_derivative_pnl_daily dpd,
                     tdc_trade_date_closure   tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.pnl_type = 'Realized'
                 and dpd.eod_trade_date < pd_trade_date
                 and dpd.eod_trade_date = tdc.trade_date
                 and tdc.process = pc_process
                 and exists
               (select 1
                        from dcoh_der_closeout_header dcoh
                       where dcoh.internal_close_out_ref_no =
                             dpd.internal_close_out_ref_no
                         and dcoh.is_rolled_back = 'Y'
                         and dcoh.undo_closeout_dbd_id = v_dbd_id
                         and dcoh.corporate_id = pc_corporate_id)
               group by dpd.internal_close_out_ref_no) max_eod
       where dpd.eod_trade_date = tdc.trade_date
         and tdc.trade_date = max_eod.realized_date
         and dpd.internal_close_out_ref_no =
             max_eod.internal_close_out_ref_no
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = pc_process
         and tdc.process_id = dpd.process_id;
  end;

  procedure sp_calc_undo_settled(pc_corporate_id varchar2,
                                 pd_trade_date   date,
                                 pc_process_id   varchar2,
                                 pc_user_id      varchar2,
                                 pc_process      varchar2) is
  begin
    insert into dpd_derivative_pnl_daily
      (internal_derivative_ref_no,
       derivative_ref_no,
       eod_trade_date,
       trade_date,
       corporate_id,
       corporate_name,
       trader_id,
       trader_name,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       dr_id,
       instrument_id,
       instrument_name,
       instrument_symbol,
       instrument_type_id,
       instrument_type,
       instrument_type_name,
       instrument_sub_type_id,
       instrument_sub_type,
       derivative_def_id,
       derivative_def_name,
       derivative_traded_on,
       derivative_prodct_id,
       derivative_prodct_name,
       exchange_id,
       exchange_name,
       exchange_code,
       lot_size,
       lot_size_unit_id,
       lot_size_unit,
       price_point_id,
       price_point_name,
       period_type_id,
       period_type_name,
       period_type_display_name,
       period_month,
       period_year,
       period_date,
       prompt_date,
       dr_id_name,
       trade_type,
       deal_type_id,
       deal_type_name,
       deal_type_display_name,
       is_multiple_leg_involved,
       deal_category,
       deal_sub_category,
       strategy_id,
       strategy_name,
       strategy_desc,
       strategy_def_name,
       group_id,
       group_name,
       purpose_id,
       purpose_name,
       purpose_display_name,
       external_ref_no,
       cp_profile_id,
       cp_name,
       master_contract_id,
       broker_profile_id,
       broker_name,
       broker_account_id,
       broker_account_name,
       broker_account_type,
       broker_comm_type_id,
       broker_comm_amt,
       broker_comm_cur_id,
       broker_comm_cur_code,
       clearer_profile_id,
       clearer_name,
       clearer_account_id,
       clearer_account_name,
       clearer_account_type,
       clearer_comm_type_id,
       clearer_comm_amt,
       clearer_comm_cur_id,
       clearer_comm_cur_code,
       product_id,
       product_name,
       quality_id,
       quality_name,
       quantity_unit_id,
       quantity_unit,
       total_lots,
       total_quantity,
       open_lots,
       open_quantity,
       exercised_lots,
       exercised_quantity,
       expired_lots,
       expired_quantity,
       trade_price_type_id,
       trade_price,
       trade_price_unit_id,
       trade_price_cur_id,
       trade_price_cur_code,
       trade_price_weight,
       trade_price_weight_unit_id,
       trade_price_weight_unit,
       formula_id,
       formula_name,
       formula_display,
       index_instrument_id,
       index_instrument_name,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_weight,
       strike_price_weight_unit_id,
       strike_price_weight_unit,
       premium_discount,
       premium_discount_price_unit_id,
       pd_price_cur_id,
       pd_price_cur_code,
       pd_price_weight,
       pd_price_weight_unit_id,
       pd_price_weight_unit,
       premium_due_date,
       nominee_profile_id,
       nominee_name,
       leg_no,
       option_expiry_date,
       parent_int_derivative_ref_no,
       market_location_country,
       market_location_state,
       market_location_city,
       is_what_if,
       payment_term_id,
       payment_term,
       payment_due_date,
       closed_lots,
       closed_quantity,
       is_new_trade,
       status,
       settlement_cur_id,
       settlement_cur_code,
       in_out_at_money_status,
       in_out_at_money_value,
       exercise_date,
       expiry_date,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       settlement_price,
       sett_price_unit_id,
       sett_price_cur_id,
       sett_price_cur_code,
       sett_price_weight,
       sett_price_weight_unit_id,
       sett_price_weight_unit,
       parent_instrument_type,
       clearer_comm_in_base,
       broker_comm_in_base,
       clearer_exch_rate,
       broker_exch_rate,
       trade_cur_to_base_exch_rate,
       pnl_type,
       pnl_in_base_cur,
       pnl_in_trade_cur,
       base_cur_id,
       base_cur_code,
       underlying_future_dr_id,
       underlying_future_dr_id_name,
       underlying_future_expiry_date,
       underlying_future_quote_price,
       underlying_fut_price_unit_id,
       process_id,
       trade_qty_in_exch_unit,
       settlement_ref_no,
       traded_on)
      select dpd. internal_derivative_ref_no,
             derivative_ref_no,
             pd_trade_date,
             dpd.trade_date,
             dpd.corporate_id,
             corporate_name,
             trader_id,
             trader_name,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             dr_id,
             instrument_id,
             instrument_name,
             instrument_symbol,
             instrument_type_id,
             instrument_type,
             instrument_type_name,
             instrument_sub_type_id,
             instrument_sub_type,
             derivative_def_id,
             derivative_def_name,
             derivative_traded_on,
             derivative_prodct_id,
             derivative_prodct_name,
             exchange_id,
             exchange_name,
             exchange_code,
             lot_size,
             lot_size_unit_id,
             lot_size_unit,
             price_point_id,
             price_point_name,
             period_type_id,
             period_type_name,
             period_type_display_name,
             period_month,
             period_year,
             period_date,
             prompt_date,
             dr_id_name,
             trade_type,
             deal_type_id,
             deal_type_name,
             deal_type_display_name,
             is_multiple_leg_involved,
             deal_category,
             deal_sub_category,
             strategy_id,
             strategy_name,
             strategy_desc,
             strategy_def_name,
             group_id,
             group_name,
             purpose_id,
             purpose_name,
             purpose_display_name,
             external_ref_no,
             cp_profile_id,
             cp_name,
             master_contract_id,
             broker_profile_id,
             broker_name,
             broker_account_id,
             broker_account_name,
             broker_account_type,
             broker_comm_type_id,
             broker_comm_amt * -1,
             broker_comm_cur_id,
             broker_comm_cur_code,
             clearer_profile_id,
             clearer_name,
             clearer_account_id,
             clearer_account_name,
             clearer_account_type,
             clearer_comm_type_id,
             clearer_comm_amt * -1,
             clearer_comm_cur_id,
             clearer_comm_cur_code,
             product_id,
             product_id,
             quality_id,
             quality_name,
             quantity_unit_id,
             quantity_unit,
             total_lots,
             total_quantity,
             open_lots,
             open_quantity,
             exercised_lots,
             exercised_quantity,
             expired_lots,
             expired_quantity,
             trade_price_type_id,
             trade_price,
             trade_price_unit_id,
             trade_price_cur_id,
             trade_price_cur_code,
             trade_price_weight,
             trade_price_weight_unit_id,
             trade_price_weight_unit,
             formula_id,
             formula_name,
             formula_display,
             index_instrument_id,
             index_instrument_name,
             strike_price,
             strike_price_unit_id,
             strike_price_cur_id,
             strike_price_cur_code,
             strike_price_weight,
             strike_price_weight_unit_id,
             strike_price_weight_unit,
             premium_discount,
             premium_discount_price_unit_id,
             pd_price_cur_id,
             pd_price_cur_code,
             pd_price_weight,
             pd_price_weight_unit_id,
             pd_price_weight_unit,
             premium_due_date,
             nominee_profile_id,
             nominee_name,
             leg_no,
             option_expiry_date,
             parent_int_derivative_ref_no,
             market_location_country,
             market_location_state,
             market_location_city,
             is_what_if,
             payment_term,
             payment_term,
             payment_due_date,
             closed_lots,
             closed_quantity,
             is_new_trade,
             status,
             settlement_cur_id,
             settlement_cur_code,
             in_out_at_money_status,
             in_out_at_money_value,
             exercise_date,
             expiry_date,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             base_qty_unit_id,
             base_qty_unit,
             settlement_price,
             sett_price_unit_id,
             sett_price_cur_id,
             sett_price_cur_code,
             sett_price_weight,
             sett_price_weight_unit_id,
             sett_price_weight_unit,
             parent_instrument_type,
             clearer_comm_in_base * -1,
             broker_comm_in_base * -1,
             clearer_exch_rate,
             broker_exch_rate,
             trade_cur_to_base_exch_rate,
             'Reverse Realized',
             pnl_in_base_cur * -1,
             pnl_in_trade_cur * -1,
             base_cur_id,
             base_cur_code,
             underlying_future_dr_id,
             underlying_future_dr_id_name,
             underlying_future_expiry_date,
             underlying_future_quote_price,
             underlying_fut_price_unit_id,
             pc_process_id,
             trade_qty_in_exch_unit,
             dpd.settlement_ref_no,
             traded_on
        from dpd_derivative_pnl_daily dpd,
             tdc_trade_date_closure tdc,
             (select dpd.settlement_ref_no,
                     max(dpd.eod_trade_date) realized_date
                from dpd_derivative_pnl_daily dpd,
                     tdc_trade_date_closure   tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.pnl_type = 'Realized'
                 and dpd.eod_trade_date < pd_trade_date
                 and dpd.eod_trade_date = tdc.trade_date
                 and tdc.process = pc_process
               group by dpd.settlement_ref_no) max_eod
       where dpd.settlement_ref_no in
             (select fsh.settlement_ref_no
                from fsh_fin_settlement_header fsh
               where fsh.is_settled = 'N'
                 and fsh.undo_settlement_dbd_id =
                     (select dbd_id
                        from dbd_database_dump dbd
                       where dbd.corporate_id = pc_corporate_id
                         and dbd.trade_date = pd_trade_date
                         and dbd.process = pc_process))
         and dpd.eod_trade_date = tdc.trade_date
         and tdc.trade_date = max_eod.realized_date
         and dpd.settlement_ref_no = max_eod.settlement_ref_no
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = pc_process
         and tdc.process_id = dpd.process_id;
  end;

  procedure sp_calc_clearer_summary(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2) is
    vc_previous_process_id varchar2(15);
    vobj_error_log         tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count     number := 1;
  begin
    --
    -- Select Previous EOD or EOM Process ID
    --
    select tdc.process_id
      into vc_previous_process_id
      from tdc_trade_date_closure tdc
     where tdc.corporate_id = pc_corporate_id
       and process = pc_process
       and tdc.trade_date = (select max(trade_date)
                               from tdc_trade_date_closure
                              where corporate_id = pc_corporate_id
                                and trade_date < pd_trade_date
                                and process = pc_process);
    --
    -- Futures Section
    --
    insert into spc_summary_position_clearer
      (group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       corporate_id,
       corporate_name,
       base_cur_id,
       base_cur_code,
       process_id,
       process,
       process_date,
       product_id,
       product_name,
       base_qty_unit_id,
       base_qty_unit,
       instrument_id,
       instrument_name,
       derivative_def_id,
       derivative_def_name,
       instrument_type_id,
       instrument_type_name,
       exchange_id,
       exchange_name,
       dr_id,
       period_date,
       lot_size,
       lot_size_weight_unit_id,
       clearer_profile_id,
       clearer_name,
       order_type_id,
       order_type_name,
       trade_type_id,
       trade_type_name,
       trade_cur_id,
       trade_cur_code,
       initial_position_in_lots,
       buy_lots,
       sell_lots,
       closed_lots,
       unrealized_pnl_in_base_cur,
       unrealized_pnl_in_trade_cur,
       realized_pnl_in_base_cur,
       realized_pnl_in_trade_cur,
       net_open_lots,
       net_open_qty,
       buy_qty,
       sell_qty,
       closed_qty,
       initial_position_in_qty,
       cancelled_buy_lots,
       cancelled_buy_qty,
       cancelled_sell_lots,
       cancelled_sell_qty,
       close_diff_in_base_cur,
       close_diff_in_trade_cur)
      select group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             corporate_id,
             corporate_name,
             base_cur_id,
             base_cur_code,
             pc_process_id process_id,
             process,
             trade_date,
             product_id,
             product_desc,
             base_qty_unit_id,
             base_qty_unit,
             instrument_id,
             instrument_name,
             derivative_def_id,
             derivative_def_name,
             instrument_type_id,
             instrument_type,
             exchange_id,
             exchange_name,
             dr_id,
             period_date,
             lot_size,
             lot_size_unit_id,
             clearer_profile_id,
             clearer_name,
             deal_type_id,
             deal_type_name,
             trade_type_id,
             trade_type_name,
             trade_cur_id,
             trade_cur_code,
             sum(nvl(initial_position_lots, 0)),
             sum(nvl(buy_lots, 0)),
             sum(nvl(sell_lots, 0)),
             sum(nvl(closed_lots, 0)),
             sum(nvl(unrealized_pnl_in_base_cur, 0)),
             sum(nvl(unrealized_pnl_in_trade_cur, 0)),
             sum(nvl(realized_pnl_in_base_cur, 0)),
             sum(nvl(realized_pnl_in_trade_cur, 0)),
             sum(nvl(net_open_lots, 0)) as net_open_lots,
             sum(nvl(net_open_qty, 0)) as net_open_qty,
             sum(nvl(buy_qty, 0)),
             sum(nvl(sell_qty, 0)),
             sum(nvl(closed_qty, 0)),
             sum(nvl(initial_position_qty, 0)),
             sum(nvl(cancelled_buy_lots, 0)) cancelled_buy_lots,
             sum(nvl(cancelled_buy_qty, 0)) cancelled_buy_qty,
             sum(nvl(cancelled_sell_lots, 0)) cancelled_sell_lots,
             sum(nvl(cancelled_sell_qty, 0)) cancelled_sell_qty,
             sum(nvl(close_diff_in_base_cur, 0)) close_diff_in_base_cur,
             sum(nvl(close_diff_in_trade_cur, 0)) close_diff_in_trade_cur
        from (
              -- Initial Position
              select dpd_prev.group_id,
                      dpd_prev.group_name,
                      dpd_prev.group_cur_id,
                      dpd_prev.group_cur_code,
                      dpd_prev.group_qty_unit_id,
                      dpd_prev.group_qty_unit,
                      dpd_prev.corporate_id,
                      dpd_prev.corporate_name,
                      dpd_prev.base_cur_id,
                      dpd_prev.base_cur_code,
                      pc_process_id process_id,
                      pc_process process,
                      pd_trade_date trade_date,
                      pdd.product_id,
                      pdm.product_desc product_desc,
                      dpd_prev.base_qty_unit_id,
                      dpd_prev.base_qty_unit,
                      dpd_prev.instrument_id,
                      dpd_prev.instrument_name,
                      dpd_prev.derivative_def_id,
                      dpd_prev.derivative_def_name,
                      dpd_prev.instrument_type_id,
                      dpd_prev.instrument_type,
                      dpd_prev.exchange_id,
                      dpd_prev.exchange_name,
                      dpd_prev.dr_id,
                      dpd_prev.period_date,
                      dpd_prev.lot_size,
                      dpd_prev.lot_size_unit_id,
                      dpd_prev.clearer_profile_id,
                      phd.company_long_name1 clearer_name,
                      dpd_prev.deal_type_id,
                      dpd_prev.deal_type_name,
                      dpd_prev.instrument_type_id trade_type_id,
                      dpd_prev.instrument_name trade_type_name,
                      nvl(dpd_prev.trade_price_cur_id, dpd_prev.base_cur_id) trade_cur_id,
                      nvl(dpd_prev.trade_price_cur_code,
                          dpd_prev.broker_comm_cur_code) trade_cur_code,
                      sum(decode(dpd_prev.trade_type,
                                 'Buy',
                                 dpd_prev.total_lots,
                                 0) - decode(dpd_prev.trade_type,
                                             'Sell',
                                             dpd_prev.total_lots,
                                             0)) initial_position_lots,
                      -- trade_qty To TRADE_QTY_IN_EXCH_UNIT
                      sum(decode(dpd_prev.trade_type,
                                 'Buy',
                                 dpd_prev.trade_qty_in_exch_unit,
                                 0) - decode(dpd_prev.trade_type,
                                             'Sell',
                                             dpd_prev.trade_qty_in_exch_unit,
                                             0)) initial_position_qty,
                      0 buy_lots,
                      0 sell_lots,
                      0 closed_lots,
                      0 unrealized_pnl_in_base_cur,
                      0 unrealized_pnl_in_trade_cur,
                      0 realized_pnl_in_base_cur,
                      0 realized_pnl_in_trade_cur,
                      0 net_open_lots,
                      0 net_open_qty,
                      0 buy_qty,
                      0 sell_qty,
                      0 closed_qty,
                      0 cancelled_buy_lots,
                      0 cancelled_buy_qty,
                      0 cancelled_sell_lots,
                      0 cancelled_sell_qty,
                      0 close_diff_in_base_cur,
                      0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd_prev,
                      pdd_product_derivative_def pdd,
                      phd_profileheaderdetails   phd,
                      pdm_productmaster          pdm
               where dpd_prev.process_id = vc_previous_process_id --Previous EOD/EOM ID
                 and dpd_prev.corporate_id = pc_corporate_id
                 and dpd_prev.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd_prev.clearer_profile_id = phd.profileid
                 and dpd_prev.clearer_profile_id is not null
                 and dpd_prev.instrument_type in ('Future', 'Forward')
                    --AND dpd_prev.deal_type_id <> 'Internal Swap'
                 and dpd_prev.pnl_type = 'Unrealized'
               group by dpd_prev.group_id,
                         dpd_prev.group_name,
                         dpd_prev.group_cur_id,
                         dpd_prev.group_cur_code,
                         dpd_prev.group_qty_unit_id,
                         dpd_prev.group_qty_unit,
                         dpd_prev.corporate_id,
                         dpd_prev.corporate_name,
                         dpd_prev.base_cur_id,
                         dpd_prev.base_cur_code,
                         pdd.product_id,
                         pdm.product_desc,
                         dpd_prev.base_qty_unit_id,
                         dpd_prev.base_qty_unit,
                         dpd_prev.instrument_id,
                         dpd_prev.instrument_name,
                         dpd_prev.derivative_def_id,
                         dpd_prev.derivative_def_name,
                         dpd_prev.instrument_type_id,
                         dpd_prev.instrument_type,
                         dpd_prev.exchange_id,
                         dpd_prev.exchange_name,
                         dpd_prev.dr_id,
                         dpd_prev.period_date,
                         dpd_prev.period_month,
                         dpd_prev.period_year,
                         dpd_prev.lot_size,
                         dpd_prev.lot_size_unit_id,
                         dpd_prev.clearer_profile_id,
                         phd.company_long_name1,
                         dpd_prev.deal_type_id,
                         dpd_prev.deal_type_name,
                         dpd_prev.instrument_type_id,
                         dpd_prev.instrument_name,
                         nvl(dpd_prev.trade_price_cur_id, dpd_prev.base_cur_id),
                         nvl(dpd_prev.trade_price_cur_code,
                             dpd_prev.broker_comm_cur_code)
              union all
              -- New Trades in this EOD/EOM
              select gcd.groupid group_id,
                     gcd.groupname group_name,
                     cm_gcd.cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     qum_gcd.qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     drt.corporate_id,
                     akc.corporate_name,
                     cm_akc.cur_id base_cur_id,
                     cm_akc.cur_code base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm.qty_unit base_qty_unit,
                     dim.instrument_id,
                     dim.instrument_name,
                     pdd.derivative_def_id,
                     pdd.derivative_def_name,
                     dim.instrument_type_id,
                     irm.instrument_type,
                     pdd.exchange_id,
                     emt.exchange_name,
                     drt.dr_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        to_date('01-' || drm.period_month || '-' ||
                                drm.period_year,
                                'dd-Mon-yyyy')
                       else
                        drm.prompt_date
                     end else drm.period_date end) period_date,
                     pdd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     drt.clearer_profile_id,
                     phd_drt.company_long_name1 clearer_name,
                     drt.deal_type_id order_type_id,
                     drt.deal_type_id order_type,
                     dim.instrument_type_id trade_type_id,
                     dim.instrument_name trade_type_name,
                     nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
                     nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     nvl(sum(decode(drt.trade_type, 'Buy', drt.total_lots, 0)),
                         0) buy_lots,
                     nvl(sum(decode(drt.trade_type, 'Sell', drt.total_lots, 0)),
                         0) sell_lots,
                     0 closed_lots,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     nvl(sum(decode(drt.trade_type,
                                    'Buy',
                                    drt.total_quantity *
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         1),
                                    0)),
                         0) buy_qty,
                     nvl(sum(decode(drt.trade_type,
                                    'Sell',
                                    drt.total_quantity *
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         1),
                                    0)),
                         0) sell_qty,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dt_derivative_trade        drt,
                     ak_corporate               akc,
                     gcd_groupcorporatedetails  gcd,
                     qum_quantity_unit_master   qum_gcd,
                     cm_currency_master         cm_gcd,
                     cm_currency_master         cm_akc,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm,
                     qum_quantity_unit_master   qum_pdm,
                     irm_instrument_type_master irm,
                     emt_exchangemaster         emt,
                     phd_profileheaderdetails   phd_drt,
                     pum_price_unit_master      pum,
                     v_main_currency_details    vcur
               where drt.process_id = pc_process_id
                 and akc.corporate_id = drt.corporate_id
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and qum_pdm.qty_unit_id = pdm.base_quantity_unit
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Future', 'Forward')
                    --AND drt.is_new_trade = 'Y'
                    --AND drt.deal_type_id <> 'Internal Swap'
                 and pdd.exchange_id = emt.exchange_id
                 and phd_drt.profileid = drt.clearer_profile_id
                 and drt.clearer_profile_id is not null
                 and drt.trade_price_unit_id = pum.price_unit_id
                 and pum.cur_id = vcur.main_sub_cur_id
                 and not exists
               (select dt_pre.internal_derivative_ref_no
                        from dt_derivative_trade dt_pre
                       where dt_pre.internal_derivative_ref_no =
                             drt.internal_derivative_ref_no
                         and dt_pre.process_id = vc_previous_process_id)
               group by gcd.groupid,
                        gcd.groupname,
                        cm_gcd.cur_id,
                        cm_gcd.cur_code,
                        qum_gcd.qty_unit_id,
                        qum_gcd.qty_unit,
                        drt.corporate_id,
                        akc.corporate_name,
                        cm_akc.cur_id,
                        cm_akc.cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        pdm.base_quantity_unit,
                        qum_pdm.qty_unit,
                        dim.instrument_id,
                        dim.instrument_name,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        dim.instrument_type_id,
                        irm.instrument_type,
                        pdd.exchange_id,
                        emt.exchange_name,
                        drt.dr_id,
                        drm.period_month,
                        drm.period_year,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           to_date('01-' || drm.period_month || '-' ||
                                   drm.period_year,
                                   'dd-Mon-yyyy')
                          else
                           drm.prompt_date
                        end else drm.period_date end),
                        pdd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        drt.clearer_profile_id,
                        phd_drt.company_long_name1,
                        drt.deal_type_id,
                        drt.deal_type_id,
                        dim.instrument_type_id,
                        dim.instrument_name,
                        nvl(vcur.main_currency_id, cm_akc.cur_id),
                        nvl(vcur.main_cur_code, cm_akc.cur_code)
              union all
              -- Closed Position
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     nvl(sum(decode(dpd.trade_type, 'Buy', dpd.total_lots, 0)),
                         0) closed_lots,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     sum(dpd.pnl_in_base_cur) realized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_qty,
                     0 sell_qty,
                     nvl(sum(decode(dpd.trade_type,
                                    'Buy',
                                    nvl(dpd.total_quantity, 0),
                                    0) *
                             pkg_general.f_get_converted_quantity(null,
                                                                  dpd.quantity_unit_id,
                                                                  dpd.lot_size_unit_id,
                                                                  1)),
                         0) closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Future', 'Forward')
                 and dpd.clearer_profile_id is not null
                 and dpd.close_out_ref_no is not null --by siddharth
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Realized'
              --  AND dpd.status = 'Closed'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.period_date,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code)
              union all
              ---added by siddharth 19-jan-2011
              -- Closed Position by Settlement
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     nvl(sum(dpd.total_lots), 0) closed_lots,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     sum(dpd.pnl_in_base_cur) realized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_qty,
                     0 sell_qty,
                     --Issue 48001
                     nvl(sum(nvl(dpd.total_quantity, 0) *
                             pkg_general.f_get_converted_quantity(null,
                                                                  dpd.quantity_unit_id,
                                                                  dpd.lot_size_unit_id,
                                                                  1)),
                         0) closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Future', 'Forward')
                 and dpd.clearer_profile_id is not null
                    --AND    dpd.deal_type_id = 'External Swap'
                 and dpd.close_out_ref_no is null
                 and dpd.pnl_type = 'Realized'
              --  AND    dpd.status = 'Closed'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.period_date,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code)
              --ends here
              union all
              -- Open Position
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 closed_lots,
                     sum(dpd.pnl_in_base_cur) unrealized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.total_lots) net_open_lots,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.trade_qty_in_exch_unit) net_open_qty,
                     0 buy_qty,
                     0 sell_qty,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Future', 'Forward')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Unrealized'
              --  AND dpd.status = 'Open'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.period_date,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code))
       group by group_id,
                group_name,
                group_cur_id,
                group_cur_code,
                group_qty_unit_id,
                group_qty_unit,
                corporate_id,
                corporate_name,
                base_cur_id,
                base_cur_code,
                process_id,
                process,
                trade_date,
                product_id,
                product_desc,
                base_qty_unit_id,
                base_qty_unit,
                instrument_id,
                instrument_name,
                derivative_def_id,
                derivative_def_name,
                instrument_type_id,
                instrument_type,
                exchange_id,
                exchange_name,
                dr_id,
                period_date,
                lot_size,
                lot_size_unit_id,
                clearer_profile_id,
                clearer_name,
                deal_type_id,
                deal_type_name,
                trade_type_id,
                trade_type_name,
                trade_cur_id,
                trade_cur_code
      union all
      -- Cancelled Trades in this EOD/EOM
      select gcd.groupid group_id,
             gcd.groupname group_name,
             cm_gcd.cur_id group_cur_id,
             cm_gcd.cur_code group_cur_code,
             qum_gcd.qty_unit_id group_qty_unit_id,
             qum_gcd.qty_unit group_qty_unit,
             drt.corporate_id,
             akc.corporate_name,
             cm_akc.cur_id base_cur_id,
             cm_akc.cur_code base_cur_code,
             pc_process_id,
             pc_process,
             pd_trade_date,
             pdd.product_id,
             pdm.product_desc product_desc,
             pdm.base_quantity_unit base_qty_unit_id,
             qum_pdm.qty_unit base_qty_unit,
             dim.instrument_id,
             dim.instrument_name,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             dim.instrument_type_id,
             irm.instrument_type,
             pdd.exchange_id,
             emt.exchange_name,
             drt.dr_id,
             (case
               when drm.period_date is null then
                case
               when drm.period_month is not null and
                    drm.period_year is not null then
                to_date('01-' || drm.period_month || '-' || drm.period_year,
                        'dd-Mon-yyyy')
               else
                drm.prompt_date
             end else drm.period_date end) period_date,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             drt.clearer_profile_id,
             phd_drt.company_long_name1 clearer_name,
             drt.deal_type_id order_type_id,
             drt.deal_type_id order_type,
             dim.instrument_type_id trade_type_id,
             dim.instrument_name trade_type_name,
             nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
             nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
             0 initial_position_lots,
             0 initial_position_qty,
             0 buy_lots,
             0 sell_lots,
             0 closed_lots,
             0 unrealized_pnl_in_base_cur,
             0 unrealized_pnl_in_trade_cur,
             0 realized_pnl_in_base_cur,
             0 realized_pnl_in_trade_cur,
             0 net_open_lots,
             0 net_open_qty,
             0 buy_qty,
             0 sell_qty,
             0 closed_qty,
             nvl(sum(decode(drt.trade_type, 'Buy', drt.open_lots, 0)), 0) cancelled_buy_lots,
             nvl(sum(decode(drt.trade_type,
                            'Buy',
                            drt.open_quantity *
                            pkg_general.f_get_converted_quantity(null,
                                                                 drt.quantity_unit_id,
                                                                 nvl(pdd.lot_size_unit_id,
                                                                     pdm.base_quantity_unit),
                                                                 1),
                            0)),
                 0) cancelled_buy_qty,
             nvl(sum(decode(drt.trade_type, 'Sell', drt.open_lots, 0)), 0) cancelled_sell_lots,
             nvl(sum(decode(drt.trade_type,
                            'Sell',
                            drt.open_quantity *
                            pkg_general.f_get_converted_quantity(null,
                                                                 drt.quantity_unit_id,
                                                                 nvl(pdd.lot_size_unit_id,
                                                                     pdm.base_quantity_unit),
                                                                 1),
                            0)),
                 0) cancelled_sell_qty,
             0 close_diff_in_base_cur,
             0 close_diff_in_trade_cur
        from dt_derivative_trade        drt,
             ak_corporate               akc,
             gcd_groupcorporatedetails  gcd,
             qum_quantity_unit_master   qum_gcd,
             cm_currency_master         cm_gcd,
             cm_currency_master         cm_akc,
             drm_derivative_master      drm,
             dim_der_instrument_master  dim,
             pdd_product_derivative_def pdd,
             pdm_productmaster          pdm,
             qum_quantity_unit_master   qum_pdm,
             irm_instrument_type_master irm,
             emt_exchangemaster         emt,
             phd_profileheaderdetails   phd_drt,
             pum_price_unit_master      pum,
             v_main_currency_details    vcur
       where drt.process_id = vc_previous_process_id
         and akc.corporate_id = drt.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
         and akc.base_currency_name = cm_akc.cur_code
         and drt.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and irm.instrument_type_id = dim.instrument_type_id
         and irm.instrument_type in ('Future', 'Forward')
         and not exists
       (select dt.internal_derivative_ref_no
                from dt_derivative_trade dt
               where dt.internal_derivative_ref_no =
                     drt.internal_derivative_ref_no
                 and dt.process_id = pc_process_id)
         and drt.clearer_profile_id is not null
            --AND drt.is_deleted_today = 'Y'
            --AND drt.deal_type_id <> 'Internal Swap'
         and pdd.exchange_id = emt.exchange_id
         and drt.clearer_profile_id = phd_drt.profileid
         and drt.trade_price_unit_id = pum.price_unit_id(+)
         and pum.cur_id = vcur.main_sub_cur_id(+)
       group by gcd.groupid,
                gcd.groupname,
                cm_gcd.cur_id,
                cm_gcd.cur_code,
                qum_gcd.qty_unit_id,
                qum_gcd.qty_unit,
                drt.corporate_id,
                akc.corporate_name,
                cm_akc.cur_id,
                cm_akc.cur_code,
                pc_process_id,
                pc_process,
                pd_trade_date,
                pdd.product_id,
                pdm.product_desc,
                pdm.base_quantity_unit,
                qum_pdm.qty_unit,
                dim.instrument_id,
                dim.instrument_name,
                pdd.derivative_def_id,
                pdd.derivative_def_name,
                dim.instrument_type_id,
                irm.instrument_type,
                pdd.exchange_id,
                emt.exchange_name,
                drt.dr_id,
                drm.period_month,
                drm.period_year,
                (case
                  when drm.period_date is null then
                   case
                  when drm.period_month is not null and
                       drm.period_year is not null then
                   to_date('01-' || drm.period_month || '-' ||
                           drm.period_year,
                           'dd-Mon-yyyy')
                  else
                   drm.prompt_date
                end else drm.period_date end),
                pdd.lot_size,
                nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                drt.clearer_profile_id,
                phd_drt.company_long_name1,
                drt.deal_type_id,
                drt.deal_type_id,
                dim.instrument_type_id,
                dim.instrument_name,
                nvl(vcur.main_currency_id, cm_akc.cur_id),
                nvl(vcur.main_cur_code, cm_akc.cur_code);
    --Ends here
    --
    -- Options Section
    --
    insert into spc_summary_position_clearer
      (group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       corporate_id,
       corporate_name,
       base_cur_id,
       base_cur_code,
       process_id,
       process,
       process_date,
       product_id,
       product_name,
       base_qty_unit_id,
       base_qty_unit,
       instrument_id,
       instrument_name,
       derivative_def_id,
       derivative_def_name,
       instrument_type_id,
       instrument_type_name,
       exchange_id,
       exchange_name,
       dr_id,
       period_date,
       lot_size,
       lot_size_weight_unit_id,
       clearer_profile_id,
       clearer_name,
       order_type_id,
       order_type_name,
       trade_type_id,
       trade_type_name,
       trade_cur_id,
       trade_cur_code,
       initial_position_in_lots,
       buy_lots,
       sell_lots,
       buy_qty,
       sell_qty,
       closed_lots,
       unrealized_pnl_in_base_cur,
       unrealized_pnl_in_trade_cur,
       realized_pnl_in_base_cur,
       realized_pnl_in_trade_cur,
       net_open_lots,
       net_open_qty,
       buy_exercised_expired_lots,
       sell_exercised_expired_lots,
       buy_exercised_expired_qty,
       sell_exercised_expired_qty,
       buy_premium_month,
       sell_premium_month,
       strike_price,
       strike_price_unit_id,
       strike_price_cur_id,
       strike_price_cur_code,
       strike_price_cur_weight,
       strike_price_cur_wt_unit_id,
       strike_price_cur_weight_unit,
       closed_qty,
       initial_position_in_qty,
       cancelled_buy_lots,
       cancelled_buy_qty,
       cancelled_sell_lots,
       cancelled_sell_qty,
       close_diff_in_base_cur,
       close_diff_in_trade_cur)
      select group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             corporate_id,
             corporate_name,
             base_cur_id,
             base_cur_code,
             process_id,
             process,
             trade_date,
             product_id,
             product_desc,
             base_qty_unit_id,
             base_qty_unit,
             instrument_id,
             instrument_name,
             derivative_def_id,
             derivative_def_name,
             instrument_type_id,
             instrument_type_name,
             exchange_id,
             exchange_name,
             dr_id,
             period_date,
             lot_size,
             lot_size_unit_id,
             clearer_profile_id,
             clearer_name,
             deal_type_id,
             deal_type_name,
             trade_type_id,
             trade_type_name,
             trade_price_cur_id,
             trade_price_cur_code,
             sum(nvl(initial_position_lots, 0)),
             sum(nvl(buy_lots, 0)),
             sum(nvl(sell_lots, 0)),
             sum(nvl(buy_qty, 0)),
             sum(nvl(sell_qty, 0)),
             sum(nvl(lots_closed, 0)),
             sum(nvl(unrealized_pnl_in_base_cur, 0)),
             sum(nvl(unrealized_pnl_in_trade_cur, 0)),
             sum(nvl(realized_pnl_in_base_cur, 0)),
             sum(nvl(realized_pnl_in_trade_cur, 0)),
             sum(nvl(net_open_lots, 0)) net_open_lots,
             sum(nvl(net_open_qty, 0)) net_open_qty,
             sum(nvl(buy_exercised_expired_lots, 0)),
             sum(nvl(sell_exercised_expired_lots, 0)),
             sum(nvl(buy_exercised_expired_qty, 0)),
             sum(nvl(sell_exercised_expired_qty, 0)),
             sum(nvl(buy_premium_month, 0)),
             sum(nvl(sell_premium_month, 0)),
             strike_price,
             strike_price_unit_id,
             strike_price_cur_id,
             strike_price_cur_code,
             strike_price_weight,
             strike_price_weight_unit_id,
             strike_price_weight_unit,
             sum(nvl(closed_qty, 0)),
             sum(nvl(initial_position_qty, 0)),
             sum(nvl(cancelled_buy_lots, 0)) cancelled_buy_lots,
             sum(nvl(cancelled_buy_qty, 0)) cancelled_buy_qty,
             sum(nvl(cancelled_sell_lots, 0)) cancelled_sell_lots,
             sum(nvl(cancelled_sell_qty, 0)) cancelled_sell_qty,
             sum(nvl(close_diff_in_base_cur, 0)) close_diff_in_base_cur,
             sum(nvl(close_diff_in_trade_cur, 0)) close_diff_in_trade_cur
        from (
              --Initial Position for Options
              select dpd.group_id,
                      dpd.group_name,
                      dpd.group_cur_id,
                      dpd.group_cur_code,
                      dpd.group_qty_unit_id,
                      dpd.group_qty_unit,
                      dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.base_cur_id,
                      base_cur_code,
                      pc_process_id process_id,
                      pc_process process,
                      pd_trade_date trade_date,
                      pdd.product_id,
                      product_desc,
                      dpd.base_qty_unit_id,
                      dpd.base_qty_unit,
                      dpd.instrument_id,
                      dpd.instrument_name,
                      dpd.derivative_def_id,
                      dpd.derivative_def_name,
                      dpd.instrument_type_id,
                      irm.instrument_type instrument_type_name,
                      dpd.exchange_id,
                      dpd.exchange_name,
                      dpd.dr_id,
                      dpd.period_date,
                      dpd.lot_size,
                      dpd.lot_size_unit_id lot_size_unit_id,
                      dpd.clearer_profile_id,
                      phd.company_long_name1 clearer_name,
                      dpd.deal_type_id,
                      dpd.deal_type_name,
                      dpd.instrument_type_id trade_type_id,
                      dpd.instrument_name trade_type_name,
                      nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_price_cur_id,
                      nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_price_cur_code,
                      sum(decode(dpd.trade_type, 'Buy', dpd.total_lots, 0) -
                          decode(dpd.trade_type, 'Sell', dpd.total_lots, 0)) initial_position_lots,
                      sum(decode(dpd.trade_type,
                                 'Buy',
                                 dpd.trade_qty_in_exch_unit,
                                 0) - decode(dpd.trade_type,
                                             'Sell',
                                             dpd.trade_qty_in_exch_unit,
                                             0)) initial_position_qty,
                      0 buy_lots,
                      0 sell_lots,
                      0 buy_qty,
                      0 sell_qty,
                      0 lots_closed,
                      0 unrealized_pnl_in_base_cur,
                      0 unrealized_pnl_in_trade_cur,
                      0 realized_pnl_in_base_cur,
                      0 realized_pnl_in_trade_cur,
                      0 net_open_lots,
                      0 net_open_qty,
                      0 buy_exercised_expired_lots,
                      0 sell_exercised_expired_lots,
                      0 buy_exercised_expired_qty,
                      0 sell_exercised_expired_qty,
                      0 buy_premium_month,
                      0 sell_premium_month,
                      dpd.strike_price,
                      dpd.strike_price_unit_id,
                      dpd.strike_price_cur_id,
                      dpd.strike_price_cur_code,
                      dpd.strike_price_weight,
                      dpd.strike_price_weight_unit_id,
                      dpd.strike_price_weight_unit,
                      0 closed_qty,
                      0 cancelled_buy_lots,
                      0 cancelled_buy_qty,
                      0 cancelled_sell_lots,
                      0 cancelled_sell_qty,
                      0 close_diff_in_base_cur,
                      0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                      pdd_product_derivative_def pdd,
                      pdm_productmaster          pdm,
                      irm_instrument_type_master irm,
                      phd_profileheaderdetails   phd
               where dpd.derivative_def_id = pdd.derivative_def_id
                 and pdm.product_id = pdd.product_id
                 and dpd.instrument_type_id = irm.instrument_type_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                    -- AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Unrealized'
                 and dpd.clearer_profile_id = phd.profileid
                 and dpd.process_id = vc_previous_process_id
               group by dpd.group_id,
                         dpd.group_name,
                         group_cur_id,
                         group_cur_code,
                         group_qty_unit_id,
                         group_qty_unit,
                         dpd.corporate_id,
                         corporate_name,
                         dpd.base_cur_id,
                         base_cur_code,
                         process_id,
                         pc_process,
                         pd_trade_date,
                         pdd.product_id,
                         product_desc,
                         dpd.base_qty_unit_id,
                         dpd.base_qty_unit,
                         dpd.instrument_id,
                         dpd.instrument_name,
                         dpd.derivative_def_id,
                         dpd.derivative_def_name,
                         dpd.instrument_type_id,
                         irm.instrument_type,
                         dpd.exchange_id,
                         dpd.exchange_name,
                         dpd.dr_id,
                         dpd.period_date,
                         dpd.period_month,
                         dpd.period_year,
                         dpd.lot_size,
                         dpd.lot_size_unit_id,
                         dpd.clearer_profile_id,
                         phd.company_long_name1,
                         dpd.deal_type_id,
                         dpd.deal_type_name,
                         dpd.instrument_type_id,
                         irm.instrument_type,
                         nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                         nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                         dpd.strike_price,
                         dpd.strike_price_unit_id,
                         dpd.strike_price_cur_id,
                         dpd.strike_price_cur_code,
                         dpd.strike_price_weight,
                         dpd.strike_price_weight_unit_id,
                         dpd.strike_price_weight_unit
              -- New Trades in this EOD/EOM
              union all
              select gcd.groupid group_id,
                     gcd.groupname group_name,
                     cm_gcd.cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     qum_gcd.qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     drt.corporate_id,
                     akc.corporate_name,
                     cm_akc.cur_id base_cur_id,
                     cm_akc.cur_code base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm.qty_unit base_qty_unit,
                     dim.instrument_id,
                     dim.instrument_name,
                     pdd.derivative_def_id,
                     pdd.derivative_def_name,
                     dim.instrument_type_id,
                     irm.instrument_type,
                     pdd.exchange_id,
                     emt.exchange_name,
                     drt.dr_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        to_date('01-' || drm.period_month || '-' ||
                                drm.period_year,
                                'dd-Mon-yyyy')
                       else
                        drm.prompt_date
                     end else drm.period_date end) period_date,
                     pdd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     drt.clearer_profile_id,
                     phd_drt.company_long_name1 clearer_name,
                     drt.deal_type_id order_type_id,
                     drt.deal_type_id order_type,
                     dim.instrument_type_id trade_type_id,
                     dim.instrument_name trade_type_name,
                     nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
                     nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     nvl(sum(decode(drt.trade_type, 'Buy', drt.total_lots, 0)),
                         0) buy_lots,
                     nvl(sum(decode(drt.trade_type, 'Sell', drt.total_lots, 0)),
                         0) sell_lots,
                     nvl(sum(decode(drt.trade_type,
                                    'Buy',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) buy_qty,
                     nvl(sum(decode(drt.trade_type,
                                    'Sell',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     drt.strike_price,
                     drt.strike_price_unit_id,
                     cm_sp.cur_id,
                     cm_sp.cur_code,
                     pum_sp.weight,
                     qum_sp.qty_unit_id,
                     qum_sp.qty_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dt_derivative_trade        drt,
                     ak_corporate               akc,
                     gcd_groupcorporatedetails  gcd,
                     qum_quantity_unit_master   qum_gcd,
                     cm_currency_master         cm_gcd,
                     cm_currency_master         cm_akc,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm,
                     qum_quantity_unit_master   qum_pdm,
                     irm_instrument_type_master irm,
                     emt_exchangemaster         emt,
                     phd_profileheaderdetails   phd_drt,
                     pum_price_unit_master      pum,
                     pum_price_unit_master      pum_sp,
                     cm_currency_master         cm_sp,
                     qum_quantity_unit_master   qum_sp,
                     v_main_currency_details    vcur
               where drt.process_id = pc_process_id
                 and akc.corporate_id = drt.corporate_id
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and qum_pdm.qty_unit_id = pdm.base_quantity_unit
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and drt.is_what_if = 'N'
                    --AND drt.deal_type_id <> 'Internal Swap'
                    --AND drt.is_new_trade = 'Y'
                 and pdd.exchange_id = emt.exchange_id
                 and phd_drt.profileid = drt.clearer_profile_id
                 and drt.premium_discount_price_unit_id = pum.price_unit_id
                 and pum.cur_id = vcur.main_sub_cur_id
                 and drt.strike_price_unit_id = pum_sp.price_unit_id
                 and pum_sp.cur_id = cm_sp.cur_id
                 and pum_sp.weight_unit_id = qum_sp.qty_unit_id
                 and not exists
               (select dt_pre.internal_derivative_ref_no
                        from dt_derivative_trade dt_pre
                       where dt_pre.internal_derivative_ref_no =
                             drt.internal_derivative_ref_no
                         and dt_pre.process_id = vc_previous_process_id)
               group by gcd.groupid,
                        gcd.groupname,
                        cm_gcd.cur_id,
                        cm_gcd.cur_code,
                        qum_gcd.qty_unit_id,
                        qum_gcd.qty_unit,
                        drt.corporate_id,
                        akc.corporate_name,
                        cm_akc.cur_id,
                        cm_akc.cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        pdm.base_quantity_unit,
                        qum_pdm.qty_unit,
                        dim.instrument_id,
                        dim.instrument_name,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        dim.instrument_type_id,
                        irm.instrument_type,
                        pdd.exchange_id,
                        emt.exchange_name,
                        drt.dr_id,
                        drm.period_month,
                        drm.period_year,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           to_date('01-' || drm.period_month || '-' ||
                                   drm.period_year,
                                   'dd-Mon-yyyy')
                          else
                           drm.prompt_date
                        end else drm.period_date end),
                        pdd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        drt.clearer_profile_id,
                        phd_drt.company_long_name1,
                        drt.deal_type_id,
                        drt.deal_type_id,
                        dim.instrument_type_id,
                        dim.instrument_name,
                        nvl(vcur.main_currency_id, cm_akc.cur_id),
                        nvl(vcur.main_cur_code, cm_akc.cur_code),
                        drt.strike_price,
                        drt.strike_price_unit_id,
                        cm_sp.cur_id,
                        cm_sp.cur_code,
                        pum_sp.weight,
                        qum_sp.qty_unit_id,
                        qum_sp.qty_unit
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     sum(dpd.pnl_in_base_cur) realized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     nvl(sum(case
                               when dpd.trade_type = 'Buy' then
                                dpd.pnl_in_base_cur
                               else
                                0
                             end),
                         0) buy_premium_month,
                     nvl(sum(case
                               when dpd.trade_type = 'Sell' then
                                dpd.pnl_in_base_cur
                               else
                                0
                             end),
                         0) sell_premium_month,
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type in ('Realized')
              --   and dpd.status in ('Settled', 'Closed')
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              ---Positon from Closed out and pnl from option premium
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     nvl(sum(decode(dpd.trade_type, 'Buy', dpd.total_lots, 0)),
                         0) lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur, --48001
                     0 realized_pnl_in_trade_cur, --48001
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month, --48001
                     0 sell_premium_month, --48001
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     nvl(sum(decode(dpd.trade_type,
                                    'Buy',
                                    nvl(dpd.total_quantity, 0),
                                    0) *
                             pkg_general.f_get_converted_quantity(null,
                                                                  dpd.lot_size_unit_id,
                                                                  nvl(pdd.lot_size_unit_id,
                                                                      pdm.base_quantity_unit),
                                                                  1)),
                         0),
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type in ('Realized')
                 and dpd.status not in ('Expired', 'Exercised')
              --and dpd.status = 'Closed' 
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              -- Exercised / Expired Trades for getting Lots/Qty Exercised / Expired
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     dpd.base_cur_id trade_cur_id,
                     dpd.base_cur_code trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     nvl(sum(case
                               when dpd.trade_type = 'Buy' then
                                dpd.total_lots
                               else
                                0
                             end),
                         0) buy_exercised_expired_lots,
                     nvl(sum(case
                               when dpd.trade_type = 'Sell' then
                                dpd.total_lots
                               else
                                0
                             end),
                         0) sell_exercised_expired_lots,
                     nvl(sum(case
                               when dpd.trade_type = 'Buy' then
                                dpd.trade_qty_in_exch_unit
                               else
                                0
                             end),
                         0) buy_exercised_expired_qty,
                     nvl(sum(case
                               when dpd.trade_type = 'Sell' then
                                dpd.trade_qty_in_exch_unit
                               else
                                0
                             end),
                         0) sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Realized'
                    --and dpd.status = 'Closed'
                 and dpd.status in ('Expired', 'Exercised')
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        dpd.trade_price_cur_id,
                        dpd.trade_price_cur_code,
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              -- Open Position
              union all
              select dpd.group_id,
                     dpd.group_name,
                     dpd.group_cur_id,
                     dpd.group_cur_code,
                     dpd.group_qty_unit_id,
                     dpd.group_qty_unit,
                     dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.base_cur_id,
                     dpd.base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     dpd.base_qty_unit_id,
                     dpd.base_qty_unit,
                     dpd.instrument_id,
                     dpd.instrument_name,
                     dpd.derivative_def_id,
                     dpd.derivative_def_name,
                     dpd.instrument_type_id,
                     dpd.instrument_type,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.dr_id,
                     dpd.period_date,
                     dpd.lot_size,
                     dpd.lot_size_unit_id,
                     dpd.clearer_profile_id,
                     dpd.clearer_name,
                     dpd.deal_type_id,
                     dpd.deal_type_name,
                     dpd.instrument_type_id trade_type_id,
                     dpd.instrument_name trade_type_name,
                     nvl(dpd.trade_price_cur_id, dpd.base_cur_id) trade_price_cur_id,
                     nvl(dpd.trade_price_cur_code, dpd.base_cur_code) trade_price_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     sum(dpd.pnl_in_base_cur) unrealized_pnl_in_base_cur,
                     sum(dpd.pnl_in_trade_cur) unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.total_lots) net_open_lots,
                     sum(decode(dpd.trade_type, 'Sell', -1, 1) *
                         dpd.trade_qty_in_exch_unit) net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     dpd.strike_price,
                     dpd.strike_price_unit_id,
                     dpd.strike_price_cur_id,
                     dpd.strike_price_cur_code,
                     dpd.strike_price_weight,
                     dpd.strike_price_weight_unit_id,
                     dpd.strike_price_weight_unit,
                     0 closed_qty,
                     0 cancelled_buy_lots,
                     0 cancelled_buy_qty,
                     0 cancelled_sell_lots,
                     0 cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dpd_derivative_pnl_daily   dpd,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm
               where dpd.process_id = pc_process_id
                 and dpd.corporate_id = pc_corporate_id
                 and dpd.derivative_def_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and dpd.instrument_type in ('Option Put', 'Option Call')
                 and dpd.clearer_profile_id is not null
                    --AND dpd.deal_type_id <> 'Internal Swap'
                 and dpd.pnl_type = 'Unrealized'
              --AND dpd.trade_status = 'Open'
               group by dpd.group_id,
                        dpd.group_name,
                        dpd.group_cur_id,
                        dpd.group_cur_code,
                        dpd.group_qty_unit_id,
                        dpd.group_qty_unit,
                        dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.base_cur_id,
                        dpd.base_cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        dpd.base_qty_unit_id,
                        dpd.base_qty_unit,
                        dpd.instrument_id,
                        dpd.instrument_name,
                        dpd.derivative_def_id,
                        dpd.derivative_def_name,
                        dpd.instrument_type_id,
                        dpd.instrument_type,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.dr_id,
                        dpd.period_date,
                        dpd.period_month,
                        dpd.period_year,
                        dpd.lot_size,
                        dpd.lot_size_unit_id,
                        dpd.clearer_profile_id,
                        dpd.clearer_name,
                        dpd.deal_type_id,
                        dpd.deal_type_name,
                        dpd.instrument_type_id,
                        dpd.instrument_name,
                        nvl(dpd.trade_price_cur_id, dpd.base_cur_id),
                        nvl(dpd.trade_price_cur_code, dpd.base_cur_code),
                        dpd.strike_price,
                        dpd.strike_price_unit_id,
                        dpd.strike_price_cur_id,
                        dpd.strike_price_cur_code,
                        dpd.strike_price_weight,
                        dpd.strike_price_weight_unit_id,
                        dpd.strike_price_weight_unit
              --13-March-2012 expired options change start
              union all
              select gcd.groupid group_id,
                     gcd.groupname group_name,
                     cm_gcd.cur_id group_cur_id,
                     cm_gcd.cur_code group_cur_code,
                     qum_gcd.qty_unit_id group_qty_unit_id,
                     qum_gcd.qty_unit group_qty_unit,
                     drt.corporate_id,
                     akc.corporate_name,
                     cm_akc.cur_id base_cur_id,
                     cm_akc.cur_code base_cur_code,
                     pc_process_id,
                     pc_process,
                     pd_trade_date,
                     pdd.product_id,
                     pdm.product_desc product_desc,
                     pdm.base_quantity_unit base_qty_unit_id,
                     qum_pdm.qty_unit base_qty_unit,
                     dim.instrument_id,
                     dim.instrument_name,
                     pdd.derivative_def_id,
                     pdd.derivative_def_name,
                     dim.instrument_type_id,
                     irm.instrument_type,
                     pdd.exchange_id,
                     emt.exchange_name,
                     drt.dr_id,
                     (case
                       when drm.period_date is null then
                        case
                       when drm.period_month is not null and
                            drm.period_year is not null then
                        to_date('01-' || drm.period_month || '-' ||
                                drm.period_year,
                                'dd-Mon-yyyy')
                       else
                        drm.prompt_date
                     end else drm.period_date end) period_date,
                     pdd.lot_size,
                     nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
                     drt.clearer_profile_id,
                     phd_drt.company_long_name1 clearer_name,
                     drt.deal_type_id order_type_id,
                     drt.deal_type_id order_type,
                     dim.instrument_type_id trade_type_id,
                     dim.instrument_name trade_type_name,
                     nvl(vcur.main_currency_id, cm_akc.cur_id) trade_cur_id,
                     nvl(vcur.main_cur_code, cm_akc.cur_code) trade_cur_code,
                     0 initial_position_lots,
                     0 initial_position_qty,
                     0 buy_lots,
                     0 sell_lots,
                     0 buy_qty,
                     0 sell_qty,
                     0 lots_closed,
                     0 unrealized_pnl_in_base_cur,
                     0 unrealized_pnl_in_trade_cur,
                     0 realized_pnl_in_base_cur,
                     0 realized_pnl_in_trade_cur,
                     0 net_open_lots,
                     0 net_open_qty,
                     0 buy_exercised_expired_lots,
                     0 sell_exercised_expired_lots,
                     0 buy_exercised_expired_qty,
                     0 sell_exercised_expired_qty,
                     0 buy_premium_month,
                     0 sell_premium_month,
                     drt.strike_price,
                     drt.strike_price_unit_id,
                     cm_sp.cur_id,
                     cm_sp.cur_code,
                     pum_sp.weight,
                     qum_sp.qty_unit_id,
                     qum_sp.qty_unit,
                     0 closed_qty,
                     nvl(sum(decode(drt.trade_type, 'Buy', drt.total_lots, 0)),
                         0) cancelled_buy_lots,
                     nvl(sum(decode(drt.trade_type,
                                    'Buy',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) cancelled_buy_qty,
                     nvl(sum(decode(drt.trade_type, 'Sell', drt.total_lots, 0)),
                         0) cancelled_sell_lots,
                     nvl(sum(decode(drt.trade_type,
                                    'Sell',
                                    pkg_general.f_get_converted_quantity(null,
                                                                         drt.quantity_unit_id,
                                                                         nvl(pdd.lot_size_unit_id,
                                                                             pdm.base_quantity_unit),
                                                                         drt.total_quantity),
                                    0)),
                         0) cancelled_sell_qty,
                     0 close_diff_in_base_cur,
                     0 close_diff_in_trade_cur
                from dt_derivative_trade        drt,
                     ak_corporate               akc,
                     gcd_groupcorporatedetails  gcd,
                     qum_quantity_unit_master   qum_gcd,
                     cm_currency_master         cm_gcd,
                     cm_currency_master         cm_akc,
                     drm_derivative_master      drm,
                     dim_der_instrument_master  dim,
                     pdd_product_derivative_def pdd,
                     pdm_productmaster          pdm,
                     qum_quantity_unit_master   qum_pdm,
                     irm_instrument_type_master irm,
                     emt_exchangemaster         emt,
                     phd_profileheaderdetails   phd_drt,
                     pum_price_unit_master      pum,
                     pum_price_unit_master      pum_sp,
                     cm_currency_master         cm_sp,
                     qum_quantity_unit_master   qum_sp,
                     v_main_currency_details    vcur
               where drt.process_id = vc_previous_process_id
                 and akc.corporate_id = drt.corporate_id
                 and akc.groupid = gcd.groupid
                 and gcd.group_cur_id = cm_gcd.cur_id
                 and gcd.group_qty_unit_id = qum_gcd.qty_unit_id
                 and akc.base_currency_name = cm_akc.cur_code
                 and drt.dr_id = drm.dr_id
                 and drm.instrument_id = dim.instrument_id
                 and dim.product_derivative_id = pdd.derivative_def_id
                 and pdd.product_id = pdm.product_id
                 and qum_pdm.qty_unit_id = pdm.base_quantity_unit
                 and irm.instrument_type_id = dim.instrument_type_id
                 and irm.instrument_type in ('Option Put', 'Option Call')
                 and drt.is_what_if = 'N'
                 and pdd.exchange_id = emt.exchange_id
                 and phd_drt.profileid = drt.clearer_profile_id
                 and drt.premium_discount_price_unit_id = pum.price_unit_id
                 and pum.cur_id = vcur.main_sub_cur_id
                 and drt.strike_price_unit_id = pum_sp.price_unit_id
                 and pum_sp.cur_id = cm_sp.cur_id
                 and pum_sp.weight_unit_id = qum_sp.qty_unit_id
                 and not exists
               (select dt_pre.internal_derivative_ref_no
                        from dt_derivative_trade dt_pre
                       where dt_pre.internal_derivative_ref_no =
                             drt.internal_derivative_ref_no
                         and dt_pre.process_id = pc_process_id)
               group by gcd.groupid,
                        gcd.groupname,
                        cm_gcd.cur_id,
                        cm_gcd.cur_code,
                        qum_gcd.qty_unit_id,
                        qum_gcd.qty_unit,
                        drt.corporate_id,
                        akc.corporate_name,
                        cm_akc.cur_id,
                        cm_akc.cur_code,
                        pc_process_id,
                        pc_process,
                        pd_trade_date,
                        pdd.product_id,
                        pdm.product_desc,
                        pdm.base_quantity_unit,
                        qum_pdm.qty_unit,
                        dim.instrument_id,
                        dim.instrument_name,
                        pdd.derivative_def_id,
                        pdd.derivative_def_name,
                        dim.instrument_type_id,
                        irm.instrument_type,
                        pdd.exchange_id,
                        emt.exchange_name,
                        drt.dr_id,
                        drm.period_month,
                        drm.period_year,
                        (case
                          when drm.period_date is null then
                           case
                          when drm.period_month is not null and
                               drm.period_year is not null then
                           to_date('01-' || drm.period_month || '-' ||
                                   drm.period_year,
                                   'dd-Mon-yyyy')
                          else
                           drm.prompt_date
                        end else drm.period_date end),
                        pdd.lot_size,
                        nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit),
                        drt.clearer_profile_id,
                        phd_drt.company_long_name1,
                        drt.deal_type_id,
                        drt.deal_type_id,
                        dim.instrument_type_id,
                        dim.instrument_name,
                        nvl(vcur.main_currency_id, cm_akc.cur_id),
                        nvl(vcur.main_cur_code, cm_akc.cur_code),
                        drt.strike_price,
                        drt.strike_price_unit_id,
                        cm_sp.cur_id,
                        cm_sp.cur_code,
                        pum_sp.weight,
                        qum_sp.qty_unit_id,
                        qum_sp.qty_unit
              --13-March-2012 expired options change end                        
              )
       group by group_id,
                group_name,
                group_cur_id,
                group_cur_code,
                group_qty_unit_id,
                group_qty_unit,
                corporate_id,
                corporate_name,
                base_cur_id,
                base_cur_code,
                process_id,
                process,
                trade_date,
                product_id,
                product_desc,
                base_qty_unit_id,
                base_qty_unit,
                instrument_id,
                instrument_name,
                derivative_def_id,
                derivative_def_name,
                instrument_type_id,
                instrument_type_name,
                exchange_id,
                exchange_name,
                dr_id,
                period_date,
                lot_size,
                lot_size_unit_id,
                clearer_profile_id,
                clearer_name,
                deal_type_id,
                deal_type_name,
                trade_type_id,
                trade_type_name,
                trade_price_cur_id,
                trade_price_cur_code,
                strike_price,
                strike_price_unit_id,
                strike_price_cur_id,
                strike_price_cur_code,
                strike_price_weight,
                strike_price_weight_unit_id,
                strike_price_weight_unit;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_clearer_summary',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  --recordfxpnl
  procedure recordfxpnl(p_corporateid varchar2,
                        p_tradedate   date,
                        p_process_id  varchar2,
                        p_userid      varchar2,
                        p_prcoess     varchar2) is
    cursor c_day_end_fx is
      select ct.internal_treasury_ref_no,
             ct.corporate_id,
             ak.corporate_name,
             ak.base_cur_id corp_base_cur_id,
             ak.base_currency_name corp_base_cur_name,
             ct.process_id,
             ct.trade_date,
             ct.treasury_ref_no ct_ref_no,
             ct.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             ct.dr_id ct_id,
             ct.payment_terms_id,
             dim.instrument_id instrument_id,
             irm.instrument_type instrument_type,
             pdd.derivative_def_id currency_def_id,
             pdd.derivative_def_name derivative_name,
             pdm.product_desc product_name,
             drm.prompt_date prompt_date,
             drm.prompt_date expiry_date,
             crtd_base.amount base_currency_amount,
             crtd_base.trade_type base_cur_buy_sell,
             ak.base_currency_name base_currency,
             round(1 / mv_cfq.rate, 8) market_exchange_rate,
             round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
             crtd_fx.cur_id fx_cur_id,
             crtd_base.cur_id base_cur_id,
             cm_base.cur_code base_cur_code,
             cm_fx.cur_code fx_cur_code,
             crtd_fx.amount fx_currency_amount,
             crtd_fx.trade_type fx_cur_buy_sell,
             oba.account_name,
             oba.account_no,
             phd.companyname bank_name,
             ct.bank_acc_id bank_account,
             ct.bank_charges bank_charges,
             ct.bank_charges_cur_id bank_cur_id,
             null as bank_charges_percent,
             ct.bank_charges_type,
             cm.cur_code bank_charges_currency,
             mv_cfq.dr_id cfq_id,
             mv_cfq.process_date,
             mv_cfq.prompt_date maturity_date,
             mv_cfq.is_spot,
             null as user_entered_fx,
             ct.strategy_id,
             css.strategy_name
        from ct_currency_trade              ct,
             ak_corporate                   ak,
             cpc_corporate_profit_center    cpc,
             eodeom_currency_forward_quotes mv_cfq,
             irm_instrument_type_master     irm,
             pdd_product_derivative_def     pdd,
             dim_der_instrument_master      dim,
             drm_derivative_master          drm,
             pdm_productmaster              pdm,
             crtd_cur_trade_details         crtd_base,
             crtd_cur_trade_details         crtd_fx,
             cm_currency_master             cm_base,
             cm_currency_master             cm,
             cm_currency_master             cm_fx,
             oba_our_bank_accounts          oba,
             phd_profileheaderdetails       phd,
             css_corporate_strategy_setup   css,
             div_der_instrument_valuation   div
       where ct.corporate_id = ak.corporate_id
         and ak.corporate_id = p_corporateid
         and ct.profit_center_id = cpc.profit_center_id
         and ct.corporate_id = mv_cfq.corporate_id
         and ct.dr_id = mv_cfq.dr_id
         and mv_cfq.process_id = p_process_id
         and dim.instrument_id=div.instrument_id--added
         and mv_cfq.price_source_id = div.price_source_id--added
         and div.is_deleted = 'N'--added
            --AND mv_cfq.trade_date <= '08-FEB-2011'
            --   and mv_cfq.trade_date = least(drm.prompt_date, p_tradedate)
         and ct.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and dim.instrument_type_id = irm.instrument_type_id
         and ct.strategy_id = css.strategy_id(+)
         and ct.internal_treasury_ref_no =
             crtd_base.internal_treasury_ref_no
         and crtd_base.cur_id = cm_base.cur_id(+)
         and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
         and crtd_fx.cur_id = cm_fx.cur_id(+)
         and crtd_base.is_base = 'Y'
         and crtd_fx.is_base = 'N'
         and ct.bank_charges_cur_id = cm.cur_id(+)
         and ct.bank_id = phd.profileid(+)
         and ct.bank_id = oba.bank_id(+)
         and ct.bank_acc_id = oba.account_id(+)
         and upper(ct.status) = 'VERIFIED'
         and not exists (select 1
                from v_fxtrade_early_settled fxs
               where fxs.corporate_id = ct.corporate_id
                 and fxs.internal_treasury_ref_no =
                     ct.internal_treasury_ref_no)
         and not exists (select eci.ct_id
                from eci_expired_ct_id eci
               where eci.corporate_id = p_corporateid
                 and eci.process = p_prcoess
                 and eci.trade_date < p_tradedate
                 and eci.ct_id = drm.dr_id)
         and ct.process_id = p_process_id
         and crtd_base.process_id = p_process_id
         and crtd_fx.process_id = p_process_id;
    l_market_exchange_rate       number;
    l_ex_rate_bank_to_home_cur   number;
    l_market_value_in_home_cur   number;
    l_original_value_in_home_cur number;
    l_pnl_value_in_home_cur      number;
    l_bank_charges_in_home_cur   number;
    l_net_pnl_in_home_cur        number;
    l_ex_rate_home_to_corp_cur   number;
    l_pnl_value_in_corp_cur      number;
    l_net_pnl_in_corp_cur        number;
    l_pnl_type                   varchar2(15);
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
  begin
    dbms_output.put_line('currency section starts');
    for fx_rec_new in c_day_end_fx
    loop
      --since there is an outer join with cfq, a null in cfq_id indicates that there is no entry for forward quotes.
      if fx_rec_new.cfq_id is null then
        dbms_output.put_line('currency section entets if');
        vobj_error_log.extend;
        vobj_error_log(vn_eel_error_count) := pelerrorlogobj(p_corporateid,
                                                             'procedure recordfxpnl',
                                                             'M2M-027',
                                                             'Settlement Rate ',
                                                             null,
                                                             --fx_rec_new.ct_ref_no,
                                                             p_prcoess,
                                                             p_userid,
                                                             sysdate,
                                                             p_tradedate);
        sp_insert_error_log(vobj_error_log);
        dbms_output.put_line('Failed with exception');
      end if;
      /*
      if fx_rec_new.expiry_date <= p_tradedate then
        l_pnl_type := 'REALIZED';
      else
        l_pnl_type := 'UNREALIZED';
      end if;*/
      if fx_rec_new.maturity_date <= fx_rec_new.process_date then
        if fx_rec_new.is_spot = 'Y' then
          l_pnl_type := 'REALIZED';
        else
          l_pnl_type := 'UNREALIZED';
        end if;
      else
        l_pnl_type := 'UNREALIZED';
      end if;
      dbms_output.put_line('currency section l_market_exchange_rate');
      l_market_exchange_rate := fx_rec_new.market_exchange_rate;
      --if fx_rec_new.bank_charges_type ='Absolute' then
      if l_pnl_type = 'REALIZED' then
        if (fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id) then
          dbms_output.put_line('fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id');
          l_ex_rate_bank_to_home_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                                 fx_rec_new.bank_cur_id,
                                                                                 fx_rec_new.base_cur_id,
                                                                                 p_tradedate,
                                                                                 1);
          dbms_output.put_line('pkg_general.f_get_converted_currency_amt');
        else
          l_ex_rate_bank_to_home_cur := 1;
        end if;
        if upper(fx_rec_new.bank_charges_type) = 'ABSOLUTE' then
          l_bank_charges_in_home_cur := nvl(fx_rec_new.bank_charges, 0) *
                                        nvl(l_ex_rate_bank_to_home_cur, 0);
        else
          l_bank_charges_in_home_cur := (fx_rec_new.bank_charges / 100) *
                                        fx_rec_new.base_currency_amount;
          l_ex_rate_bank_to_home_cur := 1;
        end if;
      else
        l_bank_charges_in_home_cur := 0;
        l_ex_rate_bank_to_home_cur := 1;
      end if;
      --    l_market_value_in_home_cur   := l_market_exchange_rate *  fx_rec_new.base_currency_amount;
      --      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *  fx_rec_new.base_currency_amount;
      l_market_value_in_home_cur   := l_market_exchange_rate *
                                      fx_rec_new.fx_currency_amount;
      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *
                                      fx_rec_new.fx_currency_amount;
      if fx_rec_new.base_cur_buy_sell = 'Sell' then
        l_pnl_value_in_home_cur := l_market_value_in_home_cur -
                                   l_original_value_in_home_cur;
      else
        l_pnl_value_in_home_cur := -1 * (l_market_value_in_home_cur -
                                   l_original_value_in_home_cur);
      end if;
      l_net_pnl_in_home_cur      := l_pnl_value_in_home_cur -
                                    l_bank_charges_in_home_cur;
      l_ex_rate_home_to_corp_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                             fx_rec_new.base_cur_id,
                                                                             fx_rec_new.corp_base_cur_id,
                                                                             p_tradedate,
                                                                             1);
      l_pnl_value_in_corp_cur    := l_pnl_value_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      l_net_pnl_in_corp_cur      := l_net_pnl_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      dbms_output.put_line('insert into cpd_currency_pnl_daily');
      insert into cpd_currency_pnl_daily
        (ct_internal_ref_no,
         corporate_id,
         corporate_name,
         process_id,
         eod_trade_date,
         trade_date,
         ct_ref_no,
         profit_center_id,
         profit_center_name,
         strategy_id,
         strategy_name,
         ct_id,
         cfq_id,
         instrument_id,
         instrument_name,
         instrument_type,
         currency_def_id,
         derivative_name,
         product_name,
         prompt_date,
         expiry_date,
         pnl_type,
         home_currency_amount,
         home_cur_buy_sell,
         home_currency,
         home_cur_id,
         market_exchange_rate,
         original_exchange_rate,
         fx_cur_id,
         fx_currency,
         fx_currency_amount,
         fx_cur_buy_sell,
         bank_name,
         bank_account,
         account_no,
         account_name,
         bank_charges,
         bank_charges_currency,
         bank_charges_type,
         bank_charges_cur_id,
         bank_charges_percent,
         ex_rate_from_bank_to_home_cur,
         market_value_in_home_currency,
         original_value_in_home_curr,
         pnl_value_in_home_currency,
         bank_charges_in_home_currency,
         net_pnl_in_home_currency,
         user_entered_fx,
         profit_center_short_name,
         corp_cur_id,
         corp_currency,
         corp_fx_rate,
         pnl_in_corp_currency,
         net_pnl_in_corp_currency,
         payment_terms_id)
      values
        (fx_rec_new.internal_treasury_ref_no,
         fx_rec_new.corporate_id,
         fx_rec_new.corporate_name,
         fx_rec_new.process_id,
         p_tradedate,
         fx_rec_new.trade_date,
         fx_rec_new.ct_ref_no,
         fx_rec_new.profit_center_id,
         fx_rec_new.profit_center_name,
         fx_rec_new.strategy_id, --strategy_id
         fx_rec_new.strategy_name, --strategy_name
         fx_rec_new.ct_id,
         fx_rec_new.cfq_id,
         fx_rec_new.instrument_id,
         fx_rec_new.instrument_type, -- Instrument name
         fx_rec_new.instrument_type,
         fx_rec_new.currency_def_id,
         fx_rec_new.derivative_name, --derivative_name
         fx_rec_new.product_name,
         fx_rec_new.prompt_date, --prompt_date
         fx_rec_new.expiry_date,
         l_pnl_type, --pnl type
         fx_rec_new.base_currency_amount,
         fx_rec_new.base_cur_buy_sell,
         fx_rec_new.base_cur_code,
         fx_rec_new.base_cur_id,
         fx_rec_new.market_exchange_rate,
         fx_rec_new.original_exchange_rate,
         fx_rec_new.fx_cur_id,
         fx_rec_new.fx_cur_code,
         fx_rec_new.fx_currency_amount,
         fx_rec_new.fx_cur_buy_sell,
         fx_rec_new.bank_name,
         fx_rec_new.bank_account,
         fx_rec_new.account_no,
         fx_rec_new.account_name,
         fx_rec_new.bank_charges,
         fx_rec_new.bank_charges_currency,
         fx_rec_new.bank_charges_type,
         fx_rec_new.bank_cur_id,
         fx_rec_new.bank_charges_percent,
         l_ex_rate_bank_to_home_cur,
         l_market_value_in_home_cur,
         l_original_value_in_home_cur,
         l_pnl_value_in_home_cur,
         l_bank_charges_in_home_cur,
         l_net_pnl_in_home_cur,
         fx_rec_new.user_entered_fx,
         fx_rec_new.profit_center_short_name,
         fx_rec_new.corp_base_cur_id,
         fx_rec_new.corp_base_cur_name,
         l_ex_rate_home_to_corp_cur,
         l_pnl_value_in_corp_cur,
         l_net_pnl_in_corp_cur,
         fx_rec_new.payment_terms_id);
    end loop;
  exception
    when others then
      dbms_output.put_line('Error in currency section' || sqlerrm);
  end;

  ----added for early deilvery/cancellation fx trades---
  procedure sp_recordfxpnl_edcd(p_corporateid varchar2,
                                p_tradedate   date,
                                p_process_id  varchar2,
                                p_userid      varchar2,
                                p_prcoess     varchar2) is
    cursor c_day_end_fx is
      select ct.internal_treasury_ref_no,
             ct.corporate_id,
             ak.corporate_name,
             ak.base_cur_id corp_base_cur_id,
             ak.base_currency_name corp_base_cur_name,
             ct.process_id,
             ct.trade_date,
             ct.treasury_ref_no ct_ref_no,
             ct.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             ct.dr_id ct_id,
             ct.payment_terms_id,
             dim.instrument_id instrument_id,
             irm.instrument_type instrument_type,
             pdd.derivative_def_id currency_def_id,
             pdd.derivative_def_name derivative_name,
             pdm.product_desc product_name,
             drm.prompt_date prompt_date,
             drm.prompt_date expiry_date,
             crtd_base.amount base_currency_amount,
             crtd_base.trade_type base_cur_buy_sell,
             ak.base_currency_name base_currency,
             round(1 / mv_cfq.rate, 8) market_exchange_rate,
             round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
             crtd_fx.cur_id fx_cur_id,
             crtd_base.cur_id base_cur_id,
             cm_base.cur_code base_cur_code,
             cm_fx.cur_code fx_cur_code,
             crtd_fx.amount fx_currency_amount,
             crtd_fx.trade_type fx_cur_buy_sell,
             oba.account_name,
             oba.account_no,
             phd.companyname bank_name,
             ct.bank_acc_id bank_account,
             ct.bank_charges bank_charges,
             ct.bank_charges_cur_id bank_cur_id,
             null as bank_charges_percent,
             ct.bank_charges_type,
             cm.cur_code bank_charges_currency,
             mv_cfq.dr_id cfq_id,
             mv_cfq.process_date,
             mv_cfq.prompt_date maturity_date,
             mv_cfq.is_spot,
             null as user_entered_fx,
             ct.strategy_id,
             css.strategy_name,
             ----HDL_FX_settlement change start
             ct.outstanding_leg1_amt,
             ct.outstanding_leg2_amt,
             'UNREAL' real_unreal_flag
      --HDL_FX_settlement change end
        from ct_currency_trade              ct,
             ak_corporate                   ak,
             cpc_corporate_profit_center    cpc,
             eodeom_currency_forward_quotes mv_cfq,
             div_der_instrument_valuation   div, --HDL_FX_settlement changes
             irm_instrument_type_master     irm,
             pdd_product_derivative_def     pdd,
             dim_der_instrument_master      dim,
             drm_derivative_master          drm,
             pdm_productmaster              pdm,
             crtd_cur_trade_details         crtd_base,
             crtd_cur_trade_details         crtd_fx,
             cm_currency_master             cm_base,
             cm_currency_master             cm,
             cm_currency_master             cm_fx,
             oba_our_bank_accounts          oba,
             phd_profileheaderdetails       phd,
             css_corporate_strategy_setup   css
       where ct.corporate_id = ak.corporate_id
         and ak.corporate_id = p_corporateid
         and ct.profit_center_id = cpc.profit_center_id
         and ct.corporate_id = mv_cfq.corporate_id
         and ct.dr_id = mv_cfq.dr_id
         and mv_cfq.process_id = p_process_id
            --HDL_FX_settlement changes start
         and div.instrument_id = dim.instrument_id
         and mv_cfq.price_source_id = div.price_source_id
         and div.is_deleted = 'N'
            --HDL_FX_settlement changes end
            --AND mv_cfq.trade_date <= '08-FEB-2011'
            --   and mv_cfq.trade_date = least(drm.prompt_date, p_tradedate)
         and ct.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and dim.instrument_type_id = irm.instrument_type_id
         and ct.strategy_id = css.strategy_id(+)
         and ct.internal_treasury_ref_no =
             crtd_base.internal_treasury_ref_no
         and crtd_base.cur_id = cm_base.cur_id(+)
         and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
         and crtd_fx.cur_id = cm_fx.cur_id(+)
         and crtd_base.is_base = 'Y'
         and crtd_fx.is_base = 'N'
         and ct.bank_charges_cur_id = cm.cur_id(+)
         and ct.bank_id = phd.profileid(+)
         and ct.bank_id = oba.bank_id(+)
         and ct.bank_acc_id = oba.account_id(+)
         and upper(ct.status) = 'VERIFIED'
         and not exists (select eci.ct_id
                from eci_expired_ct_id eci
               where eci.corporate_id = p_corporateid
                 and eci.process = p_prcoess
                 and eci.trade_date < p_tradedate
                 and eci.ct_id = drm.dr_id)
         and ct.process_id = p_process_id
         and exists (select 1
                from v_fxtrade_early_settled /*fxs_fx_settlement*/ fxs
               where fxs.internal_treasury_ref_no =
                     ct.internal_treasury_ref_no
                 and fxs.corporate_id = ct.corporate_id)
            /* and exists ( select 1
                                                                                                                                        from v_fxtrade_early_settled fxs
                                                                                                                                       where fxs.corporate_id = ct.corporate_id
                                                                                                                                       and fxs.internal_treasury_ref_no = ct.internal_treasury_ref_no)*/
         and crtd_base.process_id = p_process_id
         and crtd_fx.process_id = p_process_id
      --HDL_FX_settlement start
      union
      select ct.internal_treasury_ref_no,
             ct.corporate_id,
             ak.corporate_name,
             ak.base_cur_id corp_base_cur_id,
             ak.base_currency_name corp_base_cur_name,
             ct.process_id,
             ct.trade_date,
             ct.treasury_ref_no ct_ref_no,
             ct.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             ct.dr_id ct_id,
             ct.payment_terms_id,
             dim.instrument_id instrument_id,
             irm.instrument_type instrument_type,
             pdd.derivative_def_id currency_def_id,
             pdd.derivative_def_name derivative_name,
             pdm.product_desc product_name,
             drm.prompt_date prompt_date,
             drm.prompt_date expiry_date,
             crtd_base.amount base_currency_amount,
             crtd_base.trade_type base_cur_buy_sell,
             ak.base_currency_name base_currency,
             round(1 / mv_cfq.rate, 8) market_exchange_rate,
             round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
             crtd_fx.cur_id fx_cur_id,
             crtd_base.cur_id base_cur_id,
             cm_base.cur_code base_cur_code,
             cm_fx.cur_code fx_cur_code,
             crtd_fx.amount fx_currency_amount,
             crtd_fx.trade_type fx_cur_buy_sell,
             oba.account_name,
             oba.account_no,
             phd.companyname bank_name,
             ct.bank_acc_id bank_account,
             ct.bank_charges bank_charges,
             ct.bank_charges_cur_id bank_cur_id,
             null as bank_charges_percent,
             ct.bank_charges_type,
             cm.cur_code bank_charges_currency,
             mv_cfq.dr_id cfq_id,
             mv_cfq.process_date,
             mv_cfq.prompt_date maturity_date,
             mv_cfq.is_spot,
             null as user_entered_fx,
             ct.strategy_id,
             css.strategy_name,
             crtd_base.amount - ct.outstanding_leg1_amt outstanding_leg1_amt,
             crtd_fx.amount - ct.outstanding_leg2_amt outstanding_leg2_amt,
             'REAL' real_unreal_flag
        from ct_currency_trade              ct,
             ak_corporate                   ak,
             cpc_corporate_profit_center    cpc,
             eodeom_currency_forward_quotes mv_cfq,
             div_der_instrument_valuation   div,
             irm_instrument_type_master     irm,
             pdd_product_derivative_def     pdd,
             dim_der_instrument_master      dim,
             drm_derivative_master          drm,
             pdm_productmaster              pdm,
             crtd_cur_trade_details         crtd_base,
             crtd_cur_trade_details         crtd_fx,
             cm_currency_master             cm_base,
             cm_currency_master             cm,
             cm_currency_master             cm_fx,
             oba_our_bank_accounts          oba,
             phd_profileheaderdetails       phd,
             css_corporate_strategy_setup   css
       where ct.corporate_id = ak.corporate_id
         and ak.corporate_id = p_corporateid
         and ct.profit_center_id = cpc.profit_center_id
         and ct.corporate_id = mv_cfq.corporate_id
         and ct.dr_id = mv_cfq.dr_id
         and mv_cfq.process_id = p_process_id
         and div.instrument_id = dim.instrument_id
         and mv_cfq.price_source_id = div.price_source_id
         and div.is_deleted = 'N'
         and ct.dr_id = drm.dr_id
         and drm.instrument_id = dim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and dim.instrument_type_id = irm.instrument_type_id
         and ct.strategy_id = css.strategy_id(+)
         and ct.internal_treasury_ref_no =
             crtd_base.internal_treasury_ref_no
         and crtd_base.cur_id = cm_base.cur_id(+)
         and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
         and crtd_fx.cur_id = cm_fx.cur_id(+)
         and crtd_base.is_base = 'Y'
         and crtd_fx.is_base = 'N'
         and ct.bank_charges_cur_id = cm.cur_id(+)
         and ct.bank_id = phd.profileid(+)
         and ct.bank_id = oba.bank_id(+)
         and ct.bank_acc_id = oba.account_id(+)
         and upper(ct.status) = 'VERIFIED'
         and not exists (select eci.ct_id
                from eci_expired_ct_id eci
               where eci.corporate_id = p_corporateid
                 and eci.process = p_prcoess
                 and eci.trade_date < p_tradedate
                 and eci.ct_id = drm.dr_id)
         and ct.process_id = p_process_id
         and crtd_base.process_id = p_process_id
         and crtd_fx.process_id = p_process_id
            --and ct.outstanding_leg1_amt <> crtd_base.amount
         and exists (select 1
                from fxs_fx_settlement     fxs,
                     ct_currency_trade     ct_mat,
                     drm_derivative_master drm_mat
               where fxs.main_trade_int_fx_ref_no =
                     ct.internal_treasury_ref_no
                 and fxs.corporate_id = ct.corporate_id
                 and ct_mat.internal_treasury_ref_no =
                     fxs.matched_trade_int_fx_ref_no
                 and ct_mat.dr_id = drm_mat.dr_id
                 and not exists
               (select eci.ct_id
                        from eci_expired_ct_id eci
                       where eci.corporate_id = p_corporateid
                         and eci.process = p_prcoess
                         and eci.trade_date < p_tradedate
                         and eci.ct_id = drm_mat.dr_id));
    --HDL_FX_settlement end
    --HDL_FX_settlement start
    cursor c_outstanding_amt is
      select crtd_main.internal_treasury_ref_no,
             crtd_main.amount - nvl(match.matched_amount, 0) outstanding_amt_base_cur,
             nvl(match.amount_matched_today, 0) amount_matched_today
        from (select ct.internal_treasury_ref_no,
                     sum(decode(crtd.internal_treasury_ref_no,
                                ct.internal_treasury_ref_no,
                                0,
                                1) * crtd.amount *
                         decode(crtd.is_base, 'Y', 1, 0)) matched_amount,
                     sum(decode(crtd.internal_treasury_ref_no,
                                ct.internal_treasury_ref_no,
                                0,
                                1) * crtd.amount *
                         decode(eci.ct_id, null, 1, 0) *
                         decode(crtd.is_base, 'Y', 1, 0)) amount_matched_today
                from ct_currency_trade      ct,
                     crtd_cur_trade_details crtd,
                     fxs_fx_settlement      fxs,
                     ct_currency_trade      ct_match,
                     drm_derivative_master  drm_match,
                     eci_expired_ct_id      eci
               where ct.internal_treasury_ref_no =
                     fxs.main_trade_int_fx_ref_no
                 and (ct.internal_treasury_ref_no =
                     crtd.internal_treasury_ref_no or
                     crtd.internal_treasury_ref_no =
                     fxs.matched_trade_int_fx_ref_no)
                 and ct_match.internal_treasury_ref_no =
                     fxs.matched_trade_int_fx_ref_no
                 and eci.ct_id(+) = drm_match.dr_id
                 and ct.process_id = p_process_id --'412'
                 and ct_match.process_id = ct.process_id
                 and crtd.process_id = ct.process_id
                 and ct_match.dr_id = drm_match.dr_id
                 and fxs.is_deleted = 'N'
                 and drm_match.prompt_date <= p_tradedate --'17-JAN-2011'
               group by ct.internal_treasury_ref_no) match,
             crtd_cur_trade_details crtd_main
       where crtd_main.process_id = p_process_id --'413'
         and crtd_main.is_base = 'Y'
         and crtd_main.internal_treasury_ref_no =
             match.internal_treasury_ref_no;
    --HDL_FX_settlement end     
    l_market_exchange_rate       number;
    l_ex_rate_bank_to_home_cur   number;
    l_market_value_in_home_cur   number;
    l_original_value_in_home_cur number;
    l_pnl_value_in_home_cur      number;
    l_bank_charges_in_home_cur   number;
    l_net_pnl_in_home_cur        number;
    l_ex_rate_home_to_corp_cur   number;
    l_pnl_value_in_corp_cur      number;
    l_net_pnl_in_corp_cur        number;
    l_pnl_type                   varchar2(15);
    vobj_error_log               tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count           number := 1;
    --HDL_FX_settlement start
    type rec_fxs_txns is record(
      internal_treasury_ref_no varchar2(15 char),
      outstanding_amt_base_cur number(30, 6),
      amount_matched_today     number(30, 6)); --3-may
    type ty_fxs_txns is table of rec_fxs_txns index by ct_currency_trade.internal_treasury_ref_no%type;
    tb_fxs_txns ty_fxs_txns;
    --HDL_FX_settlement end
  begin
    dbms_output.put_line('currency section starts');
    --HDL_FX_settlement start
    begin
      for fx_rec_upd in c_outstanding_amt
      loop
        tb_fxs_txns(fx_rec_upd.internal_treasury_ref_no).internal_treasury_ref_no := fx_rec_upd.internal_treasury_ref_no;
        tb_fxs_txns(fx_rec_upd.internal_treasury_ref_no).outstanding_amt_base_cur := fx_rec_upd.outstanding_amt_base_cur;
        tb_fxs_txns(fx_rec_upd.internal_treasury_ref_no).amount_matched_today := fx_rec_upd.amount_matched_today;
        /*update ct_currency_trade ct
          set ct.outstanding_leg1_amt = fx_rec_upd.outstanding_amt_base_cur,
              ct.outstanding_leg2_amt = ct.fx_rate_base_to_foreign *
                                        fx_rec_upd.outstanding_amt_base_cur
        where ct.internal_treasury_ref_no =
              fx_rec_upd.internal_treasury_ref_no
          and ct.process_id = p_process_id;*/
      end loop;
      for fx_rec_new in c_day_end_fx
      loop
        --if fx_rec_new.real_unreal_flag <> 'REAL' then
        if tb_fxs_txns.exists(fx_rec_new.internal_treasury_ref_no) then
          update ct_currency_trade ct
             set ct.outstanding_leg1_amt = tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                          .outstanding_amt_base_cur,
                 ct.outstanding_leg2_amt = ct.fx_rate_base_to_foreign *
                                           tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                          .outstanding_amt_base_cur
           where ct.internal_treasury_ref_no =
                 fx_rec_new.internal_treasury_ref_no
             and ct.process_id = p_process_id;
        else
          update ct_currency_trade ct
             set ct.outstanding_leg1_amt = fx_rec_new.base_currency_amount,
                 ct.outstanding_leg2_amt = fx_rec_new.fx_currency_amount
           where ct.internal_treasury_ref_no =
                 fx_rec_new.internal_treasury_ref_no
             and ct.process_id = p_process_id;
        end if;
        --end if;
      end loop;
      --tb_fxs_txns.delete;
    end;
    --HDL_FX_settlement end
    for fx_rec_new in c_day_end_fx
    loop
      --since there is an outer join with cfq, a null in cfq_id indicates that there is no entry for forward quotes.
      if fx_rec_new.cfq_id is null then
        dbms_output.put_line('currency section entets if');
        vobj_error_log.extend;
        vobj_error_log(vn_eel_error_count) := pelerrorlogobj(p_corporateid,
                                                             'procedure recordfxpnl',
                                                             'M2M-027',
                                                             'Settlement Rate ',
                                                             null,
                                                             --fx_rec_new.ct_ref_no,
                                                             p_prcoess,
                                                             p_userid,
                                                             sysdate,
                                                             p_tradedate);
        sp_insert_error_log(vobj_error_log);
        dbms_output.put_line('Failed with exception');
      end if;
      /*
      if fx_rec_new.expiry_date <= p_tradedate then
        l_pnl_type := 'REALIZED';
      else
        l_pnl_type := 'UNREALIZED';
      end if;*/
      if fx_rec_new.maturity_date <= fx_rec_new.process_date then
        if fx_rec_new.is_spot = 'Y' then
          l_pnl_type := 'REALIZED';
        else
          l_pnl_type := 'UNREALIZED';
        end if;
      else
        --HDL_FX_settlement start
        if fx_rec_new.real_unreal_flag = 'REAL' then
          l_pnl_type := 'REALIZED';
        else
          --HDL_FX_settlement end     
          l_pnl_type := 'UNREALIZED';
        end if; --HDL_FX_settlement added
      end if;
      --3-may
      if tb_fxs_txns.exists(fx_rec_new.internal_treasury_ref_no) and
         l_pnl_type = 'REALIZED' and fx_rec_new.outstanding_leg1_amt <> 0 then
        fx_rec_new.outstanding_leg1_amt := tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                          .amount_matched_today;
        fx_rec_new.outstanding_leg2_amt := (tb_fxs_txns(fx_rec_new.internal_treasury_ref_no)
                                           .amount_matched_today /
                                            fx_rec_new.original_exchange_rate);
      end if;
      --3-may
      dbms_output.put_line('currency section l_market_exchange_rate');
      l_market_exchange_rate := fx_rec_new.market_exchange_rate;
      --if fx_rec_new.bank_charges_type ='Absolute' then
      if l_pnl_type = 'REALIZED' then
        if (fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id) then
          dbms_output.put_line('fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id');
          l_ex_rate_bank_to_home_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                                 fx_rec_new.bank_cur_id,
                                                                                 fx_rec_new.base_cur_id,
                                                                                 p_tradedate,
                                                                                 1);
          dbms_output.put_line('pkg_general.f_get_converted_currency_amt');
        else
          l_ex_rate_bank_to_home_cur := 1;
        end if;
        if upper(fx_rec_new.bank_charges_type) = 'ABSOLUTE' then
          l_bank_charges_in_home_cur := nvl(fx_rec_new.bank_charges, 0) *
                                        nvl(l_ex_rate_bank_to_home_cur, 0);
        else
          l_bank_charges_in_home_cur := (fx_rec_new.bank_charges / 100) *
                                        fx_rec_new.base_currency_amount;
          l_ex_rate_bank_to_home_cur := 1;
        end if;
      else
        l_bank_charges_in_home_cur := 0;
        l_ex_rate_bank_to_home_cur := 1;
      end if;
      --    l_market_value_in_home_cur   := l_market_exchange_rate *  fx_rec_new.base_currency_amount;
      --      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *  fx_rec_new.base_currency_amount;
      l_market_value_in_home_cur   := l_market_exchange_rate *
                                      fx_rec_new.outstanding_leg2_amt; --fx_rec_new.fx_currency_amount;--HDL_FX_settlement
      l_original_value_in_home_cur := fx_rec_new.original_exchange_rate *
                                      fx_rec_new.outstanding_leg2_amt; --fx_rec_new.fx_currency_amount;--HDL_FX_settlement
      if fx_rec_new.base_cur_buy_sell = 'Sell' then
        l_pnl_value_in_home_cur := l_market_value_in_home_cur -
                                   l_original_value_in_home_cur;
      else
        l_pnl_value_in_home_cur := -1 * (l_market_value_in_home_cur -
                                   l_original_value_in_home_cur);
      end if;
      l_net_pnl_in_home_cur      := l_pnl_value_in_home_cur -
                                    nvl(l_bank_charges_in_home_cur, 0); --l_bank_charges_in_home_cur;--HDL_FX_settlement fix
      l_ex_rate_home_to_corp_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                             fx_rec_new.base_cur_id,
                                                                             fx_rec_new.corp_base_cur_id,
                                                                             p_tradedate,
                                                                             1);
      l_pnl_value_in_corp_cur    := l_pnl_value_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      l_net_pnl_in_corp_cur      := l_net_pnl_in_home_cur *
                                    l_ex_rate_home_to_corp_cur;
      dbms_output.put_line('insert into cpd_currency_pnl_daily');
      if l_net_pnl_in_home_cur <> 0 then
        insert into cpd_currency_pnl_daily
          (ct_internal_ref_no,
           corporate_id,
           corporate_name,
           process_id,
           eod_trade_date,
           trade_date,
           ct_ref_no,
           profit_center_id,
           profit_center_name,
           strategy_id,
           strategy_name,
           ct_id,
           cfq_id,
           instrument_id,
           instrument_name,
           instrument_type,
           currency_def_id,
           derivative_name,
           product_name,
           prompt_date,
           expiry_date,
           pnl_type,
           home_currency_amount,
           home_cur_buy_sell,
           home_currency,
           home_cur_id,
           market_exchange_rate,
           original_exchange_rate,
           fx_cur_id,
           fx_currency,
           fx_currency_amount,
           fx_cur_buy_sell,
           bank_name,
           bank_account,
           account_no,
           account_name,
           bank_charges,
           bank_charges_currency,
           bank_charges_type,
           bank_charges_cur_id,
           bank_charges_percent,
           ex_rate_from_bank_to_home_cur,
           market_value_in_home_currency,
           original_value_in_home_curr,
           pnl_value_in_home_currency,
           bank_charges_in_home_currency,
           net_pnl_in_home_currency,
           user_entered_fx,
           profit_center_short_name,
           corp_cur_id,
           corp_currency,
           corp_fx_rate,
           pnl_in_corp_currency,
           net_pnl_in_corp_currency,
           payment_terms_id)
        values
          (fx_rec_new.internal_treasury_ref_no,
           fx_rec_new.corporate_id,
           fx_rec_new.corporate_name,
           fx_rec_new.process_id,
           p_tradedate,
           fx_rec_new.trade_date,
           fx_rec_new.ct_ref_no,
           fx_rec_new.profit_center_id,
           fx_rec_new.profit_center_name,
           fx_rec_new.strategy_id, --strategy_id
           fx_rec_new.strategy_name, --strategy_name
           fx_rec_new.ct_id,
           fx_rec_new.cfq_id,
           fx_rec_new.instrument_id,
           fx_rec_new.instrument_type, -- Instrument name
           fx_rec_new.instrument_type,
           fx_rec_new.currency_def_id,
           fx_rec_new.derivative_name, --derivative_name
           fx_rec_new.product_name,
           fx_rec_new.prompt_date, --prompt_date
           fx_rec_new.expiry_date,
           l_pnl_type, --pnl type
           fx_rec_new.outstanding_leg1_amt, --fx_rec_new.base_currency_amount,--HDL_FX_settlement change
           fx_rec_new.base_cur_buy_sell,
           fx_rec_new.base_cur_code,
           fx_rec_new.base_cur_id,
           fx_rec_new.market_exchange_rate,
           fx_rec_new.original_exchange_rate,
           fx_rec_new.fx_cur_id,
           fx_rec_new.fx_cur_code,
           fx_rec_new.outstanding_leg2_amt, --fx_rec_new.fx_currency_amount,--HDL_FX_settlement change
           fx_rec_new.fx_cur_buy_sell,
           fx_rec_new.bank_name,
           fx_rec_new.bank_account,
           fx_rec_new.account_no,
           fx_rec_new.account_name,
           fx_rec_new.bank_charges,
           fx_rec_new.bank_charges_currency,
           fx_rec_new.bank_charges_type,
           fx_rec_new.bank_cur_id,
           fx_rec_new.bank_charges_percent,
           l_ex_rate_bank_to_home_cur,
           l_market_value_in_home_cur,
           l_original_value_in_home_cur,
           l_pnl_value_in_home_cur,
           nvl(l_bank_charges_in_home_cur, 0), --l_bank_charges_in_home_cur,--HDL_FX_settlement fix
           l_net_pnl_in_home_cur,
           fx_rec_new.user_entered_fx,
           fx_rec_new.profit_center_short_name,
           fx_rec_new.corp_base_cur_id,
           fx_rec_new.corp_base_cur_name,
           l_ex_rate_home_to_corp_cur,
           l_pnl_value_in_corp_cur,
           l_net_pnl_in_corp_cur,
           fx_rec_new.payment_terms_id);
      end if;
    end loop;
    tb_fxs_txns.delete;
  exception
    when others then
      dbms_output.put_line('Error in currency section' || sqlerrm);
  end;

  procedure sp_calc_price_exposure(pc_corporate_id varchar2,
                                   pd_trade_date   date,
                                   pc_process_id   varchar2,
                                   pc_process      varchar2,
                                   pc_user_id      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_derivative is
      select dpd.corporate_id,
             dpd.process_id process_id,
             dpd.eod_trade_date process_date,
             dpd.derivative_ref_no,
             dpd.internal_derivative_ref_no,
             dpd.trade_type,
             dpd.trade_price,
             dpd.trade_price_cur_code || '/' ||
             decode(nvl(dpd.trade_price_weight, 1),
                    1,
                    null,
                    dpd.trade_price_weight_unit) ||
             dpd.sett_price_weight_unit price_unit_name,
             dpd.trade_price_weight,
             dpd.trade_price_weight_unit,
             dpd.trade_price_weight_unit_id, --QUM-51
             dpd.trade_price_type_id price_type_id,
             dpd.trade_price_unit_id trade_price_unit_id,
             dpd.settlement_price,
             dpd.trade_price_cur_id,
             dpd.sett_price_unit_id sett_price_unit_id, --PUM-161
             dpd.sett_price_cur_code || '/' ||
             decode(nvl(dpd.sett_price_weight, 1),
                    1,
                    null,
                    dpd.sett_price_weight) || dpd.sett_price_weight_unit sett_price_unit,
             decode(nvl(dpd.trade_price_weight, 1),
                    1,
                    null,
                    dpd.trade_price_weight) || dpd.trade_price_weight_unit trade_price_unit,
             dpd.sett_price_weight_unit,
             dpd.sett_price_weight_unit_id,
             dpd.sett_price_cur_id,
             dpd.total_quantity,
             dpd.quantity_unit_id,
             dpd.sett_price_weight,
             dpd.quantity_unit,
             dpd.product_id,
             dpd.product_name,
             dpd.profit_center_id,
             dpd.profit_center_name,
             dpd.profit_center_short_name,
             dpd.base_qty_unit_id,
             dpd.base_qty_unit quantity,
             dpd.pnl_type,
             dpd.price_point_id,
             dpd.instrument_id,
             dpd.instrument_name,
             dpd.dr_id,
             dpd.dr_id_name,
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.index_instrument_id,
             dpd.index_instrument_name,
             dpd.formula_id,
             dpd.formula_name,
             dpd.formula_display,
             nvl(period_year, to_char(period_date, 'yyyy')) period_year,
             nvl(period_month, to_char(period_date, 'Mon')) period_month,
             dpd.period_date,
             dpd.leg_no,
             dpd.gravity,
             dpd.gravity_type,
             dpd.density_mass_qty_unit_id,
             dpd.density_volume_qty_unit_id
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.corporate_id = pc_corporate_id
         and dpd.instrument_type in ('Future', 'Forward')
         and dpd.process_id = pc_process_id;
    vn_contract_value     number(25, 4);
    vn_m2m_amount         number(25, 4);
    vt_tbl_setup          pe_tbl_setup;
    vt_tbl_instrument     pe_tbl_instrument;
    vn_cur_row_cnt        number;
    vn_fb_order_sq        number := 1;
    vt_tbl_instrument_out pe_tbl_instrument;
    vt_tbl_setup_out      pe_tbl_setup;
    vc_error_loc          varchar2(50);
    vc_error_number       number := 0;
  begin
    for cur_derivative_row in cur_derivative
    loop
      -- make one entry for valuation section as exposure type as 'Market' and price status as 'Floating'
      vn_contract_value := 0;
      vn_m2m_amount     := 0;
      vn_contract_value := 0;
      vn_m2m_amount     := round((cur_derivative_row.settlement_price /
                                 nvl(cur_derivative_row.sett_price_weight,
                                      1)) *
                                 pkg_general.f_get_converted_currency_amt(cur_derivative_row.corporate_id,
                                                                          cur_derivative_row.sett_price_cur_id,
                                                                          cur_derivative_row.base_cur_id,
                                                                          cur_derivative_row.process_date,
                                                                          1) *
                                 (pkg_general.fn_mass_volume_qty_conversion(cur_derivative_row.product_id,
                                                                            cur_derivative_row.base_qty_unit_id,
                                                                            cur_derivative_row.sett_price_weight_unit_id,
                                                                            cur_derivative_row.total_quantity,
                                                                            cur_derivative_row.gravity,
                                                                            cur_derivative_row.gravity_type,
                                                                            cur_derivative_row.density_mass_qty_unit_id,
                                                                            cur_derivative_row.density_volume_qty_unit_id)),
                                 4);
      vc_error_number   := 1;
      insert into dpe_derivative_price_exposure
        (corporate_id,
         process_id,
         process_date,
         internal_derivative_ref_no,
         derivative_ref_no,
         leg_no,
         trade_type,
         exposure_type,
         price_status,
         instrumnet_id,
         instrument_name,
         instrument_month_year,
         instrument_month_date,
         exposure_quantity,
         quantity_unit_id,
         quantity_unit,
         final_price,
         final_price_unit,
         final_price_unit_id,
         final_price_staus,
         final_price_qp_status,
         total_value,
         value_cur_id,
         value_cur_code,
         setup_remarks)
      values
        (cur_derivative_row.corporate_id,
         cur_derivative_row.process_id,
         cur_derivative_row.process_date,
         cur_derivative_row.internal_derivative_ref_no,
         cur_derivative_row.derivative_ref_no,
         cur_derivative_row.leg_no,
         decode(cur_derivative_row.trade_type, 'Sell', 'S', 'P'),
         'Market',
         'Floating',
         cur_derivative_row.instrument_id,
         cur_derivative_row.instrument_name,
         cur_derivative_row.period_month,
         '01-' || cur_derivative_row.period_month || '-' ||
         cur_derivative_row.period_year, --v_instrument_month_date
         cur_derivative_row.total_quantity,
         cur_derivative_row.quantity_unit_id,
         cur_derivative_row.quantity_unit,
         cur_derivative_row. settlement_price,
         cur_derivative_row.sett_price_unit, --   v_final_price_unit,
         cur_derivative_row.sett_price_unit_id,
         null, --final_price_staus,
         null, --final_price_qp_status
         vn_m2m_amount * (-1),
         cur_derivative_row.base_cur_id, -- v_value_cur_id,
         cur_derivative_row.base_cur_code, -- v_value_cur_code,
         null);
      vc_error_number := 2;
      /*for fixed price type*/
      if cur_derivative_row.price_type_id = 'Fixed' then
        --calculate the contract value
        vn_contract_value := round((cur_derivative_row.trade_price /
                                   nvl(cur_derivative_row.trade_price_weight,
                                        1)) *
                                   pkg_general.f_get_converted_currency_amt(cur_derivative_row.corporate_id,
                                                                            cur_derivative_row.trade_price_cur_id,
                                                                            cur_derivative_row.base_cur_id,
                                                                            cur_derivative_row.process_date,
                                                                            1) *
                                   (pkg_general.fn_mass_volume_qty_conversion(cur_derivative_row.product_id,
                                                                              cur_derivative_row.base_qty_unit_id,
                                                                              cur_derivative_row.trade_price_weight_unit_id,
                                                                              cur_derivative_row.total_quantity,
                                                                              cur_derivative_row.gravity,
                                                                              cur_derivative_row.gravity_type,
                                                                              cur_derivative_row.density_mass_qty_unit_id,
                                                                              cur_derivative_row.density_volume_qty_unit_id)),
                                   4);
        vc_error_number   := 3;
        --insert the values to the dpe_derivative_price_exposore
        insert into dpe_derivative_price_exposure
          (corporate_id,
           process_id,
           process_date,
           internal_derivative_ref_no,
           derivative_ref_no,
           leg_no,
           trade_type,
           exposure_type,
           price_status,
           instrumnet_id,
           instrument_name,
           instrument_month_year,
           instrument_month_date,
           exposure_quantity,
           quantity_unit_id,
           quantity_unit,
           final_price,
           final_price_unit,
           final_price_unit_id,
           final_price_staus,
           final_price_qp_status,
           total_value,
           value_cur_id,
           value_cur_code,
           setup_remarks)
        values
          (cur_derivative_row.corporate_id,
           cur_derivative_row.process_id,
           cur_derivative_row.process_date,
           cur_derivative_row.internal_derivative_ref_no,
           cur_derivative_row.derivative_ref_no,
           cur_derivative_row.leg_no,
           decode(cur_derivative_row.trade_type, 'Sell', 'S', 'P'),
           'Position',
           'Fixed',
           null, --cur_derivative_row.instrument_id,
           'Fixed Price', -- cur_derivative_row.instrument_name,
           'NA', --cur_derivative_row.period_month,
           null, --v_instrument_month_date,--not e
           cur_derivative_row.total_quantity,
           cur_derivative_row.quantity_unit_id,
           cur_derivative_row.quantity_unit,
           cur_derivative_row.trade_price,
           cur_derivative_row.trade_price_unit, --   v_final_price_unit,
           cur_derivative_row.trade_price_unit_id, --  v_final_price_unit_id,
           null, --v_final_price_staus,
           null, --v_final_price_qp_status,
           vn_contract_value,
           cur_derivative_row.base_cur_id, -- v_value_cur_id,
           cur_derivative_row.base_cur_code, -- v_value_cur_code,
           null); -- v_setup_remarks);
        vc_error_number := 4;
      end if;
      if cur_derivative_row.price_type_id in ('Index', 'Formula') then
        vt_tbl_setup          := pe_tbl_setup();
        vt_tbl_setup_out      := pe_tbl_setup();
        vt_tbl_instrument     := pe_tbl_instrument();
        vt_tbl_instrument_out := pe_tbl_instrument();
        vc_error_loc          := '1';
        if cur_derivative_row.price_type_id = 'Index' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          for cc1 in (select dt.instrument_id,
                             dt.price_source_id,
                             dt.price_point_id,
                             dt.available_price_id,
                             dt.period_type_id,
                             dt.period_month,
                             dt.period_year,
                             dt.period_from_date,
                             dt.period_to_date,
                             dt.no_of_months,
                             dt.no_of_days,
                             dt.fb_period_type,
                             dt.fb_period_sub_type,
                             dt.delivery_period_id,
                             dt.off_day_price,
                             dt.basis,
                             dt.basis_price_unit_id,
                             dt.fx_rate_type,
                             dt.fx_rate_
                        from dt_fbi dt
                       where dt.internal_derivative_ref_no =
                             cur_derivative_row.internal_derivative_ref_no)
          loop
            vc_error_loc := '2';
            vt_tbl_setup.extend;
            vt_tbl_setup(1) := pe_typ_setup(pc_corporate_id,
                                            cc1.instrument_id,
                                            'index',
                                            'index',
                                            '$' || cc1.instrument_id || '$',
                                            pd_trade_date,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            cur_derivative_row.base_cur_id, -- v_value_cur_id,
                                            cur_derivative_row.base_cur_code, --v_value_cur_code,
                                            cur_derivative_row.total_quantity,
                                            cur_derivative_row.base_qty_unit_id,
                                            null);
            vc_error_number := 5;
            vt_tbl_instrument.extend;
            vt_tbl_instrument(vn_cur_row_cnt) := pe_typ_instrument(vn_fb_order_sq,
                                                                   cc1.instrument_id, --index_id
                                                                   cc1.instrument_id,
                                                                   cc1.price_source_id,
                                                                   cc1.price_point_id,
                                                                   cc1.available_price_id,
                                                                   cc1.fb_period_type,
                                                                   cc1.fb_period_sub_type,
                                                                   cc1.period_month,
                                                                   cc1.period_year,
                                                                   cc1.period_from_date,
                                                                   cc1.period_to_date,
                                                                   cc1.no_of_months,
                                                                   cc1.no_of_days,
                                                                   cc1.period_type_id,
                                                                   cc1.delivery_period_id,
                                                                   cc1.off_day_price,
                                                                   cc1.basis,
                                                                   cc1.basis_price_unit_id,
                                                                   cc1.fx_rate_type,
                                                                   cc1.fx_rate_,
                                                                   null, -- avg_price
                                                                   null, --avg_price_unit_id
                                                                   null, --avg_fx_rate
                                                                   null, --avg_conv_price
                                                                   null, --avg_conv_price_wt_basis
                                                                   null, --price_status
                                                                   null, --price_qp_status
                                                                   cur_derivative_row.total_quantity,
                                                                   cur_derivative_row.base_qty_unit_id,
                                                                   null, --avg_value
                                                                   null, --avg_cur_id
                                                                   null, --avg_cur_code
                                                                   null, --price_details(nested obj)
                                                                   null --remarks
                                                                   );
            vc_error_number := 6;
          end loop;
        end if;
        /*for formula*/
        if cur_derivative_row.price_type_id = 'Formula' then
          vn_fb_order_sq := 1;
          vn_cur_row_cnt := 1;
          vc_error_loc   := '3';
          for cc in (select fbs.formula_internal,
                            fbs.formula_display,
                            fbs.formula_name,
                            fbs.formula_id,
                            fbs.price_unit_id
                       from fbs_formula_builder_setup fbs
                      where fbs.formula_id = cur_derivative_row.formula_id)
          loop
            /*constructin the set up type*/
            vc_error_loc := '4';
            vt_tbl_setup.extend;
            vt_tbl_setup(vn_cur_row_cnt) := pe_typ_setup(pc_corporate_id,
                                                         cur_derivative_row.formula_id,
                                                         cur_derivative_row.formula_name,
                                                         cur_derivative_row.formula_display,
                                                         null, --formula_internal
                                                         pd_trade_date,
                                                         null, --basics
                                                         null, --basics_price_unit_id
                                                         null, --final_price
                                                         null, --final_price_unit
                                                         null, --final_price_staus
                                                         null, --final_price_qp_status
                                                         null, --total_value
                                                         cur_derivative_row.base_cur_id,
                                                         cur_derivative_row.base_cur_code,
                                                         cur_derivative_row.total_quantity,
                                                         cur_derivative_row.base_qty_unit_id,
                                                         null --remarks
                                                         );
            vc_error_number := 7;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
          vn_cur_row_cnt := 1;
          vn_fb_order_sq := 1;
          /*constructing the instrument type*/
          for cc1 in (select dt.instrument_id,
                             dt.formula_id,
                             dt.price_source_id,
                             dt.price_point_id,
                             dt.available_price_id,
                             dt.period_type_id,
                             dt.period_month,
                             dt.period_year,
                             dt.period_from_date,
                             dt.period_to_date,
                             dt.no_of_months,
                             dt.no_of_days,
                             dt.fb_period_type,
                             dt.fb_period_sub_type,
                             dt.delivery_period_id,
                             dt.off_day_price,
                             dt.basis,
                             dt.basis_price_unit_id,
                             dt.fx_rate_type,
                             dt.fx_rate_
                        from dt_fbi dt
                       where dt.internal_derivative_ref_no =
                             cur_derivative_row.internal_derivative_ref_no)
          loop
            vc_error_loc := '5';
            vt_tbl_instrument.extend;
            vt_tbl_instrument(vn_cur_row_cnt) := pe_typ_instrument(vn_fb_order_sq,
                                                                   cc1.formula_id, --index_id
                                                                   cc1.instrument_id,
                                                                   cc1.price_source_id,
                                                                   cc1.price_point_id,
                                                                   cc1.available_price_id,
                                                                   cc1.fb_period_type,
                                                                   cc1.fb_period_sub_type,
                                                                   cc1.period_month,
                                                                   cc1.period_year,
                                                                   cc1.period_from_date,
                                                                   cc1.period_to_date,
                                                                   cc1.no_of_months,
                                                                   cc1.no_of_days,
                                                                   cc1.period_type_id,
                                                                   cc1.delivery_period_id,
                                                                   cc1.off_day_price,
                                                                   cc1.basis,
                                                                   cc1.basis_price_unit_id,
                                                                   cc1.fx_rate_type,
                                                                   cc1.fx_rate_,
                                                                   null, --avg_price
                                                                   null, --avg_price_unit_id
                                                                   null, --avg_fx_rate
                                                                   null, --avg_conv_price
                                                                   null, --avg_conv_price_wt_basis
                                                                   null, --price_status
                                                                   null, --price_qp_status
                                                                   cur_derivative_row.total_quantity,
                                                                   cur_derivative_row.base_qty_unit_id,
                                                                   null, --avg_value
                                                                   null, --avg_cur_id
                                                                   null, --avg_cur_code
                                                                   null, --price_details(nested obj)
                                                                   null --remarks
                                                                   );
            vc_error_number := 8;
            vn_fb_order_sq := vn_fb_order_sq + 1;
            vn_cur_row_cnt := vn_cur_row_cnt + 1;
          end loop;
        end if;
        vt_tbl_instrument_out.extend;
        vt_tbl_setup_out.extend;
        dbms_output.put_line('The total no. of recordsin the instrument is  ' ||
                             vt_tbl_instrument.count);
        dbms_output.put_line('Tthe total np of records in the set up is ' ||
                             vt_tbl_setup.count);
        pkg_cdc_price_exposure.sp_calculate_price(vt_tbl_setup,
                                                  vt_tbl_instrument,
                                                  vt_tbl_setup_out,
                                                  vt_tbl_instrument_out,
                                                  cur_derivative_row.product_id,
                                                  cur_derivative_row.gravity,
                                                  cur_derivative_row.gravity_type,
                                                  cur_derivative_row.density_mass_qty_unit_id,
                                                  cur_derivative_row.density_volume_qty_unit_id,
                                                  pc_process_id);
        dbms_output.put_line('The total no. of recordsin the instrument is(After)  ' ||
                             vt_tbl_instrument.count);
        dbms_output.put_line('The total np of records in the set up is(After) ' ||
                             vt_tbl_setup.count);
        if vt_tbl_instrument(1).price_details is null then
          dbms_output.put_line('no data in the nested record');
        else
          dbms_output.put_line('Data is in the nested record ');
        end if;
        -- for cc in (select * from the (select * from cast (vt_tbl_instrument_out as pe_tbl_instrument) from dual) loop
        vc_error_loc := '6';
        for cc in (select *
                     from the (select cast(vt_tbl_instrument_out as
                                           pe_tbl_instrument)
                                 from dual))
        loop
          vc_error_loc := '7';
          if cc.price_details is not null then
            for cc_qp in (select *
                            from the (select cast(cc.price_details as
                                                  pe_tbl_price_exposure)
                                        from dual))
            loop
              vc_error_loc := '8';
              --insert to the DPED_DRT_PRICE_EXP_DETAILS table
              insert into dped_drt_price_exp_details
                (process_id,
                 internal_derivative_ref_no,
                 fb_order_seq,
                 instrument_id,
                 fb_period_type,
                 fb_period_sub_type,
                 fb_period_month,
                 fb_period_year,
                 fb_period_from_date,
                 fb_period_to_date,
                 fb_off_day_price,
                 price_date,
                 price_drid,
                 price_month,
                 price_month_date,
                 is_holiday,
                 price,
                 price_unit_id,
                 price_unit,
                 quotes_price_date,
                 avg_fx_rate,
                 price_exp_status,
                 exp_quantity,
                 exp_quantity_unit_id,
                 exp_quantity_unit,
                 exp_value,
                 exp_cur_id,
                 exp_cur_code,
                 inst_price_status,
                 inst_price_qp_status,
                 remarks)
              values
                (pc_process_id,
                 cur_derivative_row.internal_derivative_ref_no,
                 cc.fb_order_seq,
                 cc_qp.instrument_id,
                 cc.fb_period_type,
                 cc.fb_period_sub_type,
                 cc.period_month,
                 cc.period_year,
                 cc.period_from_date,
                 cc.period_to_date,
                 cc.off_day_price,
                 cc_qp.price_date,
                 cc_qp.price_drid,
                 cc_qp.price_month,
                 cc_qp.price_month_date,
                 trim(cc_qp.is_holiday),
                 cc_qp.price,
                 cc_qp.price_unit_id,
                 cc_qp.price_unit,
                 cc_qp.quotes_price_date,
                 cc_qp.avg_fx_rate,
                 cc_qp.price_exp_status,
                 cc_qp.exp_quantity,
                 cc_qp.exp_quantity_unit_id,
                 cc_qp.exp_quantity_unit,
                 cc_qp.exp_value,
                 cc_qp.exp_cur_id,
                 cc_qp.exp_cur_code,
                 cc.price_status,
                 cc.price_qp_status,
                 cc_qp.status_remarks);
              vc_error_number := 9;
            end loop;
          end if;
        end loop;
      end if;
    end loop;
    commit;
    /*insert into the dpe_derivative_price_exposure*/
    insert into dpe_derivative_price_exposure
      (corporate_id,
       process_id,
       process_date,
       internal_derivative_ref_no,
       derivative_ref_no,
       leg_no,
       trade_type,
       exposure_type,
       price_status,
       instrumnet_id,
       instrument_name,
       instrument_month_year,
       instrument_month_date,
       exposure_quantity,
       quantity_unit_id,
       quantity_unit,
       final_price,
       final_price_unit,
       final_price_unit_id,
       final_price_staus,
       final_price_qp_status,
       total_value,
       value_cur_id,
       value_cur_code,
       setup_remarks)
      select dt.corporate_id corporate_id,
             dped.process_id process_id,
             pd_trade_date process_date,
             dt.internal_derivative_ref_no internal_derivative_ref_no,
             dt.derivative_ref_no derivative_ref_no,
             dt.leg_no leg_no,
             decode(dt.trade_type, 'Sell', 'S', 'P') trade_type,
             'Position' exposure_type,
             dped.price_exp_status price_status,
             dped.instrument_id instrument_id,
             dim.instrument_name instrument_name,
             dped.price_month instrument_month_year,
             dped.price_month_date instrument_month_date,
             sum(dped.exp_quantity) exposure_quantity,
             dped.exp_quantity_unit_id quantity_unit_id,
             dped.exp_quantity_unit quantity_unit,
             (case
               when sum(dped.exp_quantity) <> 0 then
                sum(dped.exp_value) / sum(dped.exp_quantity)
               else
                null
             end) fina_price,
             dped.exp_cur_code || '/' || dped.exp_quantity_unit final_price_unit,
             ppu.internal_price_unit_id final_price_unit_id,
             dped.price_exp_status final_price_staus,
             null final_price_qp_status,
             sum(dped.exp_value) total_value,
             dped.exp_cur_id value_cur_id,
             dped.exp_cur_code value_cur_code,
             null remark
        from dped_drt_price_exp_details dped,
             dim_der_instrument_master  dim,
             dt_derivative_trade        dt,
             ppu_product_price_units    ppu,
             pum_price_unit_master      pum
       where dped.process_id = pc_process_id
         and dped.internal_derivative_ref_no =
             dt.internal_derivative_ref_no
         and dped.process_id = dt.process_id
         and dped.instrument_id = dim.instrument_id
         and dped.exp_cur_id = pum.cur_id
         and dped.exp_quantity_unit_id = pum.weight_unit_id
         and nvl(pum.weight, 1) = 1
         and ppu.product_id = dt.product_id
         and pum.is_active = 'Y'
         and pum.is_deleted = 'N'
         and ppu.is_active = 'Y'
         and ppu.is_deleted = 'N'
         and ppu.price_unit_id = pum.price_unit_id
       group by dt.corporate_id,
                dped.process_id,
                dt.internal_derivative_ref_no,
                dt.derivative_ref_no,
                dt.leg_no,
                dt.trade_type,
                dped.price_exp_status,
                dped.instrument_id,
                dim.instrument_name,
                dped.price_month,
                dped.price_month_date,
                dped.exp_quantity_unit_id,
                dped.exp_quantity_unit,
                dped.exp_cur_id,
                dped.price_unit_id,
                ppu.internal_price_unit_id,
                dped.exp_cur_code;
    vc_error_loc    := '9';
    vc_error_number := 10;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'sp_calc_price_exposure',
                                                           'M2M-013' ||
                                                           '  vc_error_number ' ||
                                                           vc_error_number,
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm ||
                                                           vc_error_loc,
                                                           'DAte is  ' ||
                                                           pd_trade_date ||
                                                           'pc_process_id is ' ||
                                                           pc_process_id ||
                                                           'pc_process ' ||
                                                           pc_process ||
                                                           'pc_user_id ' ||
                                                           pc_user_id,
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end sp_calc_price_exposure;

  procedure sp_calc_average_unrealized_pnl(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_process      varchar2,
                                           pc_user_id      varchar2,
                                           pc_dbd_id       varchar2) as
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    cursor cur_avg is
      select dt.internal_derivative_ref_no,
             dt.derivative_ref_no,
             pd_trade_date eod_trade_date,
             dt.trade_date,
             dt.corporate_id,
             ak.corporate_name,
             dt.trader_id,
             gab.firstname || gab.lastname tradername,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             dt.dr_id,
             dim.instrument_id,
             dim.underlying_instrument_id,
             dim.instrument_name,
             dim.instrument_symbol,
             dim.instrument_type_id,
             irm.instrument_type,
             irm.instrument_display_name,
             dim.instrument_sub_type_id,
             istm.instrument_sub_type,
             pdd.derivative_def_id,
             pdd.derivative_def_name,
             pdd.traded_on,
             pdd.product_id,
             pdm.product_desc,
             emt.exchange_id,
             emt.exchange_name,
             emt.exchange_code,
             pdd.lot_size,
             nvl(pdd.lot_size_unit_id, pdm.base_quantity_unit) lot_size_unit_id,
             qum.qty_unit lot_size_qty_unit,
             drm.price_point_id,
             pp.price_point_name,
             drm.period_type_id,
             pm.period_type_name,
             pm.period_type_display_name,
             drm.period_month,
             drm.period_year,
             drm.period_date,
             drm.prompt_date,
             drm.dr_id_name,
             dt.trade_type,
             dt.deal_type_id,
             dtm.deal_type_name,
             dtm.deal_type_display_name,
             dtm.is_multiple_leg_involved,
             null deal_category,
             null deal_sub_category,
             dt.strategy_id,
             css.strategy_name,
             css.description,
             sdm.strategy_def_name,
             ak.groupid,
             gcd.groupname,
             dt.purpose_id,
             dpm.purpose_name,
             dpm.purpose_display_name,
             dt.external_ref_no,
             dt.cp_profile_id,
             phd_cp.companyname cp_name,
             dt.master_contract_id,
             dt.broker_profile_id,
             nvl(phd_broker.company_long_name1, phd_broker.companyname) broker_name,
             dt.broker_account_id,
             bca_broker.account_name broker_account_name,
             bca_broker.account_type broker_account_type,
             dt.broker_comm_type_id,
             dt.broker_comm_amt,
             dt.broker_comm_cur_id,
             cm_broker_cur.cur_code broker_cur_code,
             dt.clearer_profile_id,
             nvl(phd_clearer.company_long_name1, phd_clearer.companyname) clearer_name,
             dt.clearer_account_id,
             bca_clearer.account_name clearer_account_name,
             bca_clearer.account_type clearer_account_type,
             dt.clearer_comm_type_id,
             dt.clearer_comm_amt,
             dt.clearer_comm_cur_id,
             cm_clearer.cur_code clearer_cur_code,
             dt.product_id product,
             pdm.product_desc productdesc,
             dt.quality_id,
             dt.quantity_unit_id,
             dt.total_lots,
             dt.total_quantity,
             dt.open_lots,
             dt.open_quantity,
             dt.exercised_lots,
             dt.exercised_quantity,
             dt.expired_lots,
             dt.expired_quantity,
             dt.trade_price_type_id,
             dt.trade_price,
             dt.trade_price_unit_id,
             dt.premium_discount,
             dt.premium_discount_price_unit_id,
             pum_pd.cur_id pd_cur_id,
             cm_pd.cur_code pd_cur_code,
             pum_pd.weight pd_weight,
             pum_pd.weight_unit_id pd_weight_unit_id,
             qum_pd.qty_unit pd_qty_unit,
             dt.premium_due_date,
             dt.available_price_id,
             apm.available_price_name,
             dt.average_from_date,
             dt.average_to_date,
             dt.nominee_profile_id,
             phd_nominee.companyname nominee_name,
             dt.leg_no,
             dt.option_expiry_date,
             dt.parent_int_derivative_ref_no,
             dt.market_location_country,
             dt.market_location_state,
             dt.market_location_city,
             dt.is_what_if,
             dt.price_source_id,
             dt.payment_term,
             pym.payment_term payment_term_name,
             dt.payment_due_date,
             dt.closed_lots,
             dt.closed_quantity,
             null as is_new_trade_date,
             dt.status,
             dt.settlement_cur_id,
             cm_settlement.cur_code settlement_cur_code,
             null as in_out_at_money_status,
             null as in_out_at_money_value,
             null as exercise_date,
             null as expiry_date,
             gcd_group.group_cur_id,
             cm_gcd.cur_code group_cur_code,
             gcd_group.group_qty_unit_id,
             qum_gcd.qty_unit gcd_qty_unit,
             qum_pdm.qty_unit_id as base_qty_unit_id,
             qum_pdm.qty_unit as base_qty_unit,
             (case
               when irm.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               else
                irm.instrument_type
             end) as parent_instrument_type,
             null as clearer_comm_in_base,
             null as broker_comm_in_base,
             null as clearer_exch_rate,
             null as broker_exch_rate,
             null as trade_cur_to_base_exch_rate,
             'Unrealized' as pnl_type,
             null as pnl_in_base_cur,
             null as pnl_in_trade_cur,
             cm_base.cur_id as base_cur_id,
             ak.base_currency_name base_cur_code,
             null as underlying_future_dr_id,
             null as underlying_future_dr_id_name,
             null as underlying_future_expiry_date,
             null as underlying_future_quote_price,
             null as underlying_fut_price_unit_id,
             pc_process_id process_id,
             div.price_source_id val_price_source_id,
             div.available_price_id val_available_price_id,
             div.price_unit_id val_price_unit_id,
             dt.traded_on dt_traded_on
        from dt_derivative_trade            dt,
             ak_corporate                   ak,
             ak_corporate_user              aku,
             gab_globaladdressbook          gab,
             cpc_corporate_profit_center    cpc,
             drm_derivative_master          drm,
             dim_der_instrument_master      dim,
             irm_instrument_type_master     irm,
             istm_instr_sub_type_master     istm,
             pdd_product_derivative_def     pdd,
             pdm_productmaster              pdm,
             emt_exchangemaster             emt,
             qum_quantity_unit_master       qum,
             pp_price_point                 pp,
             pm_period_master               pm,
             dtm_deal_type_master           dtm,
             css_corporate_strategy_setup   css,
             sdm_strategy_definition_master sdm,
             gcd_groupcorporatedetails      gcd,
             dpm_derivative_purpose_master  dpm,
             phd_profileheaderdetails       phd_cp,
             phd_profileheaderdetails       phd_broker,
             bca_broker_clearer_account     bca_broker,
             cm_currency_master             cm_broker_cur,
             phd_profileheaderdetails       phd_clearer,
             bca_broker_clearer_account     bca_clearer,
             cm_currency_master             cm_clearer,
             pum_price_unit_master          pum_pd,
             cm_currency_master             cm_pd,
             qum_quantity_unit_master       qum_pd,
             apm_available_price_master     apm,
             phd_profileheaderdetails       phd_nominee,
             pym_payment_terms_master       pym,
             cm_currency_master             cm_settlement,
             gcd_groupcorporatedetails      gcd_group,
             cm_currency_master             cm_gcd,
             qum_quantity_unit_master       qum_gcd,
             qum_quantity_unit_master       qum_pdm,
             cm_currency_master             cm_base,
             div_der_instrument_valuation   div
       where dt.corporate_id = ak.corporate_id
         and dt.trader_id = aku.user_id
         and aku.gabid = gab.gabid
         and dt.profit_center_id = cpc.profit_center_id
         and dt.dr_id = drm.dr_id(+)
         and drm.instrument_id = dim.instrument_id(+)
         and dim.instrument_type_id = irm.instrument_type_id(+)
         and dim.instrument_sub_type_id = istm.instrument_sub_type_id(+)
         and dim.product_derivative_id = pdd.derivative_def_id(+)
         and pdd.product_id = pdm.product_id(+)
         and pdd.exchange_id = emt.exchange_id(+)
         and pdd.lot_size_unit_id = qum.qty_unit_id(+)
         and drm.price_point_id = pp.price_point_id(+)
         and drm.period_type_id = pm.period_type_id(+)
         and dt.deal_type_id = dtm.deal_type_id
         and dt.strategy_id = css.strategy_id
         and css.strategy_def_id = sdm.strategy_def_id
         and ak.groupid = gcd.groupid
         and dt.purpose_id = dpm.purpose_id
         and dt.cp_profile_id = phd_cp.profileid(+)
         and dt.broker_profile_id = phd_broker.profileid(+)
         and dt.broker_account_id = bca_broker.account_id(+)
         and dt.broker_comm_cur_id = cm_broker_cur.cur_id(+)
         and dt.clearer_profile_id = phd_clearer.profileid(+)
         and dt.clearer_account_id = bca_clearer.account_id(+)
         and dt.clearer_comm_cur_id = cm_clearer.cur_id(+)
         and dt.premium_discount_price_unit_id = pum_pd.price_unit_id(+)
         and pum_pd.cur_id = cm_pd.cur_id(+)
         and pum_pd.weight_unit_id = qum_pd.qty_unit_id(+)
         and dt.available_price_id = apm.available_price_id
         and dt.nominee_profile_id = phd_nominee.profileid(+)
         and dt.payment_term = pym.payment_term_id(+)
         and dt.settlement_cur_id = cm_settlement.cur_id(+)
         and ak.groupid = gcd_group.groupid
         and gcd_group.group_cur_id = cm_gcd.cur_id
         and gcd_group.group_qty_unit_id = qum_gcd.qty_unit_id
         and pdm.base_quantity_unit = qum_pdm.qty_unit_id(+)
         and ak.base_currency_name = cm_base.cur_code
         and dim.underlying_instrument_id = div.instrument_id
         and div.is_deleted = 'N'
         and irm.instrument_type = 'Average'
         and dt.is_what_if = 'N'
         and dt.corporate_id = pc_corporate_id
         and dt.trade_date <= pd_trade_date
         and dt.process_id = pc_process_id;
    vn_mk_premium_trade_prm_cur  number;
    vn_trade_premium_trade_cur   number;
    vn_total_market_value_pd_cur number;
    vn_total_trade_pre_trdae_cur number;
    vn_market_price_trade_cur    number;
    vn_market_premium            number;
    vc_market_pre_price_unit_id  varchar2(20);
    vn_qty_in_premium_wt_unit    number;
    vn_pnl_value_in_trade_cur    number;
    vn_premium_to_base_exch_rate number;
    vn_pnl_value_in_base_cur     number;
    vn_net_pnl_in_base_cur       number;
    vn_total_trade_pre_base_cur  number;
    vc_period                    varchar2(50);
    vc_premium_main_cur_id       varchar2(15);
    vc_premium_main_cur_code     varchar2(15);
    vc_cur_id_factor             number;
    vc_caluclate_set_dr_id       varchar2(15);
    vc_caluclate_val_dr_id       varchar2(15);
    vc_caluclate_mar_dr_id       varchar2(15);
    vn_caluclate_set_price       number;
    vn_caluclate_val_price       number;
    vc_cal_set_price_unit_id     varchar2(15);
    vc_cal_val_price_unit_id     varchar2(15);
    qp_startdate                 date;
    qp_enddate                   date;
    vn_count_set_qp              number;
    vn_total_set_price           number;
    vn_total_val_price           number;
    vn_count_val_qp              number;
    vd_3rd_wed_of_qp             varchar2(15);
    vc_is_valid_prompt_date      varchar2(10);
    vc_holiday                   char(1);
    vn_avg_set_price             number;
    vn_avg_val_price             number;
    vn_avg_contract_price        number;
    vn_market_price              number;
    vc_market_price_unit_id      varchar2(15);
    vn_total_market_price        number;
    vn_paid_premium              number;
    vn_total_trade_price         number;
    vn_trade_price_trade_cur     number;
    vc_error_message             varchar2(200);
    workings_days                number;
    vd_quotes_date               date;
  begin
    for cur_avg_rows in cur_avg
    loop
      vn_avg_contract_price       := null;
      vn_total_trade_price        := null;
      vn_market_premium           := null;
      vc_market_pre_price_unit_id := null;
      vn_market_price             := null;
      vc_market_price_unit_id     := null;
      vc_cal_set_price_unit_id    := null;
      if cur_avg_rows.eod_trade_date >= cur_avg_rows.average_from_date and
         cur_avg_rows.eod_trade_date <= cur_avg_rows.average_to_date then
        vc_period := 'During QP';
      elsif cur_avg_rows.eod_trade_date < cur_avg_rows.average_from_date and
            cur_avg_rows.eod_trade_date < cur_avg_rows.average_to_date then
        vc_period := 'Before QP';
      elsif cur_avg_rows.eod_trade_date > cur_avg_rows.average_from_date and
            cur_avg_rows.eod_trade_date > cur_avg_rows.average_to_date then
        vc_period := 'After QP';
      end if;
      vn_qty_in_premium_wt_unit := f_get_converted_quantity(cur_avg_rows.product_id,
                                                            cur_avg_rows.quantity_unit_id,
                                                            cur_avg_rows.pd_weight_unit_id,
                                                            cur_avg_rows.total_quantity);
      pkg_general.sp_get_base_cur_detail(cur_avg_rows.pd_cur_id,
                                         vc_premium_main_cur_id,
                                         vc_premium_main_cur_code,
                                         vc_cur_id_factor);
      vn_premium_to_base_exch_rate := f_currency_exchange_rate(pd_trade_date,
                                                               pc_corporate_id,
                                                               cur_avg_rows.prompt_date,
                                                               vc_premium_main_cur_id,
                                                               cur_avg_rows.base_cur_id);
      ---- finding Market premium
      begin
        select price,
               price_unit_id
          into vn_market_premium,
               vc_market_pre_price_unit_id
          from eodeom_derivative_quote_detail eod_dq,
               cdim_corporate_dim             cdim
         where eod_dq.dr_id = cur_avg_rows.dr_id
           and eod_dq.price_source_id = cur_avg_rows.price_source_id
           and eod_dq.available_price_id = cur_avg_rows.available_price_id
           and eod_dq.eodeom_trade_date = cdim.valid_quote_date
           and eod_dq.price_unit_id = cur_avg_rows.val_price_unit_id
           and eod_dq.process_id = pc_process_id
           and eod_dq.corporate_id = pc_corporate_id
           and cdim.corporate_id = pc_corporate_id
           and cdim.instrument_id = eod_dq.instrument_id;
      exception
        when no_data_found then
          vn_market_premium           := null;
          vc_market_pre_price_unit_id := null;
        when others then
          vc_error_message := 'Missing Data for Market Premium';
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_calc_avg_price',
                                                               'M2M-013',
                                                               vc_error_message ||
                                                               'Code:' ||
                                                               sqlcode ||
                                                               'Message:' ||
                                                               sqlerrm,
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
      end;
      vn_mk_premium_trade_prm_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                               vn_market_premium,
                                                               vc_market_pre_price_unit_id,
                                                               cur_avg_rows.premium_discount_price_unit_id,
                                                               pd_trade_date,
                                                               cur_avg_rows.product_id);
      --- finding market dr_id
      begin
        select drm.dr_id
          into vc_caluclate_mar_dr_id
          from drm_derivative_master drm
         where drm.instrument_id = cur_avg_rows.underlying_instrument_id
           and drm.prompt_date = cur_avg_rows.prompt_date
           and drm.price_point_id is null
           and rownum <= 1
           and drm.is_deleted = 'N';
      exception
        when no_data_found then
          vc_caluclate_mar_dr_id := null;
        when others then
          vc_error_message := 'Missing Data for Market DR-ID';
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_calc_avg_price',
                                                               'M2M-013',
                                                               vc_error_message ||
                                                               'Code:' ||
                                                               sqlcode ||
                                                               'Message:' ||
                                                               sqlerrm,
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
      end;
      --- finding market price
      begin
        select price,
               price_unit_id
          into vn_market_price,
               vc_market_price_unit_id
          from eodeom_derivative_quote_detail eod_dq
         where eod_dq.dr_id = vc_caluclate_mar_dr_id
           and eod_dq.price_source_id = cur_avg_rows.val_price_source_id
           and eod_dq.available_price_id =
               cur_avg_rows.val_available_price_id
           and eod_dq.price_unit_id = cur_avg_rows.val_price_unit_id
           and eod_dq.process_id = pc_process_id
           and eod_dq.corporate_id = pc_corporate_id;
      exception
        when no_data_found then
          vn_market_price         := 0;
          vc_market_price_unit_id := null;
        when others then
          vc_error_message := 'Missing Data for Market Price';
          vobj_error_log.extend;
          vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                               'procedure sp_calc_avg_price',
                                                               'M2M-013',
                                                               vc_error_message ||
                                                               'Code:' ||
                                                               sqlcode ||
                                                               'Message:' ||
                                                               sqlerrm,
                                                               '',
                                                               pc_process,
                                                               pc_user_id,
                                                               sysdate,
                                                               pd_trade_date);
          sp_insert_error_log(vobj_error_log);
      end;
      vn_market_price_trade_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                             vn_market_price,
                                                             vc_market_price_unit_id,
                                                             cur_avg_rows.premium_discount_price_unit_id,
                                                             pd_trade_date,
                                                             cur_avg_rows.product_id);
      if vc_period = 'Before QP' then
        vn_total_market_value_pd_cur := vn_mk_premium_trade_prm_cur *
                                        vn_qty_in_premium_wt_unit *
                                        vc_cur_id_factor;
        vn_trade_premium_trade_cur   := cur_avg_rows.premium_discount;
        vn_total_trade_pre_trdae_cur := vn_trade_premium_trade_cur *
                                        vn_qty_in_premium_wt_unit *
                                        vc_cur_id_factor;
        if cur_avg_rows.trade_type = 'Buy' then
          vn_pnl_value_in_trade_cur := vn_total_market_value_pd_cur -
                                       vn_total_trade_pre_trdae_cur;
        else
          vn_pnl_value_in_trade_cur := vn_total_trade_pre_trdae_cur -
                                       vn_total_market_value_pd_cur;
        end if;
        vn_total_trade_pre_base_cur := vn_total_trade_pre_trdae_cur *
                                       vn_premium_to_base_exch_rate;
        vn_pnl_value_in_base_cur    := vn_pnl_value_in_trade_cur *
                                       vn_premium_to_base_exch_rate;
        vn_net_pnl_in_base_cur      := vn_pnl_value_in_base_cur;
        if vn_net_pnl_in_base_cur is null then
          vn_net_pnl_in_base_cur := 0;
        end if;
        if vn_pnl_value_in_trade_cur is null then
          vn_pnl_value_in_trade_cur := 0;
        end if;
      elsif vc_period = 'During QP' then
        qp_startdate       := cur_avg_rows.average_from_date;
        qp_enddate         := cur_avg_rows.average_to_date;
        vn_count_set_qp    := 0;
        vn_total_set_price := 0;
        --- finding settlement DR_ID
        begin
          select drm.dr_id
            into vc_caluclate_set_dr_id
            from drm_derivative_master drm
           where drm.instrument_id = cur_avg_rows.underlying_instrument_id
             and drm.price_point_id = cur_avg_rows.price_point_id
             and rownum <= 1
             and drm.is_deleted = 'N';
        exception
          when no_data_found then
            vc_caluclate_set_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Settlement DR-ID';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        while qp_startdate <= pd_trade_date
        loop
          ---- finding holidays
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              qp_startdate) then
            vc_holiday := 'Y';
          else
            vc_holiday := 'N';
          end if;
          --- Finding  settlement Price
          if vc_holiday = 'N' then
            begin
              select price,
                     price_unit_id
                into vn_caluclate_set_price,
                     vc_cal_set_price_unit_id
                from (select dqd.price,
                             dqd.price_unit_id,
                             rank() over(order by dq.trade_date desc nulls last) as td_rank
                        from dqd_derivative_quote_detail dqd,
                             dq_derivative_quotes        dq
                       where dqd.dq_id = dq.dq_id
                         and dqd.available_price_id =
                             cur_avg_rows.available_price_id
                         and dq.corporate_id = cur_avg_rows.corporate_id
                         and dq.trade_date <= qp_startdate
                         and dq.instrument_id =
                             cur_avg_rows.underlying_instrument_id
                         and dq.trade_date <= pd_trade_date
                         and dq.price_source_id =
                             cur_avg_rows.price_source_id
                         and dqd.dr_id = vc_caluclate_set_dr_id
                         and dqd.price_unit_id =
                             cur_avg_rows.val_price_unit_id
                         and dq.dbd_id = dqd.dbd_id
                         and dq.dbd_id = pc_dbd_id
                         and dq.is_deleted = 'N'
                         and dqd.is_deleted = 'N')
               where td_rank = 1;
            exception
              when no_data_found then
                vn_caluclate_set_price   := 0;
                vc_cal_set_price_unit_id := null;
              when others then
                vc_error_message := 'Missing Data for Settlement Price';
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_avg_price',
                                                                     'M2M-013',
                                                                     vc_error_message ||
                                                                     'Code:' ||
                                                                     sqlcode ||
                                                                     'Message:' ||
                                                                     sqlerrm,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
            end;
            vn_total_set_price := vn_total_set_price +
                                  vn_caluclate_set_price;
            vn_count_set_qp    := vn_count_set_qp + 1;
          end if;
          qp_startdate := qp_startdate + 1;
        end loop;
        ---- get third wednesday of after QP period
        --  If 3rd Wednesday of QP End date is not a prompt date, get the next valid prompt date
        vd_3rd_wed_of_qp := f_get_next_day(qp_enddate, 'Wed', 3);
        while true
        loop
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              vd_3rd_wed_of_qp) then
            vd_3rd_wed_of_qp := vd_3rd_wed_of_qp + 1;
          else
            exit;
          end if;
        end loop;
        --- get 3rd wednesday  before QP period
        -- Get the quotation date = Trade Date +2 working Days
        if vd_3rd_wed_of_qp < pd_trade_date then
          workings_days  := 0;
          vd_quotes_date := pd_trade_date + 1;
          while workings_days <> 2
          loop
            if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                                vd_quotes_date) then
              vd_quotes_date := vd_quotes_date + 1;
            else
              workings_days := workings_days + 1;
              if workings_days <> 2 then
                vd_quotes_date := vd_quotes_date + 1;
              end if;
            end if;
          end loop;
          vd_3rd_wed_of_qp := vd_quotes_date;
        end if;
        --- finding  valuation dr_id
        begin
          select drm.dr_id
            into vc_caluclate_val_dr_id
            from drm_derivative_master drm
           where drm.instrument_id = cur_avg_rows.underlying_instrument_id
             and drm.prompt_date = vd_3rd_wed_of_qp
             and drm.price_point_id is null
             and rownum <= 1
             and drm.is_deleted = 'N';
        exception
          when no_data_found then
            vc_caluclate_val_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Valuation DR-ID';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        --- finding valuation price
        begin
          select dqd.price,
                 dqd.price_unit_id
            into vn_caluclate_val_price,
                 vc_cal_val_price_unit_id
            from dq_derivative_quotes        dq,
                 dqd_derivative_quote_detail dqd
           where dq.dq_id = dqd.dq_id
             and dqd.dr_id = vc_caluclate_val_dr_id
             and dq.dbd_id = dqd.dbd_id
             and dq.dbd_id = pc_dbd_id
             and dqd.available_price_id =
                 cur_avg_rows.val_available_price_id
             and dq.price_source_id = cur_avg_rows.val_price_source_id
             and dqd.price_unit_id = cur_avg_rows.val_price_unit_id
             and dq.trade_date = pd_trade_date
             and dq.is_deleted = 'N'
             and dqd.is_deleted = 'N';
        exception
          when no_data_found then
            vn_caluclate_val_price := 0;
            vc_caluclate_val_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Valuation Price';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        vn_total_val_price := 0;
        vn_count_val_qp    := 0;
        while qp_startdate <= qp_enddate
        loop
          ---- finding holidays
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              qp_startdate) then
            vc_holiday := 'Y';
          else
            vc_holiday := 'N';
          end if;
          if vc_holiday = 'N' then
            vn_total_val_price := vn_total_val_price +
                                  vn_caluclate_val_price;
            vn_count_val_qp    := vn_count_val_qp + 1;
          end if;
          qp_startdate := qp_startdate + 1;
        end loop;
        vn_total_trade_price     := (vn_total_set_price +
                                    vn_total_val_price) /
                                    (vn_count_set_qp + vn_count_val_qp);
        vn_trade_price_trade_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                              vn_total_trade_price,
                                                              vc_cal_val_price_unit_id,
                                                              cur_avg_rows.premium_discount_price_unit_id,
                                                              pd_trade_date,
                                                              cur_avg_rows.product_id);
        vn_paid_premium          := cur_avg_rows.premium_discount;
        vn_avg_contract_price    := (vn_trade_price_trade_cur +
                                    vn_paid_premium) * vc_cur_id_factor;
        vn_total_market_price    := vn_market_price_trade_cur +
                                    vn_mk_premium_trade_prm_cur *
                                    vc_cur_id_factor;
        if cur_avg_rows.trade_type = 'Buy' then
          vn_pnl_value_in_trade_cur := (vn_total_market_price -
                                       vn_avg_contract_price) *
                                       vn_qty_in_premium_wt_unit;
        else
          vn_pnl_value_in_trade_cur := (vn_avg_contract_price -
                                       vn_total_market_price) *
                                       vn_qty_in_premium_wt_unit;
        end if;
        vn_pnl_value_in_base_cur := vn_pnl_value_in_trade_cur *
                                    vn_premium_to_base_exch_rate;
        vn_net_pnl_in_base_cur   := vn_pnl_value_in_base_cur;
        if vn_net_pnl_in_base_cur is null then
          vn_net_pnl_in_base_cur := 0;
        end if;
        if vn_pnl_value_in_trade_cur is null then
          vn_pnl_value_in_trade_cur := 0;
        end if;
      elsif vc_period = 'After QP' then
        qp_startdate       := cur_avg_rows.average_from_date;
        qp_enddate         := cur_avg_rows.average_to_date;
        vn_total_set_price := 0;
        vn_count_set_qp    := 0;
        --- finding settlement DR_ID
        begin
          select drm.dr_id
            into vc_caluclate_set_dr_id
            from drm_derivative_master drm
           where drm.instrument_id = cur_avg_rows.underlying_instrument_id
             and drm.price_point_id = cur_avg_rows.price_point_id
             and rownum <= 1
             and drm.is_deleted = 'N';
        exception
          when no_data_found then
            vc_caluclate_set_dr_id := null;
          when others then
            vc_error_message := 'Missing Data for Settlement DR-ID';
            vobj_error_log.extend;
            vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                 'procedure sp_calc_avg_price',
                                                                 'M2M-013',
                                                                 vc_error_message ||
                                                                 'Code:' ||
                                                                 sqlcode ||
                                                                 'Message:' ||
                                                                 sqlerrm,
                                                                 '',
                                                                 pc_process,
                                                                 pc_user_id,
                                                                 sysdate,
                                                                 pd_trade_date);
            sp_insert_error_log(vobj_error_log);
        end;
        while qp_startdate <= qp_enddate
        loop
          ---- finding holidays
          if f_is_day_holiday(cur_avg_rows.underlying_instrument_id,
                              qp_startdate) then
            vc_holiday := 'Y';
          else
            vc_holiday := 'N';
          end if;
          --- Finding  settlement Price
          if vc_holiday = 'N' then
            begin
              select price,
                     price_unit_id
                into vn_caluclate_set_price,
                     vc_cal_set_price_unit_id
                from (select dqd.price,
                             dqd.price_unit_id,
                             rank() over(order by dq.trade_date desc nulls last) as td_rank
                        from dqd_derivative_quote_detail dqd,
                             dq_derivative_quotes        dq
                       where dqd.dq_id = dq.dq_id
                         and dqd.available_price_id =
                             cur_avg_rows.available_price_id
                         and dq.corporate_id = cur_avg_rows.corporate_id
                         and dq.trade_date <= qp_startdate
                         and dq.instrument_id =
                             cur_avg_rows.underlying_instrument_id
                         and dq.trade_date <= pd_trade_date
                         and dq.price_source_id =
                             cur_avg_rows.price_source_id
                         and dqd.dr_id = vc_caluclate_set_dr_id
                         and dqd.price_unit_id =
                             cur_avg_rows.val_price_unit_id
                         and dq.dbd_id = dqd.dbd_id
                         and dq.dbd_id = pc_dbd_id
                         and dq.is_deleted = 'N'
                         and dqd.is_deleted = 'N')
               where td_rank = 1;
            exception
              when no_data_found then
                vn_caluclate_set_price   := 0;
                vc_cal_set_price_unit_id := null;
              when others then
                vc_error_message := 'Missing Data for Settlement Price';
                vobj_error_log.extend;
                vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                                     'procedure sp_calc_avg_price',
                                                                     'M2M-013',
                                                                     vc_error_message ||
                                                                     'Code:' ||
                                                                     sqlcode ||
                                                                     'Message:' ||
                                                                     sqlerrm,
                                                                     '',
                                                                     pc_process,
                                                                     pc_user_id,
                                                                     sysdate,
                                                                     pd_trade_date);
                sp_insert_error_log(vobj_error_log);
            end;
            vn_total_set_price := vn_total_set_price +
                                  vn_caluclate_set_price;
            vn_count_set_qp    := vn_count_set_qp + 1;
          end if;
          qp_startdate := qp_startdate + 1;
        end loop;
        vn_total_trade_price     := vn_total_set_price / vn_count_set_qp;
        vn_trade_price_trade_cur := f_get_converted_price_pum(cur_avg_rows.corporate_id,
                                                              vn_total_trade_price,
                                                              vc_cal_set_price_unit_id,
                                                              cur_avg_rows.premium_discount_price_unit_id,
                                                              pd_trade_date,
                                                              cur_avg_rows.product_id);
        vn_paid_premium          := cur_avg_rows.premium_discount;
        vn_avg_contract_price    := (vn_trade_price_trade_cur +
                                    vn_paid_premium) * vc_cur_id_factor;
        vn_total_market_price    := (vn_market_price_trade_cur +
                                    vn_mk_premium_trade_prm_cur) *
                                    vc_cur_id_factor;
        if cur_avg_rows.trade_type = 'Buy' then
          vn_pnl_value_in_trade_cur := (vn_total_market_price -
                                       vn_avg_contract_price) *
                                       vn_qty_in_premium_wt_unit;
        else
          vn_pnl_value_in_trade_cur := (vn_avg_contract_price -
                                       vn_total_market_price) *
                                       vn_qty_in_premium_wt_unit;
        end if;
        vn_pnl_value_in_base_cur := vn_pnl_value_in_trade_cur *
                                    vn_premium_to_base_exch_rate;
        vn_net_pnl_in_base_cur   := vn_pnl_value_in_base_cur;
        if vn_net_pnl_in_base_cur is null then
          vn_net_pnl_in_base_cur := 0;
        end if;
        if vn_pnl_value_in_trade_cur is null then
          vn_pnl_value_in_trade_cur := 0;
        end if;
      end if;
      insert into dpd_derivative_pnl_daily
        (internal_derivative_ref_no,
         derivative_ref_no,
         eod_trade_date,
         trade_date,
         corporate_id,
         corporate_name,
         trader_id,
         trader_name,
         profit_center_id,
         profit_center_name,
         profit_center_short_name,
         dr_id,
         instrument_id,
         instrument_name,
         instrument_symbol,
         instrument_type_id,
         instrument_type,
         instrument_type_name,
         instrument_sub_type_id,
         instrument_sub_type,
         derivative_def_id,
         derivative_def_name,
         derivative_traded_on,
         derivative_prodct_id,
         derivative_prodct_name,
         exchange_id,
         exchange_name,
         exchange_code,
         lot_size,
         lot_size_unit_id,
         lot_size_unit,
         price_point_id,
         price_point_name,
         period_type_id,
         period_type_name,
         period_type_display_name,
         period_month,
         period_year,
         period_date,
         prompt_date,
         dr_id_name,
         trade_type,
         deal_type_id,
         deal_type_name,
         deal_type_display_name,
         is_multiple_leg_involved,
         deal_category,
         deal_sub_category,
         strategy_id,
         strategy_name,
         strategy_desc,
         strategy_def_name,
         group_id,
         group_name,
         purpose_id,
         purpose_name,
         purpose_display_name,
         external_ref_no,
         cp_profile_id,
         cp_name,
         master_contract_id,
         broker_profile_id,
         broker_name,
         broker_account_id,
         broker_account_name,
         broker_account_type,
         broker_comm_type_id,
         broker_comm_amt,
         broker_comm_cur_id,
         broker_comm_cur_code,
         clearer_profile_id,
         clearer_name,
         clearer_account_id,
         clearer_account_name,
         clearer_account_type,
         clearer_comm_type_id,
         clearer_comm_amt,
         clearer_comm_cur_id,
         clearer_comm_cur_code,
         product_id,
         product_name,
         quality_id,
         quantity_unit_id,
         total_lots,
         total_quantity,
         open_lots,
         open_quantity,
         exercised_lots,
         exercised_quantity,
         expired_lots,
         expired_quantity,
         trade_price_type_id,
         trade_price,
         trade_price_unit_id,
         premium_discount,
         premium_discount_price_unit_id,
         pd_price_cur_id,
         pd_price_cur_code,
         pd_price_weight,
         pd_price_weight_unit_id,
         pd_price_weight_unit,
         premium_due_date,
         nominee_profile_id,
         nominee_name,
         leg_no,
         option_expiry_date,
         settlement_price,
         sett_price_unit_id,
         parent_int_derivative_ref_no,
         market_location_country,
         market_location_state,
         market_location_city,
         is_what_if,
         payment_term_id,
         payment_term,
         payment_due_date,
         closed_lots,
         closed_quantity,
         is_new_trade,
         status,
         settlement_cur_id,
         settlement_cur_code,
         in_out_at_money_status,
         in_out_at_money_value,
         exercise_date,
         expiry_date,
         group_cur_id,
         group_cur_code,
         group_qty_unit_id,
         group_qty_unit,
         base_qty_unit_id,
         base_qty_unit,
         parent_instrument_type,
         --clearer_comm_in_base,
         --broker_comm_in_base,
         --clearer_exch_rate,
         --broker_exch_rate,
         trade_cur_to_base_exch_rate,
         pnl_type,
         pnl_in_base_cur,
         pnl_in_trade_cur,
         base_cur_id,
         base_cur_code,
         underlying_future_dr_id,
         underlying_future_dr_id_name,
         underlying_future_expiry_date,
         underlying_future_quote_price,
         underlying_fut_price_unit_id,
         process_id,
         average_from_date,
         average_to_date,
         market_premium,
         market_premium_price_unit_id,
         trade_main_cur_id,
         trade_main_cur_code,
         qp_period,
         avg_contract_price,
         avg_contract_price_unit_id,
         traded_on)
      values
        (cur_avg_rows.internal_derivative_ref_no,
         cur_avg_rows.derivative_ref_no,
         cur_avg_rows.eod_trade_date,
         cur_avg_rows.trade_date,
         cur_avg_rows.corporate_id,
         cur_avg_rows.corporate_name,
         cur_avg_rows.trader_id,
         cur_avg_rows.tradername,
         cur_avg_rows.profit_center_id,
         cur_avg_rows.profit_center_name,
         cur_avg_rows.profit_center_short_name,
         cur_avg_rows.dr_id,
         cur_avg_rows.instrument_id,
         cur_avg_rows.instrument_name,
         cur_avg_rows.instrument_symbol,
         cur_avg_rows.instrument_type_id,
         cur_avg_rows.instrument_type,
         cur_avg_rows.instrument_display_name,
         cur_avg_rows.instrument_sub_type_id,
         cur_avg_rows.instrument_sub_type,
         cur_avg_rows.derivative_def_id,
         cur_avg_rows.derivative_def_name,
         cur_avg_rows.traded_on,
         cur_avg_rows.product_id,
         cur_avg_rows.product_desc,
         cur_avg_rows.exchange_id,
         cur_avg_rows.exchange_name,
         cur_avg_rows.exchange_code,
         cur_avg_rows.lot_size,
         cur_avg_rows.lot_size_unit_id,
         cur_avg_rows.lot_size_qty_unit,
         cur_avg_rows.price_point_id,
         cur_avg_rows.price_point_name,
         cur_avg_rows.period_type_id,
         cur_avg_rows.period_type_name,
         cur_avg_rows.period_type_display_name,
         cur_avg_rows.period_month,
         cur_avg_rows.period_year,
         cur_avg_rows.period_date,
         cur_avg_rows.prompt_date,
         cur_avg_rows.dr_id_name,
         cur_avg_rows.trade_type,
         cur_avg_rows.deal_type_id,
         cur_avg_rows.deal_type_name,
         cur_avg_rows.deal_type_display_name,
         cur_avg_rows.is_multiple_leg_involved,
         cur_avg_rows.deal_category,
         cur_avg_rows.deal_sub_category,
         cur_avg_rows.strategy_id,
         cur_avg_rows.strategy_name,
         cur_avg_rows.description,
         cur_avg_rows.strategy_def_name,
         cur_avg_rows.groupid,
         cur_avg_rows.groupname,
         cur_avg_rows.purpose_id,
         cur_avg_rows.purpose_name,
         cur_avg_rows.purpose_display_name,
         cur_avg_rows.external_ref_no,
         cur_avg_rows.cp_profile_id,
         cur_avg_rows.cp_name,
         cur_avg_rows.master_contract_id,
         cur_avg_rows.broker_profile_id,
         cur_avg_rows.broker_name,
         cur_avg_rows.broker_account_id,
         cur_avg_rows.broker_account_name,
         cur_avg_rows.broker_account_type,
         cur_avg_rows.broker_comm_type_id,
         cur_avg_rows.broker_comm_amt,
         cur_avg_rows.broker_comm_cur_id,
         cur_avg_rows.broker_cur_code,
         cur_avg_rows.clearer_profile_id,
         cur_avg_rows.clearer_name,
         cur_avg_rows.clearer_account_id,
         cur_avg_rows.clearer_account_name,
         cur_avg_rows.clearer_account_type,
         cur_avg_rows.clearer_comm_type_id,
         cur_avg_rows.clearer_comm_amt,
         cur_avg_rows.clearer_comm_cur_id,
         cur_avg_rows.clearer_cur_code,
         cur_avg_rows.product,
         cur_avg_rows.productdesc,
         cur_avg_rows.quality_id,
         cur_avg_rows.quantity_unit_id,
         cur_avg_rows.total_lots,
         cur_avg_rows.total_quantity,
         cur_avg_rows.open_lots,
         cur_avg_rows.open_quantity,
         cur_avg_rows.exercised_lots,
         cur_avg_rows.exercised_quantity,
         cur_avg_rows.expired_lots,
         cur_avg_rows.expired_quantity,
         cur_avg_rows.trade_price_type_id,
         vn_total_trade_price, -- trade price
         vc_cal_set_price_unit_id, -- trade price unit id
         cur_avg_rows.premium_discount,
         cur_avg_rows.premium_discount_price_unit_id,
         cur_avg_rows.pd_cur_id,
         cur_avg_rows.pd_cur_code,
         cur_avg_rows.pd_weight,
         cur_avg_rows.pd_weight_unit_id,
         cur_avg_rows.pd_qty_unit,
         cur_avg_rows.premium_due_date,
         cur_avg_rows.nominee_profile_id,
         cur_avg_rows.nominee_name,
         cur_avg_rows.leg_no,
         cur_avg_rows.option_expiry_date,
         vn_market_price, --- market price
         vc_market_price_unit_id, --- Market price unit id
         cur_avg_rows.parent_int_derivative_ref_no,
         cur_avg_rows.market_location_country,
         cur_avg_rows.market_location_state,
         cur_avg_rows.market_location_city,
         cur_avg_rows.is_what_if,
         cur_avg_rows.payment_term,
         cur_avg_rows.payment_term,
         cur_avg_rows.payment_due_date,
         cur_avg_rows.closed_lots,
         cur_avg_rows.closed_quantity,
         cur_avg_rows.is_new_trade_date,
         cur_avg_rows.status,
         cur_avg_rows.settlement_cur_id,
         cur_avg_rows.settlement_cur_code,
         cur_avg_rows.in_out_at_money_status,
         cur_avg_rows.in_out_at_money_value,
         cur_avg_rows.exercise_date,
         cur_avg_rows.expiry_date,
         cur_avg_rows.group_cur_id,
         cur_avg_rows.group_cur_code,
         cur_avg_rows.group_qty_unit_id,
         cur_avg_rows.gcd_qty_unit,
         cur_avg_rows.base_qty_unit_id,
         cur_avg_rows.base_qty_unit,
         cur_avg_rows.parent_instrument_type,
         --vn_clearer_comm_in_base_cur,
         --vn_broker_comm_in_base_cur,
         --vn_clr_cur_to_base_exch_rate,
         --vn_brokr_cur_to_base_exch_rate,
         vn_premium_to_base_exch_rate,
         cur_avg_rows.pnl_type,
         vn_net_pnl_in_base_cur,
         vn_pnl_value_in_trade_cur,
         cur_avg_rows.base_cur_id,
         cur_avg_rows.base_cur_code,
         cur_avg_rows.underlying_future_dr_id,
         cur_avg_rows.underlying_future_dr_id_name,
         cur_avg_rows.underlying_future_expiry_date,
         cur_avg_rows.underlying_future_quote_price,
         cur_avg_rows.underlying_fut_price_unit_id,
         cur_avg_rows.process_id,
         cur_avg_rows.average_from_date,
         cur_avg_rows.average_to_date,
         vn_market_premium, -- market premium
         vc_market_pre_price_unit_id, -- market premiun unit id
         vc_premium_main_cur_id,
         vc_premium_main_cur_code,
         vc_period,
         vn_avg_contract_price, ---contract price
         vc_cal_set_price_unit_id, -- contract price unit id
         cur_avg_rows.dt_traded_on);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_avg_price',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_calc_pnl_summary(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_user_id      varchar2
                                ----------------------------------------------------------------------------------
                                --        modification history
                                --        modified date                             :1-Mar-2012
                                --        modified by                               :
                                --        modify description                        :Dashboard changes
                                -----------------------------------------------------------------------------------
                                ) as
  begin
    --Dashboard changes 01-Mar-2012 old code comment start
    -- record currency - unrealized pnl
    /*insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Unrealized' sub_section,
             sum(cpd.pnl_value_in_home_currency) pnl,
             cpd.home_cur_id,
             cpd.home_currency
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'UNREALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.home_cur_id,
                cpd.home_currency;
    -- record currency - realized pnl
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Realized' sub_section,
             sum(cpd.pnl_value_in_home_currency) pnl,
             cpd.home_cur_id,
             cpd.home_currency
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'REALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.home_cur_id,
                cpd.home_currency;*/
    --Dashboard changes 01-Mar-2012 old code comment end            
    -- record currency - bank fees pnl
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Bank Fees' sub_section,
             sum(cpd.bank_charges_in_home_currency) pnl,
             cpd.home_cur_id,
             cpd.home_currency
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.home_cur_id,
                cpd.home_currency;
    --Dashboard changes 01-Mar-2012 start
    --inserting for currency PNL summary by instrument realized and unrealized
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       instrument_id,
       instrument_name)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Unrealized' sub_section,
             sum(cpd.pnl_in_corp_currency) pnl,
             cpd.corp_cur_id,
             cpd.corp_currency,
             cpd.currency_def_id,
             cpd.derivative_name
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'UNREALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.corp_cur_id,
                cpd.corp_currency,
                cpd.currency_def_id,
                cpd.derivative_name;
    --record currency - realized pnl                
    insert into cps_curremcy_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       instrument_id,
       instrument_name)
      select cpd.corporate_id,
             cpd.corporate_name,
             cpd.process_id,
             cpd.profit_center_id,
             cpd.profit_center_name,
             cpc.profit_center_short_name,
             'Currency' main_section,
             'Realized' sub_section,
             sum(cpd.pnl_in_corp_currency) pnl,
             cpd.corp_cur_id,
             cpd.corp_currency,
             cpd.currency_def_id,
             cpd.derivative_name
        from cpd_currency_pnl_daily      cpd,
             cpc_corporate_profit_center cpc
       where cpd.profit_center_id = cpc.profit_center_id
         and upper(cpd.pnl_type) = 'REALIZED'
         and cpd.process_id = pc_process_id
         and cpd.corporate_id = pc_corporate_id
       group by cpd.corporate_id,
                cpd.corporate_name,
                cpd.process_id,
                cpd.profit_center_id,
                cpd.profit_center_name,
                cpc.profit_center_short_name,
                cpd.corp_cur_id,
                cpd.corp_currency,
                cpd.currency_def_id,
                cpd.derivative_name;
    --Dashboard changes 01-Mar-2012 end  
    --Dashboard changes 01-Mar-2012 old code comment start         
    -- record derivatives - unrealized pnl
    /*insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Unrealized' as sub_section,
             'Futures' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Unrealized' as sub_section,
             'Forwards' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Unrealized' as sub_section,
             'Options' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Unrealized' as sub_section,
             'Average' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name;
    -- record derivatives - realized pnl
    insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Realized' as sub_section,
             'Futures' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Realized' as sub_section,
             'Forwards' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Realized' as sub_section,
             'Options' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Realized' as sub_section,
             'Average' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name;*/
    --Dashboard changes 01-Mar-2012 old code comment ends            
    --Dashboard changes 01-Mar-2012 start
    --derivative PNL summary by instrument realized and unrealized
    insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Unrealized' as sub_section,
             'Futures' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Unrealized' as sub_section,
             'Forwards' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Unrealized' as sub_section,
             'Options' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Unrealized' as sub_section,
             'Average' entity,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id exchange_id,
             dpd.exchange_name exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.corporate_id = pc_corporate_id
         and dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Unrealized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name;
    -- record derivatives - realized pnl
    insert into dps_derivative_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_short_name,
       profit_center_name,
       main_section,
       sub_section,
       entity,
       pnl,
       pnl_cur_id,
       pnl_cur_code,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Futures' as main_section,
             'Realized' as sub_section,
             'Futures' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Future'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Forwards' as main_section,
             'Realized' as sub_section,
             'Forwards' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Forward'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Options' as main_section,
             'Realized' as sub_section,
             'Options' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type in ('Option Put', 'Option Call')
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             pc_process_id,
             dpd.profit_center_id,
             profit_center_short_name,
             dpd.profit_center_name,
             'Average' as main_section,
             'Realized' as sub_section,
             'Average' entiry,
             sum(dpd.pnl_in_base_cur),
             dpd.base_cur_id,
             dpd.base_cur_code,
             dpd.exchange_id,
             dpd.exchange_name,
             dpd.instrument_id,
             dpd.instrument_name
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and dpd.instrument_type = 'Average'
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                pc_process_id,
                dpd.profit_center_id,
                profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code,
                dpd.exchange_id,
                dpd.exchange_name,
                dpd.instrument_id,
                dpd.instrument_name;
    --Dashboard changes 01-Mar-2012 end            
    -- record realized cost details
    insert into cps_cost_pnl_summary
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       entity,
       cost_amt,
       cost_cur_id,
       cost_cur_code)
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_name,
             dpd.profit_center_short_name,
             'Commissions' main_section,
             'Broker Commission' sub_section,
             'Commissions' entity,
             sum(nvl(dpd.broker_comm_amt, 0) * nvl(dpd.broker_exch_rate, 1)),
             dpd.base_cur_id,
             dpd.base_cur_code
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and nvl(dpd.broker_comm_amt, 0) <> 0
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code
      union all
      select dpd.corporate_id,
             dpd.corporate_name,
             dpd.process_id,
             dpd.profit_center_id,
             dpd.profit_center_name,
             dpd.profit_center_short_name,
             'Commissions' main_section,
             'Clearer Commission' sub_section,
             'Commissions' entity,
             sum(nvl(dpd.clearer_comm_amt, 0) *
                 nvl(dpd.clearer_exch_rate, 1)),
             dpd.base_cur_id,
             dpd.base_cur_code
        from dpd_derivative_pnl_daily dpd
       where dpd.process_id = pc_process_id
         and nvl(dpd.clearer_comm_amt, 0) <> 0
         and dpd.pnl_type = 'Realized'
       group by dpd.corporate_id,
                dpd.corporate_name,
                dpd.process_id,
                dpd.profit_center_id,
                dpd.profit_center_short_name,
                dpd.profit_center_name,
                dpd.base_cur_id,
                dpd.base_cur_code
      union all
      select drt.corporate_id,
             akc.corporate_name,
             tdc.process_id,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             'Commissions' main_section,
             'Broker Commission' sub_section,
             'Commissions' entity,
             sum(nvl(nvl(drt.broker_comm_amt, 0) *
                     pkg_general.f_get_converted_currency_amt(drt.corporate_id,
                                                              drt.broker_comm_cur_id,
                                                              cm.cur_id,
                                                              tdc.trade_date,
                                                              1),
                     0)) pnl,
             cm.cur_id base_cur_id,
             cm.cur_code base_cur_code
        from dt_derivative_trade         drt,
             tdc_trade_date_closure      tdc,
             cpc_corporate_profit_center cpc,
             ak_corporate                akc,
             cm_currency_master          cm
       where drt.corporate_id = tdc.corporate_id
         and drt.corporate_id = akc.corporate_id
         and tdc.corporate_id = pc_corporate_id
         and drt.process_id = tdc.process_id
         and drt.profit_center_id = cpc.profit_center_id
         and akc.base_currency_name = cm.cur_code
         and tdc.process_id = pc_process_id
         and exists
       (select 1
                from dpd_derivative_pnl_daily dpd
               where dpd.process_id = pc_process_id
                 and dpd.derivative_ref_no = drt.derivative_ref_no
                 and dpd.is_new_trade = 'Y')
         and nvl(drt.broker_comm_amt, 0) <> 0
       group by drt.corporate_id,
                akc.corporate_name,
                tdc.process_id,
                cpc.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                cm.cur_id,
                cm.cur_code
      union all
      select drt.corporate_id,
             akc.corporate_name,
             tdc.process_id,
             cpc.profit_center_id,
             cpc.profit_center_name,
             cpc.profit_center_short_name,
             'Commissions' main_section,
             'Clearer Commission' sub_section,
             'Commissions' entity,
             sum(nvl(nvl(drt.clearer_comm_amt, 0) *
                     pkg_general.f_get_converted_currency_amt(drt.corporate_id,
                                                              drt.clearer_comm_cur_id,
                                                              cm.cur_id,
                                                              tdc.trade_date,
                                                              1),
                     0)) pnl,
             cm.cur_id base_cur_id,
             cm.cur_code base_cur_code
        from dt_derivative_trade         drt,
             tdc_trade_date_closure      tdc,
             cpc_corporate_profit_center cpc,
             ak_corporate                akc,
             cm_currency_master          cm
       where drt.corporate_id = tdc.corporate_id
         and drt.corporate_id = akc.corporate_id
         and tdc.corporate_id = pc_corporate_id
         and drt.process_id = tdc.process_id
         and drt.profit_center_id = cpc.profit_center_id
         and akc.base_currency_name = cm.cur_code
         and tdc.process_id = pc_process_id
         and exists
       (select 1
                from dpd_derivative_pnl_daily dpd
               where dpd.process_id = pc_process_id
                 and dpd.derivative_ref_no = drt.derivative_ref_no
                 and dpd.is_new_trade = 'Y')
         and nvl(drt.clearer_comm_amt, 0) <> 0
       group by drt.corporate_id,
                akc.corporate_name,
                tdc.process_id,
                cpc.profit_center_id,
                cpc.profit_center_name,
                cpc.profit_center_short_name,
                cm.cur_id,
                cm.cur_code;
  end;

  procedure sp_calc_daily_trade_pnl(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_process_id   varchar2,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2
                                    ----------------------------------------------------------------------------------
                                    --        modification history
                                    --        modified date                             :1-Mar-2012
                                    --        modified by                               :
                                    --        modify description                        :Dashboard changes
                                    -----------------------------------------------------------------------------------                                    
                                    ) is
    vc_prev_process_id        varchar2(15);
    vd_prev_eod_date          date;
    vd_prev_eom_date          date;
    vd_acc_start_date         date;
    vc_prev_eom_ref_no        varchar2(15);
    vn_base_currency_decimals number;
    vobj_error_log            tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count        number := 1;
  begin
    begin
      select max(t.trade_date) prev_trade_date,
             substr(max(case
                          when t.process_id is not null then
                           to_char(t.trade_date, 'yyyymmddhh24miss') || t.process_id
                        end),
                    15) prev_process_id
        into vd_prev_eod_date,
             vc_prev_process_id
        from tdc_trade_date_closure t
       where t.trade_date < pd_trade_date
         and t.corporate_id = pc_corporate_id
         and t.process = 'EOD';
    exception
      when no_data_found then
        vc_prev_process_id := null;
        vd_prev_eod_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select tdc.trade_date,
             tdc.process_id
        into vd_prev_eom_date,
             vc_prev_eom_ref_no
        from tdc_trade_date_closure tdc
       where tdc.trade_date = (select max(t.trade_date)
                                 from tdc_trade_date_closure t
                                where t.trade_date < pd_trade_date
                                  and t.corporate_id = pc_corporate_id
                                  and t.process = 'EOM')
         and tdc.corporate_id = pc_corporate_id
         and tdc.process = 'EOM';
    exception
      when no_data_found then
        vc_prev_eom_ref_no := null;
        vd_prev_eom_date   := to_date('01-Jan-2000', 'dd-Mon-yyyy');
    end;
    begin
      select start_date
        into vd_acc_start_date
        from cfy_corporate_financial_year@eka_appdb
       where pd_trade_date between start_date and end_date
         and corporateid = pc_corporate_id;
    exception
      when no_data_found then
        vd_acc_start_date := null;
    end;
    begin
      select nvl(decimals, 2)
        into vn_base_currency_decimals
        from ak_corporate       akc,
             cm_currency_master cm
       where akc.corporate_id = pc_corporate_id
         and akc.base_cur_id = cm.cur_id;
    exception
      when others then
        vn_base_currency_decimals := 2;
    end;
    --record unrealized currency contracts details-----------    
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when cps.process_id = vc_prev_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when cps.process_id = pc_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id in (vc_prev_process_id, pc_process_id)
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     sum(cps.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_process_id
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = prev_month_data.month_process_id
                 and cps.corporate_id = prev_month_data.corporate_id
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     sum(cps.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = vc_prev_eom_ref_no
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                main_section,
                sub_section,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                unrealized_section,
                is_pending_approval;
    -----record realized currency contracts details------------ 
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Currency' as main_section,
             'Realized' as sub_section,
             round(sum(prev_month) +
                   decode(pc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(pc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     0 prev_month,
                     sum(cps.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            cps.pnl
                           else
                            0
                         end)) today,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   tdc
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and cps.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                    --#43861
                    --and    tdc.trade_date > vd_prev_eod_date
                 and tdc.trade_date > vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     sum(cps.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     cps.pnl_cur_id,
                     cps.pnl_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   mec
               where cps.corporate_id = mec.corporate_id
                 and cps.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and cps.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit;
    -----record bank fees currency contracts details-------------   
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Currency' as main_section,
             'Bank Fees' as sub_section,
             round(sum(prev_month) +
                   decode(pc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(pc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Bank Fees' as sub_section,
                     0 prev_month,
                     sum(cps.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            cps.pnl
                           else
                            0
                         end)) today,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   tdc
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and cps.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                    --#43861
                    --and    tdc.trade_date > vd_prev_eod_date
                 and tdc.trade_date > vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Bank Fees'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Bank Fees' as sub_section,
                     sum(cps.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     cps.pnl_cur_id,
                     cps.pnl_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   mec
               where cps.corporate_id = mec.corporate_id
                 and cps.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and cps.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Bank Fees'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id, --
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit;
    --Dashboard changes 01-Mar-2012 start
    --currency Unrelalized and realized PNL details by Instrument ID
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval,
             instrument_id,
             instrument_name
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when cps.process_id = vc_prev_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when cps.process_id = pc_process_id then
                            nvl(cps.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id in (vc_prev_process_id, pc_process_id)
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section,
                        cps.instrument_id,
                        cps.instrument_name
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     sum(cps.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_process_id
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = prev_month_data.month_process_id
                 and cps.corporate_id = prev_month_data.corporate_id
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section,
                        cps.instrument_id,
                        cps.instrument_name
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     cps.main_section,
                     cps.sub_section,
                     0 prev_yearend_pnl,
                     sum(cps.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps
               where cps.corporate_id = pc_corporate_id
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Unrealized'
                 and cps.process_id = vc_prev_eom_ref_no
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.main_section,
                        cps.sub_section,
                        cps.instrument_id,
                        cps.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                main_section,
                sub_section,
                t.base_cur_id,
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                unrealized_section,
                is_pending_approval,
                instrument_id,
                instrument_name;
    --record realized currency contracts details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             'Currency' as main_section,
             'Realized' as sub_section,
             round(sum(prev_month) +
                   decode(pc_process, 'EOM', sum(today), sum(month_to_date)),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(sum(prev_month), vn_base_currency_decimals) previous_month_pnl,
             round(decode(pc_process, 'EOM', 0, sum(month_to_date)),
                   vn_base_currency_decimals) month_to_date_pnl,
             round(sum(today), vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             gcd.groupid,
             gcd.groupname,
             gcd.group_cur_id,
             cm_gcd.cur_code,
             gcd.group_qty_unit_id,
             qum_gcd.qty_unit,
             unrealized_section,
             is_pending_approval,
             instrument_id,
             instrument_name
        from (select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     0 prev_month,
                     sum(cps.pnl) month_to_date,
                     sum((case
                           when tdc.trade_date = pd_trade_date then
                            cps.pnl
                           else
                            0
                         end)) today,
                     cps.pnl_cur_id base_cur_id,
                     cps.pnl_cur_code base_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   tdc
               where cps.corporate_id = pc_corporate_id
                 and cps.process_id = tdc.process_id
                 and cps.corporate_id = tdc.corporate_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
                 and cps.instrument_id is not null
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.instrument_id,
                        cps.instrument_name
              union all
              select cps.corporate_id,
                     cps.corporate_name,
                     cps.profit_center_id,
                     cps.profit_center_name,
                     cps.profit_center_short_name,
                     'Currency' as main_section,
                     'Realized' as sub_section,
                     sum(cps.pnl) prev_month,
                     0 month_to_date,
                     0 today,
                     cps.pnl_cur_id,
                     cps.pnl_cur_code,
                     'Currency' unrealized_section,
                     'N' is_pending_approval,
                     cps.instrument_id,
                     cps.instrument_name
                from cps_curremcy_pnl_summary cps,
                     tdc_trade_date_closure   mec
               where cps.corporate_id = mec.corporate_id
                 and cps.process_id = mec.process_id
                 and mec.process = 'EOM'
                 and cps.corporate_id = pc_corporate_id
                 and mec.trade_date >= vd_acc_start_date
                 and mec.trade_date <= vd_prev_eom_date
                 and cps.instrument_id is not null
                 and cps.main_section = 'Currency'
                 and cps.sub_section = 'Realized'
               group by cps.corporate_id,
                        cps.corporate_name,
                        cps.profit_center_id,
                        cps.profit_center_name,
                        cps.profit_center_short_name,
                        cps.pnl_cur_id,
                        cps.pnl_cur_code,
                        cps.instrument_id,
                        cps.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             qum_quantity_unit_master qum_gcd,
             cm_currency_master cm_gcd
       where t.corporate_id = akc.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm_gcd.cur_id(+)
         and gcd.group_qty_unit_id = qum_gcd.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                profit_center_id,
                profit_center_name,
                profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.base_cur_id,
                base_cur_code,
                gcd.groupid,
                gcd.groupname,
                gcd.group_cur_id,
                cm_gcd.cur_code,
                gcd.group_qty_unit_id,
                qum_gcd.qty_unit,
                instrument_id,
                instrument_name;
    --Dashboard changes 01-Mar-2012 end  
    ------Record Futures Unrealized derivative details-------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t1.corporate_id,
             t1.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             ytd_pnl,
             previous_month_pnl,
             mtd_pnl,
             today_pnl,
             t1.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             exchange_id,
             exchange_name
        from (select corporate_id,
                     corporate_name,
                     pc_process_id,
                     profit_center_id,
                     profit_center_name,
                     profit_center_short_name,
                     main_section,
                     sub_section,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) ytd_pnl,
                     round(nvl(sum(prev_eom_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) previous_month_pnl,
                     decode(pc_process,
                            'EOM',
                            0,
                            round(nvl(sum(today_pnl), 0) -
                                  nvl(sum(prev_eom_pnl), 0),
                                  vn_base_currency_decimals)) mtd_pnl,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(decode(pc_process,
                                      'EOM',
                                      0,
                                      sum(prev_eod_pnl)),
                               0),
                           vn_base_currency_decimals) today_pnl,
                     base_cur_id,
                     base_cur_code,
                     unrealized_section,
                     is_pending_approval,
                     exchange_id,
                     exchange_name
                from (select dpd.corporate_id,
                             dpd.corporate_name,
                             dpd.profit_center_id,
                             dpd.profit_center_name,
                             profit_center_short_name,
                             dpd.main_section main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             0 prev_eom_pnl,
                             sum(case
                                   when dpd.process_id = vc_prev_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) prev_eod_pnl,
                             sum(case
                                   when dpd.process_id = pc_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) today_pnl,
                             dpd.pnl_cur_id base_cur_id,
                             dpd.pnl_cur_code base_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpd.exchange_id,
                             dpd.exchange_name
                        from dps_derivative_pnl_summary dpd
                       where dpd.corporate_id = pc_corporate_id
                         and dpd.process_id in
                             (pc_process_id, vc_prev_process_id)
                         and dpd.main_section = 'Futures'
                         and dpd.sub_section = 'Unrealized'
                         and dpd.entity = 'Futures'
                       group by dpd.corporate_id,
                                dpd.corporate_name,
                                dpd.profit_center_id,
                                dpd.profit_center_name,
                                profit_center_short_name,
                                dpd.main_section,
                                dpd.pnl_cur_id,
                                dpd.pnl_cur_code,
                                dpd.exchange_id,
                                dpd.exchange_name
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             sum(dpm.pnl) prev_yearend_pnl,
                             0 prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id exchange_id,
                             dpm.exchange_name exchange_name
                        from dps_derivative_pnl_summary dpm,
                             (select mec1.corporate_id,
                                     max(mec1.trade_date) prev_year_month_end,
                                     substr(max(case
                                                  when mec1.process_id is not null then
                                                   to_char(mec1.trade_date,
                                                           'yyyymmddhh24miss') ||
                                                   mec1.process_id
                                                end),
                                            15) month_process_id
                                from tdc_trade_date_closure mec1
                               where mec1.corporate_id = pc_corporate_id
                                 and mec1.process = 'EOM'
                                 and mec1.trade_date <=
                                     (select max(end_date)
                                        from cfy_corporate_financial_year@eka_appdb
                                       where end_date < vd_acc_start_date
                                         and corporateid = pc_corporate_id)
                               group by mec1.corporate_id) prev_month_data
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id =
                             prev_month_data.month_process_id
                         and dpm.corporate_id = prev_month_data.corporate_id
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name,
                                dpm.main_section
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             sum(dpm.pnl) prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id,
                             dpm.exchange_name
                        from dps_derivative_pnl_summary dpm
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id = vc_prev_eom_ref_no
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.main_section,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name) t
               group by t.corporate_id,
                        t.corporate_name,
                        t.profit_center_id,
                        t.profit_center_name,
                        t.profit_center_short_name,
                        t.main_section,
                        t.sub_section,
                        base_cur_id,
                        unrealized_section,
                        is_pending_approval,
                        base_cur_code,
                        t.exchange_id,
                        t.exchange_name) t1,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t1.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+);
    ------ record forwords unrealized derivative details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Forwards' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ------ record options unrealized derivative details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Options' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ------ record Avarage unrealized derivative details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Average' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ---record futures realized details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (
              -- get today pnl and month todate pnl
              select dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.profit_center_id,
                      dpd.profit_center_name,
                      profit_center_short_name,
                      dpd.main_section,
                      'Realized' as sub_section,
                      sum(case
                            when dpd.process_id = pc_process_id then
                             nvl(dpd.pnl, 0)
                            else
                             0
                          end) today_pnl,
                      sum(nvl(dpd.pnl, 0)) mtd_pnl,
                      0 previous_month_pnl,
                      dpd.pnl_cur_id,
                      dpd.pnl_cur_code,
                      'Futures' unrealized_section,
                      'N' is_pending_approval,
                      dpd.exchange_id,
                      dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                      tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Futures'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Futures'
               group by dpd.corporate_id,
                         dpd.corporate_name,
                         dpd.profit_center_id,
                         dpd.profit_center_name,
                         profit_center_short_name,
                         dpd.main_section,
                         dpd.pnl_cur_id,
                         dpd.pnl_cur_code,
                         dpd.exchange_id,
                         dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Futures' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Futures'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Futures'
                 and dpm.process_id = tdc.process_id
                    --and    tdc.trade_date = vd_prev_eom_date
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    ---record forwords realized details --------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (
              -- get today pnl and month todate pnl
              select dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.profit_center_id,
                      dpd.profit_center_name,
                      profit_center_short_name,
                      dpd.main_section,
                      'Realized' as sub_section,
                      sum(case
                            when dpd.process_id = pc_process_id then
                             nvl(dpd.pnl, 0)
                            else
                             0
                          end) today_pnl,
                      sum(nvl(dpd.pnl, 0)) mtd_pnl,
                      0 previous_month_pnl,
                      dpd.pnl_cur_id,
                      dpd.pnl_cur_code,
                      'Forwards' unrealized_section,
                      'N' is_pending_approval,
                      dpd.exchange_id,
                      dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                      tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                         dpd.corporate_name,
                         dpd.profit_center_id,
                         dpd.profit_center_name,
                         profit_center_short_name,
                         dpd.main_section,
                         dpd.pnl_cur_id,
                         dpd.pnl_cur_code,
                         dpd.exchange_id,
                         dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Forwards'
                 and dpm.process_id = tdc.process_id
                    --and    tdc.trade_date = vd_prev_eom_date
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    -------record options realized details------------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                    --and    dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Options'
                    --and    tdc.trade_date between vd_acc_start_date and prev_month_data.prev_month_end
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    -------record Avarage realized details------------------
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                    --and    dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Average'
                    --and    tdc.trade_date between vd_acc_start_date and prev_month_data.prev_month_end
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit;
    --Dashboard changes 01-Mar-2012 start
    --derivatives Unrelalized and realized PNL details by Instrument ID
    --Record Futures Unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t1.corporate_id,
             t1.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             ytd_pnl,
             previous_month_pnl,
             mtd_pnl,
             today_pnl,
             t1.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             exchange_id,
             exchange_name,
             instrument_id,
             instrument_name
        from (select corporate_id,
                     corporate_name,
                     pc_process_id,
                     profit_center_id,
                     profit_center_name,
                     profit_center_short_name,
                     main_section,
                     sub_section,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) ytd_pnl,
                     round(nvl(sum(prev_eom_pnl), 0) -
                           nvl(sum(prev_yearend_pnl), 0),
                           vn_base_currency_decimals) previous_month_pnl,
                     decode(pc_process,
                            'EOM',
                            0,
                            round(nvl(sum(today_pnl), 0) -
                                  nvl(sum(prev_eom_pnl), 0),
                                  vn_base_currency_decimals)) mtd_pnl,
                     round(nvl(sum(today_pnl), 0) -
                           nvl(decode(pc_process,
                                      'EOM',
                                      0,
                                      sum(prev_eod_pnl)),
                               0),
                           vn_base_currency_decimals) today_pnl,
                     base_cur_id,
                     base_cur_code,
                     unrealized_section,
                     is_pending_approval,
                     exchange_id,
                     exchange_name,
                     instrument_id,
                     instrument_name
                from (select dpd.corporate_id,
                             dpd.corporate_name,
                             dpd.profit_center_id,
                             dpd.profit_center_name,
                             profit_center_short_name,
                             dpd.main_section main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             0 prev_eom_pnl,
                             sum(case
                                   when dpd.process_id = vc_prev_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) prev_eod_pnl,
                             sum(case
                                   when dpd.process_id = pc_process_id then
                                    nvl(dpd.pnl, 0)
                                   else
                                    0
                                 end) today_pnl,
                             dpd.pnl_cur_id base_cur_id,
                             dpd.pnl_cur_code base_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpd.exchange_id,
                             dpd.exchange_name,
                             dpd.instrument_id,
                             dpd.instrument_name
                        from dps_derivative_pnl_summary dpd
                       where dpd.corporate_id = pc_corporate_id
                         and dpd.process_id in
                             (pc_process_id, vc_prev_process_id)
                         and dpd.main_section = 'Futures'
                         and dpd.sub_section = 'Unrealized'
                         and dpd.entity = 'Futures'
                       group by dpd.corporate_id,
                                dpd.corporate_name,
                                dpd.profit_center_id,
                                dpd.profit_center_name,
                                profit_center_short_name,
                                dpd.main_section,
                                dpd.pnl_cur_id,
                                dpd.pnl_cur_code,
                                dpd.exchange_id,
                                dpd.exchange_name,
                                dpd.instrument_id,
                                dpd.instrument_name
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             sum(dpm.pnl) prev_yearend_pnl,
                             0 prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id exchange_id,
                             dpm.exchange_name exchange_name,
                             dpm.instrument_id,
                             dpm.instrument_name
                        from dps_derivative_pnl_summary dpm,
                             (select mec1.corporate_id,
                                     max(mec1.trade_date) prev_year_month_end,
                                     substr(max(case
                                                  when mec1.process_id is not null then
                                                   to_char(mec1.trade_date,
                                                           'yyyymmddhh24miss') ||
                                                   mec1.process_id
                                                end),
                                            15) month_process_id
                                from tdc_trade_date_closure mec1
                               where mec1.corporate_id = pc_corporate_id
                                 and mec1.process = 'EOM'
                                 and mec1.trade_date <=
                                     (select max(end_date)
                                        from cfy_corporate_financial_year@eka_appdb
                                       where end_date < vd_acc_start_date
                                         and corporateid = pc_corporate_id)
                               group by mec1.corporate_id) prev_month_data
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id =
                             prev_month_data.month_process_id
                         and dpm.corporate_id = prev_month_data.corporate_id
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name,
                                dpm.main_section,
                                dpm.instrument_id,
                                dpm.instrument_name
                      union all
                      select dpm.corporate_id,
                             dpm.corporate_name,
                             dpm.profit_center_id,
                             dpm.profit_center_name,
                             profit_center_short_name,
                             dpm.main_section,
                             'Unrealized' as sub_section,
                             0 prev_yearend_pnl,
                             sum(dpm.pnl) prev_eom_pnl,
                             0 prev_eod_pnl,
                             0 today_pnl,
                             dpm.pnl_cur_id,
                             dpm.pnl_cur_code,
                             'Futures' unrealized_section,
                             'N' is_pending_approval,
                             dpm.exchange_id,
                             dpm.exchange_name,
                             dpm.instrument_id,
                             dpm.instrument_name
                        from dps_derivative_pnl_summary dpm
                       where dpm.corporate_id = pc_corporate_id
                         and dpm.process_id = vc_prev_eom_ref_no
                         and dpm.main_section = 'Futures'
                         and dpm.sub_section = 'Unrealized'
                         and dpm.entity = 'Futures'
                       group by dpm.corporate_id,
                                dpm.corporate_name,
                                dpm.profit_center_id,
                                dpm.profit_center_name,
                                profit_center_short_name,
                                dpm.main_section,
                                dpm.pnl_cur_id,
                                dpm.pnl_cur_code,
                                dpm.exchange_id,
                                dpm.exchange_name,
                                dpm.instrument_id,
                                dpm.instrument_name) t
               group by t.corporate_id,
                        t.corporate_name,
                        t.profit_center_id,
                        t.profit_center_name,
                        t.profit_center_short_name,
                        t.main_section,
                        t.sub_section,
                        base_cur_id,
                        unrealized_section,
                        is_pending_approval,
                        base_cur_code,
                        t.exchange_id,
                        t.exchange_name,
                        t.instrument_id,
                        t.instrument_name) t1,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t1.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+);
    --record forwords unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Forwards' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Forwards'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record options unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Options' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Options'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record Avarage unrealized derivative details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             round(nvl(sum(today_pnl), 0) - nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) year_to_date_pnl,
             round(nvl(sum(prev_eom_pnl), 0) -
                   nvl(sum(prev_yearend_pnl), 0),
                   vn_base_currency_decimals) prev_month_pnl,
             decode(pc_process,
                    'EOM',
                    0,
                    round(nvl(sum(today_pnl), 0) - nvl(sum(prev_eom_pnl), 0),
                          vn_base_currency_decimals)) month_to_date_pnl,
             round(nvl(sum(today_pnl), 0) -
                   nvl(decode(pc_process, 'EOM', 0, sum(prev_eod_pnl)), 0),
                   vn_base_currency_decimals) today_pnl,
             t.base_cur_id,
             base_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             'Average' unrealized_section,
             'N' is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     0 prev_eom_pnl,
                     sum(case
                           when dpd.process_id = vc_prev_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) prev_eod_pnl,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     dpd.pnl_cur_id base_cur_id,
                     dpd.pnl_cur_code base_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd
               where dpd.corporate_id = pc_corporate_id
                 and dpd.process_id in (pc_process_id, vc_prev_process_id)
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Unrealized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     sum(dpm.pnl) prev_yearend_pnl,
                     0 prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     (select mec1.corporate_id,
                             max(mec1.trade_date) prev_year_month_end,
                             substr(max(case
                                          when mec1.process_id is not null then
                                           to_char(mec1.trade_date, 'yyyymmddhh24miss') ||
                                           mec1.process_id
                                        end),
                                    15) month_eod_ref_no
                        from tdc_trade_date_closure mec1
                       where mec1.corporate_id = pc_corporate_id
                         and mec1.process = 'EOM'
                         and mec1.trade_date <=
                             (select max(end_date)
                                from cfy_corporate_financial_year@eka_appdb
                               where end_date < vd_acc_start_date
                                 and corporateid = pc_corporate_id)
                       group by mec1.corporate_id) prev_month_data
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = prev_month_data.month_eod_ref_no
                 and dpm.corporate_id = prev_month_data.corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     'Unrealized' as sub_section,
                     0 prev_yearend_pnl,
                     sum(dpm.pnl) prev_eom_pnl,
                     0 prev_eod_pnl,
                     0 today_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = vc_prev_eom_ref_no
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Unrealized'
                 and dpm.entity = 'Average'
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                t.base_cur_id,
                base_cur_code,
                unrealized_section,
                is_pending_approval,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record futures realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Futures' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Futures'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Futures'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Futures' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Futures'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Futures'
                 and dpm.process_id = tdc.process_id
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record forwords realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (
              -- get today pnl and month todate pnl
              select dpd.corporate_id,
                      dpd.corporate_name,
                      dpd.profit_center_id,
                      dpd.profit_center_name,
                      profit_center_short_name,
                      dpd.main_section,
                      'Realized' as sub_section,
                      sum(case
                            when dpd.process_id = pc_process_id then
                             nvl(dpd.pnl, 0)
                            else
                             0
                          end) today_pnl,
                      sum(nvl(dpd.pnl, 0)) mtd_pnl,
                      0 previous_month_pnl,
                      dpd.pnl_cur_id,
                      dpd.pnl_cur_code,
                      'Forwards' unrealized_section,
                      'N' is_pending_approval,
                      dpd.exchange_id,
                      dpd.exchange_name,
                      dpd.instrument_id,
                      dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                      tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Forwards'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Forwards'
               group by dpd.corporate_id,
                         dpd.corporate_name,
                         dpd.profit_center_id,
                         dpd.profit_center_name,
                         profit_center_short_name,
                         dpd.main_section,
                         dpd.pnl_cur_id,
                         dpd.pnl_cur_code,
                         dpd.exchange_id,
                         dpd.exchange_name,
                         dpd.instrument_id,
                         dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Forwards' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id exchange_id,
                     dpm.exchange_name exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Forwards'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Forwards'
                 and dpm.process_id = tdc.process_id
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.main_section,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record options realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Options'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Options'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Options' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Options'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Options'
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --record Avarage realized details
    insert into dtp_derivative_trade_pnl
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name,
       instrument_id,
       instrument_name)
      select t.corporate_id,
             t.corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             pnl_cur_id,
             pnl_cur_code,
             akc.groupid,
             gcd.groupname,
             cm.cur_id,
             cm.cur_code,
             qum.qty_unit_id,
             qum.qty_unit,
             unrealized_section,
             is_pending_approval,
             t.exchange_id,
             t.exchange_name,
             t.instrument_id,
             t.instrument_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     profit_center_short_name,
                     dpd.main_section,
                     'Realized' as sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            nvl(dpd.pnl, 0)
                           else
                            0
                         end) today_pnl,
                     sum(nvl(dpd.pnl, 0)) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.pnl_cur_id,
                     dpd.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpd.exchange_id,
                     dpd.exchange_name,
                     dpd.instrument_id,
                     dpd.instrument_name
                from dps_derivative_pnl_summary dpd,
                     tdc_trade_date_closure     tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
                 and dpd.main_section = 'Average'
                 and dpd.sub_section = 'Realized'
                 and dpd.entity = 'Average'
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        profit_center_short_name,
                        dpd.main_section,
                        dpd.pnl_cur_id,
                        dpd.pnl_cur_code,
                        dpd.exchange_id,
                        dpd.exchange_name,
                        dpd.instrument_id,
                        dpd.instrument_name
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     profit_center_short_name,
                     dpm.main_section,
                     'Realized' as sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(nvl(dpm.pnl, 0)) previous_month_pnl,
                     dpm.pnl_cur_id,
                     dpm.pnl_cur_code,
                     'Average' unrealized_section,
                     'N' is_pending_approval,
                     dpm.exchange_id,
                     dpm.exchange_name,
                     dpm.instrument_id,
                     dpm.instrument_name
                from dps_derivative_pnl_summary dpm,
                     tdc_trade_date_closure     tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.main_section = 'Average'
                 and dpm.sub_section = 'Realized'
                 and dpm.entity = 'Average'
                 and tdc.trade_date >= vd_acc_start_date
                 and tdc.trade_date <= vd_prev_eom_date
                 and dpm.process_id = tdc.process_id
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        profit_center_short_name,
                        dpm.main_section,
                        dpm.pnl_cur_id,
                        dpm.pnl_cur_code,
                        dpm.exchange_id,
                        dpm.exchange_name,
                        dpm.instrument_id,
                        dpm.instrument_name) t,
             gcd_groupcorporatedetails gcd,
             ak_corporate akc,
             cm_currency_master cm,
             qum_quantity_unit_master qum
       where akc.corporate_id = t.corporate_id
         and akc.groupid = gcd.groupid
         and gcd.group_cur_id = cm.cur_id(+)
         and gcd.group_qty_unit_id = qum.qty_unit_id(+)
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                unrealized_section,
                is_pending_approval,
                t.main_section,
                t.sub_section,
                pnl_cur_id,
                pnl_cur_code,
                t.exchange_id,
                t.exchange_name,
                akc.groupid,
                gcd.groupname,
                cm.cur_id,
                cm.cur_code,
                qum.qty_unit_id,
                qum.qty_unit,
                t.instrument_id,
                t.instrument_name;
    --Dashboard changes 01-Mar-2012 end            
    ------ records broker/clearer commissions daily
    insert into tpd_trade_pnl_daily
      (corporate_id,
       corporate_name,
       process_id,
       profit_center_id,
       profit_center_name,
       profit_center_short_name,
       main_section,
       sub_section,
       year_to_date_pnl,
       prev_month_pnl,
       month_to_date_pnl,
       today_pnl,
       pnl_cur_id,
       pnl_cur_code,
       group_id,
       group_name,
       group_cur_id,
       group_cur_code,
       group_qty_unit_id,
       group_qty_unit,
       base_qty_unit_id,
       base_qty_unit,
       unrealized_section,
       is_pending_approval,
       exchange_id,
       exchange_name)
      select corporate_id,
             corporate_name,
             pc_process_id,
             profit_center_id,
             profit_center_name,
             profit_center_short_name,
             main_section,
             sub_section,
             sum(previous_month_pnl) +
             decode(pc_process, 'EOM', sum(today_pnl), sum(mtd_pnl)) ytd_pnl,
             sum(previous_month_pnl) as previous_month_pnl,
             decode(pc_process, 'EOM', 0, sum(mtd_pnl)) as mtd_pnl,
             sum(today_pnl) as today_pnl,
             base_cur_id,
             base_cur_code,
             group_id,
             group_name,
             group_cur_id,
             group_cur_code,
             group_qty_unit_id,
             group_qty_unit,
             base_qty_unit_id,
             base_qty_unit,
             'Commission' unrealized_section,
             'N' is_pending_approval,
             'NA' exchange_id,
             '' exchange_name
        from (select dpd.corporate_id,
                     dpd.corporate_name,
                     dpd.profit_center_id,
                     dpd.profit_center_name,
                     dpd.profit_center_short_name,
                     dpd.main_section,
                     dpd.sub_section,
                     sum(case
                           when dpd.process_id = pc_process_id then
                            dpd.cost_amt
                           else
                            0
                         end) today_pnl,
                     sum(dpd.cost_amt) mtd_pnl,
                     0 previous_month_pnl,
                     dpd.cost_cur_id base_cur_id,
                     dpd.cost_cur_code base_cur_code,
                     null group_id,
                     null group_name,
                     null group_cur_id,
                     null group_cur_code,
                     null group_qty_unit_id,
                     null group_qty_unit,
                     null base_qty_unit_id,
                     null base_qty_unit,
                     'Commissions' unrealized_section,
                     'N' is_pending_approval,
                     null exchange_id,
                     null exchange_name
                from cps_cost_pnl_summary   dpd,
                     tdc_trade_date_closure tdc
               where dpd.corporate_id = pc_corporate_id
                 and tdc.corporate_id = pc_corporate_id
                 and dpd.process_id = tdc.process_id
                 and tdc.process = 'EOD'
                 and dpd.main_section = 'Commissions'
                 and tdc.trade_date <= pd_trade_date
                 and tdc.trade_date > vd_prev_eom_date
               group by dpd.corporate_id,
                        dpd.corporate_name,
                        dpd.profit_center_id,
                        dpd.profit_center_name,
                        dpd.profit_center_short_name,
                        dpd.main_section,
                        dpd.sub_section,
                        dpd.cost_cur_id,
                        dpd.cost_cur_code
              union all
              select dpm.corporate_id,
                     dpm.corporate_name,
                     dpm.profit_center_id,
                     dpm.profit_center_name,
                     dpm.profit_center_short_name,
                     dpm.main_section,
                     dpm.sub_section,
                     0 today_pnl,
                     0 mtd_pnl,
                     sum(dpm.cost_amt) previous_month_pnl,
                     dpm.cost_cur_id base_cur_id,
                     dpm.cost_cur_code base_cur_code,
                     null group_id,
                     null group_name,
                     null group_cur_id,
                     null group_cur_code,
                     null group_qty_unit_id,
                     null group_qty_unit,
                     null base_qty_unit_id,
                     null base_qty_unit,
                     'Commissions' unrealized_section,
                     'N' is_pending_approval,
                     null exchange_id,
                     null exchange_name
                from cps_cost_pnl_summary   dpm,
                     tdc_trade_date_closure tdc
               where dpm.corporate_id = pc_corporate_id
                 and dpm.process_id = tdc.process_id
                 and tdc.trade_date = vd_prev_eom_date
                 and tdc.process = 'EOM'
                 and tdc.corporate_id = pc_corporate_id
               group by dpm.corporate_id,
                        dpm.corporate_name,
                        dpm.profit_center_id,
                        dpm.profit_center_name,
                        dpm.profit_center_short_name,
                        dpm.main_section,
                        dpm.sub_section,
                        dpm.cost_cur_id,
                        dpm.cost_cur_code) t
       group by t.corporate_id,
                t.corporate_name,
                t.profit_center_id,
                t.profit_center_name,
                t.profit_center_short_name,
                t.main_section,
                t.sub_section,
                base_cur_id,
                base_cur_code,
                group_id,
                group_name,
                group_cur_id,
                group_cur_code,
                group_qty_unit_id,
                group_qty_unit,
                base_qty_unit_id,
                base_qty_unit,
                t.exchange_id,
                unrealized_section,
                is_pending_approval,
                t.exchange_name;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_daily_trade_pnl',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_update_new_trade(pc_corporate_id varchar2,
                                pd_trade_date   date,
                                pc_process_id   varchar2,
                                pc_process      varchar2) as
    vc_prev_process_id varchar2(15);
  begin
    begin
      select t1.process_id
        into vc_prev_process_id
        from tdc_trade_date_closure t1
       where t1.corporate_id = pc_corporate_id
         and t1.process = pc_process
         and t1.trade_date =
             (select max(t2.trade_date)
                from tdc_trade_date_closure t2
               where t2.corporate_id = pc_corporate_id
                 and t2.trade_date < pd_trade_date
                 and t2.process = pc_process);
    end;
    update dt_derivative_trade dt
       set dt.is_new_trade = 'Y'
     where dt.process_id = pc_process_id
       and dt.corporate_id = pc_corporate_id
       and not exists
     (select *
              from dt_derivative_trade dt_prev
             where dt_prev.internal_derivative_ref_no =
                   dt.internal_derivative_ref_no
               and dt_prev.process_id = vc_prev_process_id
               and dt_prev.corporate_id = pc_corporate_id);
   
   update ct_currency_trade ct
       set ct.is_new_trade = 'Y'
     where ct.process_id = pc_process_id
       and ct.corporate_id = pc_corporate_id
       and not exists
     (select *
              from ct_currency_trade ct_prev
             where ct_prev.internal_treasury_ref_no =
                   ct.internal_treasury_ref_no
               and ct_prev.process_id = vc_prev_process_id
               and ct_prev.corporate_id = pc_corporate_id);                 
  end;

  procedure sp_calc_future_unreal_pnl_attr(pc_corporate_id varchar2,
                                           pd_trade_date   date,
                                           pc_process_id   varchar2,
                                           pc_user_id      varchar2,
                                           pc_process      varchar2
                                           --------------------------------------------------------------------------------------------------------------------------
                                           --        procedure name                            : sp_calc_future_unreal_pnl_attr
                                           --        author                                    : AGS REPORTS TEAM
                                           --        created date                              : 11th Jan 2011
                                           --        purpose                                   : populate cdc unrealized pnl
                                           --        parameters
                                           --        pc_corporate_id                           : corporate id
                                           --        pd_trade_date                             : eod date id
                                           --        pc_user_id                                : user id
                                           --        pc_process                                : process
                                           --        modification history
                                           --        modified date                             :
                                           --        modified by                               :
                                           --        modify description                        :
                                           --------------------------------------------------------------------------------------------------------------------------
                                           ) is
    vobj_error_log             tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count         number := 1;
    vn_m2m_cur_decimals        number;
    vn_cont_price_cur_decimals number;
    vn_count                   number;
    vc_process                 varchar2(15);
    -- New Contract
    cursor unreal_pnl_attr is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'New' attribution_main_type,
             'New' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                1.1
               when dpd.trade_type = 'Sell' then
                1.2
               else
                1.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             null m2m_price_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             dpd.trade_price_cur_code || '/' || dpd.trade_price_weight_unit curr_eod_price_unit,
             dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'NEW_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    ---Modified Contract [Quantity]
    cursor unreal_pnl_attr_mcq is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Contract' attribution_main_type,
             'Quantity' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                2.1
               when dpd.trade_type = 'Sell' then
                2.2
               else
                2.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price_in_base prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.open_quantity_in_base total_qty,
             dpd.prev_open_quantity_in_base prev_total_qty,
             dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.open_quantity_in_base <> dpd.prev_open_quantity_in_base --Modification is for Quantity only
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    ---Pricing.....TODO:
    cursor unreal_pnl_attr_price is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Contract' attribution_main_type,
             'Price' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                3.1
               when dpd.trade_type = 'Sell' then
                3.2
               else
                3.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price_in_base prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             --dpd.trade_price_in_base contract_price_in_val_unit,
             --dpd.prev_trade_price_in_base prev_contract_price_in_val,
             dpd.trade_price contract_price_in_val_unit,
             dpd.prev_trade_price prev_contract_price_in_val,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
            --  AND    dpd.trade_price_in_base <> dpd.prev_trade_price_in_base ---Change in Price only
         and dpd.trade_price <> dpd.prev_trade_price
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    ---Settlement Prices....TODO:
    cursor unreal_pnl_attr_sett_prices is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Market Data' attribution_main_type,
             'Settlement Price' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                6.1
               when dpd.trade_type = 'Sell' then
                6.2
               else
                6.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price_in_base prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             -- dpd.sett_price_in_base net_m2m_price,
             dpd.settlement_price   net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             --dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_settlement_price prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.clearer_comm_in_base clearer_comm_amt,
             dpd.prev_clearer_comm_amt_in_base prev_clearer_comm_amt,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
            --AND    dpd.sett_price_in_base <> dpd.prev_sett_price_in_base --Change in Settlement Prices only
         and dpd.settlement_price <> dpd.prev_settlement_price
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    --ends here
    -- Cancelled Contract
    cursor unreal_pnl_attr_cancelled is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Contract' attribution_main_type,
             'Cancellation' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                7.1
               when dpd.trade_type = 'Sell' then
                7.2
               else
                7.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             null m2m_price_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             dpd.trade_price_cur_code || '/' || dpd.trade_price_weight_unit curr_eod_price_unit,
             (-1) * dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status in ('NEW_TRADE', 'EXISTING_TRADE')
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.process_id = gvc_previous_process_id --TODO: Need to check if setting value
         and dpd.corporate_id = pc_corporate_id
         and not exists (select *
                from dpd_derivative_pnl_daily dt
               where dt.internal_derivative_ref_no =
                     dpd.internal_derivative_ref_no
                 and dt.process_id = pc_process_id);
    ---
    -- Realized Contract
    cursor unreal_pnl_attr_real is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Realization' attribution_main_type,
             'Realization' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                8.1
               when dpd.trade_type = 'Sell' then
                8.2
               else
                8.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             null m2m_price_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             dpd.trade_price_cur_code || '/' || dpd.trade_price_weight_unit curr_eod_price_unit,
             (-1) * dpd.pnl_in_base_cur net_pnlc_in_base
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status in ('NEW_TRADE', 'EXISTING_TRADE')
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.process_id = gvc_previous_process_id --TODO: Need to check if setting value
         and dpd.corporate_id = pc_corporate_id
         and exists (select *
                from dpd_derivative_pnl_daily dt
               where dt.internal_derivative_ref_no =
                     dpd.internal_derivative_ref_no
                 and dt.process_id = pc_process_id
                 and dt.status in ('Settled', 'Verified',
                      'Expired', 'Exercised')
                 and dt.pnl_type in ('Realized'));
    cursor unreal_pnl_fx_att is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Market Data' attribution_main_type,
             'Fx Rates Entity' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                9.1
               when dpd.trade_type = 'Sell' then
                9.2
               else
                9.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.trade_price contract_price_in_val_unit,
             dpd.prev_trade_price prev_contract_price_in_val,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate,
             dpd.trade_cur_to_base_exch_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.trade_price_in_base <> dpd.prev_trade_price_in_base ---Change in Price only
         and dpd.trade_cur_to_base_exch_rate <>
             dpd.prev_trade_cur_to_base_rate
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    cursor unreal_pnl_fx_mkt_att is
      select dpd.process_id,
             dpd.corporate_id,
             dpd.corporate_name,
             'Derivative Contracts' attribution_type,
             (case
               when dpd.instrument_type = 'Future' then
                'Future'
               when dpd.instrument_type in ('Option Put', 'Option Call') then
                'Option'
               when dpd.instrument_type in ('Average') then
                'Average'
               when dpd.instrument_type in ('Forward') then
                'Forward'
               when dpd.instrument_type in
                    ('OTC Put Option', 'OTC Call Option') then
                'OTC Option'
               else
                'Others'
             end) attribution_master_type,
             'Market Data' attribution_main_type,
             'Fx Rates Market' attribution_sub_type,
             (case
               when dpd.trade_type = 'Buy' then
                10.1
               when dpd.trade_type = 'Sell' then
                10.2
               else
                10.3
             end) attribution_order,
             dpd.internal_derivative_ref_no internal_contract_ref_no,
             dpd.internal_derivative_ref_no internal_contract_item_ref_no,
             dpd.derivative_ref_no contract_ref_no,
             null item_no,
             (case
               when dpd.trade_type = 'Buy' then
                'B'
               when dpd.trade_type = 'Sell' then
                'S'
             end) contract_type,
             dpd.open_quantity_in_base item_qty,
             dpd.base_qty_unit_id qty_unit_id,
             dpd.base_qty_unit qty_unit,
             dpd.open_quantity_in_base curr_eod_qty,
             dpd.base_qty_unit_id curr_eod_qty_unit_id,
             dpd.base_qty_unit curr_eod_qty_unit,
             dpd.prev_open_quantity_in_base prev_eod_qty,
             dpd.prev_quantity_unit_id prev_eod_qty_unit_id,
             dpd.trade_price_in_base curr_eod_contract_price,
             dpd.trade_price_unit_id curr_eod_price_unit_id,
             null curr_eod_price_unit,
             dpd.prev_trade_price prev_eod_contract_price,
             dpd.prev_trade_price_unit_id prev_eod_price_unit_id,
             null md_id,
             null prev_md_id,
             dpd.sett_price_in_base net_m2m_price,
             dpd.sett_price_unit_id m2m_price_unit_id,
             dpd.prev_sett_price_in_base prev_net_m2m_price,
             dpd.prev_sp_unit_id prev_m2m_price_unit_id,
             dpd.settlement_price,
             dpd.prev_settlement_price,
             dpd.trade_price contract_price_in_val_unit,
             dpd.prev_trade_price prev_contract_price_in_val,
             dpd.pnl_in_base_cur net_pnlc_in_base,
             dpd.prev_trade_cur_to_base_rate,
             dpd.trade_cur_to_base_exch_rate
        from dpd_derivative_pnl_daily dpd
       where dpd.pnl_type = 'Unrealized'
         and dpd.cont_unr_status = 'EXISTING_TRADE'
         and dpd.instrument_type in ('Future', 'Option Put', 'Option Call')
         and dpd.sett_price_in_base <> dpd.prev_sett_price_in_base ---Change in Price only
         and dpd.trade_cur_to_base_exch_rate <>
             dpd.prev_trade_cur_to_base_rate
         and dpd.process_id = pc_process_id
         and dpd.corporate_id = pc_corporate_id;
    -- variable declaration
    vn_pnlc_due_to_attr      number := 0;
    vn_pnlc_due_to_qty       number := 0;
    vn_pnlc_due_to_price     number := 0;
    vn_pnlc_due_to_estimates number := 0;
    vn_other_pnlc_in_base    number := 0;
    vn_net_pnlc_in_base      number := 0;
  begin
    for unreal_pnl_attr_rows in unreal_pnl_attr
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         pnlc_due_to_attr,
         m2m_price_unit_id,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_rows.corporate_id,
         unreal_pnl_attr_rows.corporate_name,
         unreal_pnl_attr_rows.attribution_type,
         unreal_pnl_attr_rows.attribution_master_type,
         unreal_pnl_attr_rows.attribution_main_type,
         unreal_pnl_attr_rows.attribution_sub_type,
         unreal_pnl_attr_rows.attribution_order,
         unreal_pnl_attr_rows.internal_contract_ref_no,
         unreal_pnl_attr_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_rows.contract_ref_no,
         unreal_pnl_attr_rows.item_no,
         unreal_pnl_attr_rows.contract_type,
         unreal_pnl_attr_rows.item_qty,
         unreal_pnl_attr_rows.qty_unit_id,
         unreal_pnl_attr_rows.curr_eod_qty,
         unreal_pnl_attr_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_rows.curr_eod_contract_price,
         unreal_pnl_attr_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_rows.net_pnlc_in_base,
         unreal_pnl_attr_rows.m2m_price_unit_id,
         unreal_pnl_attr_rows.net_pnlc_in_base);
    end loop;
    --Loop 2
    for unreal_pnl_attr_mcq_rows in unreal_pnl_attr_mcq
    loop
      --Calculation----
      --TODO: Check all the possible conversion.......
      if unreal_pnl_attr_mcq_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_mcq_rows.curr_eod_qty -
                               nvl(unreal_pnl_attr_mcq_rows.prev_eod_qty,
                                     0)) *
                               (unreal_pnl_attr_mcq_rows.prev_net_m2m_price -
                               unreal_pnl_attr_mcq_rows.prev_eod_contract_price));
      elsif unreal_pnl_attr_mcq_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_mcq_rows.curr_eod_qty -
                               nvl(unreal_pnl_attr_mcq_rows.prev_eod_qty,
                                     0)) *
                               (unreal_pnl_attr_mcq_rows.prev_eod_contract_price -
                               unreal_pnl_attr_mcq_rows.prev_net_m2m_price));
      end if;
      --vn_pnlc_due_to_attr   := vn_pnlc_due_to_qty;
      vn_other_pnlc_in_base := unreal_pnl_attr_mcq_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      --Ends here---
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_mcq_rows.corporate_id,
         unreal_pnl_attr_mcq_rows.corporate_name,
         unreal_pnl_attr_mcq_rows.attribution_type,
         unreal_pnl_attr_mcq_rows.attribution_master_type,
         unreal_pnl_attr_mcq_rows.attribution_main_type,
         unreal_pnl_attr_mcq_rows.attribution_sub_type,
         unreal_pnl_attr_mcq_rows.attribution_order,
         unreal_pnl_attr_mcq_rows.internal_contract_ref_no,
         unreal_pnl_attr_mcq_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_mcq_rows.contract_ref_no,
         unreal_pnl_attr_mcq_rows.item_no,
         unreal_pnl_attr_mcq_rows.contract_type,
         unreal_pnl_attr_mcq_rows.item_qty,
         unreal_pnl_attr_mcq_rows.qty_unit_id,
         unreal_pnl_attr_mcq_rows.curr_eod_qty,
         unreal_pnl_attr_mcq_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_mcq_rows.prev_eod_qty,
         unreal_pnl_attr_mcq_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_mcq_rows.curr_eod_contract_price,
         unreal_pnl_attr_mcq_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_mcq_rows.prev_eod_contract_price,
         unreal_pnl_attr_mcq_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_mcq_rows.md_id,
         unreal_pnl_attr_mcq_rows.prev_md_id,
         unreal_pnl_attr_mcq_rows.net_m2m_price,
         unreal_pnl_attr_mcq_rows.m2m_price_unit_id,
         unreal_pnl_attr_mcq_rows.prev_net_m2m_price,
         unreal_pnl_attr_mcq_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_mcq_rows.net_pnlc_in_base);
    end loop;
    --Ends here
    --Loop 3
    for unreal_pnl_attr_price_rows in unreal_pnl_attr_price
    loop
      --Calculation----
      --TODO: Check all the possible conversion.......
      --vn_pnlc_due_to_qty    := 0;
      if unreal_pnl_attr_price_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_price_rows.prev_contract_price_in_val *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate) -
                               (nvl(unreal_pnl_attr_price_rows.contract_price_in_val_unit,
                                     0) *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate)) *
                               (nvl(unreal_pnl_attr_price_rows.prev_eod_qty,
                                    0));
      elsif unreal_pnl_attr_price_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_price_rows.contract_price_in_val_unit *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate) -
                               (nvl(unreal_pnl_attr_price_rows.prev_contract_price_in_val,
                                     0) *
                               unreal_pnl_attr_price_rows.prev_trade_cur_to_base_rate)) *
                               (nvl(unreal_pnl_attr_price_rows.prev_eod_qty,
                                    0));
      end if;
      --vn_pnlc_due_to_attr   := vn_pnlc_due_to_price;
      vn_other_pnlc_in_base := unreal_pnl_attr_price_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      --Ends here---
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_price_rows.corporate_id,
         unreal_pnl_attr_price_rows.corporate_name,
         unreal_pnl_attr_price_rows.attribution_type,
         unreal_pnl_attr_price_rows.attribution_master_type,
         unreal_pnl_attr_price_rows.attribution_main_type,
         unreal_pnl_attr_price_rows.attribution_sub_type,
         unreal_pnl_attr_price_rows.attribution_order,
         unreal_pnl_attr_price_rows.internal_contract_ref_no,
         unreal_pnl_attr_price_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_price_rows.contract_ref_no,
         unreal_pnl_attr_price_rows.item_no,
         unreal_pnl_attr_price_rows.contract_type,
         unreal_pnl_attr_price_rows.item_qty,
         unreal_pnl_attr_price_rows.qty_unit_id,
         unreal_pnl_attr_price_rows.curr_eod_qty,
         unreal_pnl_attr_price_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_price_rows.prev_eod_qty,
         unreal_pnl_attr_price_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_price_rows.curr_eod_contract_price,
         unreal_pnl_attr_price_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_price_rows.prev_eod_contract_price,
         unreal_pnl_attr_price_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_price_rows.md_id,
         unreal_pnl_attr_price_rows.prev_md_id,
         unreal_pnl_attr_price_rows.net_m2m_price,
         unreal_pnl_attr_price_rows.m2m_price_unit_id,
         unreal_pnl_attr_price_rows.prev_net_m2m_price,
         unreal_pnl_attr_price_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_price_rows.net_pnlc_in_base);
    end loop;
    --Ends here
    --Loop 6
    for unreal_pnl_attr_sp_rows in unreal_pnl_attr_sett_prices
    loop
      --Calculation----
      --TODO: Check all the possible conversion.......
      --vn_pnlc_due_to_qty    := 0;
      if unreal_pnl_attr_sp_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_sp_rows.net_m2m_price -
                               nvl(unreal_pnl_attr_sp_rows.prev_net_m2m_price,
                                     0)) *
                               unreal_pnl_attr_sp_rows.prev_trade_cur_to_base_rate) *
                               (nvl(unreal_pnl_attr_sp_rows.prev_eod_qty, 0));
      elsif unreal_pnl_attr_sp_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := ((unreal_pnl_attr_sp_rows.prev_net_m2m_price -
                               nvl(unreal_pnl_attr_sp_rows.net_m2m_price,
                                     0)) *
                               unreal_pnl_attr_sp_rows.prev_trade_cur_to_base_rate) *
                               (nvl(unreal_pnl_attr_sp_rows.prev_eod_qty, 0));
      end if;
      --vn_pnlc_due_to_attr   := vn_pnlc_due_to_price;
      vn_other_pnlc_in_base := unreal_pnl_attr_sp_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      --Ends here---
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_sp_rows.corporate_id,
         unreal_pnl_attr_sp_rows.corporate_name,
         unreal_pnl_attr_sp_rows.attribution_type,
         unreal_pnl_attr_sp_rows.attribution_master_type,
         unreal_pnl_attr_sp_rows.attribution_main_type,
         unreal_pnl_attr_sp_rows.attribution_sub_type,
         unreal_pnl_attr_sp_rows.attribution_order,
         unreal_pnl_attr_sp_rows.internal_contract_ref_no,
         unreal_pnl_attr_sp_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_sp_rows.contract_ref_no,
         unreal_pnl_attr_sp_rows.item_no,
         unreal_pnl_attr_sp_rows.contract_type,
         unreal_pnl_attr_sp_rows.item_qty,
         unreal_pnl_attr_sp_rows.qty_unit_id,
         unreal_pnl_attr_sp_rows.curr_eod_qty,
         unreal_pnl_attr_sp_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_sp_rows.prev_eod_qty,
         unreal_pnl_attr_sp_rows.prev_eod_qty_unit_id,
         unreal_pnl_attr_sp_rows.curr_eod_contract_price,
         unreal_pnl_attr_sp_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_sp_rows.prev_eod_contract_price,
         unreal_pnl_attr_sp_rows.prev_eod_price_unit_id,
         unreal_pnl_attr_sp_rows.md_id,
         unreal_pnl_attr_sp_rows.prev_md_id,
         unreal_pnl_attr_sp_rows.net_m2m_price,
         unreal_pnl_attr_sp_rows.m2m_price_unit_id,
         unreal_pnl_attr_sp_rows.prev_net_m2m_price,
         unreal_pnl_attr_sp_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_attr_sp_rows.net_pnlc_in_base);
    end loop;
    --Ends here
    --Loop --7
    for unreal_pnl_attr_cancelled_rows in unreal_pnl_attr_cancelled
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         pnlc_due_to_attr,
         m2m_price_unit_id,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_cancelled_rows.corporate_id,
         unreal_pnl_attr_cancelled_rows.corporate_name,
         unreal_pnl_attr_cancelled_rows.attribution_type,
         unreal_pnl_attr_cancelled_rows.attribution_master_type,
         unreal_pnl_attr_cancelled_rows.attribution_main_type,
         unreal_pnl_attr_cancelled_rows.attribution_sub_type,
         unreal_pnl_attr_cancelled_rows.attribution_order,
         unreal_pnl_attr_cancelled_rows.internal_contract_ref_no,
         unreal_pnl_attr_cancelled_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_cancelled_rows.contract_ref_no,
         unreal_pnl_attr_cancelled_rows.item_no,
         unreal_pnl_attr_cancelled_rows.contract_type,
         unreal_pnl_attr_cancelled_rows.item_qty,
         unreal_pnl_attr_cancelled_rows.qty_unit_id,
         unreal_pnl_attr_cancelled_rows.curr_eod_qty,
         unreal_pnl_attr_cancelled_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_cancelled_rows.curr_eod_contract_price,
         unreal_pnl_attr_cancelled_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_cancelled_rows.net_pnlc_in_base,
         unreal_pnl_attr_cancelled_rows.m2m_price_unit_id,
         unreal_pnl_attr_cancelled_rows.net_pnlc_in_base);
    end loop;
    --Loop 8 Realization--
    for unreal_pnl_attr_real_rows in unreal_pnl_attr_real
    loop
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         pnlc_due_to_attr,
         m2m_price_unit_id,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_attr_real_rows.corporate_id,
         unreal_pnl_attr_real_rows.corporate_name,
         unreal_pnl_attr_real_rows.attribution_type,
         unreal_pnl_attr_real_rows.attribution_master_type,
         unreal_pnl_attr_real_rows.attribution_main_type,
         unreal_pnl_attr_real_rows.attribution_sub_type,
         unreal_pnl_attr_real_rows.attribution_order,
         unreal_pnl_attr_real_rows.internal_contract_ref_no,
         unreal_pnl_attr_real_rows.internal_contract_item_ref_no,
         unreal_pnl_attr_real_rows.contract_ref_no,
         unreal_pnl_attr_real_rows.item_no,
         unreal_pnl_attr_real_rows.contract_type,
         unreal_pnl_attr_real_rows.item_qty,
         unreal_pnl_attr_real_rows.qty_unit_id,
         unreal_pnl_attr_real_rows.curr_eod_qty,
         unreal_pnl_attr_real_rows.curr_eod_qty_unit_id,
         unreal_pnl_attr_real_rows.curr_eod_contract_price,
         unreal_pnl_attr_real_rows.curr_eod_price_unit_id,
         unreal_pnl_attr_real_rows.net_pnlc_in_base,
         unreal_pnl_attr_real_rows.m2m_price_unit_id,
         unreal_pnl_attr_real_rows.net_pnlc_in_base);
    end loop;
    for unreal_pnl_fx_att_rows in unreal_pnl_fx_att
    loop
      if unreal_pnl_fx_att_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_att_rows.prev_trade_cur_to_base_rate -
                               unreal_pnl_fx_att_rows.trade_cur_to_base_exch_rate) *
                               (unreal_pnl_fx_att_rows.prev_contract_price_in_val) *
                               (nvl(unreal_pnl_fx_att_rows.prev_eod_qty, 0));
      elsif unreal_pnl_fx_att_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_att_rows.trade_cur_to_base_exch_rate -
                               unreal_pnl_fx_att_rows.prev_trade_cur_to_base_rate) *
                               (unreal_pnl_fx_att_rows.prev_contract_price_in_val) *
                               (nvl(unreal_pnl_fx_att_rows.prev_eod_qty, 0));
      end if;
      vn_other_pnlc_in_base := unreal_pnl_fx_att_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_fx_att_rows.corporate_id,
         unreal_pnl_fx_att_rows.corporate_name,
         unreal_pnl_fx_att_rows.attribution_type,
         unreal_pnl_fx_att_rows.attribution_master_type,
         unreal_pnl_fx_att_rows.attribution_main_type,
         unreal_pnl_fx_att_rows.attribution_sub_type,
         unreal_pnl_fx_att_rows.attribution_order,
         unreal_pnl_fx_att_rows.internal_contract_ref_no,
         unreal_pnl_fx_att_rows.internal_contract_item_ref_no,
         unreal_pnl_fx_att_rows.contract_ref_no,
         unreal_pnl_fx_att_rows.item_no,
         unreal_pnl_fx_att_rows.contract_type,
         unreal_pnl_fx_att_rows.item_qty,
         unreal_pnl_fx_att_rows.qty_unit_id,
         unreal_pnl_fx_att_rows.curr_eod_qty,
         unreal_pnl_fx_att_rows.curr_eod_qty_unit_id,
         unreal_pnl_fx_att_rows.prev_eod_qty,
         unreal_pnl_fx_att_rows.prev_eod_qty_unit_id,
         unreal_pnl_fx_att_rows.curr_eod_contract_price,
         unreal_pnl_fx_att_rows.curr_eod_price_unit_id,
         unreal_pnl_fx_att_rows.prev_eod_contract_price,
         unreal_pnl_fx_att_rows.prev_eod_price_unit_id,
         unreal_pnl_fx_att_rows.md_id,
         unreal_pnl_fx_att_rows.prev_md_id,
         unreal_pnl_fx_att_rows.net_m2m_price,
         unreal_pnl_fx_att_rows.m2m_price_unit_id,
         unreal_pnl_fx_att_rows.prev_net_m2m_price,
         unreal_pnl_fx_att_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_fx_att_rows.net_pnlc_in_base);
    end loop;
    for unreal_pnl_fx_mkt_att_rows in unreal_pnl_fx_mkt_att
    loop
      if unreal_pnl_fx_mkt_att_rows.contract_type in ('Buy', 'B') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_mkt_att_rows.trade_cur_to_base_exch_rate -
                               unreal_pnl_fx_mkt_att_rows.prev_trade_cur_to_base_rate) *
                               unreal_pnl_fx_mkt_att_rows.prev_settlement_price *
                               nvl(unreal_pnl_fx_mkt_att_rows.prev_eod_qty,
                                   0);
      elsif unreal_pnl_fx_mkt_att_rows.contract_type in ('Sell', 'S') then
        vn_pnlc_due_to_attr := (unreal_pnl_fx_mkt_att_rows.prev_trade_cur_to_base_rate -
                               unreal_pnl_fx_mkt_att_rows.trade_cur_to_base_exch_rate) *
                               unreal_pnl_fx_mkt_att_rows.prev_settlement_price *
                               nvl(unreal_pnl_fx_mkt_att_rows.prev_eod_qty,
                                   0);
      end if;
      vn_other_pnlc_in_base := unreal_pnl_fx_mkt_att_rows.net_pnlc_in_base -
                               vn_pnlc_due_to_attr;
      insert into upad_unreal_pnl_attr_detail
        (process_id,
         corporate_id,
         corporate_name,
         attribution_type,
         attribution_master_type,
         attribution_main_type,
         attribution_sub_type,
         attribution_order,
         internal_contract_ref_no,
         internal_contract_item_ref_no,
         contract_ref_no,
         item_no,
         contract_type,
         item_qty,
         qty_unit_id,
         curr_eod_qty,
         curr_eod_qty_unit_id,
         prev_eod_qty,
         prev_eod_qty_unit_id,
         curr_eod_contract_price,
         curr_eod_price_unit_id,
         prev_eod_contract_price,
         prev_eod_price_unit_id,
         md_id,
         prev_md_id,
         net_m2m_price,
         m2m_price_unit_id,
         prev_net_m2m_price,
         prev_m2m_price_unit_id,
         pnlc_due_to_attr,
         delta_pnlc_in_base,
         net_pnlc_in_base)
      values
        (pc_process_id,
         unreal_pnl_fx_mkt_att_rows.corporate_id,
         unreal_pnl_fx_mkt_att_rows.corporate_name,
         unreal_pnl_fx_mkt_att_rows.attribution_type,
         unreal_pnl_fx_mkt_att_rows.attribution_master_type,
         unreal_pnl_fx_mkt_att_rows.attribution_main_type,
         unreal_pnl_fx_mkt_att_rows.attribution_sub_type,
         unreal_pnl_fx_mkt_att_rows.attribution_order,
         unreal_pnl_fx_mkt_att_rows.internal_contract_ref_no,
         unreal_pnl_fx_mkt_att_rows.internal_contract_item_ref_no,
         unreal_pnl_fx_mkt_att_rows.contract_ref_no,
         unreal_pnl_fx_mkt_att_rows.item_no,
         unreal_pnl_fx_mkt_att_rows.contract_type,
         unreal_pnl_fx_mkt_att_rows.item_qty,
         unreal_pnl_fx_mkt_att_rows.qty_unit_id,
         unreal_pnl_fx_mkt_att_rows.curr_eod_qty,
         unreal_pnl_fx_mkt_att_rows.curr_eod_qty_unit_id,
         unreal_pnl_fx_mkt_att_rows.prev_eod_qty,
         unreal_pnl_fx_mkt_att_rows.prev_eod_qty_unit_id,
         unreal_pnl_fx_mkt_att_rows.curr_eod_contract_price,
         unreal_pnl_fx_mkt_att_rows.curr_eod_price_unit_id,
         unreal_pnl_fx_mkt_att_rows.prev_eod_contract_price,
         unreal_pnl_fx_mkt_att_rows.prev_eod_price_unit_id,
         unreal_pnl_fx_mkt_att_rows.md_id,
         unreal_pnl_fx_mkt_att_rows.prev_md_id,
         unreal_pnl_fx_mkt_att_rows.net_m2m_price,
         unreal_pnl_fx_mkt_att_rows.m2m_price_unit_id,
         unreal_pnl_fx_mkt_att_rows.prev_net_m2m_price,
         unreal_pnl_fx_mkt_att_rows.prev_m2m_price_unit_id,
         vn_pnlc_due_to_attr,
         vn_other_pnlc_in_base,
         unreal_pnl_fx_mkt_att_rows.net_pnlc_in_base);
    end loop;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_calc_future_unreal_pnl_attr',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;
procedure sp_calc_fx_option_realized_pnl(p_corporateid varchar2,
                                         p_tradedate   date,
                                         p_process_id  varchar2,
                                         p_userid      varchar2,
                                         p_prcoess     varchar2) as

  cursor c_day_end_fx is
    select ct.internal_treasury_ref_no,
           ct.corporate_id,
           ak.corporate_name,
           ak.base_cur_id corp_base_cur_id,
           ak.base_currency_name corp_base_cur_name,
           ct.process_id,
           ct.trade_date,
           ct.treasury_ref_no ct_ref_no,
           ct.profit_center_id,
           cpc.profit_center_name,
           cpc.profit_center_short_name,
           ct.dr_id ct_id,
           ct.payment_terms_id,
           dim.instrument_id instrument_id,
           irm.instrument_type instrument_type,
           pdd.derivative_def_id currency_def_id,
           pdd.derivative_def_name derivative_name,
           pdm.product_desc product_name,
           drm.prompt_date prompt_date,
           drm.prompt_date expiry_date,
           crtd_base.amount base_currency_amount,
           crtd_base.trade_type base_cur_buy_sell,
           ak.base_currency_name base_currency,
           round(1 / mv_cfq.rate, 8) market_exchange_rate,
           round(1 / ct.fx_rate_base_to_foreign, 8) original_exchange_rate, -- this has to be changed with exchange_rate column, as bug in app
           crtd_fx.cur_id fx_cur_id,
           crtd_base.cur_id base_cur_id,
           cm_base.cur_code base_cur_code,
           cm_fx.cur_code fx_cur_code,
           crtd_fx.amount fx_currency_amount,
           crtd_fx.trade_type fx_cur_buy_sell,
           oba.account_name,
           oba.account_no,
           phd.companyname bank_name,
           ct.bank_acc_id bank_account,
           ct.bank_charges bank_charges,
           ct.bank_charges_cur_id bank_cur_id,
           null as bank_charges_percent,
           ct.bank_charges_type,
           cm.cur_code bank_charges_currency,
           mv_cfq.dr_id cfq_id,
           mv_cfq.process_date,
           mv_cfq.prompt_date maturity_date,
           mv_cfq.is_spot,
           null as user_entered_fx,
           ct.strategy_id,
           css.strategy_name,
           ct.option_premium,
           ct.option_premium_unit_id
      from ct_currency_trade              ct,
           ak_corporate                   ak,
           cpc_corporate_profit_center    cpc,
           eodeom_currency_forward_quotes mv_cfq,
           irm_instrument_type_master     irm,
           pdd_product_derivative_def     pdd,
           dim_der_instrument_master      dim,
           drm_derivative_master          drm,
           pdm_productmaster              pdm,
           crtd_cur_trade_details         crtd_base,
           crtd_cur_trade_details         crtd_fx,
           cm_currency_master             cm_base,
           cm_currency_master             cm,
           cm_currency_master             cm_fx,
           oba_our_bank_accounts          oba,
           phd_profileheaderdetails       phd,
           css_corporate_strategy_setup   css,
           div_der_instrument_valuation   div,
           dtm_deal_type_master           dtm
     where ct.corporate_id = ak.corporate_id
       and ak.corporate_id = p_corporateid
       and ct.profit_center_id = cpc.profit_center_id
       and ct.corporate_id = mv_cfq.corporate_id
       and ct.dr_id = mv_cfq.dr_id
       and mv_cfq.process_id = p_process_id
       and dim.instrument_id = div.instrument_id
       and mv_cfq.price_source_id = div.price_source_id
       and div.is_deleted = 'N'
       and ct.dr_id = drm.dr_id
       and drm.instrument_id = dim.instrument_id
       and dim.product_derivative_id = pdd.derivative_def_id
       and pdd.product_id = pdm.product_id
       and dim.instrument_type_id = irm.instrument_type_id
       and ct.strategy_id = css.strategy_id(+)
       and ct.internal_treasury_ref_no = crtd_base.internal_treasury_ref_no
       and crtd_base.cur_id = cm_base.cur_id(+)
       and ct.internal_treasury_ref_no = crtd_fx.internal_treasury_ref_no
       and crtd_fx.cur_id = cm_fx.cur_id(+)
       and crtd_base.is_base = 'Y'
       and crtd_fx.is_base = 'N'
       and ct.is_new_trade='Y'
       and ct.bank_charges_cur_id = cm.cur_id(+)
       and ct.bank_id = phd.profileid(+)
       and ct.bank_id = oba.bank_id(+)
       and ct.bank_acc_id = oba.account_id(+)
       and ct.deal_type_id = dtm.deal_type_id
       and dtm.deal_type_display_name like '%Option%'
       and upper(ct.status) = 'VERIFIED'
       and not exists (select eci.ct_id
              from eci_expired_ct_id eci
             where eci.corporate_id = p_corporateid
               and eci.process = p_prcoess
               and eci.trade_date < p_tradedate
               and eci.ct_id = drm.dr_id)
       and ct.process_id = p_process_id
       and crtd_base.process_id = p_process_id
       and crtd_fx.process_id = p_process_id;

  vn_pnl_value_in_premium_cur    number;
  vn_ex_rate_premium_to_home_cur number;
  vc_premium_main_cur_id         varchar2(15);
  vc_premium_main_cur_code       varchar2(15);
  vc_premium_sub_cur_id_factor   number;
  vc_premium_main_cur_decimals   number;
  vn_pnl_value_home_cur          number;
  vn_ex_rate_home_to_corp_cur    number;
  vn_pnl_value_in_corp_cur       number;
  vn_net_pnl_value_in_corp_cur   number;
  vn_ex_rate_bank_to_home_cur    number;
  vn_bank_charges_in_home_cur    number;

begin

  for fx_rec_new in c_day_end_fx
  loop
  
    if (fx_rec_new.bank_cur_id != fx_rec_new.base_cur_id) then
      vn_ex_rate_bank_to_home_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                              fx_rec_new.bank_cur_id,
                                                                              fx_rec_new.base_cur_id,
                                                                              p_tradedate,
                                                                              1);
    
    else
      vn_ex_rate_bank_to_home_cur := 1;
    end if;
    if upper(fx_rec_new.bank_charges_type) = 'ABSOLUTE' then
      vn_bank_charges_in_home_cur := nvl(fx_rec_new.bank_charges, 0) *
                                     nvl(vn_ex_rate_bank_to_home_cur, 0);
    else
      vn_bank_charges_in_home_cur := (fx_rec_new.bank_charges / 100) *
                                     fx_rec_new.base_currency_amount;
      vn_ex_rate_bank_to_home_cur := 1;
    end if;
  
    if fx_rec_new.base_cur_buy_sell = 'Sell' then
      vn_pnl_value_in_premium_cur := fx_rec_new.base_currency_amount *
                                     fx_rec_new.option_premium;
    else
      vn_pnl_value_in_premium_cur := -1 * (fx_rec_new.base_currency_amount *
                                     fx_rec_new.option_premium);
    end if;
  
    pkg_general.sp_get_main_cur_detail(fx_rec_new.option_premium_unit_id,
                                       vc_premium_main_cur_id,
                                       vc_premium_main_cur_code,
                                       vc_premium_sub_cur_id_factor,
                                       vc_premium_main_cur_decimals);
    vn_pnl_value_in_premium_cur := vn_pnl_value_in_premium_cur *
                                   vc_premium_sub_cur_id_factor;
  
    vn_ex_rate_premium_to_home_cur := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                               vc_premium_main_cur_id,
                                                                               fx_rec_new.base_cur_id,
                                                                               p_tradedate,
                                                                               1);
  
    vn_pnl_value_home_cur        := vn_pnl_value_in_premium_cur *
                                    vn_ex_rate_premium_to_home_cur;
    vn_ex_rate_home_to_corp_cur  := pkg_general.f_get_converted_currency_amt(p_corporateid,
                                                                             fx_rec_new.base_cur_id,
                                                                             fx_rec_new.corp_base_cur_id,
                                                                             p_tradedate,
                                                                             1);
    vn_pnl_value_in_corp_cur     := vn_pnl_value_home_cur *
                                    vn_ex_rate_home_to_corp_cur;
    vn_net_pnl_value_in_corp_cur := vn_pnl_value_home_cur *
                                    vn_ex_rate_home_to_corp_cur;
  
    insert into cpd_currency_pnl_daily
      (ct_internal_ref_no,
       corporate_id,
       corporate_name,
       process_id,
       eod_trade_date,
       trade_date,
       ct_ref_no,
       profit_center_id,
       profit_center_name,
       strategy_id,
       strategy_name,
       ct_id,
       cfq_id,
       instrument_id,
       instrument_name,
       instrument_type,
       currency_def_id,
       derivative_name,
       product_name,
       prompt_date,
       expiry_date,
       pnl_type,
       home_currency_amount,
       home_cur_buy_sell,
       home_currency,
       home_cur_id,
       --  market_exchange_rate,
       --   original_exchange_rate,
       fx_cur_id,
       fx_currency,
       fx_currency_amount,
       fx_cur_buy_sell,
       bank_name,
       bank_account,
       account_no,
       account_name,
       bank_charges,
       bank_charges_currency,
       bank_charges_type,
       bank_charges_cur_id,
       bank_charges_percent,
       ex_rate_from_bank_to_home_cur,
      --market_value_in_home_currency,
     -- original_value_in_home_curr,
       pnl_value_in_home_currency,
       bank_charges_in_home_currency,
       net_pnl_in_home_currency,
       user_entered_fx,
       profit_center_short_name,
       corp_cur_id,
       corp_currency,
       corp_fx_rate,
       pnl_in_corp_currency,
       net_pnl_in_corp_currency,
       payment_terms_id)
    values
      (fx_rec_new.internal_treasury_ref_no,
       fx_rec_new.corporate_id,
       fx_rec_new.corporate_name,
       fx_rec_new.process_id,
       p_tradedate,
       fx_rec_new.trade_date,
       fx_rec_new.ct_ref_no,
       fx_rec_new.profit_center_id,
       fx_rec_new.profit_center_name,
       fx_rec_new.strategy_id,
       fx_rec_new.strategy_name,
       fx_rec_new.ct_id,
       fx_rec_new.cfq_id,
       fx_rec_new.instrument_id,
       fx_rec_new.instrument_type,
       fx_rec_new.instrument_type,
       fx_rec_new.currency_def_id,
       fx_rec_new.derivative_name,
       fx_rec_new.product_name,
       fx_rec_new.prompt_date,
       fx_rec_new.expiry_date,
       'Realized',
       fx_rec_new.base_currency_amount,
       fx_rec_new.base_cur_buy_sell,
       fx_rec_new.base_cur_code,
       fx_rec_new.base_cur_id,
       --fx_rec_new.market_exchange_rate,
       -- fx_rec_new.original_exchange_rate,
       fx_rec_new.fx_cur_id,
       fx_rec_new.fx_cur_code,
       fx_rec_new.fx_currency_amount,
       fx_rec_new.fx_cur_buy_sell,
       fx_rec_new.bank_name,
       fx_rec_new.bank_account,
       fx_rec_new.account_no,
       fx_rec_new.account_name,
       fx_rec_new.bank_charges,
       fx_rec_new.bank_charges_currency,
       fx_rec_new.bank_charges_type,
       fx_rec_new.bank_cur_id,
       fx_rec_new.bank_charges_percent,
       vn_ex_rate_bank_to_home_cur,
       --l_market_value_in_home_cur,
       --l_original_value_in_home_cur,
       vn_pnl_value_home_cur,
       vn_bank_charges_in_home_cur,
       vn_pnl_value_home_cur,
       fx_rec_new.user_entered_fx,
       fx_rec_new.profit_center_short_name,
       fx_rec_new.corp_base_cur_id,
       fx_rec_new.corp_base_cur_name,
       vn_ex_rate_home_to_corp_cur,
       vn_pnl_value_in_corp_cur,
       vn_net_pnl_value_in_corp_cur,
       fx_rec_new.payment_terms_id);
  end loop;
end;
end; 
/
create or replace package pkg_general is

  -- All general packages and procedures
  function f_get_converted_currency_amt(pc_corporate_id        in varchar2,
                                        pc_from_cur_id         in varchar2,
                                        pc_to_cur_id           in varchar2,
                                        pd_cur_date            in date,
                                        pn_amt_to_be_converted in number)
    return number;

  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number;

  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2;

  procedure sp_forward_cur_exchange_rate(pc_corporate_id         in varchar2,
                                         pd_trade_date           in date,
                                         pc_maturity_date        in date,
                                         pc_from_cur_id          in varchar2,
                                         pc_to_cur_id            in varchar2,
                                         pc_settlement_price     out number,
                                         pc_sum_of_forward_point out number);

  function f_get_base_cur_id(pc_cur_id varchar2) return varchar2;

  procedure sp_get_base_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number);

  procedure sp_get_main_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number,
                                   pn_base_cur_decimals out number);

  procedure sp_spot_cur_exchange_rate(pc_corporate_id         in varchar2,
                                      pd_trade_date           in date,
                                      pc_from_cur_id          in varchar2,
                                      pc_to_cur_id            in varchar2,
                                      pc_settlement_price     out number,
                                      pc_sum_of_forward_point out number);

  procedure sp_ltst_spot_cur_exchange_rate(pc_corporate_id         in varchar2,
                                           pd_trade_date           in date,
                                           pc_from_cur_id          in varchar2,
                                           pc_to_cur_id            in varchar2,
                                           pc_settlement_price     out number,
                                           pc_sum_of_forward_point out number);
  procedure sp_forward_cur_exchange_new(pc_corporate_id         in varchar2,
                                        pd_trade_date           in date,
                                        pc_maturity_date        in date,
                                        pc_from_cur_id          in varchar2,
                                        pc_to_cur_id            in varchar2,
                                        pc_max_deviation        in number,
                                        pc_settlement_price     out number,
                                        pc_sum_of_forward_point out number);

  procedure sp_forward_cur_exchange_old(pc_corporate_id         in varchar2,
                                        pd_trade_date           in date,
                                        pc_maturity_date        in date,
                                        pc_from_cur_id          in varchar2,
                                        pc_to_cur_id            in varchar2,
                                        pc_max_deviation        in number,
                                        pc_settlement_price     out number,
                                        pc_sum_of_forward_point out number);

  procedure sp_forward_cur_exchange_sub(pc_corporate_id         in varchar2,
                                        pd_trade_date           in date,
                                        pc_maturity_date        in date,
                                        pc_from_cur_id          in varchar2,
                                        pc_to_cur_id            in varchar2,
                                        pc_max_deviation        in number,
                                        pc_settlement_price     out number,
                                        pc_sum_of_forward_point out number);

  function fn_forward_interest_rate(pc_corporate_id      in varchar2,
                                    pd_trade_date        in date,
                                    pc_payment_due_date  in date,
                                    pc_ir_id             in varchar2,
                                    pc_interest_curve_id in varchar2)
    return number;

  function f_get_currency_pair(pc_corporate_id  varchar2,
                               pc_from_cur_id   in varchar2,
                               pc_from_cur_code in varchar2,
                               pc_to_cur_id     in varchar2,
                               pc_to_cur_code   in varchar2) return varchar2;

  function f_get_currency_pair_decimals(pc_from_cur_id in varchar2,
                                        pc_to_cur_id   in varchar2)
    return number;
  function f_get_is_same_classification(pc_from_qty_unit_id in varchar2,
                                        pc_to_qty_unit_id   in varchar2)
  
   return varchar2;

  function f_get_conv_factor(pc_from_qty_unit_id in varchar2,
                             pc_to_qty_unit_id   in varchar2,
                             pc_product_id       varchar2) return number;
  function fn_mass_volume_qty_conversion(pc_product_id                 in varchar2,
                                         pc_from_qty_unit_id           in varchar2,
                                         pc_to_qty_unit_id             in varchar2,
                                         pn_qty_to_be_converted        in number,
                                         pn_gravity                    in number,
                                         pc_gravity_type               in varchar2,
                                         pc_density_mass_qty_unit_id   in varchar2,
                                         pc_density_volume_qty_unit_id in varchar2)
    return number;
  procedure sp_bank_fx_rate(pc_corporate_id         in varchar2,
                            pd_trade_date           in date,
                            pd_maturity_date        in date,
                            pc_from_cur_id          in varchar2,
                            pc_to_cur_id            in varchar2,
                            pc_max_deviation        in number,
                            pc_from_where           in varchar2,
                            pc_process              in varchar2,
                            pc_settlement_price     out number,
                            pc_sum_of_forward_point out number);
  function fn_get_next_month_prompt_date(pc_promp_del_cal_id varchar2,
                                         pd_trade_date       date)
    return date;

end; 
/
create or replace package body pkg_general is

  function f_get_converted_currency_amt
  /**************************************************************************************************
    Function Name                       : f_get_converted_currency_amt
    Author                              : Janna
    Created Date                        : 19th Aug 2008
    Purpose                             : To convert a given amount between two currencies as on a given date
    
    Parameters                          :
    
    pc_corporate_id                     : Corporate ID
    pc_from_cur_id                      : From Currency
    pc_to_cur_id                        : To Currency
    pd_cur_date                         : Currency Date
    pn_amt_to_be_converted              : Amount to be converted
    
    Returns                             :
    
    Number                              : Converted amount
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id        in varchar2,
   pc_from_cur_id         in varchar2,
   pc_to_cur_id           in varchar2,
   pd_cur_date            in date,
   pn_amt_to_be_converted in number) return number is
    vn_result                    number;
    vc_base_cur_id               varchar2(30);
    vc_from_main_cur_id          varchar2(30);
    vc_to_main_cur_id            varchar2(30);
    vn_from_rate                 number;
    vn_from_main_currency_factor number := 1;
    vn_to_main_currency_factor   number := 1;
    vn_to_rate                   number;
  begin
    vn_from_rate        := 1;
    vn_to_rate          := 1;
    vc_from_main_cur_id := pc_from_cur_id;
    vc_to_main_cur_id   := pc_to_cur_id;
    -- Get the Base Currency ID of the corporate
    -- This is used to determine if one of the currencies given is the base currency itself
    -- Since AK_CORPORATE is not having Currency ID column and we are not changing it now
    -- We are joining CUR_CODE of CM with BASE_CURRENCY_NAME of AK_CORPORATE
    -- When AK_CORPORATE table is revamped change this code
    begin
      select base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
    
    exception
      when no_data_found then
        return - 1;
    end;
    -- Check if the currency passed is a sub-currency if yes take into account
    -- the sub currency factor...
    begin
      select scd.cur_id,
             scd.factor
        into vc_from_main_cur_id,
             vn_from_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_from_cur_id;
    exception
      when no_data_found then
        vn_from_main_currency_factor := 1;
        vc_from_main_cur_id          := pc_from_cur_id;
    end;
    begin
      select scd.cur_id,
             scd.factor
        into vc_to_main_cur_id,
             vn_to_main_currency_factor
        from cm_currency_master      cm,
             scd_sub_currency_detail scd
       where cm.cur_id = scd.cur_id
         and scd.sub_cur_id = pc_to_cur_id;
    exception
      when no_data_found then
        vn_to_main_currency_factor := 1;
        vc_to_main_cur_id          := pc_to_cur_id;
    end;
    if vc_base_cur_id = vc_from_main_cur_id and
       vc_base_cur_id = vc_to_main_cur_id then
      vn_from_rate := 1;
      vn_to_rate   := 1;
    else
      begin
        -- Get the From Currency Exchange rate
        if pc_to_cur_id = pc_from_cur_id then
          return(pn_amt_to_be_converted);
        else
          if vc_from_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_from_rate
              from cq_currency_quote cq
             where cq.cur_id = vc_from_main_cur_id
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = vc_from_main_cur_id
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
          -- Get the To Currency Exchange rate
          if vc_to_main_cur_id != vc_base_cur_id then
            select cq.close_rate
              into vn_to_rate
              from cq_currency_quote cq
             where cq.cur_id = upper(vc_to_main_cur_id)
               and cq.corporate_id = pc_corporate_id
               and cq.cur_date =
                   (select max(cq1.cur_date)
                      from cq_currency_quote cq1
                     where cq1.cur_id = upper(vc_to_main_cur_id)
                       and cq1.corporate_id = pc_corporate_id
                       and cq1.cur_date <= pd_cur_date);
          end if;
        end if;
      exception
        when no_data_found then
          return - 1;
      end;
    end if;
    vn_result := pn_amt_to_be_converted *
                 ((vn_to_rate / vn_to_main_currency_factor) /
                 (vn_from_rate / vn_from_main_currency_factor));
    return(vn_result);
  exception
    when no_data_found then
      return - 1;
  end;

  function f_get_is_derived_qty_unit(pc_qty_unit_id in varchar2)
    return varchar2 is
    vc_is_derived_unit varchar2(1);
  begin
    select qum.is_derrived
      into vc_is_derived_unit
      from qum_quantity_unit_master qum
     where qum.qty_unit_id = pc_qty_unit_id
       and is_deleted = 'N'
       and is_active = 'Y';
    return vc_is_derived_unit;
  exception
    when no_data_found then
      return 'N';
    when others then
      return 'N';
  end;

  function f_get_is_same_classification(pc_from_qty_unit_id in varchar2,
                                        pc_to_qty_unit_id   in varchar2)
    return varchar2 is
    vc_result             varchar2(1) := 'N';
    vc_from_qty_unit_type varchar2(15);
    vc_to_qty_unit_type   varchar2(15);
  begin
  
    select unit_type
      into vc_from_qty_unit_type
      from qum_quantity_unit_master
     where qty_unit_id = pc_from_qty_unit_id
       and is_active = 'Y'
       and is_deleted = 'N';
  
    select unit_type
      into vc_to_qty_unit_type
      from qum_quantity_unit_master
     where qty_unit_id = pc_to_qty_unit_id
       and is_active = 'Y'
       and is_deleted = 'N';
  
    if (vc_from_qty_unit_type = vc_to_qty_unit_type) then
      vc_result := 'Y';
    end if;
  
    return vc_result;
  exception
    when no_data_found then
      return 'X';
    when others then
      return 'X';
  end;
  function f_get_conv_factor(pc_from_qty_unit_id in varchar2,
                             pc_to_qty_unit_id   in varchar2,
                             pc_product_id       in varchar2) return number
  
   is
  
    vc_conv_factor           number(16, 8);
    vc_base_from_qty_unit_id varchar2(15) := pc_from_qty_unit_id;
    vc_base_to_qty_unit_id   varchar2(15) := pc_to_qty_unit_id;
    vc_from_to_der_factor    number(20, 5) := 1;
    vc_to_to_der_factor      number(20, 5) := 1;
    vc_is_from_der_qty_unit  varchar2(1);
    vc_is_to_der_qty_unit    varchar2(1);
  
  begin
  
    vc_is_from_der_qty_unit := f_get_is_derived_qty_unit(pc_from_qty_unit_id);
    vc_is_to_der_qty_unit   := f_get_is_derived_qty_unit(pc_to_qty_unit_id);
  
    if (vc_is_from_der_qty_unit = 'Y') then
    
      select dqu.qty_unit_id,
             dqu.qty
        into vc_base_from_qty_unit_id,
             vc_from_to_der_factor
        from dqu_derived_quantity_unit dqu
       where dqu.derrived_qty_unit_id = pc_from_qty_unit_id
         and dqu.product_id = pc_product_id
         and dqu.is_deleted = 'N';
    end if;
  
    if (vc_is_to_der_qty_unit = 'Y') then
      select dqu.qty_unit_id,
             dqu.qty
        into vc_base_to_qty_unit_id,
             vc_to_to_der_factor
        from dqu_derived_quantity_unit dqu
       where dqu.derrived_qty_unit_id = pc_to_qty_unit_id
         and dqu.product_id = pc_product_id
         and dqu.is_deleted = 'N';
    end if;
  
    if (vc_base_from_qty_unit_id = vc_base_to_qty_unit_id)
    
     then
      vc_conv_factor := vc_from_to_der_factor / vc_to_to_der_factor;
    
    else
    
      select multiplication_factor
        into vc_conv_factor
        from ucm_unit_conversion_master
       where from_qty_unit_id = vc_base_from_qty_unit_id
         and to_qty_unit_id = vc_base_to_qty_unit_id;
    
      vc_conv_factor := vc_conv_factor *
                        (vc_from_to_der_factor / vc_to_to_der_factor);
    
    end if;
  
    return vc_conv_factor;
  
  exception
    when no_data_found then
      return - 1;
    when others then
      return - 1;
  end;
  function f_get_converted_quantity(pc_product_id          in varchar2,
                                    pc_from_qty_unit_id    in varchar2,
                                    pc_to_qty_unit_id      in varchar2,
                                    pn_qty_to_be_converted in number)
    return number is
    vn_conv_factor             number;
    vn_converted_qty           number;
    vc_is_from_der_qty_unit_id varchar2(1);
    vc_is_to_der_qty_unit_id   varchar2(1);
    vc_base_form_qty_unit_id   varchar2(15) := pc_from_qty_unit_id;
    vn_from_der_to_base_conv   number(20, 5) := 1;
    vc_base_to_qty_unit_id     varchar2(15) := pc_to_qty_unit_id;
    vn_to_der_to_base_conv     number(20, 5) := 1;
  begin
    begin
      vc_is_from_der_qty_unit_id := f_get_is_derived_qty_unit(pc_from_qty_unit_id);
      vc_is_to_der_qty_unit_id   := f_get_is_derived_qty_unit(pc_to_qty_unit_id);
      if (vc_is_from_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_form_qty_unit_id,
               vn_from_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_from_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      if (vc_is_to_der_qty_unit_id = 'Y') then
        select dqu.qty_unit_id,
               dqu.qty
          into vc_base_to_qty_unit_id,
               vn_to_der_to_base_conv
          from dqu_derived_quantity_unit dqu
         where dqu.derrived_qty_unit_id = pc_to_qty_unit_id
           and dqu.product_id = pc_product_id
           and rownum < 2;
      end if;
      select ucm.multiplication_factor
        into vn_conv_factor
        from ucm_unit_conversion_master ucm
       where ucm.from_qty_unit_id = vc_base_form_qty_unit_id
         and ucm.to_qty_unit_id = vc_base_to_qty_unit_id;
      vn_converted_qty := round(vn_from_der_to_base_conv /
                                vn_to_der_to_base_conv * vn_conv_factor *
                                pn_qty_to_be_converted,
                                15);
      return vn_converted_qty;
    exception
      when no_data_found then
        return - 1;
      when others then
        return - 1;
    end;
  end;

  procedure sp_forward_cur_exchange_rate
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Janna
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
  begin
    --Package modeified to by assuming from currency as Any currency other than Base corporate Currency
    -- To Currency is always the Base currency
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_currency_forward_quotes cfq
         where cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_to_cur_id
           and cfq.quote_cur_id = pc_from_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.prompt_date < pc_maturity_date
             and cfq.base_cur_id = pc_to_cur_id
             and cfq.quote_cur_id = pc_from_cur_id;
        exception
          when no_data_found then
            null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.prompt_date > pc_maturity_date
             and cfq.base_cur_id = pc_to_cur_id
             and cfq.quote_cur_id = pc_from_cur_id;
        exception
          when no_data_found then
            null;
        end;
        vn_lower_date_diff := abs(pc_maturity_date - vd_lower_date);
        vn_upper_date_diff := abs(pc_maturity_date - vd_upper_date);
        if vn_lower_date_diff < vn_upper_date_diff then
          vd_maturity_date := vd_lower_date;
        else
          vd_maturity_date := vd_upper_date;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select row_number() over(partition by cfq.trade_date order by cfq.trade_date desc) seq,
                        cfq.rate settlement_price, -- it's included with spot and forward now
                       0 sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.trade_date <= pd_trade_date
                   and cfq.prompt_date = vd_maturity_date
                   and cfq.base_cur_id = pc_to_cur_id
                   and cfq.quote_cur_id = pc_from_cur_id) t
         where seq = 1;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
  exception
    when no_data_found then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
    when others then
      dbms_output.put_line(sqlerrm);
  end;

  function f_get_base_cur_id(pc_cur_id varchar2) return varchar2 is
    /**************************************************************************************************
    Function Name                       : f_get_base_cur_id
    Author                              : Janna
    Created Date                        : 9th Mar 2009
    Purpose                             : To get the base currency for a given currency
    
    Parameters                          :
    
    pc_cur_id                           : Sub Currency or Main Currency
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
    vc_base_cur_id varchar2(15);
  begin
    select (case
             when cm.is_sub_cur = 'Y' then
              scd.cur_id
             else
              cm.cur_id
           end) base_currency_id
      into vc_base_cur_id
      from cm_currency_master      cm,
           scd_sub_currency_detail scd,
           cm_currency_master      cm_1
     where cm.cur_id = pc_cur_id
       and cm.cur_id = scd.sub_cur_id(+)
       and scd.cur_id = cm_1.cur_id(+);
    return vc_base_cur_id;
  end;

  procedure sp_get_base_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number) is
    --------------------------------------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_get_base_cur_detail
    --        Author                                    : Janna
    --        Created Date                              : 31st Mar 2009
    --        Purpose                                   : Get Base currency details for a sub currency
    --
    --        Parameters
    --        pc_cur_id                                 : Sub Currency ID ID
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------------------------------------
  begin
    select (case
             when cm.is_sub_cur = 'Y' then
              scd.cur_id
             else
              cm.cur_id
           end) base_currency_id,
           (case
             when cm.is_sub_cur = 'Y' then
              cm_1.cur_code
             else
              cm.cur_code
           end) cur_code,
           nvl(scd.factor, 1) factor
      into pc_base_cur_id,
           pc_base_cur_code,
           pn_sub_cur_id_factor
      from cm_currency_master      cm,
           scd_sub_currency_detail scd,
           cm_currency_master      cm_1
     where cm.cur_id = pc_cur_id
       and cm.cur_id = scd.sub_cur_id(+)
       and scd.cur_id = cm_1.cur_id(+);
  exception
    when no_data_found then
      pn_sub_cur_id_factor := 1;
      pc_base_cur_id       := pc_cur_id;
      select cm.cur_code
        into pc_base_cur_code
        from cm_currency_master cm
       where cm.cur_id = pc_cur_id;
  end;

  procedure sp_get_main_cur_detail(pc_cur_id            varchar2,
                                   pc_base_cur_id       out varchar2,
                                   pc_base_cur_code     out varchar2,
                                   pn_sub_cur_id_factor out number,
                                   pn_base_cur_decimals out number) is
    --------------------------------------------------------------------------------------------------------------------------
    --        Procedure Name                            : sp_get_main_cur_detail
    --        Author                                    : Janna
    --        Created Date                              : 31st Mar 2009
    --        Purpose                                   : Get Base currency details for a sub currency
    --
    --        Parameters
    --        pc_cur_id                                 : Sub Currency ID ID
    --
    --        Modification History
    --        Modified Date                             :
    --        Modified By                               :
    --        Modify Description                        :
    --------------------------------------------------------------------------------------------------------------------------
  begin
    --write_log(null,'pc_cur_id'||pc_cur_id);
    select (case
             when cm.is_sub_cur = 'Y' then
              scd.cur_id
             else
              cm.cur_id
           end) base_currency_id,
           (case
             when cm.is_sub_cur = 'Y' then
              cm_1.cur_code
             else
              cm.cur_code
           end) cur_code,
           nvl(scd.factor, 1) factor,
           (case
             when cm.is_sub_cur = 'Y' then
              cm_1.decimals
             else
              cm.decimals
           end)
      into pc_base_cur_id,
           pc_base_cur_code,
           pn_sub_cur_id_factor,
           pn_base_cur_decimals
      from cm_currency_master      cm,
           scd_sub_currency_detail scd,
           cm_currency_master      cm_1
     where cm.cur_id = pc_cur_id
       and cm.cur_id = scd.sub_cur_id(+)
       and scd.cur_id = cm_1.cur_id(+);
    --write_log(null,'sp_get_main_cur_detail'); 
  exception
    when no_data_found then
      dbms_output.put_line('pc_cur_id' || pc_cur_id);
      --   pn_sub_cur_id_factor := 1;
    --    pc_base_cur_id       := pc_cur_id;
  
    when others then
      pn_sub_cur_id_factor := 1;
      pc_base_cur_id       := pc_cur_id;
      select cm.cur_code
        into pc_base_cur_code
        from cm_currency_master cm
       where cm.cur_id = pc_cur_id;
      --write_log(null,'sp_get_main_cur_detail'); 
  end;

  procedure sp_spot_cur_exchange_rate
  /**************************************************************************************************
    Function Name                       : sp_spot_cur_exchange
    Author                              : Lalit
    Created Date                        : 16 Sep 2009
    Purpose                             : To get Spot rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
  begin
    if pc_from_cur_id = pc_to_cur_id then
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    else
      begin
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select cfq.rate settlement_price,
                       nvl(cfq.forward_point, 0) sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.trade_date = pd_trade_date
                   and cfq.is_spot = 'Y'
                   and cfq.base_cur_id = pc_from_cur_id
                   and cfq.quote_cur_id = pc_to_cur_id) t;
      exception
        when no_data_found then
          select decode(nvl(t.settlement_price, 0),
                        0,
                        0,
                        1 / t.settlement_price),
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_currency_forward_quotes cfq
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date = pd_trade_date
                     and cfq.is_spot = 'Y'
                     and cfq.base_cur_id = pc_to_cur_id
                     and cfq.quote_cur_id = pc_from_cur_id) t;
      end;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_ltst_spot_cur_exchange_rate
  /**************************************************************************************************
    Function Name                       : sp_spot_cur_exchange
    Author                              : Lalit
    Created Date                        : 16 Sep 2009
    Purpose                             : To get Spot rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
  begin
    if pc_from_cur_id = pc_to_cur_id then
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    else
      begin
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select cfq.rate settlement_price,
                       nvl(cfq.forward_point, 0) sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.trade_date <= pd_trade_date
                   and cfq.is_spot = 'Y'
                   and cfq.base_cur_id = pc_from_cur_id
                   and cfq.quote_cur_id = pc_to_cur_id
                 order by cfq.trade_date desc) t
         where rownum = 1;
      exception
        when no_data_found then
          select decode(nvl(t.settlement_price, 0),
                        0,
                        0,
                        1 / t.settlement_price),
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_currency_forward_quotes cfq
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date <= pd_trade_date
                     and cfq.is_spot = 'Y'
                     and cfq.base_cur_id = pc_to_cur_id
                     and cfq.quote_cur_id = pc_from_cur_id
                   order by cfq.trade_date desc) t
           where rownum = 1;
      end;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_forward_cur_exchange_new
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Suresh Gottipati
    Created Date                        : 03rd Feb 2012
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
    --vc_base_cur_id               varchar2(30);
    --pc_settlement_price_from     number;
    --pc_sum_of_forward_point_from number;
    --pc_settlement_price_to number;
    --pc_sum_of_forward_point_to   number;
    vc_insturment_id    varchar2(15);
    vd_valid_quote_date date;
  begin
  
 if pc_from_cur_id is not null and pc_to_cur_id is not null and pc_from_cur_id <> pc_to_cur_id then
    begin
      select cci.instrument_id,
             cdim.valid_quote_date
        into vc_insturment_id,
             vd_valid_quote_date
        from cci_corp_currency_instrument cci,
             cdim_corporate_dim           cdim,
             dim_der_instrument_master    dim,
             pdd_product_derivative_def   pdd,
             pdm_productmaster            pdm
       where cci.corporate_id = pc_corporate_id
         and cci.instrument_id = cdim.instrument_id
         and dim.instrument_id = cdim.instrument_id
         and dim.product_derivative_id = pdd.derivative_def_id
         and pdd.product_id = pdm.product_id
         and pdm.base_cur_id = pc_from_cur_id
         and pdm.quote_cur_id = pc_to_cur_id
         and cci.is_deleted = 'N'
         and cdim.is_active = 'Y'
         and pdm.is_active = 'Y'
         and pdd.is_active = 'Y'
         and dim.is_active = 'Y';
    exception
      when no_data_found then
        select cci.instrument_id,
               cdim.valid_quote_date
          into vc_insturment_id,
               vd_valid_quote_date
          from cci_corp_currency_instrument cci,
               cdim_corporate_dim           cdim,
               dim_der_instrument_master    dim,
               pdd_product_derivative_def   pdd,
               pdm_productmaster            pdm
         where cci.corporate_id = pc_corporate_id
           and cci.instrument_id = cdim.instrument_id
           and dim.instrument_id = cdim.instrument_id
           and dim.product_derivative_id = pdd.derivative_def_id
           and pdd.product_id = pdm.product_id
           and pdm.base_cur_id = pc_to_cur_id
           and pdm.quote_cur_id = pc_from_cur_id
           and cci.is_deleted = 'N'
           and cdim.is_active = 'Y'
           and dim.is_active = 'Y'
           and pdd.is_active = 'Y'
           and pdm.is_active = 'Y';
    end;
  
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_cci_cur_forward_quotes cfq,
               div_der_instrument_valuation  div
         where cfq.corporate_id = pc_corporate_id
           and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
           and cfq.instrument_id = div.instrument_id
           and cfq.price_source_id = div.price_source_id
           and div.is_deleted = 'N'
           and cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_from_cur_id
           and cfq.quote_cur_id = pc_to_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation  div
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
             and cfq.instrument_id = div.instrument_id
             and cfq.price_source_id = div.price_source_id
             and div.is_deleted = 'N'
             and cfq.prompt_date <= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_lower_date := null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation  div
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
             and cfq.instrument_id = div.instrument_id
             and cfq.price_source_id = div.price_source_id
             and div.is_deleted = 'N'
             and cfq.prompt_date >= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --Lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_upper_date := null;
        end;
        vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                  999);
        vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                  999);
        if vd_lower_date is null and vd_upper_date is null then
          vd_maturity_date    := null;
          pc_settlement_price := 0;
        else
          if vn_lower_date_diff <= vn_upper_date_diff then
            vd_maturity_date := vd_lower_date;
          else
            vd_maturity_date := vd_upper_date;
          end if;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        begin
          select t.settlement_price,
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_cci_cur_forward_quotes cfq,
                         div_der_instrument_valuation  div
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date =
                         nvl(vd_valid_quote_date, pd_trade_date)
                     and cfq.instrument_id = div.instrument_id
                     and cfq.price_source_id = div.price_source_id
                     and div.is_deleted = 'N'
                     and cfq.prompt_date = vd_maturity_date
                     and cfq.base_cur_id = pc_from_cur_id
                     and cfq.quote_cur_id = pc_to_cur_id) t;
        exception
          when no_data_found then
            pc_settlement_price     := 0;
            pc_sum_of_forward_point := 0;
        end;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
      if pc_settlement_price = 0 then
        -- its likely that the pair is not configured.
        --try reverse pair 
        begin
          select max(cfq.prompt_date)
            into vd_maturity_date
            from mv_cfq_cci_cur_forward_quotes cfq,
                 div_der_instrument_valuation  div
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
             and cfq.prompt_date = pc_maturity_date
             and cfq.instrument_id = div.instrument_id
             and cfq.price_source_id = div.price_source_id
             and div.is_deleted = 'N'
             and cfq.base_cur_id = pc_to_cur_id
             and cfq.quote_cur_id = pc_from_cur_id;
        exception
          when no_data_found then
            vd_maturity_date := null;
        end;
      
        if vd_maturity_date is null then
          begin
            select max(cfq.prompt_date)
              into vd_lower_date
              from mv_cfq_cci_cur_forward_quotes cfq,
                   div_der_instrument_valuation  div
             where cfq.corporate_id = pc_corporate_id
               and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
               and cfq.prompt_date <= pc_maturity_date
               and cfq.instrument_id = div.instrument_id
               and cfq.price_source_id = div.price_source_id
               and div.is_deleted = 'N'
               and abs(pc_maturity_date - cfq.prompt_date) <=
                   pc_max_deviation --lalit
               and cfq.base_cur_id = pc_to_cur_id
               and cfq.quote_cur_id = pc_from_cur_id;
          exception
            when no_data_found then
              vd_lower_date := null;
          end;
          begin
            select min(cfq.prompt_date)
              into vd_upper_date
              from mv_cfq_cci_cur_forward_quotes cfq,
                   div_der_instrument_valuation  div
             where cfq.corporate_id = pc_corporate_id
               and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
               and cfq.instrument_id = div.instrument_id
               and cfq.price_source_id = div.price_source_id
               and div.is_deleted = 'N'
               and cfq.prompt_date >= pc_maturity_date
               and abs(pc_maturity_date - cfq.prompt_date) <=
                   pc_max_deviation --Lalit
               and cfq.base_cur_id = pc_to_cur_id
               and cfq.quote_cur_id = pc_from_cur_id;
          exception
            when no_data_found then
              vd_upper_date := null;
          end;
          vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                    999);
          vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                    999);
          if vd_lower_date is null and vd_upper_date is null then
            vd_maturity_date    := null;
            pc_settlement_price := 0;
          else
            if vn_lower_date_diff <= vn_upper_date_diff then
              vd_maturity_date := vd_lower_date;
            else
              vd_maturity_date := vd_upper_date;
            end if;
          end if;
        end if;
      
        if vd_maturity_date is not null then
          begin
            select 1 / t.settlement_price,
                   t.sum_forward_point
              into pc_settlement_price,
                   pc_sum_of_forward_point
              from (select cfq.rate settlement_price,
                           nvl(cfq.forward_point, 0) sum_forward_point
                      from mv_cfq_cci_cur_forward_quotes cfq,
                           div_der_instrument_valuation  div
                     where cfq.corporate_id = pc_corporate_id
                       and cfq.trade_date =
                           nvl(vd_valid_quote_date, pd_trade_date)
                       and cfq.instrument_id = div.instrument_id
                       and cfq.price_source_id = div.price_source_id
                       and div.is_deleted = 'N'
                       and cfq.prompt_date = vd_maturity_date
                       and cfq.base_cur_id = pc_to_cur_id
                       and cfq.quote_cur_id = pc_from_cur_id) t;
          exception
            when no_data_found then
              pc_settlement_price     := 0;
              pc_sum_of_forward_point := 0;
          end;
        else
          pc_settlement_price     := 0;
          pc_sum_of_forward_point := 0;
        end if;
      end if;
      pc_settlement_price := round(nvl(pc_settlement_price, 0), 10);
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
   else
     pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
   end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_forward_cur_exchange_old
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Janna
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date                date;
    vd_upper_date                date;
    vd_maturity_date             date;
    vn_lower_date_diff           number;
    vn_upper_date_diff           number;
    vc_base_cur_id               varchar2(30);
    pc_settlement_price_from     number;
    pc_sum_of_forward_point_from number;
    pc_settlement_price_to       number;
    pc_sum_of_forward_point_to   number;
  begin
    begin
      select akc.base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
    
    end;
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_currency_forward_quotes cfq
         where cfq.corporate_id = pc_corporate_id
           and cfq.trade_date = pd_trade_date
           and cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_from_cur_id
           and cfq.quote_cur_id = pc_to_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date <= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_lower_date := null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date >= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --Lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_upper_date := null;
        end;
        vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                  999);
        vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                  999);
        if vd_lower_date is null and vd_upper_date is null then
          vd_maturity_date    := null;
          pc_settlement_price := 0;
        else
          if vn_lower_date_diff <= vn_upper_date_diff then
            vd_maturity_date := vd_lower_date;
          else
            vd_maturity_date := vd_upper_date;
          end if;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        begin
          select t.settlement_price,
                 t.sum_forward_point
            into pc_settlement_price,
                 pc_sum_of_forward_point
            from (select cfq.rate settlement_price,
                         nvl(cfq.forward_point, 0) sum_forward_point
                    from mv_cfq_currency_forward_quotes cfq
                   where cfq.corporate_id = pc_corporate_id
                     and cfq.trade_date = pd_trade_date
                     and cfq.prompt_date = vd_maturity_date
                     and cfq.base_cur_id = pc_from_cur_id
                     and cfq.quote_cur_id = pc_to_cur_id) t;
        exception
          when no_data_found then
            pc_settlement_price     := 0;
            pc_sum_of_forward_point := 0;
        end;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
      if vd_lower_date is null and vd_upper_date is null and
         pc_settlement_price = 0 then
        -- its likely that the pair is not configured.
        --try reverse pair 
        if pc_from_cur_id != vc_base_cur_id then
          sp_forward_cur_exchange_sub(pc_corporate_id,
                                      pd_trade_date,
                                      pc_maturity_date,
                                      pc_from_cur_id,
                                      vc_base_cur_id,
                                      pc_max_deviation,
                                      pc_settlement_price_from,
                                      pc_sum_of_forward_point_from);
        else
          pc_settlement_price_from     := 1;
          pc_sum_of_forward_point_from := 0;
        end if;
        if pc_to_cur_id != vc_base_cur_id then
          sp_forward_cur_exchange_sub(pc_corporate_id,
                                      pd_trade_date,
                                      pc_maturity_date,
                                      pc_to_cur_id,
                                      vc_base_cur_id,
                                      pc_max_deviation,
                                      pc_settlement_price_to,
                                      pc_sum_of_forward_point_to);
        else
          pc_settlement_price_to     := 1;
          pc_sum_of_forward_point_to := 0;
        end if;
        if nvl(pc_settlement_price_from, 0) <> 0 and
           nvl(pc_settlement_price_to, 0) <> 0 then
          pc_settlement_price     := pc_settlement_price_from /
                                     pc_settlement_price_to;
          pc_sum_of_forward_point := pc_sum_of_forward_point_from; --Fix for automation-- /pc_sum_of_forward_point_to;
        else
          sp_forward_cur_exchange_sub(pc_corporate_id,
                                      pd_trade_date,
                                      pc_maturity_date,
                                      pc_to_cur_id,
                                      pc_from_cur_id,
                                      pc_max_deviation,
                                      pc_settlement_price,
                                      pc_sum_of_forward_point);
          if nvl(pc_settlement_price, 0) = 0 then
            if pc_to_cur_id != vc_base_cur_id then
              sp_forward_cur_exchange_sub(pc_corporate_id,
                                          pd_trade_date,
                                          pc_maturity_date,
                                          pc_to_cur_id,
                                          vc_base_cur_id,
                                          pc_max_deviation,
                                          pc_settlement_price_from,
                                          pc_sum_of_forward_point_from);
            else
              pc_settlement_price_from     := 1;
              pc_sum_of_forward_point_from := 0;
            end if;
            if pc_from_cur_id != vc_base_cur_id then
              sp_forward_cur_exchange_sub(pc_corporate_id,
                                          pd_trade_date,
                                          pc_maturity_date,
                                          pc_from_cur_id,
                                          vc_base_cur_id,
                                          pc_max_deviation,
                                          pc_settlement_price_to,
                                          pc_sum_of_forward_point_to);
            else
              pc_settlement_price_to     := 1;
              pc_sum_of_forward_point_to := 0;
            end if;
            if nvl(pc_settlement_price_from, 0) <> 0 and
               nvl(pc_settlement_price_to, 0) <> 0 then
              pc_settlement_price     := pc_settlement_price_from /
                                         pc_settlement_price_to;
              pc_sum_of_forward_point := pc_sum_of_forward_point_from; --fix for automation --/pc_sum_of_forward_point_to;
            else
              pc_settlement_price     := 0;
              pc_sum_of_forward_point := 0;
            end if;
          end if;
        end if;
      end if;
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
    --pc_settlement_price     := 1;
    --pc_sum_of_forward_point := 0;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  procedure sp_forward_cur_exchange_sub
  /**************************************************************************************************
    Function Name                       : sp_forward_cur_exchange_rate
    Author                              : Janna
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward cexchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pc_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
    vc_base_cur_id     varchar2(30);
    --pc_settlement_price_from     NUMBER;
    --pc_sum_of_forward_point_from NUMBER;
    --pc_settlement_price_to       NUMBER;
    --pc_sum_of_forward_point_to   NUMBER;
  begin
    begin
      select akc.base_cur_id
        into vc_base_cur_id
        from ak_corporate akc
       where akc.corporate_id = pc_corporate_id;
    end;
    if pc_from_cur_id <> pc_to_cur_id then
      begin
        select max(cfq.prompt_date)
          into vd_maturity_date
          from mv_cfq_currency_forward_quotes cfq
         where cfq.corporate_id = pc_corporate_id
              --AND    cfq.groupid = akc.groupid preeti
           and cfq.trade_date = pd_trade_date
           and cfq.prompt_date = pc_maturity_date
           and cfq.base_cur_id = pc_from_cur_id
           and cfq.quote_cur_id = pc_to_cur_id;
      exception
        when no_data_found then
          vd_maturity_date := null;
      end;
      if vd_maturity_date is null then
        begin
          select max(cfq.prompt_date)
            into vd_lower_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
                --AND    cfq.groupid = akc.groupid preeti
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date <= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_lower_date := null;
        end;
        begin
          select min(cfq.prompt_date)
            into vd_upper_date
            from mv_cfq_currency_forward_quotes cfq
           where cfq.corporate_id = pc_corporate_id
             and cfq.trade_date = pd_trade_date
             and cfq.prompt_date >= pc_maturity_date
             and abs(pc_maturity_date - cfq.prompt_date) <=
                 pc_max_deviation --Lalit
             and cfq.base_cur_id = pc_from_cur_id
             and cfq.quote_cur_id = pc_to_cur_id;
        exception
          when no_data_found then
            vd_upper_date := null;
        end;
        vn_lower_date_diff := nvl(abs(pc_maturity_date - vd_lower_date),
                                  999);
        vn_upper_date_diff := nvl(abs(pc_maturity_date - vd_upper_date),
                                  999);
        if vd_lower_date is null and vd_upper_date is null then
          vd_maturity_date    := null;
          pc_settlement_price := 0;
        else
          if vn_lower_date_diff <= vn_upper_date_diff then
            vd_maturity_date := vd_lower_date;
          else
            vd_maturity_date := vd_upper_date;
          end if;
        end if;
      end if;
      --If the maturity date is configured for the currency pair get the exchange rate
      if vd_maturity_date is not null then
        select t.settlement_price,
               t.sum_forward_point
          into pc_settlement_price,
               pc_sum_of_forward_point
          from (select cfq.rate settlement_price,
                       nvl(cfq.forward_point, 0) sum_forward_point
                  from mv_cfq_currency_forward_quotes cfq
                 where cfq.corporate_id = pc_corporate_id
                      --AND    cfq.groupid = akc.groupid preeti
                   and cfq.trade_date = pd_trade_date
                   and cfq.prompt_date = vd_maturity_date
                   and cfq.base_cur_id = pc_from_cur_id
                   and cfq.quote_cur_id = pc_to_cur_id) t;
      else
        pc_settlement_price     := 0;
        pc_sum_of_forward_point := 0;
      end if;
    else
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    end if;
  exception
    when others then
      pc_settlement_price     := 0;
      pc_sum_of_forward_point := 0;
  end;

  function fn_forward_interest_rate
  /**************************************************************************************************
    Function Name                       : sp_forward_Interest_rate
    Author                              : LALIT
    Created Date                        : 1st Mar 2009
    Purpose                             : To get forward Interest rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id      in varchar2,
   pd_trade_date        in date,
   pc_payment_due_date  in date,
   pc_ir_id             in varchar2,
   pc_interest_curve_id in varchar2) return number is
    vd_lower_date      date;
    vd_upper_date      date;
    vd_maturity_date   date;
    vn_lower_date_diff number;
    vn_upper_date_diff number;
    vn_interest_rate   number;
  begin
    begin
      select max(icd.maturity_date)
        into vd_lower_date
        from ich_interest_curve_header@eka_appdb ich,
             icd_interest_curve_detail@eka_appdb icd
       where icd.maturity_date < pc_payment_due_date
         and icd.ir_id = ich.ir_id
         and ich.interest_curve_id = pc_interest_curve_id
         and icd.ir_id = pc_ir_id
         and ich.trade_date = pd_trade_date;
    end;
    begin
      select min(icd.maturity_date)
        into vd_lower_date
        from ich_interest_curve_header@eka_appdb ich,
             icd_interest_curve_detail@eka_appdb icd
       where icd.maturity_date > pc_payment_due_date
         and icd.ir_id = ich.ir_id
         and ich.interest_curve_id = pc_interest_curve_id
         and icd.ir_id = pc_ir_id
         and ich.trade_date = pd_trade_date;
    end;
    vn_lower_date_diff := abs(pc_payment_due_date - vd_lower_date);
    vn_upper_date_diff := abs(pc_payment_due_date - vd_upper_date);
    if vn_lower_date_diff < vn_upper_date_diff then
      vd_maturity_date := vd_lower_date;
    else
      vd_maturity_date := vd_upper_date;
    end if;
    select icd.market_rate
      into vn_interest_rate
      from ich_interest_curve_header@eka_appdb ich,
           icd_interest_curve_detail@eka_appdb icd
     where icd.maturity_date = vd_maturity_date
       and icd.ir_id = ich.ir_id
       and ich.interest_curve_id = pc_interest_curve_id
       and icd.ir_id = pc_ir_id
       and ich.trade_date = pd_trade_date;
    return(vn_interest_rate);
  end;

  function f_get_currency_pair(pc_corporate_id  varchar2,
                               pc_from_cur_id   in varchar2,
                               pc_from_cur_code in varchar2,
                               pc_to_cur_id     in varchar2,
                               pc_to_cur_code   in varchar2) return varchar2 is
    vc_result        varchar2(100);
    vc_base_cur_id   varchar2(15);
    vc_base_cur_code varchar2(15);
    vc_result1       varchar2(50);
    vc_result2       varchar2(50);
  begin
    select cm.cur_id,
           cm.cur_code
      into vc_base_cur_id,
           vc_base_cur_code
      from ak_corporate       akc,
           cm_currency_master cm
     where akc.corporate_id = pc_corporate_id
       and akc.base_currency_name = cm.cur_code;
    if pc_from_cur_id <> pc_to_cur_id then
      --
      -- Check the to currency in the currency pair
      -- If it is Base currency then we need to get the exchange rate directly
      --
      if pc_to_cur_id = vc_base_cur_id then
        vc_result := pc_from_cur_code || '/' || pc_to_cur_code;
      else
        -- Get Exchange Rate from 'From Currency ID' to Base Currency ID = X
        -- Get Exchange Rate from 'To Currency ID' to Base Currency ID = Y
        -- Exchange Rate and Forward Point = X/Y
        if pc_from_cur_id <> vc_base_cur_id then
          vc_result1 := pc_from_cur_code || '/' || vc_base_cur_code;
        else
          vc_result1 := '';
        end if;
        if pc_to_cur_id <> vc_base_cur_id then
          vc_result2 := pc_to_cur_code || '/' || vc_base_cur_code;
        else
          vc_result2 := '';
        end if;
        if vc_result1 is not null and vc_result2 is not null then
          vc_result := vc_result1 || ', ' || vc_result2;
        elsif vc_result1 is null and vc_result2 is not null then
          vc_result := vc_result2;
        elsif vc_result1 is not null and vc_result2 is null then
          vc_result := vc_result1;
        else
          vc_result := '';
        end if;
      end if;
    else
      vc_result := '';
    end if;
    return(vc_result);
  exception
    when no_data_found then
      vc_result := '';
      return(vc_result);
    when others then
      vc_result := '';
      return(vc_result);
  end;

  function f_get_currency_pair_decimals(pc_from_cur_id in varchar2,
                                        pc_to_cur_id   in varchar2)
    return number is
    vn_cur_decimal number;
  begin
    begin
      vn_cur_decimal := 8;
      /* SELECT nvl(fcm.factor, 8)
       INTO vn_cur_decimal
       FROM fcm_forex_conversion_master fcm
      WHERE fcm.from_cur_unit_id = pc_from_cur_id
        AND fcm.to_cur_unit_id = pc_to_cur_id;*/
    exception
      when no_data_found then
        vn_cur_decimal := 8;
      when others then
        vn_cur_decimal := 8;
    end;
    return(vn_cur_decimal);
  end;
  function fn_mass_volume_qty_conversion(
                                         
                                         pc_product_id                 in varchar2,
                                         pc_from_qty_unit_id           in varchar2,
                                         pc_to_qty_unit_id             in varchar2,
                                         pn_qty_to_be_converted        in number,
                                         pn_gravity                    in number,
                                         pc_gravity_type               in varchar2,
                                         pc_density_mass_qty_unit_id   in varchar2,
                                         pc_density_volume_qty_unit_id in varchar2)
    return number is
    vn_conv_factor            number;
    vn_converted_qty          number;
    vc_is_same_classification varchar2(1);
    vn_gravity_to_use         number;
    vn_api_gravity_dividend   number(20, 5) := 141.5;
    vn_api_gravity_add        number(20, 5) := 131.5;
    vn_temp_result            number;
  begin
  
    vc_is_same_classification := f_get_is_same_classification(pc_from_qty_unit_id,
                                                              pc_to_qty_unit_id);
  
    if (vc_is_same_classification = 'Y') then
    
      vn_conv_factor   := f_get_conv_factor(pc_from_qty_unit_id,
                                            pc_to_qty_unit_id,
                                            pc_product_id);
      vn_converted_qty := pn_qty_to_be_converted * vn_conv_factor;
    
    else
      if (pc_gravity_type = 'SG') then
        vn_gravity_to_use := pn_gravity;
      else
        vn_gravity_to_use := vn_api_gravity_dividend /
                             (pn_gravity + vn_api_gravity_add);
      end if;
    
      vc_is_same_classification := f_get_is_same_classification(pc_from_qty_unit_id,
                                                                pc_density_mass_qty_unit_id);
      if (vc_is_same_classification = 'Y') then
        vn_conv_factor   := f_get_conv_factor(pc_from_qty_unit_id,
                                              pc_density_mass_qty_unit_id,
                                              pc_product_id);
        vn_temp_result   := pn_qty_to_be_converted * vn_conv_factor;
        vn_temp_result   := vn_temp_result / vn_gravity_to_use;
        vn_converted_qty := vn_temp_result *
                            f_get_conv_factor(pc_density_volume_qty_unit_id,
                                              pc_to_qty_unit_id,
                                              pc_product_id);
      else
        vn_conv_factor   := f_get_conv_factor(pc_from_qty_unit_id,
                                              pc_density_volume_qty_unit_id,
                                              pc_product_id);
        vn_temp_result   := pn_qty_to_be_converted * vn_conv_factor;
        vn_temp_result   := vn_temp_result * vn_gravity_to_use;
        vn_converted_qty := vn_temp_result *
                            f_get_conv_factor(pc_density_mass_qty_unit_id,
                                              pc_to_qty_unit_id,
                                              pc_product_id);
      end if;
    
    end if;
  
    return vn_converted_qty;
  
  exception
    when no_data_found then
      return - 1;
    when others then
      return - 1;
    
  end;

  procedure sp_bank_fx_rate
  /**************************************************************************************************
    Function Name                       : sp_bank_fx_rate
    Author                              : Suresh Gottipati
    Created Date                        : 03rd Feb 2012
    Purpose                             : To get forward exchange rates
    
    Parameters                          :
    
    Returns                             :
    
    Number                              : Converted Qty
    
    Modification History
    
    Modified Date  :
    Modified By  :
    Modify Description :
    ***************************************************************************************************/
  (pc_corporate_id         in varchar2,
   pd_trade_date           in date,
   pd_maturity_date        in date,
   pc_from_cur_id          in varchar2,
   pc_to_cur_id            in varchar2,
   pc_max_deviation        in number,
   pc_from_where           in varchar2,
   pc_process              in varchar2,
   pc_settlement_price     out number,
   pc_sum_of_forward_point out number) is
    vd_lower_date       date;
    vd_upper_date       date;
    vd_maturity_date    date;
    vn_lower_date_diff  number;
    vn_upper_date_diff  number;
    vobj_error_log      tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count  number := 1;
    vc_from_cur_code    varchar2(15);
    vc_to_cur_code      varchar2(15);
    vc_insturment_id    varchar2(15);
    vd_valid_quote_date date;
  begin
    if pc_from_cur_id = pc_to_cur_id then
      pc_settlement_price     := 1;
      pc_sum_of_forward_point := 0;
    else
      begin
        select cm.cur_code
          into vc_from_cur_code
          from cm_currency_master cm
         where cm.cur_id = pc_from_cur_id;
        select cm.cur_code
          into vc_to_cur_code
          from cm_currency_master cm
         where cm.cur_id = pc_to_cur_id;
        begin
          select cci.instrument_id,
                 cdim.valid_quote_date
            into vc_insturment_id,
                 vd_valid_quote_date
            from cci_corp_currency_instrument cci,
                 cdim_corporate_dim           cdim,
                 dim_der_instrument_master    dim,
                 pdd_product_derivative_def   pdd,
                 pdm_productmaster            pdm
           where cci.corporate_id = pc_corporate_id
             and cci.instrument_id = cdim.instrument_id
             and dim.instrument_id = cdim.instrument_id
             and dim.product_derivative_id = pdd.derivative_def_id
             and pdd.product_id = pdm.product_id
             and pdm.base_cur_id = pc_from_cur_id
             and pdm.quote_cur_id = pc_to_cur_id
             and cci.is_deleted = 'N'
             and cdim.is_active = 'Y'
             and pdm.is_active = 'Y'
             and pdd.is_active = 'Y'
             and dim.is_active = 'Y';
        exception
          when no_data_found then
            select cci.instrument_id,
                   cdim.valid_quote_date
              into vc_insturment_id,
                   vd_valid_quote_date
              from cci_corp_currency_instrument cci,
                   cdim_corporate_dim           cdim,
                   dim_der_instrument_master    dim,
                   pdd_product_derivative_def   pdd,
                   pdm_productmaster            pdm
             where cci.corporate_id = pc_corporate_id
               and cci.instrument_id = cdim.instrument_id
               and dim.instrument_id = cdim.instrument_id
               and dim.product_derivative_id = pdd.derivative_def_id
               and pdd.product_id = pdm.product_id
               and pdm.base_cur_id = pc_to_cur_id
               and pdm.quote_cur_id = pc_from_cur_id
               and cci.is_deleted = 'N'
               and cdim.is_active = 'Y'
               and dim.is_active = 'Y'
               and pdd.is_active = 'Y'
               and pdm.is_active = 'Y';
        end;
      
        if pc_from_cur_id <> pc_to_cur_id then
          begin
            select max(cfq.prompt_date)
              into vd_maturity_date
              from mv_cfq_cci_cur_forward_quotes cfq,
                   div_der_instrument_valuation  div
             where cfq.corporate_id = pc_corporate_id
               and cfq.instrument_id = vc_insturment_id
               and cfq.trade_date = nvl(vd_valid_quote_date, pd_trade_date)
               and cfq.prompt_date = pd_maturity_date
               and cfq.base_cur_id = pc_from_cur_id
               and cfq.quote_cur_id = pc_to_cur_id
               and cfq.instrument_id = div.instrument_id
               and cfq.price_source_id = div.price_source_id
               and div.is_deleted = 'N';
          exception
            when no_data_found then
              vd_maturity_date := null;
          end;
          if vd_maturity_date is null then
            begin
              select max(cfq.prompt_date)
                into vd_lower_date
                from mv_cfq_cci_cur_forward_quotes cfq,
                     div_der_instrument_valuation  div
               where cfq.corporate_id = pc_corporate_id
                 and cfq.instrument_id = vc_insturment_id
                 and cfq.trade_date =
                     nvl(vd_valid_quote_date, pd_trade_date)
                 and cfq.prompt_date <= pd_maturity_date
                 and abs(pd_maturity_date - cfq.prompt_date) <=
                     pc_max_deviation --lalit
                 and cfq.base_cur_id = pc_from_cur_id
                 and cfq.quote_cur_id = pc_to_cur_id
                 and cfq.instrument_id = div.instrument_id
                 and cfq.price_source_id = div.price_source_id
                 and div.is_deleted = 'N';
            exception
              when no_data_found then
                vd_lower_date := null;
            end;
            begin
              select min(cfq.prompt_date)
                into vd_upper_date
                from mv_cfq_cci_cur_forward_quotes cfq,
                     div_der_instrument_valuation  div
               where cfq.corporate_id = pc_corporate_id
                 and cfq.instrument_id = vc_insturment_id
                 and cfq.trade_date =
                     nvl(vd_valid_quote_date, pd_trade_date)
                 and cfq.prompt_date >= pd_maturity_date
                 and abs(pd_maturity_date - cfq.prompt_date) <=
                     pc_max_deviation --Lalit
                 and cfq.base_cur_id = pc_from_cur_id
                 and cfq.quote_cur_id = pc_to_cur_id
                 and cfq.instrument_id = div.instrument_id
                 and cfq.price_source_id = div.price_source_id
                 and div.is_deleted = 'N';
            exception
              when no_data_found then
                vd_upper_date := null;
            end;
            vn_lower_date_diff := nvl(abs(pd_maturity_date - vd_lower_date),
                                      999);
            vn_upper_date_diff := nvl(abs(pd_maturity_date - vd_upper_date),
                                      999);
            if vd_lower_date is null and vd_upper_date is null then
              vd_maturity_date    := null;
              pc_settlement_price := 0;
            else
              if vn_lower_date_diff <= vn_upper_date_diff then
                vd_maturity_date := vd_lower_date;
              else
                vd_maturity_date := vd_upper_date;
              end if;
            end if;
          end if;
          --If the maturity date is configured for the currency pair get the exchange rate
          if vd_maturity_date is not null then
            begin
              select t.settlement_price,
                     t.sum_forward_point
                into pc_settlement_price,
                     pc_sum_of_forward_point
                from (select cfq.rate settlement_price,
                             nvl(cfq.forward_point, 0) sum_forward_point
                        from mv_cfq_cci_cur_forward_quotes cfq,
                             div_der_instrument_valuation  div
                       where cfq.corporate_id = pc_corporate_id
                         and cfq.instrument_id = vc_insturment_id
                         and cfq.trade_date =
                             nvl(vd_valid_quote_date, pd_trade_date)
                         and cfq.prompt_date = vd_maturity_date
                         and cfq.base_cur_id = pc_from_cur_id
                         and cfq.quote_cur_id = pc_to_cur_id
                         and cfq.instrument_id = div.instrument_id
                         and cfq.price_source_id = div.price_source_id
                         and div.is_deleted = 'N') t;
            exception
              when no_data_found then
                pc_settlement_price     := 0;
                pc_sum_of_forward_point := 0;
            end;
          else
            pc_settlement_price     := 0;
            pc_sum_of_forward_point := 0;
          end if;
          if pc_settlement_price = 0 then
            -- its likely that the pair is not configured.
            --try reverse pair 
            begin
              select max(cfq.prompt_date)
                into vd_maturity_date
                from mv_cfq_currency_forward_quotes cfq,
                     div_der_instrument_valuation   div
               where cfq.corporate_id = pc_corporate_id
                 and cfq.instrument_id = vc_insturment_id
                 and cfq.trade_date =
                     nvl(vd_valid_quote_date, pd_trade_date)
                 and cfq.prompt_date = pd_maturity_date
                 and cfq.base_cur_id = pc_to_cur_id
                 and cfq.quote_cur_id = pc_from_cur_id
                 and cfq.instrument_id = div.instrument_id
                 and cfq.price_source_id = div.price_source_id
                 and div.is_deleted = 'N';
            exception
              when no_data_found then
                vd_maturity_date := null;
            end;
          
            if vd_maturity_date is null then
              begin
                select max(cfq.prompt_date)
                  into vd_lower_date
                  from mv_cfq_cci_cur_forward_quotes cfq,
                       div_der_instrument_valuation  div
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.instrument_id = vc_insturment_id
                   and cfq.trade_date =
                       nvl(vd_valid_quote_date, pd_trade_date)
                   and cfq.prompt_date <= pd_maturity_date
                   and abs(pd_maturity_date - cfq.prompt_date) <=
                       pc_max_deviation --lalit
                   and cfq.base_cur_id = pc_to_cur_id
                   and cfq.quote_cur_id = pc_from_cur_id
                   and cfq.instrument_id = div.instrument_id
                   and cfq.price_source_id = div.price_source_id
                   and div.is_deleted = 'N';
              exception
                when no_data_found then
                  vd_lower_date := null;
              end;
              begin
                select min(cfq.prompt_date)
                  into vd_upper_date
                  from mv_cfq_cci_cur_forward_quotes cfq,
                       div_der_instrument_valuation  div
                 where cfq.corporate_id = pc_corporate_id
                   and cfq.instrument_id = vc_insturment_id
                   and cfq.trade_date =
                       nvl(vd_valid_quote_date, pd_trade_date)
                   and cfq.prompt_date >= pd_maturity_date
                   and abs(pd_maturity_date - cfq.prompt_date) <=
                       pc_max_deviation --Lalit
                   and cfq.base_cur_id = pc_to_cur_id
                   and cfq.quote_cur_id = pc_from_cur_id
                   and cfq.instrument_id = div.instrument_id
                   and cfq.price_source_id = div.price_source_id
                   and div.is_deleted = 'N';
              exception
                when no_data_found then
                  vd_upper_date := null;
              end;
              vn_lower_date_diff := nvl(abs(pd_maturity_date -
                                            vd_lower_date),
                                        999);
              vn_upper_date_diff := nvl(abs(pd_maturity_date -
                                            vd_upper_date),
                                        999);
              if vd_lower_date is null and vd_upper_date is null then
                vd_maturity_date    := null;
                pc_settlement_price := 0;
              else
                if vn_lower_date_diff <= vn_upper_date_diff then
                  vd_maturity_date := vd_lower_date;
                else
                  vd_maturity_date := vd_upper_date;
                end if;
              end if;
            end if;
          
            if vd_maturity_date is not null then
              begin
                select 1 / t.settlement_price,
                       t.sum_forward_point
                  into pc_settlement_price,
                       pc_sum_of_forward_point
                  from (select cfq.rate settlement_price,
                               nvl(cfq.forward_point, 0) sum_forward_point
                          from mv_cfq_cci_cur_forward_quotes cfq,
                               div_der_instrument_valuation  div
                         where cfq.corporate_id = pc_corporate_id
                           and cfq.instrument_id = vc_insturment_id
                           and cfq.trade_date =
                               nvl(vd_valid_quote_date, pd_trade_date)
                           and cfq.prompt_date = vd_maturity_date
                           and cfq.base_cur_id = pc_to_cur_id
                           and cfq.quote_cur_id = pc_from_cur_id
                           and cfq.instrument_id = div.instrument_id
                           and cfq.price_source_id = div.price_source_id
                           and div.is_deleted = 'N') t;
              exception
                when no_data_found then
                  pc_settlement_price     := 0;
                  pc_sum_of_forward_point := 0;
              end;
            else
              pc_settlement_price     := 0;
              pc_sum_of_forward_point := 0;
            end if;
          end if;
        else
          pc_settlement_price     := 1;
          pc_sum_of_forward_point := 0;
        end if;
      exception
        when others then
          pc_settlement_price     := 0;
          pc_sum_of_forward_point := 0;
      end;
    end if;
    pc_settlement_price := round(nvl(pc_settlement_price, 0), 10);
  
    if pc_settlement_price = 0 or pc_settlement_price is null then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           pc_from_where,
                                                           'PHY-005',
                                                           vc_from_cur_code ||
                                                           ' to ' ||
                                                           vc_to_cur_code || ' (' ||
                                                           to_char(pd_maturity_date,
                                                                   'dd-Mon-yyyy') || ') ' ||
                                                           'Trade date:' || ' ' ||
                                                           to_char(vd_valid_quote_date,
                                                                   'dd-Mon-yyyy'),
                                                           '', -- trade_ref_no
                                                           pc_process,
                                                           null, -- pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
    end if;
  end;

  function fn_get_next_month_prompt_date(pc_promp_del_cal_id varchar2,
                                         pd_trade_date       date)
    return date is
    cursor cr_monthly_prompt_rule is
      select mpc.*
        from mpc_monthly_prompt_calendar mpc
       where mpc.prompt_delivery_calendar_id = pc_promp_del_cal_id;
  
    cursor cr_applicable_months is
      select mpcm.*
        from mpcm_monthly_prompt_cal_month mpcm,
             mnm_month_name_master         mnm
       where mpcm.prompt_delivery_calendar_id = pc_promp_del_cal_id
         and mpcm.applicable_month = mnm.month_name_id
       order by mnm.display_order;
  
    pc_pdc_period_type_id      varchar2(15);
    pc_month_prompt_start_date date;
    pc_equ_period_type         number;
    cr_monthly_prompt_rule_rec cr_monthly_prompt_rule%rowtype;
    pc_period_to               number;
    pc_start_date              date;
    pc_end_date                date;
    pc_month                   varchar2(15);
    pc_year                    number;
    pn_month_count             number(5);
    vc_prompt_date             date;
  begin
    pc_month_prompt_start_date := pd_trade_date;
    pn_month_count             := 0;
    begin
      select pm.period_type_id
        into pc_pdc_period_type_id
        from pm_period_master pm
       where pm.period_type_name = 'Month';
    end;
  
    open cr_monthly_prompt_rule;
  
    fetch cr_monthly_prompt_rule
      into cr_monthly_prompt_rule_rec;
  
    pc_period_to := cr_monthly_prompt_rule_rec.period_for; --no of forward months required
  
    begin
      select pm.equivalent_days
        into pc_equ_period_type
        from pm_period_master pm
       where pm.period_type_id = cr_monthly_prompt_rule_rec.period_type_id;
    end;
    pc_start_date := pc_month_prompt_start_date;
    pc_end_date   := pc_month_prompt_start_date +
                     (pc_period_to * pc_equ_period_type);
    for cr_applicable_months_rec in cr_applicable_months
    loop
      pc_month_prompt_start_date := to_date(('01-' ||
                                            cr_applicable_months_rec.applicable_month || '-' ||
                                            to_char(pc_start_date, 'YYYY')),
                                            'dd/mm/yyyy');
      --------------------
      dbms_output.put_line('pc_month_prompt_start_date ' ||
                           pc_month_prompt_start_date);
      if (pc_month_prompt_start_date >=
         to_date(('01-' || to_char(pc_start_date, 'Mon-YYYY')),
                  'dd/mm/yyyy') and
         pc_month_prompt_start_date <= pc_end_date) then
        pn_month_count := pn_month_count + 1;
        if pn_month_count = 1 then
          pc_month := to_char(pc_month_prompt_start_date, 'Mon');
          pc_year  := to_char(pc_month_prompt_start_date, 'YYYY');
        end if;
      end if;
      exit when pn_month_count > 1;
      dbms_output.put_line('pc_month pc_year ' || pc_month || '-' ||
                           pc_year);
      ---------------
    end loop;
    close cr_monthly_prompt_rule;
    if pc_month is not null and pc_year is not null then
      vc_prompt_date := to_date('01-' || pc_month || '-' || pc_year,
                                'dd-Mon-yyyy');
    end if;
    return vc_prompt_date;
  end;

end; 
/
create or replace package "PKG_GEN_PROCESS" is

  -- Author  : Siva
  -- Created : 09-Jan-2009
  -- Purpose : All the Physicals Day end procedures are calculated here
  -- Public type declarations
  -- pvc_process VARCHAR2(5) := 'EOD';
  --pvc_process VARCHAR2(5);
  gvc_dbd_id varchar2(15);

  gvc_process varchar2(15);

  procedure sp_gen_populate_table_data(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_dbd_id       varchar2,
                                       pc_process      varchar2);

  procedure sp_gen_transfer_data(pc_corporate_id       in varchar2,
                                 pt_previous_pull_date timestamp,
                                 pt_current_pull_date  timestamp,
                                 pd_trade_date         date,
                                 pc_user_id            varchar2,
                                 pc_process            varchar2,
                                 pc_dbd_id             varchar2);

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date,
                               pc_process      varchar2,
                               pc_dbd_id       varchar2);

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2);

  procedure sp_gen_refresh_app_data(pc_corporate_id varchar2,
                                    pd_trade_date   date,
                                    pc_user_id      varchar2,
                                    pc_process      varchar2);

  procedure sp_gen_delete_general_data(pc_corporate_id varchar2,
                                       pd_trade_date   date,
                                       pc_user_id      varchar2,
                                       pc_process      varchar2);

  procedure sp_gen_insert_general_data(pc_corporate_id       in varchar2,
                                       pt_previous_pull_date timestamp,
                                       pt_current_pull_date  timestamp,
                                       pc_dbd_id             varchar2,
                                       pc_user_id            varchar2,
                                       pc_process            varchar2,
                                       pd_trade_date         date);

  procedure sp_gen_gather_stats;

end;
/
create or replace package body "PKG_GEN_PROCESS" is

  procedure sp_gen_populate_table_data
  /******************************************************************************************************************************************
    procedure name                           : sp_cdc_populate_table_data
    author                                   : Ashok
    created date                             : 5 th jan 2011
    purpose                                  : populate transfer transaction data
    parameters
    
    pc_corporate_id                          : corporate id
    pt_previous_pull_date                    : last dump date
    pt_current_pull_date                     : current sys time(when called)
    pd_trade_date                            : eod data
    pc_user_id                               : user id
    pc_process                               : process = 'eod'
    
    modified date                            :
    modify description                       :
    ******************************************************************************************************************************************/
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_dbd_id       varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    --vn_logno           number := 50;
    vc_local_error_msg varchar2(100);
  begin
    null;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure sp_gen_populate_table_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm || ' at ' ||
                                                           vc_local_error_msg,
                                                           '',
                                                           gvc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_gen_transfer_data(pc_corporate_id       in varchar2,
                                 pt_previous_pull_date timestamp,
                                 pt_current_pull_date  timestamp,
                                 pd_trade_date         date,
                                 pc_user_id            varchar2,
                                 pc_process            varchar2,
                                 pc_dbd_id             varchar2)
  --*****************************************************************************************************************************************
    --                    procedure name                           : sp_cdc_transfer_data
    --                    author                                   : siva
    --                    created date                             : 09th jan 2009
    --                    purpose                                  : transfer transaction data into eod database
    --                    parameters
    --
    --                    pc_corporate_id                          corporate id
    --                    pt_previous_pull_date                    last dump date
    --                    pt_current_pull_date                     current sys time(when called)
    --                    pd_trade_date                            eod data
    --                    pc_user_id                               user id
    --                    pc_process                               process = 'eod'
    --
    --                    modification history
    --                    modified by                              :
    --                    modified date                            :
    --                    modify description                       :
    --*****************************************************************************************************************************************
   is
    vc_dbd_id          varchar2(15);
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
    vn_logno           number := 25;
    vc_app_eodeom_id   varchar2(15);
    vd_date            date;
    cursor cur_dim is
      select *
        from cdim_corporate_dim cdim
       where cdim.corporate_id = pc_corporate_id;
    cursor cur_dim_holiday is
      select *
        from cdim_corporate_dim cdim
       where cdim.corporate_id = pc_corporate_id
         and cdim.is_exchange_holiday = 'Y';
  
  begin
    begin
      if pc_process = 'EOD' then
        select eod.eod_id
          into vc_app_eodeom_id
          from eod_end_of_day_details@eka_appdb eod
         where eod.corporate_id = pc_corporate_id
           and eod.as_of_date = pd_trade_date;
      else
        select eom.eom_id
          into vc_app_eodeom_id
          from eom_end_of_month_details@eka_appdb eom
         where eom.corporate_id = pc_corporate_id
           and eom.as_of_date = pd_trade_date;
      end if;
    exception
      when no_data_found then
        vc_app_eodeom_id := null;
    end;
    sp_mark_axsdata@eka_appdb(pc_corporate_id,
                              vc_app_eodeom_id,
                              pd_trade_date,
                              pc_process,
                              pt_previous_pull_date,
                              pt_current_pull_date);
    -- insert into database dump table
    vc_dbd_id := pc_dbd_id;
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_gen_refresh_app_data');
    sp_gen_refresh_app_data(pc_corporate_id,
                            pd_trade_date,
                            pc_user_id,
                            pc_process);
    --
    -- 12th Mar 2012 
    -- Added by Janna
    -- Populate CDIM and Update the columns
    -- Start
    delete from cdim_corporate_dim cdim
     where cdim.corporate_id = pc_corporate_id;
    insert into cdim_corporate_dim
      (corporate_id,
       instrument_id,
       instrument_name,
       instrument_type_id,
       product_derivative_id,
       instrument_symbol,
       holiday_calender_id,
       delivery_calender_id,
       is_auto_generate,
       is_manual_generate,
       prompt_date_defn,
       prompt_days,
       warrant_tollerence,
       instrument_sub_type_id,
       underlying_instrument_id,
       is_cash_settlement,
       is_physical_settlement,
       settlement_type,
       spot_frequency,
       m2m_instrument_id,
       display_order,
       version,
       is_active,
       is_deleted,
       is_currency_curve)
      select pc_corporate_id,
             instrument_id,
             instrument_name,
             instrument_type_id,
             product_derivative_id,
             instrument_symbol,
             holiday_calender_id,
             delivery_calender_id,
             is_auto_generate,
             is_manual_generate,
             prompt_date_defn,
             prompt_days,
             warrant_tollerence,
             instrument_sub_type_id,
             underlying_instrument_id,
             is_cash_settlement,
             is_physical_settlement,
             settlement_type,
             spot_frequency,
             m2m_instrument_id,
             display_order,
             version,
             is_active,
             is_deleted,
             is_currency_curve
        from dim_der_instrument_master;
  
    for cur_dim_rows in cur_dim
    loop
      if pkg_cdc_derivatives_process.f_is_day_holiday(cur_dim_rows.instrument_id,
                                                      pd_trade_date) then
        update cdim_corporate_dim cdim
           set cdim.is_exchange_holiday = 'Y'
         where cdim.instrument_id = cur_dim_rows.instrument_id;
      end if;
    end loop;
  
    for cur_dim_holiday_rows in cur_dim_holiday
    loop
      -- Get the previous trade date and update for instrument
      vd_date := pd_trade_date - 1;
      while true
      loop
        if pkg_cdc_derivatives_process.f_is_day_holiday(cur_dim_holiday_rows.instrument_id,
                                                        vd_date) then
          vd_date := vd_date - 1;
        else
          exit;
        end if;
      end loop;
      update cdim_corporate_dim cdim
         set cdim.valid_quote_date = vd_date
       where cdim.instrument_id = cur_dim_holiday_rows.instrument_id
         and cdim.corporate_id = pc_corporate_id;
    end loop;
    update cdim_corporate_dim cdim
       set cdim.valid_quote_date = pd_trade_date
     where cdim.corporate_id = pc_corporate_id
       and valid_quote_date is null;
    -- Populate CDIM and Update the columns
    -- End 
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_gen_delete_general_data');
    sp_gen_delete_general_data(pc_corporate_id,
                               pd_trade_date,
                               pc_user_id,
                               pc_process);
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_gen_insert_general_data');
    sp_gen_insert_general_data(pc_corporate_id,
                               pt_previous_pull_date,
                               pt_current_pull_date,
                               vc_dbd_id,
                               pc_user_id,
                               pc_process,
                               pd_trade_date);
  
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'sp_gen_gather_stats');
    sp_gen_gather_stats;
  
    vn_logno := vn_logno + 1;
    sp_precheck_process_log(pc_corporate_id,
                            pd_trade_date,
                            vc_dbd_id,
                            vn_logno,
                            'Data Transfer Completed !!!');
    if pkg_process_status.sp_get(pc_corporate_id, pc_process, pd_trade_date) =
       'Cancel' then
      goto cancel_process;
    end if;
    <<cancel_process>>
    dbms_output.put_line('EOD/EOM Process Cancelled while transafer data');
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_gen_transfer_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_mark_process_id(pc_corporate_id varchar2,
                               pc_process_id   varchar2,
                               pc_user_id      varchar2,
                               pd_trade_date   date,
                               pc_process      varchar2,
                               pc_dbd_id       varchar2
                               --------------------------------------------------------------------------------------------------------------------------
                               --        procedure name                            : sp_mark_process_id
                               --        author                                    : siva
                               --        created date                              : 20th jan 2009
                               --        purpose                                   : to mark the eod refernce numbers
                               --
                               --        parameters
                               --        pc_corporate_id                           : corporate id
                               --        pd_trade_date                             : trade date
                               --        pc_process_id                             : eod reference no
                               --
                               --        modification history
                               --        modified date                             :
                               --        modified by                               :
                               --        modify description                        :
                               --------------------------------------------------------------------------------------------------------------------------
                               ) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    --start marking
    update eodeom_derivative_quote_detail
       set process_id = pc_process_id
     where dbd_id = pc_dbd_id;
    update dq_derivative_quotes dq
       set dq.process_id = pc_process_id
     where dq.trade_date <= pd_trade_date
       and dq.process_id is null
       and dq.dbd_id = pc_dbd_id;
    update dqd_derivative_quote_detail dqd
       set dqd.process_id = pc_process_id
     where dqd.dbd_id = pc_dbd_id;
    update eodeom_currency_forward_quotes eod
       set eod.process_id = pc_process_id
     where eod.corporate_id = pc_corporate_id
       and eod.dbd_id = pc_dbd_id;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure gen sp_mark_process_id',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_process_rollback(pc_corporate_id varchar2,
                                pc_process      varchar2,
                                pd_trade_date   date,
                                pc_dbd_id       varchar2,
                                pc_process_id   varchar2)
  --------------------------------------------------------------------------------------------------------------------------
    --        procedure name                            : sp_process_rollback
    --        author                                    :
    --        created date                              : 11th Jan 2011
    --        purpose                                   : rollback eod
    --        parameters
    --        pc_corporate_id                           : corporate id
    --        modification history
    --        modified date                             :
    --        modified by                               :
    --        modify description                        :
    --------------------------------------------------------------------------------------------------------------------------
   is
    --  vc_process_id      varchar2(15);
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    delete from eodeom_derivative_quote_detail where dbd_id = pc_dbd_id;
    delete from dq_derivative_quotes where dbd_id = pc_dbd_id;
    delete from dqd_derivative_quote_detail where dbd_id = pc_dbd_id;
    delete from axs_action_summary where dbd_id = pc_dbd_id;
    delete dbd_database_dump dbd where dbd.dbd_id = pc_dbd_id;
    delete from eodeom_currency_forward_quotes eod
     where eod.corporate_id = pc_corporate_id
       and eod.dbd_id = pc_dbd_id;
    /*
    delete eod/eom costs
    */
    if pc_process = 'EOD' then
      delete from eodcd_end_of_day_cost_details@eka_appdb
       where eodc_id in (select eodc_id
                           from eodc_end_of_day_costs@eka_appdb
                          where closed_date = pd_trade_date
                            and corporate_id = pc_corporate_id);
      delete from eodc_end_of_day_costs@eka_appdb
       where closed_date = pd_trade_date
         and corporate_id = pc_corporate_id;
    else
      delete from eomcd_eom_cost_details@eka_appdb
       where eomc_id in (select eomc_id
                           from eomc_end_of_month_costs@eka_appdb  eomc,
                                eom_end_of_month_details@eka_appdb eom
                          where eom.corporate_id = pc_corporate_id
                            and eom.as_of_date = pd_trade_date
                            and eom.eom_id = eomc.eom_id);
      delete from eomc_end_of_month_costs@eka_appdb
       where eom_id in (select eom_id
                          from eom_end_of_month_details@eka_appdb eom
                         where eom.corporate_id = pc_corporate_id
                           and eom.as_of_date = pd_trade_date);
    end if;
    if pc_process_id is not null then
      delete from tpd_trade_pnl_daily where process_id = pc_process_id;
      delete tdc_trade_date_closure where process_id = pc_process_id;
      delete from upad_unreal_pnl_attr_detail where process_id = pc_process_id;
    end if;
    delete from edi_expired_dr_id t
     where t.corporate_id = pc_corporate_id
       and t.trade_date = pd_trade_date
       and t.process = pc_process;
    delete from eci_expired_ct_id t
     where t.corporate_id = pc_corporate_id
       and t.trade_date = pd_trade_date
       and t.process = pc_process;
    --delete from app db
    delete from edi_expired_dr_id@eka_appdb t
     where t.corporate_id = pc_corporate_id
       and t.trade_date = pd_trade_date
       and t.process = pc_process;
    delete from eci_expired_ct_id@eka_appdb t
     where t.corporate_id = pc_corporate_id
       and t.trade_date = pd_trade_date
       and t.process = pc_process;
    delete from tmef_temp_eod_fx_rate tmef
     where tmef.trade_date = pd_trade_date
       and tmef.corporate_id = pc_corporate_id;
    delete from eod_eom_axsdata@eka_appdb
     where corporate_id = pc_corporate_id
       and trade_date = pd_trade_date
       and process = pc_process;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'procedure gen sp_process_rollback',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           null, --pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_gen_refresh_app_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_refresh_app_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log          tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count      number := 1;
    vc_other_process_status number := 0;
  begin
    begin
      if pc_process = 'EOD' then
        select count(*)
          into vc_other_process_status
          from eod_end_of_day_details@eka_appdb eod
         where eod.corporate_id <> pc_corporate_id
           and eod.as_of_date <> pd_trade_date
           and eod.processing_status = 'Running';
      else
        select count(*)
          into vc_other_process_status
          from eom_end_of_month_details@eka_appdb eom
         where eom.corporate_id <> pc_corporate_id
           and eom.as_of_date <> pd_trade_date
           and eom.processing_status = 'Running';
      end if;
    exception
      when others then
        vc_other_process_status := 1;
    end;
    if vc_other_process_status = 0 then
      /* dbms_mview.refresh('ak_corporate_user', 'C');
      dbms_mview.refresh('apm_available_price_master', 'C');
      dbms_mview.refresh('awpep_awp_equity_premium', 'C');
      dbms_mview.refresh('awpo_awp_product_origin', 'C');
      dbms_mview.refresh('awpp_awp_product_price', 'C');
      dbms_mview.refresh('awpu_awp_product_price_units', 'C');
      dbms_mview.refresh('axm_action_master', 'C');
      dbms_mview.refresh('bca_broker_clearer_account', 'C');
      dbms_mview.refresh('bcs_broker_commission_setup', 'C');
      dbms_mview.refresh('bct_broker_commission_types', 'C');
      dbms_mview.refresh('bgm_bp_group_master', 'C');
      dbms_mview.refresh('bpc_bp_corporates', 'C');
      dbms_mview.refresh('bpr_business_partner_roles', 'C');
      dbms_mview.refresh('bpsld_bp_storage_loc_det', 'C');
      dbms_mview.refresh('ccg_corporateconfig', 'C');
      dbms_mview.refresh('ccm_corporate_carrycost_setup', 'C');
      dbms_mview.refresh('cd_currency_definition', 'C');
      dbms_mview.refresh('cem_currency_exchange_master', 'C');
      dbms_mview.refresh('cfy_corporate_financial_year', 'C');
      dbms_mview.refresh('cgd_color_grade_definition', 'C');
      dbms_mview.refresh('cim_citymaster', 'C');
      dbms_mview.refresh('cm_currency_master', 'C');
      dbms_mview.refresh('cpm_corporateproductmaster', 'C');
      dbms_mview.refresh('cp_currency_pairs', 'C');
      dbms_mview.refresh('crm_country_region_master', 'C');
      dbms_mview.refresh('cym_countrymaster', 'C');
      dbms_mview.refresh('css_corporate_strategy_setup', 'C');
      dbms_mview.refresh('cq_currency_quote', 'C');
      dbms_mview.refresh('cpc_corporate_profit_center', 'C');
      dbms_mview.refresh('cap_corporate_acct_period', 'C');
      dbms_mview.refresh('cfq_currency_forward_quotes', 'C');
      dbms_mview.refresh('cfqd_currency_fwd_quote_detail', 'C');
      dbms_mview.refresh('cgm_cost_group_master', 'C');
      dbms_mview.refresh('clm_calendar_master', 'C');
      dbms_mview.refresh('clwh_calendar_weekly_holiday', 'C');
      dbms_mview.refresh('cpog_corp_product_origin_group', 'C');
      dbms_mview.refresh('cppm_cor_product_pdd_mapping', 'C');
      dbms_mview.refresh('dim_der_instrument_master', 'C');
      dbms_mview.refresh('dqu_derived_quantity_unit', 'C');
      dbms_mview.refresh('drm_derivative_master', 'C');
      dbms_mview.refresh('dpc_daily_prompt_calendar', 'C');
      dbms_mview.refresh('dpd_delivery_period_definition', 'C');
      dbms_mview.refresh('dpu_derivative_price_unit', 'C');
      dbms_mview.refresh('dtm_deal_type_master', 'C');
      dbms_mview.refresh('du_derivative_underlying', 'C');
      dbms_mview.refresh('dip_der_instrument_pricing', 'C');
      dbms_mview.refresh('div_der_instrument_valuation', 'C');
      dbms_mview.refresh('emt_exchangemaster', 'C');
      dbms_mview.refresh('em_entity_master', 'C');
      dbms_mview.refresh('fim_formula_index_mapping', 'C');
      dbms_mview.refresh('fbi_formula_builder_instrument', 'C');
      dbms_mview.refresh('fbs_formula_builder_setup', 'C');
      dbms_mview.refresh('gab_globaladdressbook', 'C');
      dbms_mview.refresh('gcd_groupcorporatedetails', 'C');
      dbms_mview.refresh('gsm_gmr_stauts_master', 'C');
      dbms_mview.refresh('hl_holiday_list', 'C');
      dbms_mview.refresh('hm_holiday_master', 'C');
      dbms_mview.refresh('irm_instrument_type_master', 'C');
      dbms_mview.refresh('itm_incoterm_master', 'C');
      dbms_mview.refresh('ims_initial_margin_setup', 'C');
      dbms_mview.refresh('istm_instr_sub_type_master', 'C');
      dbms_mview.refresh('mpc_monthly_prompt_calendar', 'C');
      dbms_mview.refresh('mpcm_monthly_prompt_cal_month', 'C');
      dbms_mview.refresh('orm_origin_master', 'C');
      dbms_mview.refresh('pac_product_asset_class', 'C');
      dbms_mview.refresh('pad_profile_addresses', 'C');
      dbms_mview.refresh('pdc_prompt_delivery_calendar', 'C');
      dbms_mview.refresh('pdd_product_derivative_def', 'C');
      dbms_mview.refresh('pdm_productmaster', 'C');
      dbms_mview.refresh('pdtm_product_type_master', 'C');
      dbms_mview.refresh('pfg_productfeaturegroup', 'C');
      dbms_mview.refresh('pgm_product_group_master', 'C');
      dbms_mview.refresh('phd_profileheaderdetails', 'C');
      dbms_mview.refresh('pm_period_master', 'C');
      dbms_mview.refresh('pmt_portmaster', 'C');
      dbms_mview.refresh('pog_product_origin_group', 'C');
      dbms_mview.refresh('pom_product_origin_master', 'C');
      dbms_mview.refresh('pp_price_point', 'C');
      dbms_mview.refresh('pps_product_packing_size', 'C');
      dbms_mview.refresh('ppt_product_price_types', 'C');
      dbms_mview.refresh('ppu_product_price_units', 'C');
      dbms_mview.refresh('pqu_product_quantity_unit', 'C');
      dbms_mview.refresh('ps_price_source', 'C');
      dbms_mview.refresh('psam_price_source_ap_mapping', 'C');
      dbms_mview.refresh('psm_packing_size_master', 'C');
      dbms_mview.refresh('pt_price_type', 'C');
      dbms_mview.refresh('ptm_packing_type_master', 'C');
      dbms_mview.refresh('ptm_premium_type_master', 'C');
      dbms_mview.refresh('pum_price_unit_master', 'C');
      dbms_mview.refresh('pwt_product_weight_term_master', 'C');
      dbms_mview.refresh('pym_payment_terms_master', 'C');
      dbms_mview.refresh('pcif_phy_contract_item_formula', 'C');
      dbms_mview.refresh('piip_phy_item_index_pricing', 'C');
      dbms_mview.refresh('qat_quality_attributes', 'C');
      dbms_mview.refresh('qum_quantity_unit_master', 'C');
      dbms_mview.refresh('scd_sub_currency_detail', 'C');
      dbms_mview.refresh('scm_service_charge_master', 'C');
      dbms_mview.refresh('sdm_strategy_definition_master', 'C');
      dbms_mview.refresh('sm_state_master', 'C');
      dbms_mview.refresh('sld_storage_location_detail', 'C');
      dbms_mview.refresh('ucm_unit_conversion_master', 'C');
      dbms_mview.refresh('wqc_warehouse_quotation_cost', 'C');
      dbms_mview.refresh('wqh_warehouse_quotation_header', 'C');
      dbms_mview.refresh('wpc_weekly_prompt_calendar', 'C');
      dbms_mview.refresh('mv_cfq_currency_forward_quotes', 'C');
      dbms_mview.refresh('gtm_gravity_type_master', 'C');*/
      dbms_mview.refresh('ak_corporate_user', 'C');
      dbms_mview.refresh('apm_available_price_master', 'C');
      dbms_mview.refresh('axm_action_master', 'C');
      dbms_mview.refresh('bca_broker_clearer_account', 'C');
      dbms_mview.refresh('bcs_broker_commission_setup', 'C');
      dbms_mview.refresh('bct_broker_commission_types', 'C');
      dbms_mview.refresh('bpr_business_partner_roles', 'C');
      dbms_mview.refresh('cap_corporate_acct_period', 'C');
      dbms_mview.refresh('ccg_corporateconfig', 'C');
      dbms_mview.refresh('cfq_currency_forward_quotes', 'C');
      dbms_mview.refresh('cfqd_currency_fwd_quote_detail', 'C');
      dbms_mview.refresh('cfy_corporate_financial_year', 'C');
      dbms_mview.refresh('cim_citymaster', 'C');
      dbms_mview.refresh('clm_calendar_master', 'C');
      dbms_mview.refresh('clwh_calendar_weekly_holiday', 'C');
      dbms_mview.refresh('cm_currency_master', 'C');
      dbms_mview.refresh('cpc_corporate_profit_center', 'C');
      dbms_mview.refresh('cpm_corporateproductmaster', 'C');
      dbms_mview.refresh('cq_currency_quote', 'C');
      dbms_mview.refresh('css_corporate_strategy_setup', 'C');
      dbms_mview.refresh('cym_countrymaster', 'C');
      dbms_mview.refresh('dim_der_instrument_master', 'C');
      dbms_mview.refresh('dip_der_instrument_pricing', 'C');
      dbms_mview.refresh('div_der_instrument_valuation', 'C');
      dbms_mview.refresh('dpc_daily_prompt_calendar', 'C');
      dbms_mview.refresh('dpd_delivery_period_definition', 'C');
      -- dbms_mview.refresh('dpm_derivative_purpose_master','C');
      dbms_mview.refresh('dpu_derivative_price_unit', 'C');
      dbms_mview.refresh('dqu_derived_quantity_unit', 'C');
      dbms_mview.refresh('drm_derivative_master', 'C');
      dbms_mview.refresh('emt_exchangemaster', 'C');
      dbms_mview.refresh('em_entity_master', 'C');
      dbms_mview.refresh('fbi_formula_builder_instrument', 'C');
      dbms_mview.refresh('fbs_formula_builder_setup', 'C');
      dbms_mview.refresh('gab_globaladdressbook', 'C');
      dbms_mview.refresh('gcd_groupcorporatedetails', 'C');
      dbms_mview.refresh('gtm_gravity_type_master', 'C');
      dbms_mview.refresh('hl_holiday_list', 'C');
      dbms_mview.refresh('hm_holiday_master', 'C');
      dbms_mview.refresh('ims_initial_margin_setup', 'C');
      dbms_mview.refresh('irm_instrument_type_master', 'C');
      dbms_mview.refresh('istm_instr_sub_type_master', 'C');
      dbms_mview.refresh('mpc_monthly_prompt_calendar', 'C');
      dbms_mview.refresh('mpcm_monthly_prompt_cal_month', 'C');
      -- dbms_mview.refresh('otm_option_type_master','C');
      dbms_mview.refresh('pac_product_asset_class', 'C');
      dbms_mview.refresh('pad_profile_addresses', 'C');
      dbms_mview.refresh('pdc_prompt_delivery_calendar', 'C');
      dbms_mview.refresh('pdd_product_derivative_def', 'C');
      dbms_mview.refresh('pdm_productmaster', 'C');
      dbms_mview.refresh('pdtm_product_type_master', 'C');
      dbms_mview.refresh('pfg_productfeaturegroup', 'C');
      dbms_mview.refresh('pgm_product_group_master', 'C');
      dbms_mview.refresh('phd_profileheaderdetails', 'C');
      dbms_mview.refresh('pm_period_master', 'C');
      dbms_mview.refresh('pmt_portmaster', 'C');
      dbms_mview.refresh('pp_price_point', 'C');
      dbms_mview.refresh('ppt_product_price_types', 'C');
      dbms_mview.refresh('ppu_product_price_units', 'C');
      dbms_mview.refresh('pqu_product_quantity_unit', 'C');
      dbms_mview.refresh('ps_price_source', 'C');
      dbms_mview.refresh('psam_price_source_ap_mapping', 'C');
      dbms_mview.refresh('pt_price_type', 'C');
      dbms_mview.refresh('pum_price_unit_master', 'C');
      dbms_mview.refresh('pym_payment_terms_master', 'C');
      dbms_mview.refresh('qat_quality_attributes', 'C');
      dbms_mview.refresh('qum_quantity_unit_master', 'C');
      dbms_mview.refresh('scd_sub_currency_detail', 'C');
      dbms_mview.refresh('scm_service_charge_master', 'C');
      dbms_mview.refresh('sdm_strategy_definition_master', 'C');
      dbms_mview.refresh('sm_state_master', 'C');
      dbms_mview.refresh('ucm_unit_conversion_master', 'C');
      dbms_mview.refresh('wpc_weekly_prompt_calendar', 'C');
      dbms_mview.refresh('dtm_deal_type_master', 'C');
      dbms_mview.refresh('du_derivative_underlying', 'C');
      -- dbms_mview.refresh('dtpm_deal_type_purpose_mapping','C');
      --dbms_mview.refresh('OVS_OPTION_VALUATION_SETUP', 'C');      
      dbms_mview.refresh('mv_cfq_currency_forward_quotes', 'C');
      dbms_mview.refresh('cci_corp_currency_instrument', 'C');
      dbms_mview.refresh('mv_cfq_cci_cur_forward_quotes', 'C');
      --Brokerage_Margin_Utilization Changes start
      dbms_mview.refresh('BRKMM_BROKER_MARGIN_MASTER', 'C');
      dbms_mview.refresh('BRKMD_BROKER_MARGIN_DETAIL', 'C');
      --Brokerage_Margin_Utilization Changes end      
    end if;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_gen_refresh_app_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_gen_delete_general_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_delete_corporate_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id varchar2,
   pd_trade_date   date,
   pc_user_id      varchar2,
   pc_process      varchar2) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    delete from cptn_corporate_prem_type_name
     where corporate_id = pc_corporate_id;
    delete from ak_corporate where corporate_id = pc_corporate_id;
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_gen_delete_general_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_gen_insert_general_data
  --*****************************************************************************************************************************************
    --                procedure name                           : sp_insert_derivative_data
    --                author                                   : siva
    --                created date                             : 09th jan 2009
    --                purpose                                  : transfer transaction data into eod database
    --                parameters
    --
    --                pc_corporate_id                          corporate id
    --                pd_trade_date                            eod data
    --                pc_user_id                               user id
    --                pc_process                               process = 'eod'
    --
    --                modification history
    --                modified by                              :
    --                modified date                            :
    --                modify description                       :
    --*****************************************************************************************************************************************
  (pc_corporate_id       in varchar2,
   pt_previous_pull_date timestamp,
   pt_current_pull_date  timestamp,
   pc_dbd_id             varchar2,
   pc_user_id            varchar2,
   pc_process            varchar2,
   pd_trade_date         date) is
    vobj_error_log     tableofpelerrorlog := tableofpelerrorlog();
    vn_eel_error_count number := 1;
  begin
    insert into axs_action_summary
      (internal_action_ref_no,
       action_ref_no,
       prefix,
       suffix,
       middle_no,
       action_id,
       action_date,
       corporate_id,
       created_by,
       created_date,
       eff_date,
       status,
       cancelled_by,
       cancelled_date,
       updated_by,
       updated_date,
       parent_internal_action_ref_no,
       dbd_id)
      select axs.internal_action_ref_no,
             nvl(axs.action_ref_no, 'NA'),
             axs.prefix,
             axs.suffix,
             axs.middle_no,
             axs.action_id,
             axs.action_date,
             axs.corporate_id,
             axs.created_by,
             axs.created_date,
             axs.eff_date,
             axs.status,
             axs.cancelled_by,
             axs.cancelled_date,
             axs.updated_by,
             axs.updated_date,
             axs.parent_internal_action_ref_no,
             pc_dbd_id
        from axs_action_summary@eka_appdb axs
       where axs.eff_date is not null
         and created_date > pt_previous_pull_date
         and created_date <= pt_current_pull_date
         and axs.action_id <> 'LOGOUT_APP'
         and corporate_id = pc_corporate_id;
    for cur_axs_update in (select axs_tran.status,
                                  axs_tran.eff_date,
                                  axs_tran.internal_action_ref_no
                             from axs_action_summary@eka_appdb axs_tran
                            where axs_tran.eff_date is not null
                              and axs_tran.updated_date >
                                  pt_previous_pull_date
                              and axs_tran.updated_date <=
                                  pt_current_pull_date
                              and axs_tran.corporate_id = pc_corporate_id
                              and axs_tran.created_date <=
                                  pt_previous_pull_date)
    loop
      update axs_action_summary axs
         set axs.status   = cur_axs_update.status,
             axs.eff_date = cur_axs_update.eff_date
       where axs.internal_action_ref_no =
             cur_axs_update.internal_action_ref_no
         and axs.dbd_id in
             (select dbd.dbd_id
                from dbd_database_dump dbd
               where dbd.corporate_id = pc_corporate_id
                 and dbd.process = pc_process
                 and dbd.trade_date <= pd_trade_date);
    end loop;
    insert into dq_derivative_quotes
      (dq_id,
       trade_date,
       corporate_id,
       entry_type,
       instrument_id,
       price_source_id,
       created_date,
       updated_date,
       version,
       is_deleted,
       dbd_id)
      select dq_id,
             trade_date,
             corporate_id,
             entry_type,
             instrument_id,
             price_source_id,
             created_date,
             updated_date,
             version,
             is_deleted,
             pc_dbd_id
        from dq_derivative_quotes@eka_appdb dq
       where dq.corporate_id = pc_corporate_id;
    --  AND    dq.created_date > pt_previous_pull_date
    --   AND    created_date <= pt_current_pull_date;
    /* FOR cur_dq_update IN (SELECT dq_tran.is_deleted,
                                 dq_tran.dq_id
                          FROM   dq_derivative_quotes@eka_appdb dq_tran
                          WHERE  dq_tran.updated_date >
                                 pt_previous_pull_date
                          AND    dq_tran.updated_date <=
                                 pt_current_pull_date
                          AND    dq_tran.corporate_id = pc_corporate_id
                          AND    dq_tran.created_date <=
                                 pt_previous_pull_date) LOOP
        UPDATE dq_derivative_quotes dq
        SET    dq.is_deleted = cur_dq_update.is_deleted
        WHERE  dq.dq_id = cur_dq_update.dq_id
        AND    dq.dbd_id IN
               (SELECT dbd.dbd_id
                 FROM   dbd_database_dump dbd
                 WHERE  dbd.corporate_id = pc_corporate_id
                 AND    dbd.process = pc_process
                 AND    dbd.trade_date <= pd_trade_date);
    END LOOP;*/
    insert into dqd_derivative_quote_detail
      (dqd_id,
       dq_id,
       dr_id,
       available_price_id,
       price,
       price_unit_id,
       delta,
       gamma,
       theta,
       wega,
       is_deleted,
       charm,
       lambda,
       rho,
       volatility,
       riskfree_rate,
       interest_rate,
       spot_rate,
       is_manual,
       dbd_id)
      select dqd_id,
             dq_id,
             dr_id,
             available_price_id,
             price,
             price_unit_id,
             delta,
             gamma,
             theta,
             wega,
             is_deleted,
             charm,
             lambda,
             rho,
             volatility,
             riskfree_rate,
             interest_rate,
             spot_rate,
             is_manual,
             pc_dbd_id
        from dqd_derivative_quote_detail@eka_appdb dqd
       where dqd.dq_id in (select dq_id
                             from dq_derivative_quotes
                            where dbd_id = pc_dbd_id)
         and nvl(dqd.price, 0) <> 0;
    /*FOR cur_dqd_update IN (SELECT dqd_tran.dqd_id,
                                  dqd_tran.dq_id,
                                  dqd_tran.dr_id,
                                  dqd_tran.available_price_id,
                                  dqd_tran.price,
                                  dqd_tran.price_unit_id,
                                  dqd_tran.delta,
                                  dqd_tran.gamma,
                                  dqd_tran.theta,
                                  dqd_tran.wega,
                                  dqd_tran.is_deleted
                           FROM   dqd_derivative_quote_detail@eka_appdb dqd_tran,
                                  dq_derivative_quotes@eka_appdb        dq_tran
                           WHERE  dq_tran.updated_date >
                                  pt_previous_pull_date
                           AND    dq_tran.updated_date <=
                                  pt_current_pull_date
                           AND    dq_tran.corporate_id = pc_corporate_id
                           AND    dq_tran.created_date <=
                                  pt_previous_pull_date
                           AND    dqd_tran.dq_id = dq_tran.dq_id) LOOP
        UPDATE dqd_derivative_quote_detail dqd
        SET    dqd.price         = cur_dqd_update.price,
               dqd.price_unit_id = cur_dqd_update.price_unit_id,
               dqd.delta         = cur_dqd_update.delta,
               dqd.gamma         = cur_dqd_update.gamma,
               dqd.theta         = cur_dqd_update.theta,
               dqd.wega          = cur_dqd_update.wega,
               dqd.is_deleted    = cur_dqd_update.is_deleted
        WHERE  dqd.dq_id = cur_dqd_update.dq_id
        AND    dqd.dqd_id = cur_dqd_update.dqd_id
        AND    dqd.dr_id = cur_dqd_update.dr_id
        AND    dqd.dbd_id IN
               (SELECT dbd.dbd_id
                 FROM   dbd_database_dump dbd
                 WHERE  dbd.corporate_id = pc_corporate_id
                 AND    dbd.process = pc_process
                 AND    dbd.trade_date <= pd_trade_date);
    END LOOP;*/
  
    -----added on 05-Jun-2011, for the day/month/week drid's having same prompt date
    -- Example: for LME, as on 05-Jun-2011 trade date Dec-2011 will be Month DRID (with prompt date of 20-Dec-2011), when 
    -- trade date moves 05-Oct-2011, 20-Dec-2011 will be Day DRID with Prompt date as 20-Dec-2011,
    -- So as on 5th Oct, we can't enter the quotes for Month DRID created on 05-Jun-2011,this time we have to 
    -- consider the price entered for 20-Dec-2011 prompt date will be consider for month drid.
    insert into dqd_derivative_quote_detail
      (dqd_id,
       dq_id,
       dr_id,
       available_price_id,
       price,
       price_unit_id,
       delta,
       gamma,
       theta,
       wega,
       is_deleted,
       charm,
       lambda,
       rho,
       volatility,
       riskfree_rate,
       interest_rate,
       spot_rate,
       is_manual,
       dbd_id)
      select dqd.dqd_id || new_drm.dr_id dqd_id,
             dqd.dq_id,
             new_drm.dr_id dr_id,
             dqd.available_price_id,
             dqd.price,
             dqd.price_unit_id,
             dqd.delta,
             dqd.gamma,
             dqd.theta,
             dqd.wega,
             dqd.is_deleted,
             dqd.charm,
             dqd.lambda,
             dqd.rho,
             dqd.volatility,
             dqd.riskfree_rate,
             dqd.interest_rate,
             dqd.spot_rate,
             dqd.is_manual,
             pc_dbd_id
        from dq_derivative_quotes                  dq,
             drm_derivative_master                 drm,
             v_drm_multiple_prompt                 new_drm,
             dqd_derivative_quote_detail@eka_appdb dqd
       where dq.dbd_id = pc_dbd_id
         and nvl(dqd.price, 0) <> 0
         and dq.dq_id = dqd.dq_id
         and dqd.dr_id = drm.dr_id
         and drm.instrument_id = new_drm.instrument_id
         and drm.prompt_date = new_drm.prompt_date
         and drm.dr_id <> new_drm.dr_id; -- as we already transfered into dqd of same drids
    ---end here 
    insert into cptn_corporate_prem_type_name
      (cptn_id,
       ptm_id,
       corporate_id,
       premium_type_display_name,
       is_active,
       is_deleted,
       product_id)
      select cptn_id,
             ptm_id,
             corporate_id,
             premium_type_display_name,
             is_active,
             is_deleted,
             product_id
        from cptn_corporate_prem_type_name@eka_appdb
       where corporate_id = pc_corporate_id;
    insert into ak_corporate
      (corporate_id,
       corporate_name,
       corporate_abbr,
       contact_person,
       email,
       website,
       corp_type,
       estd_year,
       no_of_employees,
       phone_no,
       fax_no,
       address1,
       address2,
       status,
       country,
       lang_code,
       status_eff_from,
       last_mod_date,
       time_zone,
       last_mod_user,
       city,
       state,
       preferredweightunit,
       fda_number,
       groupid,
       ekaowner,
       base_currency_name,
       region,
       per_equity,
       stop_loss,
       gbpid,
       default_cp,
       external_reference,
       bp_short_name,
       corp_short_name,
       base_cur_id,
       logo_path,
       logo_name,
       inv_cur_id,
       inv_qty_unit_id)
      select corporate_id,
             corporate_name,
             null corporate_abbr,
             null contact_person,
             null email,
             null website,
             null corp_type,
             null estd_year,
             null no_of_employees,
             null phone_no,
             null fax_no,
             null address1,
             null address2,
             null status,
             null country,
             lang_code,
             null status_eff_from,
             null last_mod_date,
             time_zone,
             null last_mod_user,
             null city,
             null state,
             null preferredweightunit,
             null fda_number,
             groupid,
             null ekaowner,
             cm.cur_code base_currency_name,
             null region,
             null per_equity,
             null stop_loss,
             null gbpid,
             null default_cp,
             null external_reference,
             null bp_short_name,
             corp_short_name,
             base_cur_id,
             null logo_path,
             null logo_name,
             inv_cur_id,
             null inv_qty_unit_id
        from ak_corporate@eka_appdb,
             cm_currency_master cm
       where corporate_id = pc_corporate_id
         and base_cur_id = cm.cur_id;
    --- EOD process Quotes table
  
    begin
      -- store the latest quotes other than Option Instrument
      insert into eodeom_derivative_quote_detail
        (corporate_id,
         process_id,
         eodeom_trade_date,
         dq_trade_date,
         dr_id,
         instrument_id,
         price_source_id,
         entry_type,
         price_unit_id,
         available_price_id,
         price,
         publishing_frequency,
         publishing_frequency_type,
         diff_days,
         price_freq_status,
         delta,
         gamma,
         theta,
         wega,
         charm,
         lambda,
         rho,
         volatility,
         riskfree_rate,
         interest_rate,
         spot_rate,
         quote_type,
         dbd_id)
        (select pc_corporate_id,
                null pc_process_id,
                pd_trade_date,
                trade_date,
                dr_id,
                instrument_id,
                price_source_id,
                entry_type,
                price_unit_id,
                available_price_id,
                price,
                publishing_frequency,
                publishing_frequency_type,
                diff_days,
                (case
                  when publishing_frequency_type = 'Month' then
                   case
                  when publishing_frequency * 30 > diff_days then
                   'NEW'
                  else
                   'OLD'
                end when publishing_frequency_type = 'Day' then case
                   when publishing_frequency > diff_days then
                    'NEW'
                   else
                    'OLD'
                 end when publishing_frequency_type = 'Hour' then case
                   when publishing_frequency / 24 > diff_days then
                    'NEW'
                   else
                    'OLD'
                 end end) price_freq_status,
                delta,
                gamma,
                theta,
                wega,
                charm,
                lambda,
                rho,
                volatility,
                riskfree_rate,
                interest_rate,
                spot_rate,
                quote_type,
                pc_dbd_id
           from (select dq.trade_date,
                        dqd.dr_id,
                        dq.instrument_id,
                        dq.price_source_id,
                        dq.entry_type,
                        dqd.price_unit_id,
                        dqd.available_price_id,
                        dqd.price,
                        ps.publishing_frequency,
                        ps.publishing_frequency_type,
                        --to_date(pd_trade_date, 'dd-mon-yyyy') -
                        pd_trade_date-dq.trade_date diff_days,
                        dqd.delta,
                        dqd.gamma,
                        dqd.theta,
                        dqd.wega,
                        dqd.charm,
                        dqd.lambda,
                        dqd.rho,
                        dqd.volatility,
                        dqd.riskfree_rate,
                        dqd.interest_rate,
                        dqd.spot_rate,
                        decode(nvl(dqd.is_manual, 'Y'),
                               'Y',
                               'INPUT',
                               'GENERATE') quote_type,
                        row_number() over(partition by dqd.dr_id, dqd.price_unit_id, dq.instrument_id, dq.entry_type, dq.price_source_id, dqd.available_price_id order by dq.trade_date desc) seq
                   from dq_derivative_quotes        dq,
                        dqd_derivative_quote_detail dqd,
                        ps_price_source             ps,
                        drm_derivative_master       drm,
                        dim_der_instrument_master   dim,
                        irm_instrument_type_master  irm
                  where dq.dq_id = dqd.dq_id
                    and dqd.dr_id = drm.dr_id
                    and dq.instrument_id = drm.instrument_id
                    and dq.price_source_id = ps.price_source_id
                    and dq.trade_date <= pd_trade_date
                    and dq.corporate_id = pc_corporate_id
                       --     and drm.instrument_id = div.instrument_id
                    and drm.instrument_id = dim.instrument_id
                    and dim.instrument_type_id = irm.instrument_type_id
                    and irm.instrument_type not in
                        ('Option Put', 'Option Call')
                       --    and div.is_deleted = 'N'
                       --   --   and div.price_source_id = dq.price_source_id
                       --      and div.price_unit_id = dqd.price_unit_id -- added as per the setup changes for DIV on 02-May-2011 release
                    and ps.is_active = 'Y'
                    and ps.is_deleted = 'N'
                    and drm.is_deleted = 'N'
                    and dq.dbd_id = pc_dbd_id
                    and dqd.dbd_id = pc_dbd_id
                    and dq.is_deleted = 'N'
                    and dqd.is_deleted = 'N')
          where seq = 1);
      --- For Options quotes which are don;t have entry in OVS , or having entry with Options quotes as 'ManuallyEntered'
      for cc in (select dim.instrument_id,
                        nvl(ovs.option_quote_type_for_eod, 'ManuallyEntered') quote_type,
                        ovs.is_deleted
                   from dim_der_instrument_master  dim,
                        irm_instrument_type_master irm,
                        ovs_option_valuation_setup ovs
                  where dim.instrument_id = ovs.instrument_id(+)
                    and 'N' = ovs.is_deleted(+)
                    and dim.is_deleted = 'N'
                    and dim.is_active = 'Y'
                    and dim.instrument_type_id = irm.instrument_type_id
                    and irm.instrument_type in ('Option Put', 'Option Call'))
      loop
        if cc.quote_type = 'ManuallyEntered' then
          --note : DQD.Is_manual = 'Y'  order by seq as per the trade date
          insert into eodeom_derivative_quote_detail
            (corporate_id,
             process_id,
             eodeom_trade_date,
             dq_trade_date,
             dr_id,
             instrument_id,
             price_source_id,
             entry_type,
             price_unit_id,
             available_price_id,
             price,
             publishing_frequency,
             publishing_frequency_type,
             diff_days,
             price_freq_status,
             delta,
             gamma,
             theta,
             wega,
             charm,
             lambda,
             rho,
             volatility,
             riskfree_rate,
             interest_rate,
             spot_rate,
             quote_type,
             dbd_id)
            (select pc_corporate_id,
                    null pc_process_id,
                    pd_trade_date,
                    trade_date,
                    dr_id,
                    instrument_id,
                    price_source_id,
                    entry_type,
                    price_unit_id,
                    available_price_id,
                    price,
                    publishing_frequency,
                    publishing_frequency_type,
                    diff_days,
                    (case
                      when publishing_frequency_type = 'Month' then
                       case
                      when publishing_frequency * 30 > diff_days then
                       'NEW'
                      else
                       'OLD'
                    end when publishing_frequency_type = 'Day' then case
                       when publishing_frequency > diff_days then
                        'NEW'
                       else
                        'OLD'
                     end when publishing_frequency_type = 'Hour' then case
                       when publishing_frequency / 24 > diff_days then
                        'NEW'
                       else
                        'OLD'
                     end end) price_freq_status,
                    delta,
                    gamma,
                    theta,
                    wega,
                    charm,
                    lambda,
                    rho,
                    volatility,
                    riskfree_rate,
                    interest_rate,
                    spot_rate,
                    quote_type,
                    pc_dbd_id
               from (select dq.trade_date,
                            dqd.dr_id,
                            dq.instrument_id,
                            dq.price_source_id,
                            dq.entry_type,
                            dqd.price_unit_id,
                            dqd.available_price_id,
                            dqd.price,
                            ps.publishing_frequency,
                            ps.publishing_frequency_type,
                            --to_date(pd_trade_date, 'dd-mon-yyyy') -
                            pd_trade_date-dq.trade_date diff_days,
                            dqd.delta,
                            dqd.gamma,
                            dqd.theta,
                            dqd.wega,
                            dqd.charm,
                            dqd.lambda,
                            dqd.rho,
                            dqd.volatility,
                            dqd.riskfree_rate,
                            dqd.interest_rate,
                            dqd.spot_rate,
                            decode(nvl(dqd.is_manual, 'Y'),
                                   'Y',
                                   'INPUT',
                                   'GENERATE') quote_type,
                            row_number() over(partition by dqd.dr_id, dqd.price_unit_id, dq.instrument_id, dq.entry_type, dq.price_source_id, dqd.available_price_id order by dq.trade_date desc) seq
                       from dq_derivative_quotes         dq,
                            dqd_derivative_quote_detail  dqd,
                            ps_price_source              ps,
                            drm_derivative_master        drm,
                            div_der_instrument_valuation div
                      where dq.dq_id = dqd.dq_id
                        and dqd.dr_id = drm.dr_id
                        and dq.instrument_id = drm.instrument_id
                        and dq.price_source_id = ps.price_source_id
                        and dq.trade_date <= pd_trade_date
                        and dq.corporate_id = pc_corporate_id
                        and drm.instrument_id = div.instrument_id
                        and drm.instrument_id = cc.instrument_id --cursor instument
                        and dqd.is_manual = 'Y'
                        and div.is_deleted = 'N'
                        and div.price_source_id = dq.price_source_id
                        and div.price_unit_id = dqd.price_unit_id -- added as per the setup changes for DIV on 02-May-2011 release
                        and ps.is_active = 'Y'
                        and ps.is_deleted = 'N'
                        and drm.is_deleted = 'N'
                        and dq.dbd_id = pc_dbd_id
                        and dqd.dbd_id = pc_dbd_id
                        and dq.is_deleted = 'N'
                        and dqd.is_deleted = 'N')
              where seq = 1);
        end if;
        if cc.quote_type = 'OptionValuation' then
          --note : DQD.Is_manual to be removed, and order by seq will change,
          -- order of quotes entered by 'GENERATE','INPUT', and trade_date
          insert into eodeom_derivative_quote_detail
            (corporate_id,
             process_id,
             eodeom_trade_date,
             dq_trade_date,
             dr_id,
             instrument_id,
             price_source_id,
             entry_type,
             price_unit_id,
             available_price_id,
             price,
             publishing_frequency,
             publishing_frequency_type,
             diff_days,
             price_freq_status,
             delta,
             gamma,
             theta,
             wega,
             charm,
             lambda,
             rho,
             volatility,
             riskfree_rate,
             interest_rate,
             spot_rate,
             quote_type,
             dbd_id)
            (select pc_corporate_id,
                    null pc_process_id,
                    pd_trade_date,
                    trade_date,
                    dr_id,
                    instrument_id,
                    price_source_id,
                    entry_type,
                    price_unit_id,
                    available_price_id,
                    price,
                    publishing_frequency,
                    publishing_frequency_type,
                    diff_days,
                    (case
                      when publishing_frequency_type = 'Month' then
                       case
                      when publishing_frequency * 30 > diff_days then
                       'NEW'
                      else
                       'OLD'
                    end when publishing_frequency_type = 'Day' then case
                       when publishing_frequency > diff_days then
                        'NEW'
                       else
                        'OLD'
                     end when publishing_frequency_type = 'Hour' then case
                       when publishing_frequency / 24 > diff_days then
                        'NEW'
                       else
                        'OLD'
                     end end) price_freq_status,
                    delta,
                    gamma,
                    theta,
                    wega,
                    charm,
                    lambda,
                    rho,
                    volatility,
                    riskfree_rate,
                    interest_rate,
                    spot_rate,
                    quote_type,
                    pc_dbd_id
               from (select dq.trade_date,
                            dqd.dr_id,
                            dq.instrument_id,
                            dq.price_source_id,
                            dq.entry_type,
                            dqd.price_unit_id,
                            dqd.available_price_id,
                            dqd.price,
                            ps.publishing_frequency,
                            ps.publishing_frequency_type,
                            --to_date(pd_trade_date, 'dd-mon-yyyy') -
                            pd_trade_date-dq.trade_date diff_days,
                            dqd.delta,
                            dqd.gamma,
                            dqd.theta,
                            dqd.wega,
                            dqd.charm,
                            dqd.lambda,
                            dqd.rho,
                            dqd.volatility,
                            dqd.riskfree_rate,
                            dqd.interest_rate,
                            dqd.spot_rate,
                            decode(nvl(dqd.is_manual, 'Y'),
                                   'Y',
                                   'INPUT',
                                   'GENERATE') quote_type,
                            row_number() over(partition by dqd.dr_id, dqd.price_unit_id, dq.instrument_id, dq.entry_type, dq.price_source_id, dqd.available_price_id order by decode(nvl(dqd.is_manual, 'Y'), 'N', 1, 2), dq.trade_date desc) seq
                       from dq_derivative_quotes         dq,
                            dqd_derivative_quote_detail  dqd,
                            ps_price_source              ps,
                            drm_derivative_master        drm,
                            div_der_instrument_valuation div
                      where dq.dq_id = dqd.dq_id
                        and dqd.dr_id = drm.dr_id
                        and dq.instrument_id = drm.instrument_id
                        and dq.price_source_id = ps.price_source_id
                        and dq.trade_date <= pd_trade_date
                        and dq.corporate_id = pc_corporate_id
                        and drm.instrument_id = div.instrument_id
                        and drm.instrument_id = cc.instrument_id --cursor instument
                        and div.is_deleted = 'N'
                        and div.price_source_id = dq.price_source_id
                        and div.price_unit_id = dqd.price_unit_id -- added as per the setup changes for DIV on 02-May-2011 release
                        and ps.is_active = 'Y'
                        and ps.is_deleted = 'N'
                        and drm.is_deleted = 'N'
                        and dq.dbd_id = pc_dbd_id
                        and dqd.dbd_id = pc_dbd_id
                        and dq.is_deleted = 'N'
                        and dqd.is_deleted = 'N')
              where seq = 1);
        end if;
      
      end loop;
    end;
    --record daily currency quotes at EODEOM_CURRENCY_FORWARD_QUOTES
    insert into eodeom_currency_forward_quotes
      (corporate_id,
       dbd_id,
       process_id,
       process,
       process_date,
       dr_id,
       prompt_date,
       trade_date,
       instrument_id,
       price_source_id,
       product_id,
       base_cur_id,
       quote_cur_id,
       rate,
       forward_point,
       is_spot)
      select t.corporate_id,
             pc_dbd_id dbd_id,
             null process_id,
             pc_process process,
             pd_trade_date process_date,
             t.dr_id,
             t.prompt_date,
             t.trade_date,
             t.instrument_id,
             t.price_source_id,
             t.product_id,
             t.base_cur_id,
             t.quote_cur_id,
             t.rate,
             t.forward_point,
             t.is_spot
        from (select mv_cfq.corporate_id,
                     mv_cfq.prompt_date,
                     mv_cfq.trade_date,
                     mv_cfq.dr_id_name,
                     mv_cfq.dr_id,
                     mv_cfq.instrument_id,
                     mv_cfq.instrument_name,
                     mv_cfq.price_source_id,
                     mv_cfq.product_id,
                     mv_cfq.currency_pair,
                     mv_cfq.base_cur_id,
                     mv_cfq.quote_cur_id,
                     mv_cfq.rate,
                     mv_cfq.forward_point,
                     mv_cfq.is_spot,
                     row_number() over(partition by mv_cfq.dr_id, mv_cfq.price_source_id order by mv_cfq.prompt_date, mv_cfq.trade_date desc) seq
                from mv_cfq_currency_forward_quotes mv_cfq,
                     ps_price_source                ps
               where mv_cfq.rate <> 0
                 and mv_cfq.corporate_id = pc_corporate_id
                 and mv_cfq.price_source_id = ps.price_source_id
                 and ps.is_active = 'Y'
                 and ps.is_deleted = 'N'
                 and 'TRUE' =
                     (case when mv_cfq.prompt_date = mv_cfq.trade_date and
                      mv_cfq.is_spot = 'N' then 'FALSE' else 'TRUE' end)
                 and mv_cfq.trade_date <= pd_trade_date) t
       where t.seq = 1;
       --HDL_FX_settlement start
       insert into fxs_fx_settlement
       (internal_fx_settlement_ref_no,
        main_trade_int_fx_ref_no,
        matched_trade_int_fx_ref_no,
        amount,
        matched_trade_drid,
        settlement_type,
        corporate_id,
        created_by,
        modified_by,
        created_date,
        modified_date,
        trade_type,
        cur_id,
        leg_no,
        --process_id, 
        is_deleted,       
        dbd_id)
      select  fxs.internal_fx_settlement_ref_no,
              fxs.main_trade_int_fx_ref_no,
              fxs.matched_trade_int_fx_ref_no,
              fxs.amount,
              fxs.matched_trade_drid,
              fxs.settlement_type,
              fxs.corporate_id,
              fxs.created_by,
              fxs.modified_by,
              fxs.created_date,
              fxs.modified_date,
              fxs.trade_type,
              fxs.cur_id,
              fxs.leg_no,
              --process_id  
              'N',                          
              pc_dbd_id
        from fxs_fx_settlement@eka_appdb fxs
       where fxs.created_date > pt_previous_pull_date
         and fxs.created_date <= pt_current_pull_date
         and fxs.corporate_id = pc_corporate_id;
         
       update  fxs_fx_settlement fxs_eod
       set  is_deleted='Y'
       WHERE not exists (select 1 from  fxs_fx_settlement@eka_appdb fxs_app  
                       where fxs_app.internal_fx_settlement_ref_no
                                =fxs_eod.internal_fx_settlement_ref_no);                                                    
       --HDL_FX_settlement end
  exception
    when others then
      vobj_error_log.extend;
      vobj_error_log(vn_eel_error_count) := pelerrorlogobj(pc_corporate_id,
                                                           'Procedure sp_gen_insert_general_data',
                                                           'M2M-013',
                                                           'Code:' ||
                                                           sqlcode ||
                                                           'Message:' ||
                                                           sqlerrm,
                                                           '',
                                                           pc_process,
                                                           pc_user_id,
                                                           sysdate,
                                                           pd_trade_date);
      sp_insert_error_log(vobj_error_log);
  end;

  procedure sp_gen_gather_stats is
  begin
    sp_gather_stats('axs_action_summary');
    sp_gather_stats('dq_derivative_quotes');
    sp_gather_stats('dqd_derivative_quote_detail');
    sp_gather_stats('eodeom_derivative_quote_detail');
    sp_gather_stats('eodeom_currency_forward_quotes');
    sp_gather_stats('ak_corporate');
    sp_gather_stats('cptn_corporate_prem_type_name');
  end;

end;
/
